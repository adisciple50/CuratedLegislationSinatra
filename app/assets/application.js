(function(global_object) {
  "use strict";

  // @note
  //   A few conventions for the documentation of this file:
  //   1. Always use "//" (in contrast with "/**/")
  //   2. The syntax used is Yardoc (yardoc.org), which is intended for Ruby (se below)
  //   3. `@param` and `@return` types should be preceded by `JS.` when referring to
  //      JavaScript constructors (e.g. `JS.Function`) otherwise Ruby is assumed.
  //   4. `nil` and `null` being unambiguous refer to the respective
  //      objects/values in Ruby and JavaScript
  //   5. This is still WIP :) so please give feedback and suggestions on how
  //      to improve or for alternative solutions
  //
  //   The way the code is digested before going through Yardoc is a secret kept
  //   in the docs repo (https://github.com/opal/docs/tree/master).

  var console;

  // Detect the global object
  if (typeof(globalThis) !== 'undefined') { global_object = globalThis; }
  else if (typeof(global) !== 'undefined') { global_object = global; }
  else if (typeof(window) !== 'undefined') { global_object = window; }

  // Setup a dummy console object if missing
  if (global_object.console == null) {
    global_object.console = {};
  }

  if (typeof(global_object.console) === 'object') {
    console = global_object.console;
  } else {
    console = {};
  }

  if (!('log' in console)) { console.log = function () {}; }
  if (!('warn' in console)) { console.warn = console.log; }

  if (typeof(global_object.Opal) !== 'undefined') {
    console.warn('Opal already loaded. Loading twice can cause troubles, please fix your setup.');
    return global_object.Opal;
  }

  var nil;

  // The actual class for BasicObject
  var BasicObject;

  // The actual Object class.
  // The leading underscore is to avoid confusion with window.Object()
  var _Object;

  // The actual Module class
  var Module;

  // The actual Class class
  var Class;

  // The Opal.Opal class (helpers etc.)
  var _Opal;

  // The Kernel module
  var Kernel;

  // The Opal object that is exposed globally
  var Opal = global_object.Opal = {};

  // This is a useful reference to global object inside ruby files
  Opal.global = global_object;

  // Configure runtime behavior with regards to require and unsupported features
  Opal.config = {
    missing_require_severity: 'error',        // error, warning, ignore
    unsupported_features_severity: 'warning', // error, warning, ignore
    experimental_features_severity: 'warning',// warning, ignore
    enable_stack_trace: true                  // true, false
  };

  // Minify common function calls
  var $has_own   = Object.hasOwnProperty;
  var $bind      = Function.prototype.bind;
  var $set_proto = Object.setPrototypeOf;
  var $slice     = Array.prototype.slice;
  var $splice    = Array.prototype.splice;

  // Nil object id is always 4
  var nil_id = 4;

  // Generates even sequential numbers greater than 4
  // (nil_id) to serve as unique ids for ruby objects
  var unique_id = nil_id;

  // Return next unique id
  function $uid() {
    unique_id += 2;
    return unique_id;
  };
  Opal.uid = $uid;

  // Retrieve or assign the id of an object
  Opal.id = function(obj) {
    if (obj.$$is_number) return (obj * 2)+1;
    if (obj.$$id == null) {
      $prop(obj, '$$id', $uid());
    }
    return obj.$$id;
  };

  // Globals table
  var $gvars = Opal.gvars = {};

  // Exit function, this should be replaced by platform specific implementation
  // (See nodejs and chrome for examples)
  Opal.exit = function(status) { if ($gvars.DEBUG) console.log('Exited with status '+status); };

  // keeps track of exceptions for $!
  Opal.exceptions = [];

  // @private
  // Pops an exception from the stack and updates `$!`.
  Opal.pop_exception = function() {
    var exception = Opal.exceptions.pop();
    if (exception) {
      $gvars["!"] = exception;
      $gvars["@"] = exception.$backtrace();
    }
    else {
      $gvars["!"] = $gvars["@"] = nil;
    }
  };

  function $prop(object, name, initialValue) {
    if (typeof(object) === "string") {
      // Special case for:
      //   s = "string"
      //   def s.m; end
      // String class is the only class that:
      // + compiles to JS primitive
      // + allows method definition directly on instances
      // numbers, true, false and null do not support it.
      object[name] = initialValue;
    } else {
      Object.defineProperty(object, name, {
        value: initialValue,
        enumerable: false,
        configurable: true,
        writable: true
      });
    }
  }

  Opal.prop = $prop;

  // @deprecated
  Opal.defineProperty = Opal.prop;

  Opal.slice = $slice;


  // Helpers
  // -----

  var $truthy = Opal.truthy = function(val) {
    return false !== val && nil !== val && undefined !== val && null !== val && (!(val instanceof Boolean) || true === val.valueOf());
  };

  Opal.falsy = function(val) {
    return !$truthy(val);
  };

  Opal.type_error = function(object, type, method, coerced) {
    object = object.$$class;

    if (coerced && method) {
      coerced = coerced.$$class;
      return Opal.TypeError.$new(
        "can't convert " + object + " into " + type +
        " (" + object + "#" + method + " gives " + coerced + ")"
      )
    } else {
      return Opal.TypeError.$new(
        "no implicit conversion of " + object + " into " + type
      )
    }
  };

  Opal.coerce_to = function(object, type, method, args) {
    var body;

    if (method === 'to_int' && type === Opal.Integer && object.$$is_number)
      return object < 0 ? Math.ceil(object) : Math.floor(object);

    if (method === 'to_str' && type === Opal.String && object.$$is_string)
      return object;

    if (Opal.is_a(object, type)) return object;

    // Fast path for the most common situation
    if (object['$respond_to?'].$$pristine && object.$method_missing.$$pristine) {
      body = object['$' + method];
      if (body == null || body.$$stub) throw Opal.type_error(object, type);
      return body.apply(object, args);
    }

    if (!object['$respond_to?'](method)) {
      throw Opal.type_error(object, type);
    }

    if (args == null) args = [];
    return Opal.send(object, method, args);
  }

  Opal.respond_to = function(obj, jsid, include_all) {
    if (obj == null || !obj.$$class) return false;
    include_all = !!include_all;
    var body = obj[jsid];

    if (obj['$respond_to?'].$$pristine) {
      if (typeof(body) === "function" && !body.$$stub) {
        return true;
      }
      if (!obj['$respond_to_missing?'].$$pristine) {
        return Opal.send(obj, obj['$respond_to_missing?'], [jsid.substr(1), include_all]);
      }
    } else {
      return Opal.send(obj, obj['$respond_to?'], [jsid.substr(1), include_all]);
    }
  }

  // TracePoint support
  // ------------------
  //
  // Support for `TracePoint.trace(:class) do ... end`
  Opal.trace_class = false;
  Opal.tracers_for_class = [];

  function invoke_tracers_for_class(klass_or_module) {
    var i, ii, tracer;

    for(i = 0, ii = Opal.tracers_for_class.length; i < ii; i++) {
      tracer = Opal.tracers_for_class[i];
      tracer.trace_object = klass_or_module;
      tracer.block.$call(tracer);
    }
  }

  function handle_autoload(cref, name) {
    if (!cref.$$autoload[name].loaded) {
      cref.$$autoload[name].loaded = true;
      try {
        Opal.Kernel.$require(cref.$$autoload[name].path);
      } catch (e) {
        cref.$$autoload[name].exception = e;
        throw e;
      }
      cref.$$autoload[name].required = true;
      if (cref.$$const[name] != null) {
        cref.$$autoload[name].success = true;
        return cref.$$const[name];
      }
    } else if (cref.$$autoload[name].loaded && !cref.$$autoload[name].required) {
      if (cref.$$autoload[name].exception) { throw cref.$$autoload[name].exception; }
    }
  }

  // Constants
  // ---------
  //
  // For future reference:
  // - The Rails autoloading guide (http://guides.rubyonrails.org/v5.0/autoloading_and_reloading_constants.html)
  // - @ConradIrwin's 2012 post on “Everything you ever wanted to know about constant lookup in Ruby” (http://cirw.in/blog/constant-lookup.html)
  //
  // Legend of MRI concepts/names:
  // - constant reference (cref): the module/class that acts as a namespace
  // - nesting: the namespaces wrapping the current scope, e.g. nesting inside
  //            `module A; module B::C; end; end` is `[B::C, A]`

  // Get the constant in the scope of the current cref
  function const_get_name(cref, name) {
    if (cref) {
      if (cref.$$const[name] != null) { return cref.$$const[name]; }
      if (cref.$$autoload && cref.$$autoload[name]) {
        return handle_autoload(cref, name);
      }
    }
  }

  // Walk up the nesting array looking for the constant
  function const_lookup_nesting(nesting, name) {
    var i, ii, constant;

    if (nesting.length === 0) return;

    // If the nesting is not empty the constant is looked up in its elements
    // and in order. The ancestors of those elements are ignored.
    for (i = 0, ii = nesting.length; i < ii; i++) {
      constant = nesting[i].$$const[name];
      if (constant != null) {
        return constant;
      } else if (nesting[i].$$autoload && nesting[i].$$autoload[name]) {
        return handle_autoload(nesting[i], name);
      }
    }
  }

  // Walk up the ancestors chain looking for the constant
  function const_lookup_ancestors(cref, name) {
    var i, ii, ancestors;

    if (cref == null) return;

    ancestors = $ancestors(cref);

    for (i = 0, ii = ancestors.length; i < ii; i++) {
      if (ancestors[i].$$const && $has_own.call(ancestors[i].$$const, name)) {
        return ancestors[i].$$const[name];
      } else if (ancestors[i].$$autoload && ancestors[i].$$autoload[name]) {
        return handle_autoload(ancestors[i], name);
      }
    }
  }

  // Walk up Object's ancestors chain looking for the constant,
  // but only if cref is missing or a module.
  function const_lookup_Object(cref, name) {
    if (cref == null || cref.$$is_module) {
      return const_lookup_ancestors(_Object, name);
    }
  }

  // Call const_missing if nothing else worked
  function const_missing(cref, name) {
    return (cref || _Object).$const_missing(name);
  }

  // Look for the constant just in the current cref or call `#const_missing`
  Opal.const_get_local = function(cref, name, skip_missing) {
    var result;

    if (cref == null) return;

    if (cref === '::') cref = _Object;

    if (!cref.$$is_module && !cref.$$is_class) {
      throw new Opal.TypeError(cref.toString() + " is not a class/module");
    }

    result = const_get_name(cref, name);
    return result != null || skip_missing ? result : const_missing(cref, name);
  };

  // Look for the constant relative to a cref or call `#const_missing` (when the
  // constant is prefixed by `::`).
  Opal.const_get_qualified = function(cref, name, skip_missing) {
    var result, cache, cached, current_version = Opal.const_cache_version;

    if (name == null) {
      // A shortpath for calls like ::String => $$$("String")
      result = const_get_name(_Object, cref);

      if (result != null) return result;
      return Opal.const_get_qualified(_Object, cref, skip_missing);
    }

    if (cref == null) return;

    if (cref === '::') cref = _Object;

    if (!cref.$$is_module && !cref.$$is_class) {
      throw new Opal.TypeError(cref.toString() + " is not a class/module");
    }

    if ((cache = cref.$$const_cache) == null) {
      $prop(cref, '$$const_cache', Object.create(null));
      cache = cref.$$const_cache;
    }
    cached = cache[name];

    if (cached == null || cached[0] !== current_version) {
      ((result = const_get_name(cref, name))              != null) ||
      ((result = const_lookup_ancestors(cref, name))      != null);
      cache[name] = [current_version, result];
    } else {
      result = cached[1];
    }

    return result != null || skip_missing ? result : const_missing(cref, name);
  };

  // Initialize the top level constant cache generation counter
  Opal.const_cache_version = 1;

  // Look for the constant in the open using the current nesting and the nearest
  // cref ancestors or call `#const_missing` (when the constant has no :: prefix).
  Opal.const_get_relative = function(nesting, name, skip_missing) {
    var cref = nesting[0], result, current_version = Opal.const_cache_version, cache, cached;

    if ((cache = nesting.$$const_cache) == null) {
      $prop(nesting, '$$const_cache', Object.create(null));
      cache = nesting.$$const_cache;
    }
    cached = cache[name];

    if (cached == null || cached[0] !== current_version) {
      ((result = const_get_name(cref, name))              != null) ||
      ((result = const_lookup_nesting(nesting, name))     != null) ||
      ((result = const_lookup_ancestors(cref, name))      != null) ||
      ((result = const_lookup_Object(cref, name))         != null);

      cache[name] = [current_version, result];
    } else {
      result = cached[1];
    }

    return result != null || skip_missing ? result : const_missing(cref, name);
  };

  // Register the constant on a cref and opportunistically set the name of
  // unnamed classes/modules.
  function $const_set(cref, name, value) {
    if (cref == null || cref === '::') cref = _Object;

    if (value.$$is_a_module) {
      if (value.$$name == null || value.$$name === nil) value.$$name = name;
      if (value.$$base_module == null) value.$$base_module = cref;
    }

    cref.$$const = (cref.$$const || Object.create(null));
    cref.$$const[name] = value;

    // Add a short helper to navigate constants manually.
    // @example
    //   Opal.$$.Regexp.$$.IGNORECASE
    cref.$$ = cref.$$const;

    Opal.const_cache_version++;

    // Expose top level constants onto the Opal object
    if (cref === _Object) Opal[name] = value;

    // Name new class directly onto current scope (Opal.Foo.Baz = klass)
    $prop(cref, name, value);

    return value;
  };

  Opal.const_set = $const_set;

  // Get all the constants reachable from a given cref, by default will include
  // inherited constants.
  Opal.constants = function(cref, inherit) {
    if (inherit == null) inherit = true;

    var module, modules = [cref], i, ii, constants = {}, constant;

    if (inherit) modules = modules.concat($ancestors(cref));
    if (inherit && cref.$$is_module) modules = modules.concat([Opal.Object]).concat($ancestors(Opal.Object));

    for (i = 0, ii = modules.length; i < ii; i++) {
      module = modules[i];

      // Do not show Objects constants unless we're querying Object itself
      if (cref !== _Object && module == _Object) break;

      for (constant in module.$$const) {
        constants[constant] = true;
      }
      if (module.$$autoload) {
        for (constant in module.$$autoload) {
          constants[constant] = true;
        }
      }
    }

    return Object.keys(constants);
  };

  // Remove a constant from a cref.
  Opal.const_remove = function(cref, name) {
    Opal.const_cache_version++;

    if (cref.$$const[name] != null) {
      var old = cref.$$const[name];
      delete cref.$$const[name];
      return old;
    }

    if (cref.$$autoload && cref.$$autoload[name]) {
      delete cref.$$autoload[name];
      return nil;
    }

    throw Opal.NameError.$new("constant "+cref+"::"+cref.$name()+" not defined");
  };

  // Generates a function that is a curried const_get_relative.
  Opal.const_get_relative_factory = function(nesting) {
    return function(name, skip_missing) {
      return Opal.$$(nesting, name, skip_missing);
    }
  }

  // Setup some shortcuts to reduce compiled size
  Opal.$$ = Opal.const_get_relative;
  Opal.$$$ = Opal.const_get_qualified;
  Opal.$r = Opal.const_get_relative_factory;

  // Modules & Classes
  // -----------------

  // A `class Foo; end` expression in ruby is compiled to call this runtime
  // method which either returns an existing class of the given name, or creates
  // a new class in the given `base` scope.
  //
  // If a constant with the given name exists, then we check to make sure that
  // it is a class and also that the superclasses match. If either of these
  // fail, then we raise a `TypeError`. Note, `superclass` may be null if one
  // was not specified in the ruby code.
  //
  // We pass a constructor to this method of the form `function ClassName() {}`
  // simply so that classes show up with nicely formatted names inside debuggers
  // in the web browser (or node/sprockets).
  //
  // The `scope` is the current `self` value where the class is being created
  // from. We use this to get the scope for where the class should be created.
  // If `scope` is an object (not a class/module), we simple get its class and
  // use that as the scope instead.
  //
  // @param scope        [Object] where the class is being created
  // @param superclass   [Class,null] superclass of the new class (may be null)
  // @param singleton    [Boolean,null] a true value denotes we want to allocate
  //                                    a singleton
  //
  // @return new [Class]  or existing ruby class
  //
  function $allocate_class(name, superclass, singleton) {
    var klass;

    if (superclass != null && superclass.$$bridge) {
      // Inheritance from bridged classes requires
      // calling original JS constructors
      klass = function() {
        var args = $slice.call(arguments),
            self = new ($bind.apply(superclass.$$constructor, [null].concat(args)))();

        // and replacing a __proto__ manually
        $set_proto(self, klass.$$prototype);
        return self;
      }
    } else {
      klass = function(){};
    }

    if (name && name !== nil) {
      $prop(klass, 'displayName', '::'+name);
    }

    $prop(klass, '$$name', name);
    $prop(klass, '$$constructor', klass);
    $prop(klass, '$$prototype', klass.prototype);
    $prop(klass, '$$const', {});
    $prop(klass, '$$is_class', true);
    $prop(klass, '$$is_a_module', true);
    $prop(klass, '$$super', superclass);
    $prop(klass, '$$cvars', {});
    $prop(klass, '$$own_included_modules', []);
    $prop(klass, '$$own_prepended_modules', []);
    $prop(klass, '$$ancestors', []);
    $prop(klass, '$$ancestors_cache_version', null);
    $prop(klass, '$$subclasses', []);

    $prop(klass.$$prototype, '$$class', klass);

    // By default if there are no singleton class methods
    // __proto__ is Class.prototype
    // Later singleton methods generate a singleton_class
    // and inject it into ancestors chain
    if (Opal.Class) {
      $set_proto(klass, Opal.Class.prototype);
    }

    if (superclass != null) {
      $set_proto(klass.$$prototype, superclass.$$prototype);

      if (singleton !== true) {
        // Let's not forbid GC from cleaning up our
        // subclasses.
        if (typeof WeakRef !== 'undefined') {
          // First, let's clean up our array from empty objects.
          var i, subclass, rebuilt_subclasses = [];
          for (i = 0; i < superclass.$$subclasses.length; i++) {
            subclass = superclass.$$subclasses[i];
            if (subclass.deref() !== undefined) {
              rebuilt_subclasses.push(subclass);
            }
          }
          // Now, let's add our class.
          rebuilt_subclasses.push(new WeakRef(klass));
          superclass.$$subclasses = rebuilt_subclasses;
        }
        else {
          superclass.$$subclasses.push(klass);
        }
      }

      if (superclass.$$meta) {
        // If superclass has metaclass then we have explicitely inherit it.
        Opal.build_class_singleton_class(klass);
      }
    }

    return klass;
  };
  Opal.allocate_class = $allocate_class;


  function find_existing_class(scope, name) {
    // Try to find the class in the current scope
    var klass = const_get_name(scope, name);

    // If the class exists in the scope, then we must use that
    if (klass) {
      // Make sure the existing constant is a class, or raise error
      if (!klass.$$is_class) {
        throw Opal.TypeError.$new(name + " is not a class");
      }

      return klass;
    }
  }

  function ensureSuperclassMatch(klass, superclass) {
    if (klass.$$super !== superclass) {
      throw Opal.TypeError.$new("superclass mismatch for class " + klass.$$name);
    }
  }

  Opal.klass = function(scope, superclass, name) {
    var bridged;

    if (scope == null || scope == '::') {
      // Global scope
      scope = _Object;
    } else if (!scope.$$is_class && !scope.$$is_module) {
      // Scope is an object, use its class
      scope = scope.$$class;
    }

    // If the superclass is not an Opal-generated class then we're bridging a native JS class
    if (
      superclass != null && (!superclass.hasOwnProperty || (
        superclass.hasOwnProperty && !superclass.hasOwnProperty('$$is_class')
      ))
    ) {
      if (superclass.constructor && superclass.constructor.name == "Function") {
        bridged = superclass;
        superclass = _Object;
      } else {
        throw Opal.TypeError.$new("superclass must be a Class (" + (
          (superclass.constructor && (superclass.constructor.name || superclass.constructor.$$name)) ||
          typeof(superclass)
        ) + " given)");
      }
    }

    var klass = find_existing_class(scope, name);

    if (klass != null) {
      if (superclass) {
        // Make sure existing class has same superclass
        ensureSuperclassMatch(klass, superclass);
      }
    }
    else {
      // Class doesn't exist, create a new one with given superclass...

      // Not specifying a superclass means we can assume it to be Object
      if (superclass == null) {
        superclass = _Object;
      }

      // Create the class object (instance of Class)
      klass = $allocate_class(name, superclass);
      $const_set(scope, name, klass);

      // Call .inherited() hook with new class on the superclass
      if (superclass.$inherited) {
        superclass.$inherited(klass);
      }

      if (bridged) {
        Opal.bridge(bridged, klass);
      }
    }

    if (Opal.trace_class) { invoke_tracers_for_class(klass); }

    return klass;
  };

  // Define new module (or return existing module). The given `scope` is basically
  // the current `self` value the `module` statement was defined in. If this is
  // a ruby module or class, then it is used, otherwise if the scope is a ruby
  // object then that objects real ruby class is used (e.g. if the scope is the
  // main object, then the top level `Object` class is used as the scope).
  //
  // If a module of the given name is already defined in the scope, then that
  // instance is just returned.
  //
  // If there is a class of the given name in the scope, then an error is
  // generated instead (cannot have a class and module of same name in same scope).
  //
  // Otherwise, a new module is created in the scope with the given name, and that
  // new instance is returned back (to be referenced at runtime).
  //
  // @param  scope [Module, Class] class or module this definition is inside
  // @param  id   [String] the name of the new (or existing) module
  //
  // @return [Module]
  function $allocate_module(name) {
    var constructor = function(){};
    var module = constructor;

    if (name)
      $prop(constructor, 'displayName', name+'.constructor');

    $prop(module, '$$name', name);
    $prop(module, '$$prototype', constructor.prototype);
    $prop(module, '$$const', {});
    $prop(module, '$$is_module', true);
    $prop(module, '$$is_a_module', true);
    $prop(module, '$$cvars', {});
    $prop(module, '$$iclasses', []);
    $prop(module, '$$own_included_modules', []);
    $prop(module, '$$own_prepended_modules', []);
    $prop(module, '$$ancestors', [module]);
    $prop(module, '$$ancestors_cache_version', null);

    $set_proto(module, Opal.Module.prototype);

    return module;
  };
  Opal.allocate_module = $allocate_module;

  function find_existing_module(scope, name) {
    var module = const_get_name(scope, name);
    if (module == null && scope === _Object) module = const_lookup_ancestors(_Object, name);

    if (module) {
      if (!module.$$is_module && module !== _Object) {
        throw Opal.TypeError.$new(name + " is not a module");
      }
    }

    return module;
  }

  Opal.module = function(scope, name) {
    var module;

    if (scope == null || scope == '::') {
      // Global scope
      scope = _Object;
    } else if (!scope.$$is_class && !scope.$$is_module) {
      // Scope is an object, use its class
      scope = scope.$$class;
    }

    module = find_existing_module(scope, name);

    if (module == null) {
      // Module doesnt exist, create a new one...
      module = $allocate_module(name);
      $const_set(scope, name, module);
    }

    if (Opal.trace_class) { invoke_tracers_for_class(module); }

    return module;
  };

  // Return the singleton class for the passed object.
  //
  // If the given object alredy has a singleton class, then it will be stored on
  // the object as the `$$meta` property. If this exists, then it is simply
  // returned back.
  //
  // Otherwise, a new singleton object for the class or object is created, set on
  // the object at `$$meta` for future use, and then returned.
  //
  // @param object [Object] the ruby object
  // @return [Class] the singleton class for object
  Opal.get_singleton_class = function(object) {
    if (object.$$meta) {
      return object.$$meta;
    }

    if (object.hasOwnProperty('$$is_class')) {
      return Opal.build_class_singleton_class(object);
    } else if (object.hasOwnProperty('$$is_module')) {
      return Opal.build_module_singleton_class(object);
    } else {
      return Opal.build_object_singleton_class(object);
    }
  };

  // helper to set $$meta on klass, module or instance
  function set_meta(obj, meta) {
    if (obj.hasOwnProperty('$$meta')) {
      obj.$$meta = meta;
    } else {
      $prop(obj, '$$meta', meta);
    }
    if (obj.$$frozen) {
      // If a object is frozen (sealed), freeze $$meta too.
      // No need to inject $$meta.$$prototype in the prototype chain,
      // as $$meta cannot be modified anyway.
      obj.$$meta.$freeze();
    } else {
      $set_proto(obj, meta.$$prototype);
    }
  };

  // Build the singleton class for an existing class. Class object are built
  // with their singleton class already in the prototype chain and inheriting
  // from their superclass object (up to `Class` itself).
  //
  // NOTE: Actually in MRI a class' singleton class inherits from its
  // superclass' singleton class which in turn inherits from Class.
  //
  // @param klass [Class]
  // @return [Class]
  Opal.build_class_singleton_class = function(klass) {
    if (klass.$$meta) {
      return klass.$$meta;
    }

    // The singleton_class superclass is the singleton_class of its superclass;
    // but BasicObject has no superclass (its `$$super` is null), thus we
    // fallback on `Class`.
    var superclass = klass === BasicObject ? Class : Opal.get_singleton_class(klass.$$super);

    var meta = $allocate_class(null, superclass, true);

    $prop(meta, '$$is_singleton', true);
    $prop(meta, '$$singleton_of', klass);
    set_meta(klass, meta);
    // Restoring ClassName.class
    $prop(klass, '$$class', Opal.Class);

    return meta;
  };

  Opal.build_module_singleton_class = function(mod) {
    if (mod.$$meta) {
      return mod.$$meta;
    }

    var meta = $allocate_class(null, Opal.Module, true);

    $prop(meta, '$$is_singleton', true);
    $prop(meta, '$$singleton_of', mod);
    set_meta(mod, meta);
    // Restoring ModuleName.class
    $prop(mod, '$$class', Opal.Module);

    return meta;
  };

  // Build the singleton class for a Ruby (non class) Object.
  //
  // @param object [Object]
  // @return [Class]
  Opal.build_object_singleton_class = function(object) {
    var superclass = object.$$class,
        klass = $allocate_class(nil, superclass, true);

    $prop(klass, '$$is_singleton', true);
    $prop(klass, '$$singleton_of', object);

    delete klass.$$prototype.$$class;

    set_meta(object, klass);

    return klass;
  };

  Opal.is_method = function(prop) {
    return (prop[0] === '$' && prop[1] !== '$');
  };

  Opal.instance_methods = function(mod) {
    var exclude = [], results = [], ancestors = $ancestors(mod);

    for (var i = 0, l = ancestors.length; i < l; i++) {
      var ancestor = ancestors[i],
          proto = ancestor.$$prototype;

      if (proto.hasOwnProperty('$$dummy')) {
        proto = proto.$$define_methods_on;
      }

      var props = Object.getOwnPropertyNames(proto);

      for (var j = 0, ll = props.length; j < ll; j++) {
        var prop = props[j];

        if (Opal.is_method(prop)) {
          var method_name = prop.slice(1),
              method = proto[prop];

          if (method.$$stub && exclude.indexOf(method_name) === -1) {
            exclude.push(method_name);
          }

          if (!method.$$stub && results.indexOf(method_name) === -1 && exclude.indexOf(method_name) === -1) {
            results.push(method_name);
          }
        }
      }
    }

    return results;
  };

  Opal.own_instance_methods = function(mod) {
    var results = [],
        proto = mod.$$prototype;

    if (proto.hasOwnProperty('$$dummy')) {
      proto = proto.$$define_methods_on;
    }

    var props = Object.getOwnPropertyNames(proto);

    for (var i = 0, length = props.length; i < length; i++) {
      var prop = props[i];

      if (Opal.is_method(prop)) {
        var method = proto[prop];

        if (!method.$$stub) {
          var method_name = prop.slice(1);
          results.push(method_name);
        }
      }
    }

    return results;
  };

  Opal.methods = function(obj) {
    return Opal.instance_methods(obj.$$meta || obj.$$class);
  };

  Opal.own_methods = function(obj) {
    return obj.$$meta ? Opal.own_instance_methods(obj.$$meta) : [];
  };

  Opal.receiver_methods = function(obj) {
    var mod = Opal.get_singleton_class(obj);
    var singleton_methods = Opal.own_instance_methods(mod);
    var instance_methods = Opal.own_instance_methods(mod.$$super);
    return singleton_methods.concat(instance_methods);
  };

  // Returns an object containing all pairs of names/values
  // for all class variables defined in provided +module+
  // and its ancestors.
  //
  // @param module [Module]
  // @return [Object]
  Opal.class_variables = function(module) {
    var ancestors = $ancestors(module),
        i, length = ancestors.length,
        result = {};

    for (i = length - 1; i >= 0; i--) {
      var ancestor = ancestors[i];

      for (var cvar in ancestor.$$cvars) {
        result[cvar] = ancestor.$$cvars[cvar];
      }
    }

    return result;
  };

  // Sets class variable with specified +name+ to +value+
  // in provided +module+
  //
  // @param module [Module]
  // @param name [String]
  // @param value [Object]
  Opal.class_variable_set = function(module, name, value) {
    var ancestors = $ancestors(module),
        i, length = ancestors.length;

    for (i = length - 2; i >= 0; i--) {
      var ancestor = ancestors[i];

      if ($has_own.call(ancestor.$$cvars, name)) {
        ancestor.$$cvars[name] = value;
        return value;
      }
    }

    module.$$cvars[name] = value;

    return value;
  };

  // Gets class variable with specified +name+ from provided +module+
  //
  // @param module [Module]
  // @param name [String]
  Opal.class_variable_get = function(module, name, tolerant) {
    if ($has_own.call(module.$$cvars, name))
      return module.$$cvars[name];

    var ancestors = $ancestors(module),
      i, length = ancestors.length;

    for (i = 0; i < length; i++) {
      var ancestor = ancestors[i];

      if ($has_own.call(ancestor.$$cvars, name)) {
        return ancestor.$$cvars[name];
      }
    }

    if (!tolerant)
      throw Opal.NameError.$new('uninitialized class variable '+name+' in '+module.$name());

    return nil;
  }

  function isRoot(proto) {
    return proto.hasOwnProperty('$$iclass') && proto.hasOwnProperty('$$root');
  }

  function own_included_modules(module) {
    var result = [], mod, proto = Object.getPrototypeOf(module.$$prototype);

    while (proto) {
      if (proto.hasOwnProperty('$$class')) {
        // superclass
        break;
      }
      mod = protoToModule(proto);
      if (mod) {
        result.push(mod);
      }
      proto = Object.getPrototypeOf(proto);
    }

    return result;
  }

  function own_prepended_modules(module) {
    var result = [], mod, proto = Object.getPrototypeOf(module.$$prototype);

    if (module.$$prototype.hasOwnProperty('$$dummy')) {
      while (proto) {
        if (proto === module.$$prototype.$$define_methods_on) {
          break;
        }

        mod = protoToModule(proto);
        if (mod) {
          result.push(mod);
        }

        proto = Object.getPrototypeOf(proto);
      }
    }

    return result;
  }


  // The actual inclusion of a module into a class.
  //
  // ## Class `$$parent` and `iclass`
  //
  // To handle `super` calls, every class has a `$$parent`. This parent is
  // used to resolve the next class for a super call. A normal class would
  // have this point to its superclass. However, if a class includes a module
  // then this would need to take into account the module. The module would
  // also have to then point its `$$parent` to the actual superclass. We
  // cannot modify modules like this, because it might be included in more
  // then one class. To fix this, we actually insert an `iclass` as the class'
  // `$$parent` which can then point to the superclass. The `iclass` acts as
  // a proxy to the actual module, so the `super` chain can then search it for
  // the required method.
  //
  // @param module [Module] the module to include
  // @param includer [Module] the target class to include module into
  // @return [null]
  Opal.append_features = function(module, includer) {
    var module_ancestors = $ancestors(module);
    var iclasses = [];

    if (module_ancestors.indexOf(includer) !== -1) {
      throw Opal.ArgumentError.$new('cyclic include detected');
    }

    for (var i = 0, length = module_ancestors.length; i < length; i++) {
      var ancestor = module_ancestors[i], iclass = create_iclass(ancestor);
      $prop(iclass, '$$included', true);
      iclasses.push(iclass);
    }
    var includer_ancestors = $ancestors(includer),
        chain = chain_iclasses(iclasses),
        start_chain_after,
        end_chain_on;

    if (includer_ancestors.indexOf(module) === -1) {
      // first time include

      // includer -> chain.first -> ...chain... -> chain.last -> includer.parent
      start_chain_after = includer.$$prototype;
      end_chain_on = Object.getPrototypeOf(includer.$$prototype);
    } else {
      // The module has been already included,
      // we don't need to put it into the ancestors chain again,
      // but this module may have new included modules.
      // If it's true we need to copy them.
      //
      // The simplest way is to replace ancestors chain from
      //          parent
      //            |
      //   `module` iclass (has a $$root flag)
      //            |
      //   ...previos chain of module.included_modules ...
      //            |
      //  "next ancestor" (has a $$root flag or is a real class)
      //
      // to
      //          parent
      //            |
      //    `module` iclass (has a $$root flag)
      //            |
      //   ...regenerated chain of module.included_modules
      //            |
      //   "next ancestor" (has a $$root flag or is a real class)
      //
      // because there are no intermediate classes between `parent` and `next ancestor`.
      // It doesn't break any prototypes of other objects as we don't change class references.

      var parent = includer.$$prototype, module_iclass = Object.getPrototypeOf(parent);

      while (module_iclass != null) {
        if (module_iclass.$$module === module && isRoot(module_iclass)) {
          break;
        }

        parent = module_iclass;
        module_iclass = Object.getPrototypeOf(module_iclass);
      }

      if (module_iclass) {
        // module has been directly included
        var next_ancestor = Object.getPrototypeOf(module_iclass);

        // skip non-root iclasses (that were recursively included)
        while (next_ancestor.hasOwnProperty('$$iclass') && !isRoot(next_ancestor)) {
          next_ancestor = Object.getPrototypeOf(next_ancestor);
        }

        start_chain_after = parent;
        end_chain_on = next_ancestor;
      } else {
        // module has not been directly included but was in ancestor chain because it was included by another module
        // include it directly
        start_chain_after = includer.$$prototype;
        end_chain_on = Object.getPrototypeOf(includer.$$prototype);
      }
    }

    $set_proto(start_chain_after, chain.first);
    $set_proto(chain.last, end_chain_on);

    // recalculate own_included_modules cache
    includer.$$own_included_modules = own_included_modules(includer);

    Opal.const_cache_version++;
  };

  Opal.prepend_features = function(module, prepender) {
    // Here we change the ancestors chain from
    //
    //   prepender
    //      |
    //    parent
    //
    // to:
    //
    // dummy(prepender)
    //      |
    //  iclass(module)
    //      |
    // iclass(prepender)
    //      |
    //    parent
    var module_ancestors = $ancestors(module);
    var iclasses = [];

    if (module_ancestors.indexOf(prepender) !== -1) {
      throw Opal.ArgumentError.$new('cyclic prepend detected');
    }

    for (var i = 0, length = module_ancestors.length; i < length; i++) {
      var ancestor = module_ancestors[i], iclass = create_iclass(ancestor);
      $prop(iclass, '$$prepended', true);
      iclasses.push(iclass);
    }

    var chain = chain_iclasses(iclasses),
        dummy_prepender = prepender.$$prototype,
        previous_parent = Object.getPrototypeOf(dummy_prepender),
        prepender_iclass,
        start_chain_after,
        end_chain_on;

    if (dummy_prepender.hasOwnProperty('$$dummy')) {
      // The module already has some prepended modules
      // which means that we don't need to make it "dummy"
      prepender_iclass = dummy_prepender.$$define_methods_on;
    } else {
      // Making the module "dummy"
      prepender_iclass = create_dummy_iclass(prepender);
      flush_methods_in(prepender);
      $prop(dummy_prepender, '$$dummy', true);
      $prop(dummy_prepender, '$$define_methods_on', prepender_iclass);

      // Converting
      //   dummy(prepender) -> previous_parent
      // to
      //   dummy(prepender) -> iclass(prepender) -> previous_parent
      $set_proto(dummy_prepender, prepender_iclass);
      $set_proto(prepender_iclass, previous_parent);
    }

    var prepender_ancestors = $ancestors(prepender);

    if (prepender_ancestors.indexOf(module) === -1) {
      // first time prepend

      start_chain_after = dummy_prepender;

      // next $$root or prepender_iclass or non-$$iclass
      end_chain_on = Object.getPrototypeOf(dummy_prepender);
      while (end_chain_on != null) {
        if (
          end_chain_on.hasOwnProperty('$$root') ||
          end_chain_on === prepender_iclass ||
          !end_chain_on.hasOwnProperty('$$iclass')
        ) {
          break;
        }

        end_chain_on = Object.getPrototypeOf(end_chain_on);
      }
    } else {
      throw Opal.RuntimeError.$new("Prepending a module multiple times is not supported");
    }

    $set_proto(start_chain_after, chain.first);
    $set_proto(chain.last, end_chain_on);

    // recalculate own_prepended_modules cache
    prepender.$$own_prepended_modules = own_prepended_modules(prepender);

    Opal.const_cache_version++;
  };

  function flush_methods_in(module) {
    var proto = module.$$prototype,
        props = Object.getOwnPropertyNames(proto);

    for (var i = 0; i < props.length; i++) {
      var prop = props[i];
      if (Opal.is_method(prop)) {
        delete proto[prop];
      }
    }
  }

  function create_iclass(module) {
    var iclass = create_dummy_iclass(module);

    if (module.$$is_module) {
      module.$$iclasses.push(iclass);
    }

    return iclass;
  }

  // Dummy iclass doesn't receive updates when the module gets a new method.
  function create_dummy_iclass(module) {
    var iclass = {},
        proto = module.$$prototype;

    if (proto.hasOwnProperty('$$dummy')) {
      proto = proto.$$define_methods_on;
    }

    var props = Object.getOwnPropertyNames(proto),
        length = props.length, i;

    for (i = 0; i < length; i++) {
      var prop = props[i];
      $prop(iclass, prop, proto[prop]);
    }

    $prop(iclass, '$$iclass', true);
    $prop(iclass, '$$module', module);

    return iclass;
  }

  function chain_iclasses(iclasses) {
    var length = iclasses.length, first = iclasses[0];

    $prop(first, '$$root', true);

    if (length === 1) {
      return { first: first, last: first };
    }

    var previous = first;

    for (var i = 1; i < length; i++) {
      var current = iclasses[i];
      $set_proto(previous, current);
      previous = current;
    }


    return { first: iclasses[0], last: iclasses[length - 1] };
  }

  // For performance, some core Ruby classes are toll-free bridged to their
  // native JavaScript counterparts (e.g. a Ruby Array is a JavaScript Array).
  //
  // This method is used to setup a native constructor (e.g. Array), to have
  // its prototype act like a normal Ruby class. Firstly, a new Ruby class is
  // created using the native constructor so that its prototype is set as the
  // target for the new class. Note: all bridged classes are set to inherit
  // from Object.
  //
  // Example:
  //
  //    Opal.bridge(self, Function);
  //
  // @param klass       [Class] the Ruby class to bridge
  // @param constructor [JS.Function] native JavaScript constructor to use
  // @return [Class] returns the passed Ruby class
  //
  Opal.bridge = function(native_klass, klass) {
    if (native_klass.hasOwnProperty('$$bridge')) {
      throw Opal.ArgumentError.$new("already bridged");
    }

    // constructor is a JS function with a prototype chain like:
    // - constructor
    //   - super
    //
    // What we need to do is to inject our class (with its prototype chain)
    // between constructor and super. For example, after injecting ::Object
    // into JS String we get:
    //
    // - constructor (window.String)
    //   - Opal.Object
    //     - Opal.Kernel
    //       - Opal.BasicObject
    //         - super (window.Object)
    //           - null
    //
    $prop(native_klass, '$$bridge', klass);
    $set_proto(native_klass.prototype, (klass.$$super || Opal.Object).$$prototype);
    $prop(klass, '$$prototype', native_klass.prototype);

    $prop(klass.$$prototype, '$$class', klass);
    $prop(klass, '$$constructor', native_klass);
    $prop(klass, '$$bridge', true);
  };

  function protoToModule(proto) {
    if (proto.hasOwnProperty('$$dummy')) {
      return;
    } else if (proto.hasOwnProperty('$$iclass')) {
      return proto.$$module;
    } else if (proto.hasOwnProperty('$$class')) {
      return proto.$$class;
    }
  }

  function own_ancestors(module) {
    return module.$$own_prepended_modules.concat([module]).concat(module.$$own_included_modules);
  }

  // The Array of ancestors for a given module/class
  function $ancestors(module) {
    if (!module) { return []; }

    if (module.$$ancestors_cache_version === Opal.const_cache_version) {
      return module.$$ancestors;
    }

    var result = [], i, mods, length;

    for (i = 0, mods = own_ancestors(module), length = mods.length; i < length; i++) {
      result.push(mods[i]);
    }

    if (module.$$super) {
      for (i = 0, mods = $ancestors(module.$$super), length = mods.length; i < length; i++) {
        result.push(mods[i]);
      }
    }

    module.$$ancestors_cache_version = Opal.const_cache_version;
    module.$$ancestors = result;

    return result;
  };
  Opal.ancestors = $ancestors;

  Opal.included_modules = function(module) {
    var result = [], mod = null, proto = Object.getPrototypeOf(module.$$prototype);

    for (; proto && Object.getPrototypeOf(proto); proto = Object.getPrototypeOf(proto)) {
      mod = protoToModule(proto);
      if (mod && mod.$$is_module && proto.$$iclass && proto.$$included) {
        result.push(mod);
      }
    }

    return result;
  };


  // Method Missing
  // --------------

  // Methods stubs are used to facilitate method_missing in opal. A stub is a
  // placeholder function which just calls `method_missing` on the receiver.
  // If no method with the given name is actually defined on an object, then it
  // is obvious to say that the stub will be called instead, and then in turn
  // method_missing will be called.
  //
  // When a file in ruby gets compiled to javascript, it includes a call to
  // this function which adds stubs for every method name in the compiled file.
  // It should then be safe to assume that method_missing will work for any
  // method call detected.
  //
  // Method stubs are added to the BasicObject prototype, which every other
  // ruby object inherits, so all objects should handle method missing. A stub
  // is only added if the given property name (method name) is not already
  // defined.
  //
  // Note: all ruby methods have a `$` prefix in javascript, so all stubs will
  // have this prefix as well (to make this method more performant).
  //
  //    Opal.add_stubs("foo,bar,baz=");
  //
  // All stub functions will have a private `$$stub` property set to true so
  // that other internal methods can detect if a method is just a stub or not.
  // `Kernel#respond_to?` uses this property to detect a methods presence.
  //
  // @param stubs [Array] an array of method stubs to add
  // @return [undefined]
  Opal.add_stubs = function(stubs) {
    var proto = Opal.BasicObject.$$prototype;
    var stub, existing_method;
    stubs = stubs.split(',');

    for (var i = 0, length = stubs.length; i < length; i++) {
      stub = '$'+stubs[i], existing_method = proto[stub];

      if (existing_method == null || existing_method.$$stub) {
        Opal.add_stub_for(proto, stub);
      }
    }
  };

  // Add a method_missing stub function to the given prototype for the
  // given name.
  //
  // @param prototype [Prototype] the target prototype
  // @param stub [String] stub name to add (e.g. "$foo")
  // @return [undefined]
  Opal.add_stub_for = function(prototype, stub) {
    // Opal.stub_for(stub) is the method_missing_stub
    $prop(prototype, stub, Opal.stub_for(stub));
  };

  // Generate the method_missing stub for a given method name.
  //
  // @param method_name [String] The js-name of the method to stub (e.g. "$foo")
  // @return [undefined]
  Opal.stub_for = function(method_name) {

    function method_missing_stub() {
      // Copy any given block onto the method_missing dispatcher
      this.$method_missing.$$p = method_missing_stub.$$p;

      // Set block property to null ready for the next call (stop false-positives)
      method_missing_stub.$$p = null;

      // call method missing with correct args (remove '$' prefix on method name)
      var args_ary = new Array(arguments.length);
      for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = arguments[i]; }

      return this.$method_missing.apply(this, [method_name.slice(1)].concat(args_ary));
    }

    method_missing_stub.$$stub = true;

    return method_missing_stub;
  };


  // Methods
  // -------

  // Arity count error dispatcher for methods
  //
  // @param actual [Fixnum] number of arguments given to method
  // @param expected [Fixnum] expected number of arguments
  // @param object [Object] owner of the method +meth+
  // @param meth [String] method name that got wrong number of arguments
  // @raise [ArgumentError]
  Opal.ac = function(actual, expected, object, meth) {
    var inspect = '';
    if (object.$$is_a_module) {
      inspect += object.$$name + '.';
    }
    else {
      inspect += object.$$class.$$name + '#';
    }
    inspect += meth;

    throw Opal.ArgumentError.$new('[' + inspect + '] wrong number of arguments (given ' + actual + ', expected ' + expected + ')');
  };

  // Arity count error dispatcher for blocks
  //
  // @param actual [Fixnum] number of arguments given to block
  // @param expected [Fixnum] expected number of arguments
  // @param context [Object] context of the block definition
  // @raise [ArgumentError]
  Opal.block_ac = function(actual, expected, context) {
    var inspect = "`block in " + context + "'";

    throw Opal.ArgumentError.$new(inspect + ': wrong number of arguments (given ' + actual + ', expected ' + expected + ')');
  };

  function get_ancestors(obj) {
    if (obj.hasOwnProperty('$$meta') && obj.$$meta !== null) {
      return $ancestors(obj.$$meta);
    } else {
      return $ancestors(obj.$$class);
    }
  };

  // Super dispatcher
  Opal.find_super = function(obj, mid, current_func, defcheck, allow_stubs) {
    var jsid = '$' + mid, ancestors, super_method;

    ancestors = get_ancestors(obj);

    var current_index = ancestors.indexOf(current_func.$$owner);

    for (var i = current_index + 1; i < ancestors.length; i++) {
      var ancestor = ancestors[i],
          proto = ancestor.$$prototype;

      if (proto.hasOwnProperty('$$dummy')) {
        proto = proto.$$define_methods_on;
      }

      if (proto.hasOwnProperty(jsid)) {
        super_method = proto[jsid];
        break;
      }
    }

    if (!defcheck && super_method && super_method.$$stub && obj.$method_missing.$$pristine) {
      // method_missing hasn't been explicitly defined
      throw Opal.NoMethodError.$new('super: no superclass method `'+mid+"' for "+obj, mid);
    }

    return (super_method.$$stub && !allow_stubs) ? null : super_method;
  };

  // Iter dispatcher for super in a block
  Opal.find_block_super = function(obj, jsid, current_func, defcheck, implicit) {
    var call_jsid = jsid;

    if (!current_func) {
      throw Opal.RuntimeError.$new("super called outside of method");
    }

    if (implicit && current_func.$$define_meth) {
      throw Opal.RuntimeError.$new(
        "implicit argument passing of super from method defined by define_method() is not supported. " +
        "Specify all arguments explicitly"
      );
    }

    if (current_func.$$def) {
      call_jsid = current_func.$$jsid;
    }

    return Opal.find_super(obj, call_jsid, current_func, defcheck);
  };

  // @deprecated
  Opal.find_super_dispatcher = Opal.find_super;

  // @deprecated
  Opal.find_iter_super_dispatcher = Opal.find_block_super;

  // handles yield calls for 1 yielded arg
  Opal.yield1 = function(block, arg) {
    if (typeof(block) !== "function") {
      throw Opal.LocalJumpError.$new("no block given");
    }

    var has_mlhs = block.$$has_top_level_mlhs_arg,
        has_trailing_comma = block.$$has_trailing_comma_in_args;

    if (block.length > 1 || ((has_mlhs || has_trailing_comma) && block.length === 1)) {
      arg = Opal.to_ary(arg);
    }

    if ((block.length > 1 || (has_trailing_comma && block.length === 1)) && arg.$$is_array) {
      return block.apply(null, arg);
    }
    else {
      return block(arg);
    }
  };

  // handles yield for > 1 yielded arg
  Opal.yieldX = function(block, args) {
    if (typeof(block) !== "function") {
      throw Opal.LocalJumpError.$new("no block given");
    }

    if (block.length > 1 && args.length === 1) {
      if (args[0].$$is_array) {
        return block.apply(null, args[0]);
      }
    }

    if (!args.$$is_array) {
      var args_ary = new Array(args.length);
      for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = args[i]; }

      return block.apply(null, args_ary);
    }

    return block.apply(null, args);
  };

  // Finds the corresponding exception match in candidates.  Each candidate can
  // be a value, or an array of values.  Returns null if not found.
  Opal.rescue = function(exception, candidates) {
    for (var i = 0; i < candidates.length; i++) {
      var candidate = candidates[i];

      if (candidate.$$is_array) {
        var result = Opal.rescue(exception, candidate);

        if (result) {
          return result;
        }
      }
      else if (candidate === Opal.JS.Error || candidate['$==='](exception)) {
        return candidate;
      }
    }

    return null;
  };

  Opal.is_a = function(object, klass) {
    if (klass != null && object.$$meta === klass || object.$$class === klass) {
      return true;
    }

    if (object.$$is_number && klass.$$is_number_class) {
      return (klass.$$is_integer_class) ? (object % 1) === 0 : true;
    }

    var ancestors = $ancestors(object.$$is_class ? Opal.get_singleton_class(object) : (object.$$meta || object.$$class));

    return ancestors.indexOf(klass) !== -1;
  };

  // Helpers for extracting kwsplats
  // Used for: { **h }
  Opal.to_hash = function(value) {
    if (value.$$is_hash) {
      return value;
    }
    else if (value['$respond_to?']('to_hash', true)) {
      var hash = value.$to_hash();
      if (hash.$$is_hash) {
        return hash;
      }
      else {
        throw Opal.TypeError.$new("Can't convert " + value.$$class +
          " to Hash (" + value.$$class + "#to_hash gives " + hash.$$class + ")");
      }
    }
    else {
      throw Opal.TypeError.$new("no implicit conversion of " + value.$$class + " into Hash");
    }
  };

  // Helpers for implementing multiple assignment
  // Our code for extracting the values and assigning them only works if the
  // return value is a JS array.
  // So if we get an Array subclass, extract the wrapped JS array from it

  // Used for: a, b = something (no splat)
  Opal.to_ary = function(value) {
    if (value.$$is_array) {
      return value;
    }
    else if (value['$respond_to?']('to_ary', true)) {
      var ary = value.$to_ary();
      if (ary === nil) {
        return [value];
      }
      else if (ary.$$is_array) {
        return ary;
      }
      else {
        throw Opal.TypeError.$new("Can't convert " + value.$$class +
          " to Array (" + value.$$class + "#to_ary gives " + ary.$$class + ")");
      }
    }
    else {
      return [value];
    }
  };

  // Used for: a, b = *something (with splat)
  Opal.to_a = function(value) {
    if (value.$$is_array) {
      // A splatted array must be copied
      return value.slice();
    }
    else if (value['$respond_to?']('to_a', true)) {
      var ary = value.$to_a();
      if (ary === nil) {
        return [value];
      }
      else if (ary.$$is_array) {
        return ary;
      }
      else {
        throw Opal.TypeError.$new("Can't convert " + value.$$class +
          " to Array (" + value.$$class + "#to_a gives " + ary.$$class + ")");
      }
    }
    else {
      return [value];
    }
  };

  // Used for extracting keyword arguments from arguments passed to
  // JS function. If provided +arguments+ list doesn't have a Hash
  // as a last item, returns a blank Hash.
  //
  // @param parameters [Array]
  // @return [Hash]
  //
  Opal.extract_kwargs = function(parameters) {
    var kwargs = parameters[parameters.length - 1];
    if (kwargs != null && Opal.respond_to(kwargs, '$to_hash', true)) {
      $splice.call(parameters, parameters.length - 1);
      return kwargs;
    }
  };

  // Used to get a list of rest keyword arguments. Method takes the given
  // keyword args, i.e. the hash literal passed to the method containing all
  // keyword arguemnts passed to method, as well as the used args which are
  // the names of required and optional arguments defined. This method then
  // just returns all key/value pairs which have not been used, in a new
  // hash literal.
  //
  // @param given_args [Hash] all kwargs given to method
  // @param used_args [Object<String: true>] all keys used as named kwargs
  // @return [Hash]
  //
  Opal.kwrestargs = function(given_args, used_args) {
    var keys      = [],
        map       = {},
        key           ,
        given_map = given_args.$$smap;

    for (key in given_map) {
      if (!used_args[key]) {
        keys.push(key);
        map[key] = given_map[key];
      }
    }

    return Opal.hash2(keys, map);
  };

  function apply_blockopts(block, blockopts) {
    if (typeof(blockopts) === 'number') {
      block.$$arity = blockopts;
    }
    else if (typeof(blockopts) === 'object') {
      Object.assign(block, blockopts);
    }
  }

  // Calls passed method on a ruby object with arguments and block:
  //
  // Can take a method or a method name.
  //
  // 1. When method name gets passed it invokes it by its name
  //    and calls 'method_missing' when object doesn't have this method.
  //    Used internally by Opal to invoke method that takes a block or a splat.
  // 2. When method (i.e. method body) gets passed, it doesn't trigger 'method_missing'
  //    because it doesn't know the name of the actual method.
  //    Used internally by Opal to invoke 'super'.
  //
  // @example
  //   var my_array = [1, 2, 3, 4]
  //   Opal.send(my_array, 'length')                    # => 4
  //   Opal.send(my_array, my_array.$length)            # => 4
  //
  //   Opal.send(my_array, 'reverse!')                  # => [4, 3, 2, 1]
  //   Opal.send(my_array, my_array['$reverse!']')      # => [4, 3, 2, 1]
  //
  // @param recv [Object] ruby object
  // @param method [Function, String] method body or name of the method
  // @param args [Array] arguments that will be passed to the method call
  // @param block [Function] ruby block
  // @param blockopts [Object, Number] optional properties to set on the block
  // @return [Object] returning value of the method call
  Opal.send = function(recv, method, args, block, blockopts) {
    var body;

    if (typeof(method) === 'function') {
      body = method;
      method = null;
    } else if (typeof(method) === 'string') {
      body = recv['$'+method];
    } else {
      throw Opal.NameError.$new("Passed method should be a string or a function");
    }

    return Opal.send2(recv, body, method, args, block, blockopts);
  };

  Opal.send2 = function(recv, body, method, args, block, blockopts) {
    if (body == null && method != null && recv.$method_missing) {
      body = recv.$method_missing;
      args = [method].concat(args);
    }

    apply_blockopts(block, blockopts);

    if (typeof block === 'function') body.$$p = block;
    return body.apply(recv, args);
  };

  Opal.refined_send = function(refinement_groups, recv, method, args, block, blockopts) {
    var i, j, k, ancestors, ancestor, refinements, refinement, refine_modules, refine_module, body;

    ancestors = get_ancestors(recv);

    // For all ancestors that there are, starting from the closest to the furthest...
    for (i = 0; i < ancestors.length; i++) {
      ancestor = Opal.id(ancestors[i]);

      // For all refinement groups there are, starting from the closest scope to the furthest...
      for (j = 0; j < refinement_groups.length; j++) {
        refinements = refinement_groups[j];

        // For all refinements there are, starting from the last `using` call to the furthest...
        for (k = refinements.length - 1; k >= 0; k--) {
          refinement = refinements[k];
          if (typeof refinement.$$refine_modules === 'undefined') continue;

          // A single module being given as an argument of the `using` call contains multiple
          // refinement modules
          refine_modules = refinement.$$refine_modules;

          // Does this module refine a given call for a given ancestor module?
          if (typeof refine_modules[ancestor] === 'undefined') continue;
          refine_module = refine_modules[ancestor];

          // Does this module define a method we want to call?
          if (typeof refine_module.$$prototype['$'+method] !== 'undefined') {
            body = refine_module.$$prototype['$'+method];
            return Opal.send2(recv, body, method, args, block, blockopts);
          }
        }
      }
    }

    return Opal.send(recv, method, args, block, blockopts);
  };

  Opal.lambda = function(block, blockopts) {
    block.$$is_lambda = true;

    apply_blockopts(block, blockopts);

    return block;
  };

  // Used to define methods on an object. This is a helper method, used by the
  // compiled source to define methods on special case objects when the compiler
  // can not determine the destination object, or the object is a Module
  // instance. This can get called by `Module#define_method` as well.
  //
  // ## Modules
  //
  // Any method defined on a module will come through this runtime helper.
  // The method is added to the module body, and the owner of the method is
  // set to be the module itself. This is used later when choosing which
  // method should show on a class if more than 1 included modules define
  // the same method. Finally, if the module is in `module_function` mode,
  // then the method is also defined onto the module itself.
  //
  // ## Classes
  //
  // This helper will only be called for classes when a method is being
  // defined indirectly; either through `Module#define_method`, or by a
  // literal `def` method inside an `instance_eval` or `class_eval` body. In
  // either case, the method is simply added to the class' prototype. A special
  // exception exists for `BasicObject` and `Object`. These two classes are
  // special because they are used in toll-free bridged classes. In each of
  // these two cases, extra work is required to define the methods on toll-free
  // bridged class' prototypes as well.
  //
  // ## Objects
  //
  // If a simple ruby object is the object, then the method is simply just
  // defined on the object as a singleton method. This would be the case when
  // a method is defined inside an `instance_eval` block.
  //
  // @param obj  [Object, Class] the actual obj to define method for
  // @param jsid [String] the JavaScript friendly method name (e.g. '$foo')
  // @param body [JS.Function] the literal JavaScript function used as method
  // @param blockopts [Object, Number] optional properties to set on the body
  // @return [null]
  //
  Opal.def = function(obj, jsid, body, blockopts) {
    apply_blockopts(body, blockopts);

    // Special case for a method definition in the
    // top-level namespace
    if (obj === Opal.top) {
      return Opal.defn(Opal.Object, jsid, body);
    }
    // if instance_eval is invoked on a module/class, it sets inst_eval_mod
    else if (!obj.$$eval && obj.$$is_a_module) {
      return Opal.defn(obj, jsid, body);
    }
    else {
      return Opal.defs(obj, jsid, body);
    }
  };

  // Define method on a module or class (see Opal.def).
  Opal.defn = function(module, jsid, body) {
    $deny_frozen_access(module);

    body.displayName = jsid;
    body.$$owner = module;

    var name = jsid.substr(1);

    var proto = module.$$prototype;
    if (proto.hasOwnProperty('$$dummy')) {
      proto = proto.$$define_methods_on;
    }
    $prop(proto, jsid, body);

    if (module.$$is_module) {
      if (module.$$module_function) {
        Opal.defs(module, jsid, body)
      }

      for (var i = 0, iclasses = module.$$iclasses, length = iclasses.length; i < length; i++) {
        var iclass = iclasses[i];
        $prop(iclass, jsid, body);
      }
    }

    var singleton_of = module.$$singleton_of;
    if (module.$method_added && !module.$method_added.$$stub && !singleton_of) {
      module.$method_added(name);
    }
    else if (singleton_of && singleton_of.$singleton_method_added && !singleton_of.$singleton_method_added.$$stub) {
      singleton_of.$singleton_method_added(name);
    }

    return name;
  };

  // Define a singleton method on the given object (see Opal.def).
  Opal.defs = function(obj, jsid, body, blockopts) {
    apply_blockopts(body, blockopts);

    if (obj.$$is_string || obj.$$is_number) {
      throw Opal.TypeError.$new("can't define singleton");
    }
    return Opal.defn(Opal.get_singleton_class(obj), jsid, body);
  };

  // Called from #remove_method.
  Opal.rdef = function(obj, jsid) {
    if (!$has_own.call(obj.$$prototype, jsid)) {
      throw Opal.NameError.$new("method '" + jsid.substr(1) + "' not defined in " + obj.$name());
    }

    delete obj.$$prototype[jsid];

    if (obj.$$is_singleton) {
      if (obj.$$prototype.$singleton_method_removed && !obj.$$prototype.$singleton_method_removed.$$stub) {
        obj.$$prototype.$singleton_method_removed(jsid.substr(1));
      }
    }
    else {
      if (obj.$method_removed && !obj.$method_removed.$$stub) {
        obj.$method_removed(jsid.substr(1));
      }
    }
  };

  // Called from #undef_method.
  Opal.udef = function(obj, jsid) {
    if (!obj.$$prototype[jsid] || obj.$$prototype[jsid].$$stub) {
      throw Opal.NameError.$new("method '" + jsid.substr(1) + "' not defined in " + obj.$name());
    }

    Opal.add_stub_for(obj.$$prototype, jsid);

    if (obj.$$is_singleton) {
      if (obj.$$prototype.$singleton_method_undefined && !obj.$$prototype.$singleton_method_undefined.$$stub) {
        obj.$$prototype.$singleton_method_undefined(jsid.substr(1));
      }
    }
    else {
      if (obj.$method_undefined && !obj.$method_undefined.$$stub) {
        obj.$method_undefined(jsid.substr(1));
      }
    }
  };

  function is_method_body(body) {
    return (typeof(body) === "function" && !body.$$stub);
  }

  Opal.alias = function(obj, name, old) {
    var id     = '$' + name,
        old_id = '$' + old,
        body,
        alias;

    // Aliasing on main means aliasing on Object...
    if (typeof obj.$$prototype === 'undefined') {
      obj = Opal.Object;
    }

    body = obj.$$prototype['$' + old];

    // When running inside #instance_eval the alias refers to class methods.
    if (obj.$$eval) {
      return Opal.alias(Opal.get_singleton_class(obj), name, old);
    }

    if (!is_method_body(body)) {
      var ancestor = obj.$$super;

      while (typeof(body) !== "function" && ancestor) {
        body     = ancestor[old_id];
        ancestor = ancestor.$$super;
      }

      if (!is_method_body(body) && obj.$$is_module) {
        // try to look into Object
        body = Opal.Object.$$prototype[old_id]
      }

      if (!is_method_body(body)) {
        throw Opal.NameError.$new("undefined method `" + old + "' for class `" + obj.$name() + "'")
      }
    }

    // If the body is itself an alias use the original body
    // to keep the max depth at 1.
    if (body.$$alias_of) body = body.$$alias_of;

    // We need a wrapper because otherwise properties
    // would be overwritten on the original body.
    alias = function() {
      var block = alias.$$p, args, i, ii;

      args = new Array(arguments.length);
      for(i = 0, ii = arguments.length; i < ii; i++) {
        args[i] = arguments[i];
      }

      alias.$$p = null;

      return Opal.send(this, body, args, block);
    };

    // Assign the 'length' value with defineProperty because
    // in strict mode the property is not writable.
    // It doesn't work in older browsers (like Chrome 38), where
    // an exception is thrown breaking Opal altogether.
    try {
      Object.defineProperty(alias, 'length', { value: body.length });
    } catch (e) {}

    // Try to make the browser pick the right name
    alias.displayName       = name;

    alias.$$arity           = body.$$arity;
    alias.$$parameters      = body.$$parameters;
    alias.$$source_location = body.$$source_location;
    alias.$$alias_of        = body;
    alias.$$alias_name      = name;

    Opal.defn(obj, id, alias);

    return obj;
  };

  Opal.alias_gvar = function(new_name, old_name) {
    Object.defineProperty($gvars, new_name, {
      configurable: true,
      enumerable: true,
      get: function() {
        return $gvars[old_name];
      },
      set: function(new_value) {
        $gvars[old_name] = new_value;
      }
    });
    return nil;
  }

  Opal.alias_native = function(obj, name, native_name) {
    var id   = '$' + name,
        body = obj.$$prototype[native_name];

    if (typeof(body) !== "function" || body.$$stub) {
      throw Opal.NameError.$new("undefined native method `" + native_name + "' for class `" + obj.$name() + "'")
    }

    Opal.defn(obj, id, body);

    return obj;
  };


  // Hashes
  // ------

  Opal.hash_init = function(hash) {
    hash.$$smap = Object.create(null);
    hash.$$map  = Object.create(null);
    hash.$$keys = [];
  };

  Opal.hash_clone = function(from_hash, to_hash) {
    to_hash.$$none = from_hash.$$none;
    to_hash.$$proc = from_hash.$$proc;

    for (var i = 0, keys = from_hash.$$keys, smap = from_hash.$$smap, len = keys.length, key, value; i < len; i++) {
      key = keys[i];

      if (key.$$is_string) {
        value = smap[key];
      } else {
        value = key.value;
        key = key.key;
      }

      Opal.hash_put(to_hash, key, value);
    }
  };

  Opal.hash_put = function(hash, key, value) {
    if (key.$$is_string) {
      if (!$has_own.call(hash.$$smap, key)) {
        hash.$$keys.push(key);
      }
      hash.$$smap[key] = value;
      return;
    }

    var key_hash, bucket, last_bucket;
    key_hash = hash.$$by_identity ? Opal.id(key) : key.$hash();

    if (!$has_own.call(hash.$$map, key_hash)) {
      bucket = {key: key, key_hash: key_hash, value: value};
      hash.$$keys.push(bucket);
      hash.$$map[key_hash] = bucket;
      return;
    }

    bucket = hash.$$map[key_hash];

    while (bucket) {
      if (key === bucket.key || key['$eql?'](bucket.key)) {
        last_bucket = undefined;
        bucket.value = value;
        break;
      }
      last_bucket = bucket;
      bucket = bucket.next;
    }

    if (last_bucket) {
      bucket = {key: key, key_hash: key_hash, value: value};
      hash.$$keys.push(bucket);
      last_bucket.next = bucket;
    }
  };

  Opal.hash_get = function(hash, key) {
    if (key.$$is_string) {
      if ($has_own.call(hash.$$smap, key)) {
        return hash.$$smap[key];
      }
      return;
    }

    var key_hash, bucket;
    key_hash = hash.$$by_identity ? Opal.id(key) : key.$hash();

    if ($has_own.call(hash.$$map, key_hash)) {
      bucket = hash.$$map[key_hash];

      while (bucket) {
        if (key === bucket.key || key['$eql?'](bucket.key)) {
          return bucket.value;
        }
        bucket = bucket.next;
      }
    }
  };

  Opal.hash_delete = function(hash, key) {
    var i, keys = hash.$$keys, length = keys.length, value, key_tmp;

    if (key.$$is_string) {
      if (typeof key !== "string") key = key.valueOf();

      if (!$has_own.call(hash.$$smap, key)) {
        return;
      }

      for (i = 0; i < length; i++) {
        key_tmp = keys[i];

        if (key_tmp.$$is_string && typeof key_tmp !== "string") {
          key_tmp = key_tmp.valueOf();
        }

        if (key_tmp === key) {
          keys.splice(i, 1);
          break;
        }
      }

      value = hash.$$smap[key];
      delete hash.$$smap[key];
      return value;
    }

    var key_hash = key.$hash();

    if (!$has_own.call(hash.$$map, key_hash)) {
      return;
    }

    var bucket = hash.$$map[key_hash], last_bucket;

    while (bucket) {
      if (key === bucket.key || key['$eql?'](bucket.key)) {
        value = bucket.value;

        for (i = 0; i < length; i++) {
          if (keys[i] === bucket) {
            keys.splice(i, 1);
            break;
          }
        }

        if (last_bucket && bucket.next) {
          last_bucket.next = bucket.next;
        }
        else if (last_bucket) {
          delete last_bucket.next;
        }
        else if (bucket.next) {
          hash.$$map[key_hash] = bucket.next;
        }
        else {
          delete hash.$$map[key_hash];
        }

        return value;
      }
      last_bucket = bucket;
      bucket = bucket.next;
    }
  };

  Opal.hash_rehash = function(hash) {
    for (var i = 0, length = hash.$$keys.length, key_hash, bucket, last_bucket; i < length; i++) {

      if (hash.$$keys[i].$$is_string) {
        continue;
      }

      key_hash = hash.$$keys[i].key.$hash();

      if (key_hash === hash.$$keys[i].key_hash) {
        continue;
      }

      bucket = hash.$$map[hash.$$keys[i].key_hash];
      last_bucket = undefined;

      while (bucket) {
        if (bucket === hash.$$keys[i]) {
          if (last_bucket && bucket.next) {
            last_bucket.next = bucket.next;
          }
          else if (last_bucket) {
            delete last_bucket.next;
          }
          else if (bucket.next) {
            hash.$$map[hash.$$keys[i].key_hash] = bucket.next;
          }
          else {
            delete hash.$$map[hash.$$keys[i].key_hash];
          }
          break;
        }
        last_bucket = bucket;
        bucket = bucket.next;
      }

      hash.$$keys[i].key_hash = key_hash;

      if (!$has_own.call(hash.$$map, key_hash)) {
        hash.$$map[key_hash] = hash.$$keys[i];
        continue;
      }

      bucket = hash.$$map[key_hash];
      last_bucket = undefined;

      while (bucket) {
        if (bucket === hash.$$keys[i]) {
          last_bucket = undefined;
          break;
        }
        last_bucket = bucket;
        bucket = bucket.next;
      }

      if (last_bucket) {
        last_bucket.next = hash.$$keys[i];
      }
    }
  };

  Opal.hash = function() {
    var arguments_length = arguments.length, args, hash, i, length, key, value;

    if (arguments_length === 1 && arguments[0].$$is_hash) {
      return arguments[0];
    }

    hash = new Opal.Hash();
    Opal.hash_init(hash);

    if (arguments_length === 1) {
      args = arguments[0];

      if (arguments[0].$$is_array) {
        length = args.length;

        for (i = 0; i < length; i++) {
          if (args[i].length !== 2) {
            throw Opal.ArgumentError.$new("value not of length 2: " + args[i].$inspect());
          }

          key = args[i][0];
          value = args[i][1];

          Opal.hash_put(hash, key, value);
        }

        return hash;
      }
      else {
        args = arguments[0];
        for (key in args) {
          if ($has_own.call(args, key)) {
            value = args[key];

            Opal.hash_put(hash, key, value);
          }
        }

        return hash;
      }
    }

    if (arguments_length % 2 !== 0) {
      throw Opal.ArgumentError.$new("odd number of arguments for Hash");
    }

    for (i = 0; i < arguments_length; i += 2) {
      key = arguments[i];
      value = arguments[i + 1];

      Opal.hash_put(hash, key, value);
    }

    return hash;
  };

  // A faster Hash creator for hashes that just use symbols and
  // strings as keys. The map and keys array can be constructed at
  // compile time, so they are just added here by the constructor
  // function.
  //
  Opal.hash2 = function(keys, smap) {
    var hash = new Opal.Hash();

    hash.$$smap = smap;
    hash.$$map  = Object.create(null);
    hash.$$keys = keys;

    return hash;
  };

  // Create a new range instance with first and last values, and whether the
  // range excludes the last value.
  //
  Opal.range = function(first, last, exc) {
    var range         = new Opal.Range();
        range.begin   = first;
        range.end     = last;
        range.excl    = exc;

    return range;
  };

  var reserved_ivar_names = [
    // properties
    "constructor", "displayName", "__count__", "__noSuchMethod__",
    "__parent__", "__proto__",
    // methods
    "hasOwnProperty", "valueOf"
  ];

  // Get the ivar name for a given name.
  // Mostly adds a trailing $ to reserved names.
  //
  Opal.ivar = function(name) {
    if (reserved_ivar_names.indexOf(name) !== -1) {
      name += "$";
    }

    return name;
  };

  // Support for #freeze
  // -------------------

  // helper that can be used from methods
  function $deny_frozen_access(obj) {
    if (obj.$$frozen) {
      throw Opal.FrozenError.$new("can't modify frozen " + (obj.$class()) + ": " + (obj), Opal.hash2(["receiver"], {"receiver": obj}));
    }
  };
  Opal.deny_frozen_access = $deny_frozen_access;

  // common #freeze runtime support
  Opal.freeze = function(obj) {
    $prop(obj, "$$frozen", true);

    // set $$id
    if (!obj.hasOwnProperty('$$id')) { $prop(obj, '$$id', $uid()); }

    if (obj.hasOwnProperty('$$meta')) {
      // freeze $$meta if it has already been set
      obj.$$meta.$freeze();
    } else {
      // ensure $$meta can be set lazily, $$meta is frozen when set in runtime.js
      $prop(obj, '$$meta', null);
    }

    // $$comparable is used internally and set multiple times
    // defining it before sealing ensures it can be modified later on
    if (!obj.hasOwnProperty('$$comparable')) { $prop(obj, '$$comparable', null); }

    // seal the Object
    Object.seal(obj);

    return obj;
  };

  // freze props, make setters of instance variables throw FrozenError
  Opal.freeze_props = function(obj) {
    var prop, prop_type, desc;

    for(prop in obj) {
      prop_type = typeof(prop);

      // prop_type "object" here is a String(), skip $ props
      if ((prop_type === "string" || prop_type === "object") && prop[0] === '$') {
        continue;
      }

      desc = Object.getOwnPropertyDescriptor(obj, prop);
      if (desc && desc.enumerable && desc.writable) {
        // create closure to retain current value as cv
        // for Opal 2.0 let for cv should do the trick, instead of a function
        (function() {
          // set v to undefined, as if the property is not set
          var cv = obj[prop];
          Object.defineProperty(obj, prop, {
            get: function() { return cv; },
            set: function(_val) { $deny_frozen_access(obj); },
            enumerable: true
          });
        })();
      }
    }
  };

  // Regexps
  // -------

  // Escape Regexp special chars letting the resulting string be used to build
  // a new Regexp.
  //
  Opal.escape_regexp = function(str) {
    return str.replace(/([-[\]\/{}()*+?.^$\\| ])/g, '\\$1')
              .replace(/[\n]/g, '\\n')
              .replace(/[\r]/g, '\\r')
              .replace(/[\f]/g, '\\f')
              .replace(/[\t]/g, '\\t');
  };

  // Create a global Regexp from a RegExp object and cache the result
  // on the object itself ($$g attribute).
  //
  Opal.global_regexp = function(pattern) {
    if (pattern.global) {
      return pattern; // RegExp already has the global flag
    }
    if (pattern.$$g == null) {
      pattern.$$g = new RegExp(pattern.source, (pattern.multiline ? 'gm' : 'g') + (pattern.ignoreCase ? 'i' : ''));
    } else {
      pattern.$$g.lastIndex = null; // reset lastIndex property
    }
    return pattern.$$g;
  };

  // Create a global multiline Regexp from a RegExp object and cache the result
  // on the object itself ($$gm or $$g attribute).
  //
  Opal.global_multiline_regexp = function(pattern) {
    var result, flags;

    // RegExp already has the global and multiline flag
    if (pattern.global && pattern.multiline) return pattern;

    flags = 'gm' + (pattern.ignoreCase ? 'i' : '');
    if (pattern.multiline) {
      // we are using the $$g attribute because the Regexp is already multiline
      if (pattern.$$g == null) {
        pattern.$$g = new RegExp(pattern.source, flags);
      }
      result = pattern.$$g;
    } else {
      if (pattern.$$gm == null) {
        pattern.$$gm = new RegExp(pattern.source, flags);
      }
      result = pattern.$$gm;
    }
    result.lastIndex = null; // reset lastIndex property
    return result;
  };

  // Combine multiple regexp parts together
  Opal.regexp = function(parts, flags) {
    var part;
    var ignoreCase = typeof flags !== 'undefined' && flags && flags.indexOf('i') >= 0;

    for (var i = 0, ii = parts.length; i < ii; i++) {
      part = parts[i];
      if (part instanceof RegExp) {
        if (part.ignoreCase !== ignoreCase)
          Opal.Kernel.$warn(
            "ignore case doesn't match for " + part.source.$inspect(),
            Opal.hash({uplevel: 1})
          )

        part = part.source;
      }
      if (part === '') part = '(?:' + part + ')';
      parts[i] = part;
    }

    if (flags) {
      return new RegExp(parts.join(''), flags);
    } else {
      return new RegExp(parts.join(''));
    }
  };

  // Require system
  // --------------

  Opal.modules         = {};
  Opal.loaded_features = ['corelib/runtime'];
  Opal.current_dir     = '.';
  Opal.require_table   = {'corelib/runtime': true};

  Opal.normalize = function(path) {
    var parts, part, new_parts = [], SEPARATOR = '/';

    if (Opal.current_dir !== '.') {
      path = Opal.current_dir.replace(/\/*$/, '/') + path;
    }

    path = path.replace(/^\.\//, '');
    path = path.replace(/\.(rb|opal|js)$/, '');
    parts = path.split(SEPARATOR);

    for (var i = 0, ii = parts.length; i < ii; i++) {
      part = parts[i];
      if (part === '') continue;
      (part === '..') ? new_parts.pop() : new_parts.push(part)
    }

    return new_parts.join(SEPARATOR);
  };

  Opal.loaded = function(paths) {
    var i, l, path;

    for (i = 0, l = paths.length; i < l; i++) {
      path = Opal.normalize(paths[i]);

      if (Opal.require_table[path]) {
        continue;
      }

      Opal.loaded_features.push(path);
      Opal.require_table[path] = true;
    }
  };

  Opal.load_normalized = function(path) {
    Opal.loaded([path]);

    var module = Opal.modules[path];

    if (module) {
      var retval = module(Opal);
      if (typeof Promise !== 'undefined' && retval instanceof Promise) {
        // A special case of require having an async top:
        // We will need to await it.
        return retval.then($return_val(true));
      }
    }
    else {
      var severity = Opal.config.missing_require_severity;
      var message  = 'cannot load such file -- ' + path;

      if (severity === "error") {
        if (Opal.LoadError) {
          throw Opal.LoadError.$new(message)
        } else {
          throw message
        }
      }
      else if (severity === "warning") {
        console.warn('WARNING: LoadError: ' + message);
      }
    }

    return true;
  };

  Opal.load = function(path) {
    path = Opal.normalize(path);

    return Opal.load_normalized(path);
  };

  Opal.require = function(path) {
    path = Opal.normalize(path);

    if (Opal.require_table[path]) {
      return false;
    }

    return Opal.load_normalized(path);
  };


  // Strings
  // -------

  Opal.encodings = Object.create(null);

  // Sets the encoding on a string, will treat string literals as frozen strings
  // raising a FrozenError.
  //
  // @param str [String] the string on which the encoding should be set
  // @param name [String] the canonical name of the encoding
  // @param type [String] possible values are either `"encoding"`, `"internal_encoding"`, or `undefined
  Opal.set_encoding = function(str, name, type) {
    if (typeof type === "undefined") type = "encoding";
    if (typeof str === 'string' || str.$$frozen === true)
      throw Opal.FrozenError.$new("can't modify frozen String");

    var encoding = Opal.find_encoding(name);

    if (encoding === str[type]) { return str; }

    str[type] = encoding;

    return str;
  };

  // Fetches the encoding for the given name or raises ArgumentError.
  Opal.find_encoding = function(name) {
    var register = Opal.encodings;
    var encoding = register[name] || register[name.toUpperCase()];
    if (!encoding) throw Opal.ArgumentError.$new("unknown encoding name - " + name);
    return encoding;
  }

  // @returns a String object with the encoding set from a string literal
  Opal.enc = function(str, name) {
    var dup = new String(str);
    dup = Opal.set_encoding(dup, name);
    dup.internal_encoding = dup.encoding;
    return dup
  }

  // @returns a String object with the internal encoding set to Binary
  Opal.binary = function(str) {
    var dup = new String(str);
    return Opal.set_encoding(dup, "binary", "internal_encoding");
  }

  Opal.last_promise = null;
  Opal.promise_unhandled_exception = false;

  // Run a block of code, but if it returns a Promise, don't run the next
  // one, but queue it.
  Opal.queue = function(proc) {
    if (Opal.last_promise) {
      // The async path is taken only if anything before returned a
      // Promise(V2).
      Opal.last_promise = Opal.last_promise.then(function() {
        if (!Opal.promise_unhandled_exception) return proc(Opal);
      })['catch'](function(error) {
        if (Opal.respond_to(error, '$full_message')) {
          error = error.$full_message();
        }
        console.error(error);
        // Abort further execution
        Opal.promise_unhandled_exception = true;
        Opal.exit(1);
      });
      return Opal.last_promise;
    }
    else {
      var ret = proc(Opal);
      if (typeof Promise === 'function' && typeof ret === 'object' && ret instanceof Promise) {
        Opal.last_promise = ret;
      }
      return ret;
    }
  }

  // Operator helpers
  // ----------------

  function are_both_numbers(l,r) { return typeof(l) === 'number' && typeof(r) === 'number' }

  Opal.rb_plus   = function(l,r) { return are_both_numbers(l,r) ? l + r : l['$+'](r); }
  Opal.rb_minus  = function(l,r) { return are_both_numbers(l,r) ? l - r : l['$-'](r); }
  Opal.rb_times  = function(l,r) { return are_both_numbers(l,r) ? l * r : l['$*'](r); }
  Opal.rb_divide = function(l,r) { return are_both_numbers(l,r) ? l / r : l['$/'](r); }
  Opal.rb_lt     = function(l,r) { return are_both_numbers(l,r) ? l < r : l['$<'](r); }
  Opal.rb_gt     = function(l,r) { return are_both_numbers(l,r) ? l > r : l['$>'](r); }
  Opal.rb_le     = function(l,r) { return are_both_numbers(l,r) ? l <= r : l['$<='](r); }
  Opal.rb_ge     = function(l,r) { return are_both_numbers(l,r) ? l >= r : l['$>='](r); }

  // Optimized helpers for calls like $truthy((a)['$==='](b)) -> $eqeqeq(a, b)
  function are_both_numbers_or_strings(lhs, rhs) {
    return (typeof lhs === 'number' && typeof rhs === 'number') ||
           (typeof lhs === 'string' && typeof rhs === 'string');
  }

  function $eqeq(lhs, rhs) {
    return are_both_numbers_or_strings(lhs,rhs) ? lhs === rhs : $truthy((lhs)['$=='](rhs));
  };
  Opal.eqeq = $eqeq;
  Opal.eqeqeq = function(lhs, rhs) {
    return are_both_numbers_or_strings(lhs,rhs) ? lhs === rhs : $truthy((lhs)['$==='](rhs));
  };
  Opal.neqeq = function(lhs, rhs) {
    return are_both_numbers_or_strings(lhs,rhs) ? lhs !== rhs : $truthy((lhs)['$!='](rhs));
  };
  Opal.not = function(arg) {
    if (undefined === arg || null === arg || false === arg || nil === arg) return true;
    if (true === arg || arg['$!'].$$pristine) return false;
    return $truthy(arg['$!']());
  }

  // Shortcuts - optimized function generators for simple kinds of functions
  function $return_val(arg) {
    return function() {
      return arg;
    }
  }
  Opal.return_val = $return_val;

  Opal.return_self = function() {
    return this;
  }
  Opal.return_ivar = function(ivar) {
    return function() {
      if (this[ivar] == null) { return nil; }
      return this[ivar];
    }
  }
  Opal.assign_ivar = function(ivar) {
    return function(val) {
      $deny_frozen_access(this);
      return this[ivar] = val;
    }
  }
  Opal.assign_ivar_val = function(ivar, static_val) {
    return function() {
      $deny_frozen_access(this);
      return this[ivar] = static_val;
    }
  }

  // Primitives for handling parameters
  Opal.ensure_kwargs = function(kwargs) {
    if (kwargs == null) {
      return Opal.hash2([], {});
    } else if (kwargs.$$is_hash) {
      return kwargs;
    } else {
      throw Opal.ArgumentError.$new('expected kwargs');
    }
  }

  Opal.get_kwarg = function(kwargs, key) {
    if (!$has_own.call(kwargs.$$smap, key)) {
      throw Opal.ArgumentError.$new('missing keyword: '+key);
    }
    return kwargs.$$smap[key];
  }

  // Initialization
  // --------------
  Opal.BasicObject = BasicObject = $allocate_class('BasicObject', null);
  Opal.Object      = _Object     = $allocate_class('Object', Opal.BasicObject);
  Opal.Module      = Module      = $allocate_class('Module', Opal.Object);
  Opal.Class       = Class       = $allocate_class('Class', Opal.Module);
  Opal.Opal        = _Opal       = $allocate_module('Opal');
  Opal.Kernel      = Kernel      = $allocate_module('Kernel');

  $set_proto(Opal.BasicObject, Opal.Class.$$prototype);
  $set_proto(Opal.Object, Opal.Class.$$prototype);
  $set_proto(Opal.Module, Opal.Class.$$prototype);
  $set_proto(Opal.Class, Opal.Class.$$prototype);

  // BasicObject can reach itself, avoid const_set to skip the $$base_module logic
  BasicObject.$$const.BasicObject = BasicObject;

  // Assign basic constants
  $const_set(_Object, "BasicObject",  BasicObject);
  $const_set(_Object, "Object",       _Object);
  $const_set(_Object, "Module",       Module);
  $const_set(_Object, "Class",        Class);
  $const_set(_Object, "Opal",         _Opal);
  $const_set(_Object, "Kernel",       Kernel);

  // Fix booted classes to have correct .class value
  BasicObject.$$class = Class;
  _Object.$$class     = Class;
  Module.$$class      = Class;
  Class.$$class       = Class;
  _Opal.$$class       = Module;
  Kernel.$$class      = Module;

  // Forward .toString() to #to_s
  $prop(_Object.$$prototype, 'toString', function() {
    var to_s = this.$to_s();
    if (to_s.$$is_string && typeof(to_s) === 'object') {
      // a string created using new String('string')
      return to_s.valueOf();
    } else {
      return to_s;
    }
  });

  // Make Kernel#require immediately available as it's needed to require all the
  // other corelib files.
  $prop(_Object.$$prototype, '$require', Opal.require);

  // Instantiate the main object
  Opal.top = new _Object();
  Opal.top.$to_s = Opal.top.$inspect = $return_val('main');
  Opal.top.$define_method = top_define_method;

  // Foward calls to define_method on the top object to Object
  function top_define_method() {
    var args = Opal.slice.call(arguments);
    var block = top_define_method.$$p;
    top_define_method.$$p = null;
    return Opal.send(_Object, 'define_method', args, block)
  };

  // Nil
  Opal.NilClass = $allocate_class('NilClass', Opal.Object);
  $const_set(_Object, 'NilClass', Opal.NilClass);
  nil = Opal.nil = new Opal.NilClass();
  nil.$$id = nil_id;
  nil.call = nil.apply = function() { throw Opal.LocalJumpError.$new('no block given'); };
  nil.$$frozen = true;
  nil.$$comparable = false;
  Object.seal(nil);

  Opal.thrower = function(type) {
    var thrower = new Error('unexpected '+type);
    thrower.$thrower_type = type;
    thrower.$throw = function(value) {
      if (value == null) value = nil;
      thrower.$v = value;
      throw thrower;
    };
    return thrower;
  };

  Opal.t_eval_return = Opal.thrower("return");

  TypeError.$$super = Error;

  // If enable-file-source-embed compiler option is enabled, each module loaded will add its
  // sources to this object
  Opal.file_sources = {};
}).call(this);
Opal.loaded(["corelib/runtime.js"]);
Opal.modules["corelib/complex/base"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $module = Opal.module, $truthy = Opal.truthy, $def = Opal.def, $klass = Opal.klass, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('new,from_string');
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return $def(self, '$Complex', function $$Complex(real, imag) {
      
      
      if (imag == null) imag = nil;
      if ($truthy(imag)) {
        return $$('Complex').$new(real, imag)
      } else {
        return $$('Complex').$new(real, 0)
      };
    }, -2)
  })('::', $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return $def(self, '$to_c', function $$to_c() {
      var self = this;

      return $$('Complex').$from_string(self)
    }, 0)
  })('::', null, $nesting);
};

Opal.modules["corelib/irb"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $module = Opal.module, $truthy = Opal.truthy, $Kernel = Opal.Kernel, $defs = Opal.defs, $hash = Opal.hash, $gvars = Opal.gvars, $lambda = Opal.lambda, $send = Opal.send, $rb_plus = Opal.rb_plus, $const_set = Opal.const_set, $klass = Opal.klass, $def = Opal.def, $Opal = Opal.Opal, $range = Opal.range, $eqeq = Opal.eqeq, $thrower = Opal.thrower, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('include?,raise,attr_accessor,singleton_class,output=,browser?,each,dup,write_proc=,proc,+,output,join,last,split,end_with?,call,write_proc,tty=,read_proc,read_proc=,freeze,new,string,ensure_loaded,prepare_console,loop,print,gets,puts,start_with?,[],==,silence,message,empty?,warnings,warn,full_message,eval_and_print,irb');
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'IRB');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      $defs(self, '$ensure_loaded', function $$ensure_loaded(library) {
        var version = nil, url = nil;

        
        if ($truthy((Opal.loaded_features)['$include?'](library))) {
          return nil
        };
        version = ($truthy($$('RUBY_ENGINE_VERSION')['$include?']("dev")) ? ("master") : ($$('RUBY_ENGINE_VERSION')));
        url = "https://cdn.opalrb.com/opal/" + (version) + "/" + (library) + ".js";
        
        var libcode;

        if (typeof XMLHttpRequest !== 'undefined') { // Browser
          var r = new XMLHttpRequest();
          r.open("GET", url, false);
          r.send('');
          libcode = r.responseText;
        }
        else {
          $Kernel.$raise("You need to provision " + (library) + " yourself in this environment")
        }

        (new Function('Opal', libcode))(Opal);

        Opal.require(library);
      ;
        if ($truthy((Opal.loaded_features)['$include?'](library))) {
          return nil
        } else {
          return $Kernel.$raise("Could not load " + (library) + " for some reason")
        };
      }, 1);
      self.$singleton_class().$attr_accessor("output");
      $defs(self, '$prepare_console', function $$prepare_console() {
        var block = $$prepare_console.$$p || nil, $a, self = this, original = nil, original_read_proc = nil;
        if ($gvars.stdout == null) $gvars.stdout = nil;
        if ($gvars.stderr == null) $gvars.stderr = nil;
        if ($gvars.stdin == null) $gvars.stdin = nil;

        $$prepare_console.$$p = null;
        
        ;
        return (function() { try {
        
        self['$output=']("");
        original = $hash($gvars.stdout, $lambda(function $$1(i){
          
          if (i == null) i = nil;
          return ($gvars.stdout = i);}, 1), $gvars.stderr, $lambda(function $$2(i){
          
          if (i == null) i = nil;
          return ($gvars.stderr = i);}, 1));
        if ($truthy(self['$browser?']())) {
          
          $send(original, 'each', [], function $$3(pipe, pipe_setter){var self = $$3.$$s == null ? this : $$3.$$s, new_pipe = nil;

            
            if (pipe == null) pipe = nil;
            if (pipe_setter == null) pipe_setter = nil;
            new_pipe = pipe.$dup();
            new_pipe['$write_proc=']($send(self, 'proc', [], function $$4(str){var self = $$4.$$s == null ? this : $$4.$$s;

              
              if (str == null) str = nil;
              self['$output=']($rb_plus(self.$output(), str));
              self['$output='](self.$output().$split("\n").$last(30).$join("\n"));
              if ($truthy(str['$end_with?']("\n"))) {
                self['$output=']($rb_plus(self.$output(), "\n"))
              };
              return pipe.$write_proc().$call(str);}, {$$arity: 1, $$s: self}));
            new_pipe['$tty='](false);
            return pipe_setter.$call(new_pipe);}, {$$arity: 2, $$s: self});
          original_read_proc = $gvars.stdin.$read_proc();
          $gvars.stdin['$read_proc='](function(s) { var p = prompt(self.$output()); if (p !== null) return p + "\n"; return nil; });
        };
        return Opal.yieldX(block, []);;
        } finally {
          ($send(original, 'each', [], function $$5(pipe, pipe_setter){
            
            if (pipe == null) pipe = nil;
            if (pipe_setter == null) pipe_setter = nil;
            return pipe_setter.$call(pipe);}, 2), ($a = [original_read_proc], $send($gvars.stdin, 'read_proc=', $a), $a[$a.length - 1]), ($a = [""], $send(self, 'output=', $a), $a[$a.length - 1]))
        }; })();
      }, 0);
      $defs(self, '$browser?', function $IRB_browser$ques$6() {
        
        return typeof(document) !== 'undefined' && typeof(prompt) !== 'undefined';
      }, 0);
      $const_set($nesting[0], 'LINEBREAKS', ["unexpected token $end", "unterminated string meets end of file"].$freeze());
      return (function($base, $super) {
        var self = $klass($base, $super, 'Silencer');

        var $proto = self.$$prototype;

        $proto.collector = $proto.stderr = nil;
        
        
        $def(self, '$initialize', function $$initialize() {
          var self = this;
          if ($gvars.stderr == null) $gvars.stderr = nil;

          return (self.stderr = $gvars.stderr)
        }, 0);
        
        $def(self, '$silence', function $$silence() {
          var $yield = $$silence.$$p || nil, self = this;

          $$silence.$$p = null;
          return (function() { try {
          
          self.collector = $$$('StringIO').$new();
          $gvars.stderr = self.collector;
          return Opal.yieldX($yield, []);;
          } finally {
            ($gvars.stderr = self.stderr)
          }; })()
        }, 0);
        return $def(self, '$warnings', function $$warnings() {
          var self = this;

          return self.collector.$string()
        }, 0);
      })($nesting[0], null);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Binding');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return $def(self, '$irb', function $$irb() {try { var $t_return = $thrower('return'); 
      var self = this, silencer = nil;

      
      $$$($Opal, 'IRB').$ensure_loaded("opal-replutils");
      silencer = $$$($$$($Opal, 'IRB'), 'Silencer').$new();
      return $send($$$($Opal, 'IRB'), 'prepare_console', [], function $$7(){var self = $$7.$$s == null ? this : $$7.$$s;

        return (function(){try { var $t_break = $thrower('break'); return $send(self, 'loop', [], function $$8(){var self = $$8.$$s == null ? this : $$8.$$s, line = nil, code = nil, mode = nil, js_code = nil, e = nil;

          
          self.$print(">> ");
          line = self.$gets();
          if (!$truthy(line)) {
            $t_break.$throw()
          };
          code = "";
          if ($truthy($$$($Opal, 'IRB')['$browser?']())) {
            self.$puts(line)
          };
          if ($truthy(line['$start_with?']("ls "))) {
            
            code = line['$[]']($range(3, -1, false));
            mode = "ls";
          } else if ($eqeq(line, "ls\n")) {
            
            code = "self";
            mode = "ls";
          } else if ($truthy(line['$start_with?']("show "))) {
            
            code = line['$[]']($range(5, -1, false));
            mode = "show";
          } else {
            
            code = line;
            mode = "inspect";
          };
          js_code = nil;
          
          do { try {
            $send(silencer, 'silence', [], function $$9(){
              return (js_code = Opal.compile(code, {irb: true}))}, 0)
          } catch ($err) {
            if (Opal.rescue($err, [$$('SyntaxError')])) {(e = $err)
              try {
                if ($truthy($$$($$$($Opal, 'IRB'), 'LINEBREAKS')['$include?'](e.$message()))) {
                  
                  self.$print(".. ");
                  line = self.$gets();
                  if (!$truthy(line)) {
                    $t_return.$throw()
                  };
                  if ($truthy($$$($Opal, 'IRB')['$browser?']())) {
                    self.$puts(line)
                  };
                  code = $rb_plus(code, line);
                  continue;
                } else if ($truthy(silencer.$warnings()['$empty?']())) {
                  self.$warn(e.$full_message())
                } else {
                  self.$warn(silencer.$warnings())
                }
              } finally { Opal.pop_exception(); }
            } else { throw $err; }
          } break; } while(1);;
          if ($eqeq(mode, "show")) {
            
            self.$puts(js_code);
            $t_return.$throw();
          };
          return self.$puts($$$('REPLUtils').$eval_and_print(js_code, mode, false, self));}, {$$arity: 0, $$s: self, $$ret: $t_return})} catch($e) {
          if ($e === $t_break) return $e.$v;
          throw $e;
        }})()}, {$$arity: 0, $$s: self});} catch($e) {
        if ($e === $t_return) return $e.$v;
        throw $e;
      }
    }, 0)
  })('::', null, $nesting);
  
  // Run in WebTools console with: Opal.irb(c => eval(c))
  Opal.irb = function(fun) {
    $$$('Binding').$new(fun).$irb()
  }

  Opal.load_parser = function() {
    Opal.Opal.IRB.$ensure_loaded('opal-parser');
  }

  if (typeof Opal.eval === 'undefined') {
    Opal.eval = function(str) {
      Opal.load_parser();
      return Opal.eval(str);
    }
  }

  if (typeof Opal.compile === 'undefined') {
    Opal.compile = function(str, options) {
      Opal.load_parser();
      return Opal.compile(str, options);
    }
  }
;
};

Opal.modules["corelib/binding"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $klass = Opal.klass, $truthy = Opal.truthy, $def = Opal.def, $slice = Opal.slice, $send = Opal.send, $to_a = Opal.to_a, $Kernel = Opal.Kernel, $return_ivar = Opal.return_ivar, $eqeq = Opal.eqeq, $thrower = Opal.thrower, $module = Opal.module, $const_set = Opal.const_set, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('js_eval,call,raise,inspect,include?,==,receiver,eval,attr_reader,new');
  
  (function($base, $super) {
    var self = $klass($base, $super, 'Binding');

    var $proto = self.$$prototype;

    $proto.jseval = $proto.scope_variables = nil;
    
    
    $def(self, '$initialize', function $$initialize(jseval, scope_variables, receiver, source_location) {
      var $a, self = this;

      
      if (scope_variables == null) scope_variables = [];
      ;
      if (source_location == null) source_location = nil;
      $a = [jseval, scope_variables, receiver, source_location], (self.jseval = $a[0]), (self.scope_variables = $a[1]), (self.receiver = $a[2]), (self.source_location = $a[3]), $a;
      if ($truthy(typeof receiver !== undefined)) {
        return nil
      } else {
        return (receiver = self.$js_eval("self"))
      };
    }, -2);
    
    $def(self, '$js_eval', function $$js_eval($a) {
      var $post_args, args, self = this;

      
      $post_args = $slice.call(arguments);
      args = $post_args;
      if ($truthy(self.jseval)) {
        return $send(self.jseval, 'call', $to_a(args))
      } else {
        return $Kernel.$raise("Evaluation on a Proc#binding is not supported")
      };
    }, -1);
    
    $def(self, '$local_variable_get', function $$local_variable_get(symbol) {
      var self = this;

      try {
        return self.$js_eval(symbol)
      } catch ($err) {
        if (Opal.rescue($err, [$$$('Exception')])) {
          try {
            return $Kernel.$raise($$$('NameError'), "local variable `" + (symbol) + "' is not defined for " + (self.$inspect()))
          } finally { Opal.pop_exception(); }
        } else { throw $err; }
      }
    }, 1);
    
    $def(self, '$local_variable_set', function $$local_variable_set(symbol, value) {
      var self = this;

      
      Opal.Binding.tmp_value = value;
      self.$js_eval("" + (symbol) + " = Opal.Binding.tmp_value");
      delete Opal.Binding.tmp_value;
      return value;
    }, 2);
    
    $def(self, '$local_variables', $return_ivar("scope_variables"), 0);
    
    $def(self, '$local_variable_defined?', function $Binding_local_variable_defined$ques$1(value) {
      var self = this;

      return self.scope_variables['$include?'](value)
    }, 1);
    
    $def(self, '$eval', function $Binding_eval$2(str, file, line) {try { var $t_eval_return = $thrower('eval_return'); 
      var self = this;

      
      if (file == null) file = nil;
      if (line == null) line = nil;
      if ($eqeq(str, "self")) {
        return self.$receiver()
      };
      return $Kernel.$eval(str, self, file, line);} catch($e) {
        if ($e === Opal.t_eval_return) return $e.$v;
        throw $e;
      }
    }, -2);
    return self.$attr_reader("receiver", "source_location");
  })('::', null);
  (function($base) {
    var self = $module($base, 'Kernel');

    
    return $def(self, '$binding', function $$binding() {
      
      return $Kernel.$raise("Opal doesn't support dynamic calls to binding")
    }, 0)
  })('::');
  return $const_set($nesting[0], 'TOPLEVEL_BINDING', $$$('Binding').$new(
    function(js) {
      return (new Function("self", "return " + js))(self);
    }
  , [], self, ["<main>", 0]));
};

Opal.modules["corelib/time"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $slice = Opal.slice, $deny_frozen_access = Opal.deny_frozen_access, $klass = Opal.klass, $Kernel = Opal.Kernel, $Opal = Opal.Opal, $defs = Opal.defs, $eqeqeq = Opal.eqeqeq, $def = Opal.def, $truthy = Opal.truthy, $rb_gt = Opal.rb_gt, $rb_lt = Opal.rb_lt, $send = Opal.send, $rb_plus = Opal.rb_plus, $rb_divide = Opal.rb_divide, $rb_minus = Opal.rb_minus, $range = Opal.range, $neqeq = Opal.neqeq, $rb_le = Opal.rb_le, $eqeq = Opal.eqeq, $alias = Opal.alias, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,include,===,raise,coerce_to!,respond_to?,to_str,to_i,_parse_offset,new,<=>,to_f,nil?,>,<,strftime,each,define_method,year,month,day,+,round,/,-,copy_instance_variables,initialize_dup,is_a?,zero?,wday,utc?,mon,yday,hour,min,sec,rjust,ljust,zone,to_s,[],cweek_cyear,jd,to_date,format,isdst,!=,<=,==,ceil,local,gm,asctime,getgm,gmt_offset,inspect,usec,gmtime,gmt?');
  
  self.$require("corelib/comparable");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Time');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    self.$include($$$('Comparable'));
    
    var days_of_week = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
        short_days   = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        short_months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        long_months  = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
  ;
    $defs(self, '$at', function $$at(seconds, frac) {
      
      
      ;
      
      var result;

      if ($$$('Time')['$==='](seconds)) {
        if (frac !== undefined) {
          $Kernel.$raise($$$('TypeError'), "can't convert Time into an exact number")
        }
        result = new Date(seconds.getTime());
        result.timezone = seconds.timezone;
        return result;
      }

      if (!seconds.$$is_number) {
        seconds = $Opal['$coerce_to!'](seconds, $$$('Integer'), "to_int");
      }

      if (frac === undefined) {
        return new Date(seconds * 1000);
      }

      if (!frac.$$is_number) {
        frac = $Opal['$coerce_to!'](frac, $$$('Integer'), "to_int");
      }

      return new Date(seconds * 1000 + (frac / 1000));
    ;
    }, -2);
    
    function time_params(year, month, day, hour, min, sec) {
      if (year.$$is_string) {
        year = parseInt(year, 10);
      } else {
        year = $Opal['$coerce_to!'](year, $$$('Integer'), "to_int");
      }

      if (month === nil) {
        month = 1;
      } else if (!month.$$is_number) {
        if ((month)['$respond_to?']("to_str")) {
          month = (month).$to_str();
          switch (month.toLowerCase()) {
          case 'jan': month =  1; break;
          case 'feb': month =  2; break;
          case 'mar': month =  3; break;
          case 'apr': month =  4; break;
          case 'may': month =  5; break;
          case 'jun': month =  6; break;
          case 'jul': month =  7; break;
          case 'aug': month =  8; break;
          case 'sep': month =  9; break;
          case 'oct': month = 10; break;
          case 'nov': month = 11; break;
          case 'dec': month = 12; break;
          default: month = (month).$to_i();
          }
        } else {
          month = $Opal['$coerce_to!'](month, $$$('Integer'), "to_int");
        }
      }

      if (month < 1 || month > 12) {
        $Kernel.$raise($$$('ArgumentError'), "month out of range: " + (month))
      }
      month = month - 1;

      if (day === nil) {
        day = 1;
      } else if (day.$$is_string) {
        day = parseInt(day, 10);
      } else {
        day = $Opal['$coerce_to!'](day, $$$('Integer'), "to_int");
      }

      if (day < 1 || day > 31) {
        $Kernel.$raise($$$('ArgumentError'), "day out of range: " + (day))
      }

      if (hour === nil) {
        hour = 0;
      } else if (hour.$$is_string) {
        hour = parseInt(hour, 10);
      } else {
        hour = $Opal['$coerce_to!'](hour, $$$('Integer'), "to_int");
      }

      if (hour < 0 || hour > 24) {
        $Kernel.$raise($$$('ArgumentError'), "hour out of range: " + (hour))
      }

      if (min === nil) {
        min = 0;
      } else if (min.$$is_string) {
        min = parseInt(min, 10);
      } else {
        min = $Opal['$coerce_to!'](min, $$$('Integer'), "to_int");
      }

      if (min < 0 || min > 59) {
        $Kernel.$raise($$$('ArgumentError'), "min out of range: " + (min))
      }

      if (sec === nil) {
        sec = 0;
      } else if (!sec.$$is_number) {
        if (sec.$$is_string) {
          sec = parseInt(sec, 10);
        } else {
          sec = $Opal['$coerce_to!'](sec, $$$('Integer'), "to_int");
        }
      }

      if (sec < 0 || sec > 60) {
        $Kernel.$raise($$$('ArgumentError'), "sec out of range: " + (sec))
      }

      return [year, month, day, hour, min, sec];
    }
  ;
    $defs(self, '$new', function $Time_new$1(year, month, day, hour, min, sec, utc_offset) {
      var self = this;

      
      ;
      if (month == null) month = nil;
      if (day == null) day = nil;
      if (hour == null) hour = nil;
      if (min == null) min = nil;
      if (sec == null) sec = nil;
      if (utc_offset == null) utc_offset = nil;
      
      var args, result, timezone, utc_date;

      if (year === undefined) {
        return new Date();
      }

      args  = time_params(year, month, day, hour, min, sec);
      year  = args[0];
      month = args[1];
      day   = args[2];
      hour  = args[3];
      min   = args[4];
      sec   = args[5];

      if (utc_offset === nil) {
        result = new Date(year, month, day, hour, min, 0, sec * 1000);
        if (year < 100) {
          result.setFullYear(year);
        }
        return result;
      }

      timezone = self.$_parse_offset(utc_offset);
      utc_date = new Date(Date.UTC(year, month, day, hour, min, 0, sec * 1000));
      if (year < 100) {
        utc_date.setUTCFullYear(year);
      }

      result = new Date(utc_date.getTime() - timezone * 3600000);
      result.timezone = timezone;

      return result;
    ;
    }, -1);
    $defs(self, '$_parse_offset', function $$_parse_offset(utc_offset) {
      
      
      var timezone;
      if (utc_offset.$$is_string) {
        if (utc_offset == 'UTC') {
          timezone = 0;
        }
        else if(/^[+-]\d\d:[0-5]\d$/.test(utc_offset)) {
          var sign, hours, minutes;
          sign = utc_offset[0];
          hours = +(utc_offset[1] + utc_offset[2]);
          minutes = +(utc_offset[4] + utc_offset[5]);

          timezone = (sign == '-' ? -1 : 1) * (hours + minutes / 60);
        }
        else {
          // Unsupported: "A".."I","K".."Z"
          $Kernel.$raise($$$('ArgumentError'), "\"+HH:MM\", \"-HH:MM\", \"UTC\" expected for utc_offset: " + (utc_offset))
        }
      }
      else if (utc_offset.$$is_number) {
        timezone = utc_offset / 3600;
      }
      else {
        $Kernel.$raise($$$('ArgumentError'), "Opal doesn't support other types for a timezone argument than Integer and String")
      }
      return timezone;
    
    }, 1);
    $defs(self, '$local', function $$local(year, month, day, hour, min, sec, millisecond, _dummy1, _dummy2, _dummy3) {
      
      
      if (month == null) month = nil;
      if (day == null) day = nil;
      if (hour == null) hour = nil;
      if (min == null) min = nil;
      if (sec == null) sec = nil;
      if (millisecond == null) millisecond = nil;
      if (_dummy1 == null) _dummy1 = nil;
      if (_dummy2 == null) _dummy2 = nil;
      if (_dummy3 == null) _dummy3 = nil;
      
      var args, result;

      if (arguments.length === 10) {
        args  = $slice.call(arguments);
        year  = args[5];
        month = args[4];
        day   = args[3];
        hour  = args[2];
        min   = args[1];
        sec   = args[0];
      }

      args  = time_params(year, month, day, hour, min, sec);
      year  = args[0];
      month = args[1];
      day   = args[2];
      hour  = args[3];
      min   = args[4];
      sec   = args[5];

      result = new Date(year, month, day, hour, min, 0, sec * 1000);
      if (year < 100) {
        result.setFullYear(year);
      }
      return result;
    ;
    }, -2);
    $defs(self, '$gm', function $$gm(year, month, day, hour, min, sec, millisecond, _dummy1, _dummy2, _dummy3) {
      
      
      if (month == null) month = nil;
      if (day == null) day = nil;
      if (hour == null) hour = nil;
      if (min == null) min = nil;
      if (sec == null) sec = nil;
      if (millisecond == null) millisecond = nil;
      if (_dummy1 == null) _dummy1 = nil;
      if (_dummy2 == null) _dummy2 = nil;
      if (_dummy3 == null) _dummy3 = nil;
      
      var args, result;

      if (arguments.length === 10) {
        args  = $slice.call(arguments);
        year  = args[5];
        month = args[4];
        day   = args[3];
        hour  = args[2];
        min   = args[1];
        sec   = args[0];
      }

      args  = time_params(year, month, day, hour, min, sec);
      year  = args[0];
      month = args[1];
      day   = args[2];
      hour  = args[3];
      min   = args[4];
      sec   = args[5];

      result = new Date(Date.UTC(year, month, day, hour, min, 0, sec * 1000));
      if (year < 100) {
        result.setUTCFullYear(year);
      }
      result.timezone = 0;
      return result;
    ;
    }, -2);
    $defs(self, '$now', function $$now() {
      var self = this;

      return self.$new()
    }, 0);
    
    $def(self, '$+', function $Time_$plus$2(other) {
      var self = this;

      
      if ($eqeqeq($$$('Time'), other)) {
        $Kernel.$raise($$$('TypeError'), "time + time?")
      };
      
      if (!other.$$is_number) {
        other = $Opal['$coerce_to!'](other, $$$('Integer'), "to_int");
      }
      var result = new Date(self.getTime() + (other * 1000));
      result.timezone = self.timezone;
      return result;
    ;
    }, 1);
    
    $def(self, '$-', function $Time_$minus$3(other) {
      var self = this;

      
      if ($eqeqeq($$$('Time'), other)) {
        return (self.getTime() - other.getTime()) / 1000
      };
      
      if (!other.$$is_number) {
        other = $Opal['$coerce_to!'](other, $$$('Integer'), "to_int");
      }
      var result = new Date(self.getTime() - (other * 1000));
      result.timezone = self.timezone;
      return result;
    ;
    }, 1);
    
    $def(self, '$<=>', function $Time_$lt_eq_gt$4(other) {
      var self = this, r = nil;

      if ($eqeqeq($$$('Time'), other)) {
        return self.$to_f()['$<=>'](other.$to_f())
      } else {
        
        r = other['$<=>'](self);
        if ($truthy(r['$nil?']())) {
          return nil
        } else if ($truthy($rb_gt(r, 0))) {
          return -1
        } else if ($truthy($rb_lt(r, 0))) {
          return 1
        } else {
          return 0
        };
      }
    }, 1);
    
    $def(self, '$==', function $Time_$eq_eq$5(other) {
      var self = this, $ret_or_1 = nil;

      if ($truthy(($ret_or_1 = $$$('Time')['$==='](other)))) {
        return self.$to_f() === other.$to_f()
      } else {
        return $ret_or_1
      }
    }, 1);
    
    $def(self, '$asctime', function $$asctime() {
      var self = this;

      return self.$strftime("%a %b %e %H:%M:%S %Y")
    }, 0);
    $send([["year", "getFullYear", "getUTCFullYear"], ["mon", "getMonth", "getUTCMonth", 1], ["wday", "getDay", "getUTCDay"], ["day", "getDate", "getUTCDate"], ["hour", "getHours", "getUTCHours"], ["min", "getMinutes", "getUTCMinutes"], ["sec", "getSeconds", "getUTCSeconds"]], 'each', [], function $Time$6(method, getter, utcgetter, difference){var self = $Time$6.$$s == null ? this : $Time$6.$$s;

      
      if (method == null) method = nil;
      if (getter == null) getter = nil;
      if (utcgetter == null) utcgetter = nil;
      if (difference == null) difference = 0;
      return $send(self, 'define_method', [method], function $$7(){var self = $$7.$$s == null ? this : $$7.$$s;

        
        return difference + ((self.timezone != null) ?
          (new Date(self.getTime() + self.timezone * 3600000))[utcgetter]() :
          self[getter]())
      }, {$$arity: 0, $$s: self});}, {$$arity: -4, $$s: self});
    
    $def(self, '$yday', function $$yday() {
      var self = this, start_of_year = nil, start_of_day = nil, one_day = nil;

      
      start_of_year = $$('Time').$new(self.$year()).$to_i();
      start_of_day = $$('Time').$new(self.$year(), self.$month(), self.$day()).$to_i();
      one_day = 86400;
      return $rb_plus($rb_divide($rb_minus(start_of_day, start_of_year), one_day).$round(), 1);
    }, 0);
    
    $def(self, '$isdst', function $$isdst() {
      var self = this;

      
      var jan = new Date(self.getFullYear(), 0, 1),
          jul = new Date(self.getFullYear(), 6, 1);
      return self.getTimezoneOffset() < Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());
    
    }, 0);
    
    $def(self, '$dup', function $$dup() {
      var self = this, copy = nil;

      
      copy = new Date(self.getTime());
      copy.$copy_instance_variables(self);
      copy.$initialize_dup(self);
      return copy;
    }, 0);
    
    $def(self, '$eql?', function $Time_eql$ques$8(other) {
      var self = this, $ret_or_1 = nil;

      if ($truthy(($ret_or_1 = other['$is_a?']($$$('Time'))))) {
        return self['$<=>'](other)['$zero?']()
      } else {
        return $ret_or_1
      }
    }, 1);
    $send([["sunday?", 0], ["monday?", 1], ["tuesday?", 2], ["wednesday?", 3], ["thursday?", 4], ["friday?", 5], ["saturday?", 6]], 'each', [], function $Time$9(method, weekday){var self = $Time$9.$$s == null ? this : $Time$9.$$s;

      
      if (method == null) method = nil;
      if (weekday == null) weekday = nil;
      return $send(self, 'define_method', [method], function $$10(){var self = $$10.$$s == null ? this : $$10.$$s;

        return self.$wday() === weekday}, {$$arity: 0, $$s: self});}, {$$arity: 2, $$s: self});
    
    $def(self, '$hash', function $$hash() {
      var self = this;

      return 'Time:' + self.getTime();
    }, 0);
    
    $def(self, '$inspect', function $$inspect() {
      var self = this;

      if ($truthy(self['$utc?']())) {
        return self.$strftime("%Y-%m-%d %H:%M:%S UTC")
      } else {
        return self.$strftime("%Y-%m-%d %H:%M:%S %z")
      }
    }, 0);
    
    $def(self, '$succ', function $$succ() {
      var self = this;

      
      var result = new Date(self.getTime() + 1000);
      result.timezone = self.timezone;
      return result;
    
    }, 0);
    
    $def(self, '$usec', function $$usec() {
      var self = this;

      return self.getMilliseconds() * 1000;
    }, 0);
    
    $def(self, '$zone', function $$zone() {
      var self = this;

      
      if (self.timezone === 0) return "UTC";
      else if (self.timezone != null) return nil;

      var string = self.toString(),
          result;

      if (string.indexOf('(') == -1) {
        result = string.match(/[A-Z]{3,4}/)[0];
      }
      else {
        result = string.match(/\((.+)\)(?:\s|$)/)[1]
      }

      if (result == "GMT" && /(GMT\W*\d{4})/.test(string)) {
        return RegExp.$1;
      }
      else {
        return result;
      }
    
    }, 0);
    
    $def(self, '$getgm', function $$getgm() {
      var self = this;

      
      var result = new Date(self.getTime());
      result.timezone = 0;
      return result;
    
    }, 0);
    
    $def(self, '$gmtime', function $$gmtime() {
      var self = this;

      
      if (self.timezone !== 0) {
        $deny_frozen_access(self);
        self.timezone = 0;
      }
      return self;
    
    }, 0);
    
    $def(self, '$gmt?', function $Time_gmt$ques$11() {
      var self = this;

      return self.timezone === 0;
    }, 0);
    
    $def(self, '$gmt_offset', function $$gmt_offset() {
      var self = this;

      return (self.timezone != null) ? self.timezone * 60 : -self.getTimezoneOffset() * 60;
    }, 0);
    
    $def(self, '$strftime', function $$strftime(format) {
      var self = this;

      
      return format.replace(/%([\-_#^0]*:{0,2})(\d+)?([EO]*)(.)/g, function(full, flags, width, _, conv) {
        var result = "", jd, c, s,
            zero   = flags.indexOf('0') !== -1,
            pad    = flags.indexOf('-') === -1,
            blank  = flags.indexOf('_') !== -1,
            upcase = flags.indexOf('^') !== -1,
            invert = flags.indexOf('#') !== -1,
            colons = (flags.match(':') || []).length;

        width = parseInt(width, 10);

        if (zero && blank) {
          if (flags.indexOf('0') < flags.indexOf('_')) {
            zero = false;
          }
          else {
            blank = false;
          }
        }

        switch (conv) {
          case 'Y':
            result += self.$year();
            break;

          case 'C':
            zero    = !blank;
            result += Math.round(self.$year() / 100);
            break;

          case 'y':
            zero    = !blank;
            result += (self.$year() % 100);
            break;

          case 'm':
            zero    = !blank;
            result += self.$mon();
            break;

          case 'B':
            result += long_months[self.$mon() - 1];
            break;

          case 'b':
          case 'h':
            blank   = !zero;
            result += short_months[self.$mon() - 1];
            break;

          case 'd':
            zero    = !blank
            result += self.$day();
            break;

          case 'e':
            blank   = !zero
            result += self.$day();
            break;

          case 'j':
            zero    = !blank;
            width   = isNaN(width) ? 3 : width;
            result += self.$yday();
            break;

          case 'H':
            zero    = !blank;
            result += self.$hour();
            break;

          case 'k':
            blank   = !zero;
            result += self.$hour();
            break;

          case 'I':
            zero    = !blank;
            result += (self.$hour() % 12 || 12);
            break;

          case 'l':
            blank   = !zero;
            result += (self.$hour() % 12 || 12);
            break;

          case 'P':
            result += (self.$hour() >= 12 ? "pm" : "am");
            break;

          case 'p':
            result += (self.$hour() >= 12 ? "PM" : "AM");
            break;

          case 'M':
            zero    = !blank;
            result += self.$min();
            break;

          case 'S':
            zero    = !blank;
            result += self.$sec()
            break;

          case 'L':
            zero    = !blank;
            width   = isNaN(width) ? 3 : width;
            result += self.getMilliseconds();
            break;

          case 'N':
            width   = isNaN(width) ? 9 : width;
            result += (self.getMilliseconds().toString()).$rjust(3, "0");
            result  = (result).$ljust(width, "0");
            break;

          case 'z':
            var offset  = (self.timezone == null) ? self.getTimezoneOffset() : (-self.timezone * 60),
                hours   = Math.floor(Math.abs(offset) / 60),
                minutes = Math.abs(offset) % 60;

            result += offset < 0 ? "+" : "-";
            result += hours < 10 ? "0" : "";
            result += hours;

            if (colons > 0) {
              result += ":";
            }

            result += minutes < 10 ? "0" : "";
            result += minutes;

            if (colons > 1) {
              result += ":00";
            }

            break;

          case 'Z':
            result += self.$zone();
            break;

          case 'A':
            result += days_of_week[self.$wday()];
            break;

          case 'a':
            result += short_days[self.$wday()];
            break;

          case 'u':
            result += (self.$wday() + 1);
            break;

          case 'w':
            result += self.$wday();
            break;

          case 'V':
            result += self.$cweek_cyear()['$[]'](0).$to_s().$rjust(2, "0");
            break;

          case 'G':
            result += self.$cweek_cyear()['$[]'](1);
            break;

          case 'g':
            result += self.$cweek_cyear()['$[]'](1)['$[]']($range(-2, -1, false));
            break;

          case 's':
            result += self.$to_i();
            break;

          case 'n':
            result += "\n";
            break;

          case 't':
            result += "\t";
            break;

          case '%':
            result += "%";
            break;

          case 'c':
            result += self.$strftime("%a %b %e %T %Y");
            break;

          case 'D':
          case 'x':
            result += self.$strftime("%m/%d/%y");
            break;

          case 'F':
            result += self.$strftime("%Y-%m-%d");
            break;

          case 'v':
            result += self.$strftime("%e-%^b-%4Y");
            break;

          case 'r':
            result += self.$strftime("%I:%M:%S %p");
            break;

          case 'R':
            result += self.$strftime("%H:%M");
            break;

          case 'T':
          case 'X':
            result += self.$strftime("%H:%M:%S");
            break;

          // Non-standard: JIS X 0301 date format
          case 'J':
            jd = self.$to_date().$jd();
            if (jd < 2405160) {
              result += self.$strftime("%Y-%m-%d");
              break;
            }
            else if (jd < 2419614)
              c = 'M', s = 1867;
            else if (jd < 2424875)
              c = 'T', s = 1911;
            else if (jd < 2447535)
              c = 'S', s = 1925;
            else if (jd < 2458605)
              c = 'H', s = 1988;
            else
              c = 'R', s = 2018;

            result += self.$format("%c%02d", c, $rb_minus(self.$year(), s));
            result += self.$strftime("-%m-%d");
            break;

          default:
            return full;
        }

        if (upcase) {
          result = result.toUpperCase();
        }

        if (invert) {
          result = result.replace(/[A-Z]/, function(c) { c.toLowerCase() }).
                          replace(/[a-z]/, function(c) { c.toUpperCase() });
        }

        if (pad && (zero || blank)) {
          result = (result).$rjust(isNaN(width) ? 2 : width, blank ? " " : "0");
        }

        return result;
      });
    
    }, 1);
    
    $def(self, '$to_a', function $$to_a() {
      var self = this;

      return [self.$sec(), self.$min(), self.$hour(), self.$day(), self.$month(), self.$year(), self.$wday(), self.$yday(), self.$isdst(), self.$zone()]
    }, 0);
    
    $def(self, '$to_f', function $$to_f() {
      var self = this;

      return self.getTime() / 1000;
    }, 0);
    
    $def(self, '$to_i', function $$to_i() {
      var self = this;

      return parseInt(self.getTime() / 1000, 10);
    }, 0);
    
    $def(self, '$cweek_cyear', function $$cweek_cyear() {
      var self = this, jan01 = nil, jan01_wday = nil, first_monday = nil, year = nil, offset = nil, week = nil, dec31 = nil, dec31_wday = nil;

      
      jan01 = $$$('Time').$new(self.$year(), 1, 1);
      jan01_wday = jan01.$wday();
      first_monday = 0;
      year = self.$year();
      if (($truthy($rb_le(jan01_wday, 4)) && ($neqeq(jan01_wday, 0)))) {
        offset = $rb_minus(jan01_wday, 1)
      } else {
        
        offset = $rb_minus($rb_minus(jan01_wday, 7), 1);
        if ($eqeq(offset, -8)) {
          offset = -1
        };
      };
      week = $rb_divide($rb_plus(self.$yday(), offset), 7.0).$ceil();
      if ($truthy($rb_le(week, 0))) {
        return $$$('Time').$new($rb_minus(self.$year(), 1), 12, 31).$cweek_cyear()
      } else if ($eqeq(week, 53)) {
        
        dec31 = $$$('Time').$new(self.$year(), 12, 31);
        dec31_wday = dec31.$wday();
        if (($truthy($rb_le(dec31_wday, 3)) && ($neqeq(dec31_wday, 0)))) {
          
          week = 1;
          year = $rb_plus(year, 1);
        };
      };
      return [week, year];
    }, 0);
    (function(self, $parent_nesting) {
      
      
      $alias(self, "mktime", "local");
      return $alias(self, "utc", "gm");
    })(Opal.get_singleton_class(self), $nesting);
    $alias(self, "ctime", "asctime");
    $alias(self, "dst?", "isdst");
    $alias(self, "getutc", "getgm");
    $alias(self, "gmtoff", "gmt_offset");
    $alias(self, "mday", "day");
    $alias(self, "month", "mon");
    $alias(self, "to_s", "inspect");
    $alias(self, "tv_sec", "to_i");
    $alias(self, "tv_usec", "usec");
    $alias(self, "utc", "gmtime");
    $alias(self, "utc?", "gmt?");
    return $alias(self, "utc_offset", "gmt_offset");
  })('::', Date, $nesting);
};

Opal.modules["corelib/unsupported"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $Kernel = Opal.Kernel, $klass = Opal.klass, $send = Opal.send, $slice = Opal.slice, $module = Opal.module, $def = Opal.def, $return_val = Opal.return_val, $alias = Opal.alias, $defs = Opal.defs, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('raise,warn,each,define_method,%,public,private_method_defined?,private_class_method,instance_method,instance_methods,method_defined?,private_methods');
  
  
  var warnings = {};

  function handle_unsupported_feature(message) {
    switch (Opal.config.unsupported_features_severity) {
    case 'error':
      $Kernel.$raise($$$('NotImplementedError'), message)
      break;
    case 'warning':
      warn(message)
      break;
    default: // ignore
      // noop
    }
  }

  function warn(string) {
    if (warnings[string]) {
      return;
    }

    warnings[string] = true;
    self.$warn(string);
  }
;
  (function($base, $super) {
    var self = $klass($base, $super, 'String');

    
    
    var ERROR = "String#%s not supported. Mutable String methods are not supported in Opal.";
    return $send(["<<", "capitalize!", "chomp!", "chop!", "downcase!", "gsub!", "lstrip!", "next!", "reverse!", "slice!", "squeeze!", "strip!", "sub!", "succ!", "swapcase!", "tr!", "tr_s!", "upcase!", "prepend", "[]=", "clear", "encode!", "unicode_normalize!"], 'each', [], function $String$1(method_name){var self = $String$1.$$s == null ? this : $String$1.$$s;

      
      if (method_name == null) method_name = nil;
      return $send(self, 'define_method', [method_name], function $$2($a){var $post_args, $rest_arg;

        
        $post_args = $slice.call(arguments);
        $rest_arg = $post_args;
        return $Kernel.$raise($$$('NotImplementedError'), (ERROR)['$%'](method_name));}, -1);}, {$$arity: 1, $$s: self});
  })('::', null);
  (function($base) {
    var self = $module($base, 'Kernel');

    
    
    var ERROR = "Object tainting is not supported by Opal";
    
    $def(self, '$taint', function $$taint() {
      var self = this;

      
      handle_unsupported_feature(ERROR);
      return self;
    }, 0);
    
    $def(self, '$untaint', function $$untaint() {
      var self = this;

      
      handle_unsupported_feature(ERROR);
      return self;
    }, 0);
    return $def(self, '$tainted?', function $Kernel_tainted$ques$3() {
      
      
      handle_unsupported_feature(ERROR);
      return false;
    }, 0);
  })('::');
  (function($base, $super) {
    var self = $klass($base, $super, 'Module');

    
    
    
    $def(self, '$public', function $Module_public$4($a) {
      var $post_args, methods, self = this;

      
      $post_args = $slice.call(arguments);
      methods = $post_args;
      
      if (methods.length === 0) {
        self.$$module_function = false;
        return nil;
      }
      return (methods.length === 1) ? methods[0] : methods;
    ;
    }, -1);
    
    $def(self, '$private_class_method', function $$private_class_method($a) {
      var $post_args, methods;

      
      $post_args = $slice.call(arguments);
      methods = $post_args;
      return (methods.length === 1) ? methods[0] : methods;;
    }, -1);
    
    $def(self, '$private_method_defined?', $return_val(false), 0);
    
    $def(self, '$private_constant', function $$private_constant($a) {
      var $post_args, $rest_arg;

      
      $post_args = $slice.call(arguments);
      $rest_arg = $post_args;
      return nil;
    }, -1);
    $alias(self, "nesting", "public");
    $alias(self, "private", "public");
    $alias(self, "protected", "public");
    $alias(self, "protected_method_defined?", "private_method_defined?");
    $alias(self, "public_class_method", "private_class_method");
    $alias(self, "public_instance_method", "instance_method");
    $alias(self, "public_instance_methods", "instance_methods");
    return $alias(self, "public_method_defined?", "method_defined?");
  })('::', null);
  (function($base) {
    var self = $module($base, 'Kernel');

    
    
    
    $def(self, '$private_methods', function $$private_methods($a) {
      var $post_args, methods;

      
      $post_args = $slice.call(arguments);
      methods = $post_args;
      return [];
    }, -1);
    $alias(self, "protected_methods", "private_methods");
    $alias(self, "private_instance_methods", "private_methods");
    return $alias(self, "protected_instance_methods", "private_methods");
  })('::');
  (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return $def(self, '$eval', function $Kernel_eval$5($a) {
      var $post_args, $rest_arg;

      
      $post_args = $slice.call(arguments);
      $rest_arg = $post_args;
      return $Kernel.$raise($$$('NotImplementedError'), "To use Kernel#eval, you must first require 'opal-parser'. " + ("See https://github.com/opal/opal/blob/" + ($$('RUBY_ENGINE_VERSION')) + "/docs/opal_parser.md for details."));
    }, -1)
  })('::', $nesting);
  $defs(self, '$public', function $public$6($a) {
    var $post_args, methods;

    
    $post_args = $slice.call(arguments);
    methods = $post_args;
    return (methods.length === 1) ? methods[0] : methods;;
  }, -1);
  return $defs(self, '$private', function $private$7($a) {
    var $post_args, methods;

    
    $post_args = $slice.call(arguments);
    methods = $post_args;
    return (methods.length === 1) ? methods[0] : methods;;
  }, -1);
};

Opal.modules["corelib/string/encoding"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $klass = Opal.klass, $hash2 = Opal.hash2, $rb_plus = Opal.rb_plus, $truthy = Opal.truthy, $send = Opal.send, $defs = Opal.defs, $eqeq = Opal.eqeq, $def = Opal.def, $return_ivar = Opal.return_ivar, $return_val = Opal.return_val, $slice = Opal.slice, $Kernel = Opal.Kernel, $Opal = Opal.Opal, $rb_lt = Opal.rb_lt, $a, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,+,[],clone,initialize,new,instance_eval,to_proc,each,const_set,tr,==,default_external,attr_accessor,singleton_class,attr_reader,raise,register,length,bytes,force_encoding,dup,bytesize,enum_for,each_byte,to_a,each_char,each_codepoint,coerce_to!,find,<,default_external=');
  
  self.$require("corelib/string");
  (function($base, $super) {
    var self = $klass($base, $super, 'Encoding');

    var $proto = self.$$prototype;

    $proto.name = $proto.dummy = nil;
    
    $defs(self, '$register', function $$register(name, options) {
      var block = $$register.$$p || nil, self = this, names = nil, $ret_or_1 = nil, ascii = nil, dummy = nil, encoding = nil, register = nil;

      $$register.$$p = null;
      
      ;
      if (options == null) options = $hash2([], {});
      names = $rb_plus([name], ($truthy(($ret_or_1 = options['$[]']("aliases"))) ? ($ret_or_1) : ([])));
      ascii = ($truthy(($ret_or_1 = options['$[]']("ascii"))) && ($ret_or_1));
      dummy = ($truthy(($ret_or_1 = options['$[]']("dummy"))) && ($ret_or_1));
      if ($truthy(options['$[]']("inherits"))) {
        
        encoding = options['$[]']("inherits").$clone();
        encoding.$initialize(name, names, ascii, dummy);
      } else {
        encoding = self.$new(name, names, ascii, dummy)
      };
      if ((block !== nil)) {
        $send(encoding, 'instance_eval', [], block.$to_proc())
      };
      register = Opal.encodings;
      return $send(names, 'each', [], function $$1(encoding_name){var self = $$1.$$s == null ? this : $$1.$$s;

        
        if (encoding_name == null) encoding_name = nil;
        self.$const_set(encoding_name.$tr("-", "_"), encoding);
        return register[encoding_name] = encoding;}, {$$arity: 1, $$s: self});
    }, -2);
    $defs(self, '$find', function $$find(name) {
      var self = this;

      
      if ($eqeq(name, "default_external")) {
        return self.$default_external()
      };
      return Opal.find_encoding(name);;
    }, 1);
    self.$singleton_class().$attr_accessor("default_external");
    self.$attr_reader("name", "names");
    
    $def(self, '$initialize', function $$initialize(name, names, ascii, dummy) {
      var self = this;

      
      self.name = name;
      self.names = names;
      self.ascii = ascii;
      return (self.dummy = dummy);
    }, 4);
    
    $def(self, '$ascii_compatible?', $return_ivar("ascii"), 0);
    
    $def(self, '$dummy?', $return_ivar("dummy"), 0);
    
    $def(self, '$binary?', $return_val(false), 0);
    
    $def(self, '$to_s', $return_ivar("name"), 0);
    
    $def(self, '$inspect', function $$inspect() {
      var self = this;

      return "#<Encoding:" + (self.name) + (($truthy(self.dummy) ? (" (dummy)") : nil)) + ">"
    }, 0);
    
    $def(self, '$charsize', function $$charsize(string) {
      
      
      var len = 0;
      for (var i = 0, length = string.length; i < length; i++) {
        var charcode = string.charCodeAt(i);
        if (!(charcode >= 0xD800 && charcode <= 0xDBFF)) {
          len++;
        }
      }
      return len;
    
    }, 1);
    
    $def(self, '$each_char', function $$each_char(string) {
      var block = $$each_char.$$p || nil;

      $$each_char.$$p = null;
      
      ;
      
      var low_surrogate = "";
      for (var i = 0, length = string.length; i < length; i++) {
        var charcode = string.charCodeAt(i);
        var chr = string.charAt(i);
        if (charcode >= 0xDC00 && charcode <= 0xDFFF) {
          low_surrogate = chr;
          continue;
        }
        else if (charcode >= 0xD800 && charcode <= 0xDBFF) {
          chr = low_surrogate + chr;
        }
        if (string.encoding.name != "UTF-8") {
          chr = new String(chr);
          chr.encoding = string.encoding;
        }
        Opal.yield1(block, chr);
      }
    ;
    }, 1);
    
    $def(self, '$each_byte', function $$each_byte($a) {
      var $post_args, $rest_arg;

      
      $post_args = $slice.call(arguments);
      $rest_arg = $post_args;
      return $Kernel.$raise($$$('NotImplementedError'));
    }, -1);
    
    $def(self, '$bytesize', function $$bytesize($a) {
      var $post_args, $rest_arg;

      
      $post_args = $slice.call(arguments);
      $rest_arg = $post_args;
      return $Kernel.$raise($$$('NotImplementedError'));
    }, -1);
    $klass('::', $$$('StandardError'), 'EncodingError');
    return ($klass('::', $$$('EncodingError'), 'CompatibilityError'), nil);
  })('::', null);
  $send($$$('Encoding'), 'register', ["UTF-8", $hash2(["aliases", "ascii"], {"aliases": ["CP65001"], "ascii": true})], function $$2(){var self = $$2.$$s == null ? this : $$2.$$s;

    
    
    $def(self, '$each_byte', function $$each_byte(string) {
      var block = $$each_byte.$$p || nil;

      $$each_byte.$$p = null;
      
      ;
      
      // Taken from: https://github.com/feross/buffer/blob/f52dffd9df0445b93c0c9065c2f8f0f46b2c729a/index.js#L1954-L2032
      var units = Infinity;
      var codePoint;
      var length = string.length;
      var leadSurrogate = null;

      for (var i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i);

        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
          // last char was a lead
          if (!leadSurrogate) {
            // no lead yet
            if (codePoint > 0xDBFF) {
              // unexpected trail
              if ((units -= 3) > -1) {
                Opal.yield1(block, 0xEF);
                Opal.yield1(block, 0xBF);
                Opal.yield1(block, 0xBD);
              }
              continue;
            } else if (i + 1 === length) {
              // unpaired lead
              if ((units -= 3) > -1) {
                Opal.yield1(block, 0xEF);
                Opal.yield1(block, 0xBF);
                Opal.yield1(block, 0xBD);
              }
              continue;
            }

            // valid lead
            leadSurrogate = codePoint;

            continue;
          }

          // 2 leads in a row
          if (codePoint < 0xDC00) {
            if ((units -= 3) > -1) {
              Opal.yield1(block, 0xEF);
              Opal.yield1(block, 0xBF);
              Opal.yield1(block, 0xBD);
            }
            leadSurrogate = codePoint;
            continue;
          }

          // valid surrogate pair
          codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) {
          // valid bmp char, but last char was a lead
          if ((units -= 3) > -1) {
            Opal.yield1(block, 0xEF);
            Opal.yield1(block, 0xBF);
            Opal.yield1(block, 0xBD);
          }
        }

        leadSurrogate = null;

        // encode utf8
        if (codePoint < 0x80) {
          if ((units -= 1) < 0) break;
          Opal.yield1(block, codePoint);
        } else if (codePoint < 0x800) {
          if ((units -= 2) < 0) break;
          Opal.yield1(block, codePoint >> 0x6 | 0xC0);
          Opal.yield1(block, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
          if ((units -= 3) < 0) break;
          Opal.yield1(block, codePoint >> 0xC | 0xE0);
          Opal.yield1(block, codePoint >> 0x6 & 0x3F | 0x80);
          Opal.yield1(block, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
          if ((units -= 4) < 0) break;
          Opal.yield1(block, codePoint >> 0x12 | 0xF0);
          Opal.yield1(block, codePoint >> 0xC & 0x3F | 0x80);
          Opal.yield1(block, codePoint >> 0x6 & 0x3F | 0x80);
          Opal.yield1(block, codePoint & 0x3F | 0x80);
        } else {
          // Invalid code point
        }
      }
    ;
    }, 1);
    return $def(self, '$bytesize', function $$bytesize(string) {
      
      return string.$bytes().$length()
    }, 1);}, {$$arity: 0, $$s: self});
  $send($$$('Encoding'), 'register', ["UTF-16LE"], function $$3(){var self = $$3.$$s == null ? this : $$3.$$s;

    
    
    $def(self, '$each_byte', function $$each_byte(string) {
      var block = $$each_byte.$$p || nil;

      $$each_byte.$$p = null;
      
      ;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);

        Opal.yield1(block, code & 0xff);
        Opal.yield1(block, code >> 8);
      }
    ;
    }, 1);
    return $def(self, '$bytesize', function $$bytesize(string) {
      
      return string.length * 2;
    }, 1);}, {$$arity: 0, $$s: self});
  $send($$$('Encoding'), 'register', ["UTF-16BE", $hash2(["inherits"], {"inherits": $$$($$$('Encoding'), 'UTF_16LE')})], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s;

    return $def(self, '$each_byte', function $$each_byte(string) {
      var block = $$each_byte.$$p || nil;

      $$each_byte.$$p = null;
      
      ;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);

        Opal.yield1(block, code >> 8);
        Opal.yield1(block, code & 0xff);
      }
    ;
    }, 1)}, {$$arity: 0, $$s: self});
  $send($$$('Encoding'), 'register', ["UTF-32LE"], function $$5(){var self = $$5.$$s == null ? this : $$5.$$s;

    
    
    $def(self, '$each_byte', function $$each_byte(string) {
      var block = $$each_byte.$$p || nil;

      $$each_byte.$$p = null;
      
      ;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);

        Opal.yield1(block, code & 0xff);
        Opal.yield1(block, code >> 8);
        Opal.yield1(block, 0);
        Opal.yield1(block, 0);
      }
    ;
    }, 1);
    return $def(self, '$bytesize', function $$bytesize(string) {
      
      return string.length * 4;
    }, 1);}, {$$arity: 0, $$s: self});
  $send($$$('Encoding'), 'register', ["UTF-32BE", $hash2(["inherits"], {"inherits": $$$($$$('Encoding'), 'UTF_32LE')})], function $$6(){var self = $$6.$$s == null ? this : $$6.$$s;

    return $def(self, '$each_byte', function $$each_byte(string) {
      var block = $$each_byte.$$p || nil;

      $$each_byte.$$p = null;
      
      ;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);

        Opal.yield1(block, 0);
        Opal.yield1(block, 0);
        Opal.yield1(block, code >> 8);
        Opal.yield1(block, code & 0xff);
      }
    ;
    }, 1)}, {$$arity: 0, $$s: self});
  $send($$$('Encoding'), 'register', ["ASCII-8BIT", $hash2(["aliases", "ascii"], {"aliases": ["BINARY"], "ascii": true})], function $$7(){var self = $$7.$$s == null ? this : $$7.$$s;

    
    
    $def(self, '$each_char', function $$each_char(string) {
      var block = $$each_char.$$p || nil;

      $$each_char.$$p = null;
      
      ;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var chr = new String(string.charAt(i));
        chr.encoding = string.encoding;
        Opal.yield1(block, chr);
      }
    ;
    }, 1);
    
    $def(self, '$charsize', function $$charsize(string) {
      
      return string.length;
    }, 1);
    
    $def(self, '$each_byte', function $$each_byte(string) {
      var block = $$each_byte.$$p || nil;

      $$each_byte.$$p = null;
      
      ;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);
        Opal.yield1(block, code & 0xff);
      }
    ;
    }, 1);
    
    $def(self, '$bytesize', function $$bytesize(string) {
      
      return string.length;
    }, 1);
    return $def(self, '$binary?', $return_val(true), 0);}, {$$arity: 0, $$s: self});
  $$$('Encoding').$register("ISO-8859-1", $hash2(["aliases", "ascii", "inherits"], {"aliases": ["ISO8859-1"], "ascii": true, "inherits": $$$($$$('Encoding'), 'ASCII_8BIT')}));
  $$$('Encoding').$register("US-ASCII", $hash2(["aliases", "ascii", "inherits"], {"aliases": ["ASCII"], "ascii": true, "inherits": $$$($$$('Encoding'), 'ASCII_8BIT')}));
  (function($base, $super) {
    var self = $klass($base, $super, 'String');

    var $proto = self.$$prototype;

    $proto.internal_encoding = $proto.bytes = $proto.encoding = nil;
    
    self.$attr_reader("encoding");
    self.$attr_reader("internal_encoding");
    Opal.prop(String.prototype, 'bytes', nil);
    Opal.prop(String.prototype, 'encoding', $$$($$$('Encoding'), 'UTF_8'));
    Opal.prop(String.prototype, 'internal_encoding', $$$($$$('Encoding'), 'UTF_8'));
    
    $def(self, '$b', function $$b() {
      var self = this;

      return self.$dup().$force_encoding("binary")
    }, 0);
    
    $def(self, '$bytesize', function $$bytesize() {
      var self = this;

      return self.internal_encoding.$bytesize(self)
    }, 0);
    
    $def(self, '$each_byte', function $$each_byte() {
      var block = $$each_byte.$$p || nil, self = this;

      $$each_byte.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return $send(self, 'enum_for', ["each_byte"], function $$8(){var self = $$8.$$s == null ? this : $$8.$$s;

          return self.$bytesize()}, {$$arity: 0, $$s: self})
      };
      $send(self.internal_encoding, 'each_byte', [self], block.$to_proc());
      return self;
    }, 0);
    
    $def(self, '$bytes', function $$bytes() {
      var self = this, $ret_or_1 = nil;

      
      
      if (typeof self === 'string') {
        return (new String(self)).$each_byte().$to_a();
      }
    ;
      self.bytes = ($truthy(($ret_or_1 = self.bytes)) ? ($ret_or_1) : (self.$each_byte().$to_a()));
      return self.bytes.$dup();
    }, 0);
    
    $def(self, '$each_char', function $$each_char() {
      var block = $$each_char.$$p || nil, self = this;

      $$each_char.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return $send(self, 'enum_for', ["each_char"], function $$9(){var self = $$9.$$s == null ? this : $$9.$$s;

          return self.$length()}, {$$arity: 0, $$s: self})
      };
      $send(self.encoding, 'each_char', [self], block.$to_proc());
      return self;
    }, 0);
    
    $def(self, '$chars', function $$chars() {
      var block = $$chars.$$p || nil, self = this;

      $$chars.$$p = null;
      
      ;
      if (!$truthy(block)) {
        return self.$each_char().$to_a()
      };
      return $send(self, 'each_char', [], block.$to_proc());
    }, 0);
    
    $def(self, '$each_codepoint', function $$each_codepoint() {
      var block = $$each_codepoint.$$p || nil, self = this;

      $$each_codepoint.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return self.$enum_for("each_codepoint")
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        Opal.yield1(block, self.codePointAt(i));
      }
    ;
      return self;
    }, 0);
    
    $def(self, '$codepoints', function $$codepoints() {
      var block = $$codepoints.$$p || nil, self = this;

      $$codepoints.$$p = null;
      
      ;
      if ((block !== nil)) {
        return $send(self, 'each_codepoint', [], block.$to_proc())
      };
      return self.$each_codepoint().$to_a();
    }, 0);
    
    $def(self, '$encode', function $$encode(encoding) {
      var self = this;

      return Opal.enc(self, encoding);
    }, 1);
    
    $def(self, '$force_encoding', function $$force_encoding(encoding) {
      var self = this;

      
      var str = self;

      if (encoding === str.encoding) { return str; }

      encoding = $Opal['$coerce_to!'](encoding, $$$('String'), "to_s");
      encoding = $$$('Encoding').$find(encoding);

      if (encoding === str.encoding) { return str; }

      str = Opal.set_encoding(str, encoding);

      return str;
    
    }, 1);
    
    $def(self, '$getbyte', function $$getbyte(idx) {
      var self = this, string_bytes = nil;

      
      string_bytes = self.$bytes();
      idx = $Opal['$coerce_to!'](idx, $$$('Integer'), "to_int");
      if ($truthy($rb_lt(string_bytes.$length(), idx))) {
        return nil
      };
      return string_bytes['$[]'](idx);
    }, 1);
    
    $def(self, '$initialize_copy', function $$initialize_copy(other) {
      
      return "\n" + "      self.encoding = other.encoding;\n" + "      self.internal_encoding = other.internal_encoding;\n" + "    "
    }, 1);
    return $def(self, '$valid_encoding?', $return_val(true), 0);
  })('::', null);
  return ($a = [$$$($$('Encoding'), 'UTF_8')], $send($$$('Encoding'), 'default_external=', $a), $a[$a.length - 1]);
};

Opal.modules["corelib/rational"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $klass = Opal.klass, $eqeq = Opal.eqeq, $Kernel = Opal.Kernel, $truthy = Opal.truthy, $rb_lt = Opal.rb_lt, $rb_divide = Opal.rb_divide, $defs = Opal.defs, $eqeqeq = Opal.eqeqeq, $not = Opal.not, $Opal = Opal.Opal, $def = Opal.def, $return_ivar = Opal.return_ivar, $rb_minus = Opal.rb_minus, $rb_times = Opal.rb_times, $rb_plus = Opal.rb_plus, $rb_gt = Opal.rb_gt, $rb_le = Opal.rb_le, $return_self = Opal.return_self, $alias = Opal.alias, self = Opal.top, nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,to_i,==,raise,<,-@,new,gcd,/,nil?,===,reduce,to_r,!,equal?,coerce_to!,freeze,to_f,numerator,denominator,<=>,-,*,__coerced__,+,Rational,>,**,abs,ceil,with_precision,floor,<=,truncate,send');
  
  self.$require("corelib/numeric");
  self.$require("corelib/rational/base");
  return (function($base, $super) {
    var self = $klass($base, $super, 'Rational');

    var $proto = self.$$prototype;

    $proto.num = $proto.den = nil;
    
    $defs(self, '$reduce', function $$reduce(num, den) {
      var self = this, gcd = nil;

      
      num = num.$to_i();
      den = den.$to_i();
      if ($eqeq(den, 0)) {
        $Kernel.$raise($$$('ZeroDivisionError'), "divided by 0")
      } else if ($truthy($rb_lt(den, 0))) {
        
        num = num['$-@']();
        den = den['$-@']();
      } else if ($eqeq(den, 1)) {
        return self.$new(num, den)
      };
      gcd = num.$gcd(den);
      return self.$new($rb_divide(num, gcd), $rb_divide(den, gcd));
    }, 2);
    $defs(self, '$convert', function $$convert(num, den) {
      var self = this;

      
      if (($truthy(num['$nil?']()) || ($truthy(den['$nil?']())))) {
        $Kernel.$raise($$$('TypeError'), "cannot convert nil into Rational")
      };
      if (($eqeqeq($$$('Integer'), num) && ($eqeqeq($$$('Integer'), den)))) {
        return self.$reduce(num, den)
      };
      if ((($eqeqeq($$$('Float'), num) || ($eqeqeq($$$('String'), num))) || ($eqeqeq($$$('Complex'), num)))) {
        num = num.$to_r()
      };
      if ((($eqeqeq($$$('Float'), den) || ($eqeqeq($$$('String'), den))) || ($eqeqeq($$$('Complex'), den)))) {
        den = den.$to_r()
      };
      if (($truthy(den['$equal?'](1)) && ($not($$$('Integer')['$==='](num))))) {
        return $Opal['$coerce_to!'](num, $$$('Rational'), "to_r")
      } else if (($eqeqeq($$$('Numeric'), num) && ($eqeqeq($$$('Numeric'), den)))) {
        return $rb_divide(num, den)
      } else {
        return self.$reduce(num, den)
      };
    }, 2);
    
    $def(self, '$initialize', function $$initialize(num, den) {
      var self = this;

      
      self.num = num;
      self.den = den;
      return self.$freeze();
    }, 2);
    
    $def(self, '$numerator', $return_ivar("num"), 0);
    
    $def(self, '$denominator', $return_ivar("den"), 0);
    
    $def(self, '$coerce', function $$coerce(other) {
      var self = this, $ret_or_1 = nil;

      if ($eqeqeq($$$('Rational'), ($ret_or_1 = other))) {
        return [other, self]
      } else if ($eqeqeq($$$('Integer'), $ret_or_1)) {
        return [other.$to_r(), self]
      } else if ($eqeqeq($$$('Float'), $ret_or_1)) {
        return [other, self.$to_f()]
      } else {
        return nil
      }
    }, 1);
    
    $def(self, '$==', function $Rational_$eq_eq$1(other) {
      var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

      if ($eqeqeq($$$('Rational'), ($ret_or_1 = other))) {
        if ($truthy(($ret_or_2 = self.num['$=='](other.$numerator())))) {
          return self.den['$=='](other.$denominator())
        } else {
          return $ret_or_2
        }
      } else if ($eqeqeq($$$('Integer'), $ret_or_1)) {
        if ($truthy(($ret_or_2 = self.num['$=='](other)))) {
          return self.den['$=='](1)
        } else {
          return $ret_or_2
        }
      } else if ($eqeqeq($$$('Float'), $ret_or_1)) {
        return self.$to_f()['$=='](other)
      } else {
        return other['$=='](self)
      }
    }, 1);
    
    $def(self, '$<=>', function $Rational_$lt_eq_gt$2(other) {
      var self = this, $ret_or_1 = nil;

      if ($eqeqeq($$$('Rational'), ($ret_or_1 = other))) {
        return $rb_minus($rb_times(self.num, other.$denominator()), $rb_times(self.den, other.$numerator()))['$<=>'](0)
      } else if ($eqeqeq($$$('Integer'), $ret_or_1)) {
        return $rb_minus(self.num, $rb_times(self.den, other))['$<=>'](0)
      } else if ($eqeqeq($$$('Float'), $ret_or_1)) {
        return self.$to_f()['$<=>'](other)
      } else {
        return self.$__coerced__("<=>", other)
      }
    }, 1);
    
    $def(self, '$+', function $Rational_$plus$3(other) {
      var self = this, $ret_or_1 = nil, num = nil, den = nil;

      if ($eqeqeq($$$('Rational'), ($ret_or_1 = other))) {
        
        num = $rb_plus($rb_times(self.num, other.$denominator()), $rb_times(self.den, other.$numerator()));
        den = $rb_times(self.den, other.$denominator());
        return $Kernel.$Rational(num, den);
      } else if ($eqeqeq($$$('Integer'), $ret_or_1)) {
        return $Kernel.$Rational($rb_plus(self.num, $rb_times(other, self.den)), self.den)
      } else if ($eqeqeq($$$('Float'), $ret_or_1)) {
        return $rb_plus(self.$to_f(), other)
      } else {
        return self.$__coerced__("+", other)
      }
    }, 1);
    
    $def(self, '$-', function $Rational_$minus$4(other) {
      var self = this, $ret_or_1 = nil, num = nil, den = nil;

      if ($eqeqeq($$$('Rational'), ($ret_or_1 = other))) {
        
        num = $rb_minus($rb_times(self.num, other.$denominator()), $rb_times(self.den, other.$numerator()));
        den = $rb_times(self.den, other.$denominator());
        return $Kernel.$Rational(num, den);
      } else if ($eqeqeq($$$('Integer'), $ret_or_1)) {
        return $Kernel.$Rational($rb_minus(self.num, $rb_times(other, self.den)), self.den)
      } else if ($eqeqeq($$$('Float'), $ret_or_1)) {
        return $rb_minus(self.$to_f(), other)
      } else {
        return self.$__coerced__("-", other)
      }
    }, 1);
    
    $def(self, '$*', function $Rational_$$5(other) {
      var self = this, $ret_or_1 = nil, num = nil, den = nil;

      if ($eqeqeq($$$('Rational'), ($ret_or_1 = other))) {
        
        num = $rb_times(self.num, other.$numerator());
        den = $rb_times(self.den, other.$denominator());
        return $Kernel.$Rational(num, den);
      } else if ($eqeqeq($$$('Integer'), $ret_or_1)) {
        return $Kernel.$Rational($rb_times(self.num, other), self.den)
      } else if ($eqeqeq($$$('Float'), $ret_or_1)) {
        return $rb_times(self.$to_f(), other)
      } else {
        return self.$__coerced__("*", other)
      }
    }, 1);
    
    $def(self, '$/', function $Rational_$slash$6(other) {
      var self = this, $ret_or_1 = nil, num = nil, den = nil;

      if ($eqeqeq($$$('Rational'), ($ret_or_1 = other))) {
        
        num = $rb_times(self.num, other.$denominator());
        den = $rb_times(self.den, other.$numerator());
        return $Kernel.$Rational(num, den);
      } else if ($eqeqeq($$$('Integer'), $ret_or_1)) {
        if ($eqeq(other, 0)) {
          return $rb_divide(self.$to_f(), 0.0)
        } else {
          return $Kernel.$Rational(self.num, $rb_times(self.den, other))
        }
      } else if ($eqeqeq($$$('Float'), $ret_or_1)) {
        return $rb_divide(self.$to_f(), other)
      } else {
        return self.$__coerced__("/", other)
      }
    }, 1);
    
    $def(self, '$**', function $Rational_$$$7(other) {
      var self = this, $ret_or_1 = nil;

      if ($eqeqeq($$$('Integer'), ($ret_or_1 = other))) {
        if (($eqeq(self, 0) && ($truthy($rb_lt(other, 0))))) {
          return $$$($$$('Float'), 'INFINITY')
        } else if ($truthy($rb_gt(other, 0))) {
          return $Kernel.$Rational(self.num['$**'](other), self.den['$**'](other))
        } else if ($truthy($rb_lt(other, 0))) {
          return $Kernel.$Rational(self.den['$**'](other['$-@']()), self.num['$**'](other['$-@']()))
        } else {
          return $Kernel.$Rational(1, 1)
        }
      } else if ($eqeqeq($$$('Float'), $ret_or_1)) {
        return self.$to_f()['$**'](other)
      } else if ($eqeqeq($$$('Rational'), $ret_or_1)) {
        if ($eqeq(other, 0)) {
          return $Kernel.$Rational(1, 1)
        } else if ($eqeq(other.$denominator(), 1)) {
          if ($truthy($rb_lt(other, 0))) {
            return $Kernel.$Rational(self.den['$**'](other.$numerator().$abs()), self.num['$**'](other.$numerator().$abs()))
          } else {
            return $Kernel.$Rational(self.num['$**'](other.$numerator()), self.den['$**'](other.$numerator()))
          }
        } else if (($eqeq(self, 0) && ($truthy($rb_lt(other, 0))))) {
          return $Kernel.$raise($$$('ZeroDivisionError'), "divided by 0")
        } else {
          return self.$to_f()['$**'](other)
        }
      } else {
        return self.$__coerced__("**", other)
      }
    }, 1);
    
    $def(self, '$abs', function $$abs() {
      var self = this;

      return $Kernel.$Rational(self.num.$abs(), self.den.$abs())
    }, 0);
    
    $def(self, '$ceil', function $$ceil(precision) {
      var self = this;

      
      if (precision == null) precision = 0;
      if ($eqeq(precision, 0)) {
        return $rb_divide(self.num['$-@'](), self.den)['$-@']().$ceil()
      } else {
        return self.$with_precision("ceil", precision)
      };
    }, -1);
    
    $def(self, '$floor', function $$floor(precision) {
      var self = this;

      
      if (precision == null) precision = 0;
      if ($eqeq(precision, 0)) {
        return $rb_divide(self.num['$-@'](), self.den)['$-@']().$floor()
      } else {
        return self.$with_precision("floor", precision)
      };
    }, -1);
    
    $def(self, '$hash', function $$hash() {
      var self = this;

      return "Rational:" + (self.num) + ":" + (self.den)
    }, 0);
    
    $def(self, '$inspect', function $$inspect() {
      var self = this;

      return "(" + (self) + ")"
    }, 0);
    
    $def(self, '$rationalize', function $$rationalize(eps) {
      var self = this;

      
      ;
      
      if (arguments.length > 1) {
        $Kernel.$raise($$$('ArgumentError'), "wrong number of arguments (" + (arguments.length) + " for 0..1)");
      }

      if (eps == null) {
        return self;
      }

      var e = eps.$abs(),
          a = $rb_minus(self, e),
          b = $rb_plus(self, e);

      var p0 = 0,
          p1 = 1,
          q0 = 1,
          q1 = 0,
          p2, q2;

      var c, k, t;

      while (true) {
        c = (a).$ceil();

        if ($rb_le(c, b)) {
          break;
        }

        k  = c - 1;
        p2 = k * p1 + p0;
        q2 = k * q1 + q0;
        t  = $rb_divide(1, $rb_minus(b, k));
        b  = $rb_divide(1, $rb_minus(a, k));
        a  = t;

        p0 = p1;
        q0 = q1;
        p1 = p2;
        q1 = q2;
      }

      return $Kernel.$Rational(c * p1 + p0, c * q1 + q0);
    ;
    }, -1);
    
    $def(self, '$round', function $$round(precision) {
      var self = this, num = nil, den = nil, approx = nil;

      
      if (precision == null) precision = 0;
      if (!$eqeq(precision, 0)) {
        return self.$with_precision("round", precision)
      };
      if ($eqeq(self.num, 0)) {
        return 0
      };
      if ($eqeq(self.den, 1)) {
        return self.num
      };
      num = $rb_plus($rb_times(self.num.$abs(), 2), self.den);
      den = $rb_times(self.den, 2);
      approx = $rb_divide(num, den).$truncate();
      if ($truthy($rb_lt(self.num, 0))) {
        return approx['$-@']()
      } else {
        return approx
      };
    }, -1);
    
    $def(self, '$to_f', function $$to_f() {
      var self = this;

      return $rb_divide(self.num, self.den)
    }, 0);
    
    $def(self, '$to_i', function $$to_i() {
      var self = this;

      return self.$truncate()
    }, 0);
    
    $def(self, '$to_r', $return_self, 0);
    
    $def(self, '$to_s', function $$to_s() {
      var self = this;

      return "" + (self.num) + "/" + (self.den)
    }, 0);
    
    $def(self, '$truncate', function $$truncate(precision) {
      var self = this;

      
      if (precision == null) precision = 0;
      if ($eqeq(precision, 0)) {
        if ($truthy($rb_lt(self.num, 0))) {
          return self.$ceil()
        } else {
          return self.$floor()
        }
      } else {
        return self.$with_precision("truncate", precision)
      };
    }, -1);
    
    $def(self, '$with_precision', function $$with_precision(method, precision) {
      var self = this, p = nil, s = nil;

      
      if (!$eqeqeq($$$('Integer'), precision)) {
        $Kernel.$raise($$$('TypeError'), "not an Integer")
      };
      p = (10)['$**'](precision);
      s = $rb_times(self, p);
      if ($truthy($rb_lt(precision, 1))) {
        return $rb_divide(s.$send(method), p).$to_i()
      } else {
        return $Kernel.$Rational(s.$send(method), p)
      };
    }, 2);
    $defs(self, '$from_string', function $$from_string(string) {
      
      
      var str = string.trimLeft(),
          re = /^[+-]?[\d_]+(\.[\d_]+)?/,
          match = str.match(re),
          numerator, denominator;

      function isFloat() {
        return re.test(str);
      }

      function cutFloat() {
        var match = str.match(re);
        var number = match[0];
        str = str.slice(number.length);
        return number.replace(/_/g, '');
      }

      if (isFloat()) {
        numerator = parseFloat(cutFloat());

        if (str[0] === '/') {
          // rational real part
          str = str.slice(1);

          if (isFloat()) {
            denominator = parseFloat(cutFloat());
            return $Kernel.$Rational(numerator, denominator);
          } else {
            return $Kernel.$Rational(numerator, 1);
          }
        } else {
          return $Kernel.$Rational(numerator, 1);
        }
      } else {
        return $Kernel.$Rational(0, 1);
      }
    
    }, 1);
    $alias(self, "divide", "/");
    return $alias(self, "quo", "/");
  })('::', $$$('Numeric'));
};

Opal.modules["corelib/random"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $truthy = Opal.truthy, $klass = Opal.klass, $Kernel = Opal.Kernel, $defs = Opal.defs, $Opal = Opal.Opal, $def = Opal.def, $eqeqeq = Opal.eqeqeq, $send = Opal.send, self = Opal.top, nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,attr_reader,to_int,raise,new_seed,coerce_to!,reseed,rand,seed,bytes,===,==,state,_verify_count,encode,join,new,chr,random_number,random_float,const_defined?,const_set');
  
  self.$require("corelib/random/formatter");
  (function($base, $super) {
    var self = $klass($base, $super, 'Random');

    
    
    self.$attr_reader("seed", "state");
    $defs(self, '$_verify_count', function $$_verify_count(count) {
      
      
      if (!$truthy(count)) count = 16;
      if (typeof count !== "number") count = (count).$to_int();
      if (count < 0) $Kernel.$raise($$$('ArgumentError'), "negative string size (or size too big)");
      count = Math.floor(count);
      return count;
    
    }, 1);
    
    $def(self, '$initialize', function $$initialize(seed) {
      var self = this;

      
      if (seed == null) seed = $$$('Random').$new_seed();
      seed = $Opal['$coerce_to!'](seed, $$$('Integer'), "to_int");
      self.state = seed;
      return self.$reseed(seed);
    }, -1);
    
    $def(self, '$reseed', function $$reseed(seed) {
      var self = this;

      
      self.seed = seed;
      return self.$rng = Opal.$$rand.reseed(seed);;
    }, 1);
    $defs(self, '$new_seed', function $$new_seed() {
      
      return Opal.$$rand.new_seed();
    }, 0);
    $defs(self, '$rand', function $$rand(limit) {
      var self = this;

      
      ;
      return $$$(self, 'DEFAULT').$rand(limit);
    }, -1);
    $defs(self, '$srand', function $$srand(n) {
      var self = this, previous_seed = nil;

      
      if (n == null) n = $$$('Random').$new_seed();
      n = $Opal['$coerce_to!'](n, $$$('Integer'), "to_int");
      previous_seed = $$$(self, 'DEFAULT').$seed();
      $$$(self, 'DEFAULT').$reseed(n);
      return previous_seed;
    }, -1);
    $defs(self, '$urandom', function $$urandom(size) {
      
      return $$$('SecureRandom').$bytes(size)
    }, 1);
    
    $def(self, '$==', function $Random_$eq_eq$1(other) {
      var self = this, $ret_or_1 = nil;

      
      if (!$eqeqeq($$$('Random'), other)) {
        return false
      };
      if ($truthy(($ret_or_1 = self.$seed()['$=='](other.$seed())))) {
        return self.$state()['$=='](other.$state())
      } else {
        return $ret_or_1
      };
    }, 1);
    
    $def(self, '$bytes', function $$bytes(length) {
      var self = this;

      
      length = $$$('Random').$_verify_count(length);
      return $send($$$('Array'), 'new', [length], function $$2(){var self = $$2.$$s == null ? this : $$2.$$s;

        return self.$rand(255).$chr()}, {$$arity: 0, $$s: self}).$join().$encode("ASCII-8BIT");
    }, 1);
    $defs(self, '$bytes', function $$bytes(length) {
      var self = this;

      return $$$(self, 'DEFAULT').$bytes(length)
    }, 1);
    
    $def(self, '$rand', function $$rand(limit) {
      var self = this;

      
      ;
      return self.$random_number(limit);
    }, -1);
    
    $def(self, '$random_float', function $$random_float() {
      var self = this;

      
      self.state++;
      return Opal.$$rand.rand(self.$rng);
    
    }, 0);
    $defs(self, '$random_float', function $$random_float() {
      var self = this;

      return $$$(self, 'DEFAULT').$random_float()
    }, 0);
    return $defs(self, '$generator=', function $Random_generator$eq$3(generator) {
      var self = this;

      
      Opal.$$rand = generator;
      if ($truthy(self['$const_defined?']("DEFAULT"))) {
        return $$$(self, 'DEFAULT').$reseed()
      } else {
        return self.$const_set("DEFAULT", self.$new(self.$new_seed()))
      };
    }, 1);
  })('::', null);
  return self.$require("corelib/random/mersenne_twister");
};

Opal.modules["opal/base"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $Object = Opal.Object, nil = Opal.nil;

  Opal.add_stubs('require');
  
  $Object.$require("corelib/runtime");
  $Object.$require("corelib/helpers");
  $Object.$require("corelib/module");
  $Object.$require("corelib/class");
  $Object.$require("corelib/basic_object");
  $Object.$require("corelib/kernel");
  $Object.$require("corelib/main");
  $Object.$require("corelib/error");
  return $Object.$require("corelib/constants");
};

Opal.modules["corelib/process"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $module = Opal.module, $defs = Opal.defs, $truthy = Opal.truthy, $return_val = Opal.return_val, $Kernel = Opal.Kernel, nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('const_set,size,<<,__register_clock__,to_f,now,new,[],raise');
  return (function($base) {
    var self = $module($base, 'Process');

    var monotonic = nil;

    
    self.__clocks__ = [];
    $defs(self, '$__register_clock__', function $$__register_clock__(name, func) {
      var self = this;
      if (self.__clocks__ == null) self.__clocks__ = nil;

      
      self.$const_set(name, self.__clocks__.$size());
      return self.__clocks__['$<<'](func);
    }, 2);
    self.$__register_clock__("CLOCK_REALTIME", function() { return Date.now() });
    monotonic = false;
    
    if (Opal.global.performance) {
      monotonic = function() {
        return performance.now()
      };
    }
    else if (Opal.global.process && process.hrtime) {
      // let now be the base to get smaller numbers
      var hrtime_base = process.hrtime();

      monotonic = function() {
        var hrtime = process.hrtime(hrtime_base);
        var us = (hrtime[1] / 1000) | 0; // cut below microsecs;
        return ((hrtime[0] * 1000) + (us / 1000));
      };
    }
  ;
    if ($truthy(monotonic)) {
      self.$__register_clock__("CLOCK_MONOTONIC", monotonic)
    };
    $defs(self, '$pid', $return_val(0), 0);
    $defs(self, '$times', function $$times() {
      var t = nil;

      
      t = $$$('Time').$now().$to_f();
      return $$$($$$('Benchmark'), 'Tms').$new(t, t, t, t, t);
    }, 0);
    return $defs(self, '$clock_gettime', function $$clock_gettime(clock_id, unit) {
      var self = this, $ret_or_1 = nil, clock = nil;
      if (self.__clocks__ == null) self.__clocks__ = nil;

      
      if (unit == null) unit = "float_second";
      if ($truthy(($ret_or_1 = (clock = self.__clocks__['$[]'](clock_id))))) {
        $ret_or_1
      } else {
        $Kernel.$raise($$$($$$('Errno'), 'EINVAL'), "clock_gettime(" + (clock_id) + ") " + (self.__clocks__['$[]'](clock_id)))
      };
      
      var ms = clock();
      switch (unit) {
        case 'float_second':      return  (ms / 1000);         // number of seconds as a float (default)
        case 'float_millisecond': return  (ms / 1);            // number of milliseconds as a float
        case 'float_microsecond': return  (ms * 1000);         // number of microseconds as a float
        case 'second':            return ((ms / 1000)    | 0); // number of seconds as an integer
        case 'millisecond':       return ((ms / 1)       | 0); // number of milliseconds as an integer
        case 'microsecond':       return ((ms * 1000)    | 0); // number of microseconds as an integer
        case 'nanosecond':        return ((ms * 1000000) | 0); // number of nanoseconds as an integer
        default: $Kernel.$raise($$$('ArgumentError'), "unexpected unit: " + (unit))
      }
    ;
    }, -2);
  })('::')
};

Opal.modules["corelib/complex"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $klass = Opal.klass, $truthy = Opal.truthy, $eqeqeq = Opal.eqeqeq, $Kernel = Opal.Kernel, $defs = Opal.defs, $rb_times = Opal.rb_times, $def = Opal.def, $rb_plus = Opal.rb_plus, $rb_minus = Opal.rb_minus, $rb_divide = Opal.rb_divide, $eqeq = Opal.eqeq, $to_ary = Opal.to_ary, $rb_gt = Opal.rb_gt, $neqeq = Opal.neqeq, $return_val = Opal.return_val, $const_set = Opal.const_set, $alias = Opal.alias, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,real?,===,raise,new,*,cos,sin,attr_reader,freeze,class,==,real,imag,Complex,-@,+,__coerced__,-,nan?,/,conj,abs2,quo,polar,exp,log,>,!=,divmod,**,hypot,atan2,lcm,denominator,finite?,infinite?,numerator,abs,arg,rationalize,to_f,to_i,to_r,inspect,zero?,positive?,Rational,rect,angle');
  
  self.$require("corelib/numeric");
  self.$require("corelib/complex/base");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Complex');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.real = $proto.imag = nil;
    
    $defs(self, '$rect', function $$rect(real, imag) {
      var self = this;

      
      if (imag == null) imag = 0;
      if (!((($eqeqeq($$$('Numeric'), real) && ($truthy(real['$real?']()))) && ($eqeqeq($$$('Numeric'), imag))) && ($truthy(imag['$real?']())))) {
        $Kernel.$raise($$$('TypeError'), "not a real")
      };
      return self.$new(real, imag);
    }, -2);
    $defs(self, '$polar', function $$polar(r, theta) {
      var self = this;

      
      if (theta == null) theta = 0;
      if (!((($eqeqeq($$$('Numeric'), r) && ($truthy(r['$real?']()))) && ($eqeqeq($$$('Numeric'), theta))) && ($truthy(theta['$real?']())))) {
        $Kernel.$raise($$$('TypeError'), "not a real")
      };
      return self.$new($rb_times(r, $$$('Math').$cos(theta)), $rb_times(r, $$$('Math').$sin(theta)));
    }, -2);
    self.$attr_reader("real", "imag");
    
    $def(self, '$initialize', function $$initialize(real, imag) {
      var self = this;

      
      if (imag == null) imag = 0;
      self.real = real;
      self.imag = imag;
      return self.$freeze();
    }, -2);
    
    $def(self, '$coerce', function $$coerce(other) {
      var self = this;

      if ($eqeqeq($$$('Complex'), other)) {
        return [other, self]
      } else if (($eqeqeq($$$('Numeric'), other) && ($truthy(other['$real?']())))) {
        return [$$$('Complex').$new(other, 0), self]
      } else {
        return $Kernel.$raise($$$('TypeError'), "" + (other.$class()) + " can't be coerced into Complex")
      }
    }, 1);
    
    $def(self, '$==', function $Complex_$eq_eq$1(other) {
      var self = this, $ret_or_1 = nil;

      if ($eqeqeq($$$('Complex'), other)) {
        if ($truthy(($ret_or_1 = self.real['$=='](other.$real())))) {
          return self.imag['$=='](other.$imag())
        } else {
          return $ret_or_1
        }
      } else if (($eqeqeq($$$('Numeric'), other) && ($truthy(other['$real?']())))) {
        if ($truthy(($ret_or_1 = self.real['$=='](other)))) {
          return self.imag['$=='](0)
        } else {
          return $ret_or_1
        }
      } else {
        return other['$=='](self)
      }
    }, 1);
    
    $def(self, '$-@', function $Complex_$minus$$2() {
      var self = this;

      return $Kernel.$Complex(self.real['$-@'](), self.imag['$-@']())
    }, 0);
    
    $def(self, '$+', function $Complex_$plus$3(other) {
      var self = this;

      if ($eqeqeq($$$('Complex'), other)) {
        return $Kernel.$Complex($rb_plus(self.real, other.$real()), $rb_plus(self.imag, other.$imag()))
      } else if (($eqeqeq($$$('Numeric'), other) && ($truthy(other['$real?']())))) {
        return $Kernel.$Complex($rb_plus(self.real, other), self.imag)
      } else {
        return self.$__coerced__("+", other)
      }
    }, 1);
    
    $def(self, '$-', function $Complex_$minus$4(other) {
      var self = this;

      if ($eqeqeq($$$('Complex'), other)) {
        return $Kernel.$Complex($rb_minus(self.real, other.$real()), $rb_minus(self.imag, other.$imag()))
      } else if (($eqeqeq($$$('Numeric'), other) && ($truthy(other['$real?']())))) {
        return $Kernel.$Complex($rb_minus(self.real, other), self.imag)
      } else {
        return self.$__coerced__("-", other)
      }
    }, 1);
    
    $def(self, '$*', function $Complex_$$5(other) {
      var self = this;

      if ($eqeqeq($$$('Complex'), other)) {
        return $Kernel.$Complex($rb_minus($rb_times(self.real, other.$real()), $rb_times(self.imag, other.$imag())), $rb_plus($rb_times(self.real, other.$imag()), $rb_times(self.imag, other.$real())))
      } else if (($eqeqeq($$$('Numeric'), other) && ($truthy(other['$real?']())))) {
        return $Kernel.$Complex($rb_times(self.real, other), $rb_times(self.imag, other))
      } else {
        return self.$__coerced__("*", other)
      }
    }, 1);
    
    $def(self, '$/', function $Complex_$slash$6(other) {
      var self = this;

      if ($eqeqeq($$$('Complex'), other)) {
        if ((((($eqeqeq($$$('Number'), self.real) && ($truthy(self.real['$nan?']()))) || (($eqeqeq($$$('Number'), self.imag) && ($truthy(self.imag['$nan?']()))))) || (($eqeqeq($$$('Number'), other.$real()) && ($truthy(other.$real()['$nan?']()))))) || (($eqeqeq($$$('Number'), other.$imag()) && ($truthy(other.$imag()['$nan?']())))))) {
          return $$$('Complex').$new($$$($$$('Float'), 'NAN'), $$$($$$('Float'), 'NAN'))
        } else {
          return $rb_divide($rb_times(self, other.$conj()), other.$abs2())
        }
      } else if (($eqeqeq($$$('Numeric'), other) && ($truthy(other['$real?']())))) {
        return $Kernel.$Complex(self.real.$quo(other), self.imag.$quo(other))
      } else {
        return self.$__coerced__("/", other)
      }
    }, 1);
    
    $def(self, '$**', function $Complex_$$$7(other) {
      var $a, $b, self = this, r = nil, theta = nil, ore = nil, oim = nil, nr = nil, ntheta = nil, x = nil, z = nil, n = nil, div = nil, mod = nil;

      
      if ($eqeq(other, 0)) {
        return $$$('Complex').$new(1, 0)
      };
      if ($eqeqeq($$$('Complex'), other)) {
        
        $b = self.$polar(), $a = $to_ary($b), (r = ($a[0] == null ? nil : $a[0])), (theta = ($a[1] == null ? nil : $a[1])), $b;
        ore = other.$real();
        oim = other.$imag();
        nr = $$$('Math').$exp($rb_minus($rb_times(ore, $$$('Math').$log(r)), $rb_times(oim, theta)));
        ntheta = $rb_plus($rb_times(theta, ore), $rb_times(oim, $$$('Math').$log(r)));
        return $$$('Complex').$polar(nr, ntheta);
      } else if ($eqeqeq($$$('Integer'), other)) {
        if ($truthy($rb_gt(other, 0))) {
          
          x = self;
          z = x;
          n = $rb_minus(other, 1);
          while ($neqeq(n, 0)) {
          
            $b = n.$divmod(2), $a = $to_ary($b), (div = ($a[0] == null ? nil : $a[0])), (mod = ($a[1] == null ? nil : $a[1])), $b;
            while ($eqeq(mod, 0)) {
            
              x = $Kernel.$Complex($rb_minus($rb_times(x.$real(), x.$real()), $rb_times(x.$imag(), x.$imag())), $rb_times($rb_times(2, x.$real()), x.$imag()));
              n = div;
              $b = n.$divmod(2), $a = $to_ary($b), (div = ($a[0] == null ? nil : $a[0])), (mod = ($a[1] == null ? nil : $a[1])), $b;
            };
            z = $rb_times(z, x);
            n = $rb_minus(n, 1);
          };
          return z;
        } else {
          return $rb_divide($$$('Rational').$new(1, 1), self)['$**'](other['$-@']())
        }
      } else if (($eqeqeq($$$('Float'), other) || ($eqeqeq($$$('Rational'), other)))) {
        
        $b = self.$polar(), $a = $to_ary($b), (r = ($a[0] == null ? nil : $a[0])), (theta = ($a[1] == null ? nil : $a[1])), $b;
        return $$$('Complex').$polar(r['$**'](other), $rb_times(theta, other));
      } else {
        return self.$__coerced__("**", other)
      };
    }, 1);
    
    $def(self, '$abs', function $$abs() {
      var self = this;

      return $$$('Math').$hypot(self.real, self.imag)
    }, 0);
    
    $def(self, '$abs2', function $$abs2() {
      var self = this;

      return $rb_plus($rb_times(self.real, self.real), $rb_times(self.imag, self.imag))
    }, 0);
    
    $def(self, '$angle', function $$angle() {
      var self = this;

      return $$$('Math').$atan2(self.imag, self.real)
    }, 0);
    
    $def(self, '$conj', function $$conj() {
      var self = this;

      return $Kernel.$Complex(self.real, self.imag['$-@']())
    }, 0);
    
    $def(self, '$denominator', function $$denominator() {
      var self = this;

      return self.real.$denominator().$lcm(self.imag.$denominator())
    }, 0);
    
    $def(self, '$eql?', function $Complex_eql$ques$8(other) {
      var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

      if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = $$('Complex')['$==='](other))) ? (self.real.$class()['$=='](self.imag.$class())) : ($ret_or_2))))) {
        return self['$=='](other)
      } else {
        return $ret_or_1
      }
    }, 1);
    
    $def(self, '$fdiv', function $$fdiv(other) {
      var self = this;

      
      if (!$eqeqeq($$$('Numeric'), other)) {
        $Kernel.$raise($$$('TypeError'), "" + (other.$class()) + " can't be coerced into Complex")
      };
      return $rb_divide(self, other);
    }, 1);
    
    $def(self, '$finite?', function $Complex_finite$ques$9() {
      var self = this, $ret_or_1 = nil;

      if ($truthy(($ret_or_1 = self.real['$finite?']()))) {
        return self.imag['$finite?']()
      } else {
        return $ret_or_1
      }
    }, 0);
    
    $def(self, '$hash', function $$hash() {
      var self = this;

      return "Complex:" + (self.real) + ":" + (self.imag)
    }, 0);
    
    $def(self, '$infinite?', function $Complex_infinite$ques$10() {
      var self = this, $ret_or_1 = nil;

      if ($truthy(($ret_or_1 = self.real['$infinite?']()))) {
        return $ret_or_1
      } else {
        return self.imag['$infinite?']()
      }
    }, 0);
    
    $def(self, '$inspect', function $$inspect() {
      var self = this;

      return "(" + (self) + ")"
    }, 0);
    
    $def(self, '$numerator', function $$numerator() {
      var self = this, d = nil;

      
      d = self.$denominator();
      return $Kernel.$Complex($rb_times(self.real.$numerator(), $rb_divide(d, self.real.$denominator())), $rb_times(self.imag.$numerator(), $rb_divide(d, self.imag.$denominator())));
    }, 0);
    
    $def(self, '$polar', function $$polar() {
      var self = this;

      return [self.$abs(), self.$arg()]
    }, 0);
    
    $def(self, '$rationalize', function $$rationalize(eps) {
      var self = this;

      
      ;
      
      if (arguments.length > 1) {
        $Kernel.$raise($$$('ArgumentError'), "wrong number of arguments (" + (arguments.length) + " for 0..1)");
      }
    ;
      if ($neqeq(self.imag, 0)) {
        $Kernel.$raise($$$('RangeError'), "can't convert " + (self) + " into Rational")
      };
      return self.$real().$rationalize(eps);
    }, -1);
    
    $def(self, '$real?', $return_val(false), 0);
    
    $def(self, '$rect', function $$rect() {
      var self = this;

      return [self.real, self.imag]
    }, 0);
    
    $def(self, '$to_f', function $$to_f() {
      var self = this;

      
      if (!$eqeq(self.imag, 0)) {
        $Kernel.$raise($$$('RangeError'), "can't convert " + (self) + " into Float")
      };
      return self.real.$to_f();
    }, 0);
    
    $def(self, '$to_i', function $$to_i() {
      var self = this;

      
      if (!$eqeq(self.imag, 0)) {
        $Kernel.$raise($$$('RangeError'), "can't convert " + (self) + " into Integer")
      };
      return self.real.$to_i();
    }, 0);
    
    $def(self, '$to_r', function $$to_r() {
      var self = this;

      
      if (!$eqeq(self.imag, 0)) {
        $Kernel.$raise($$$('RangeError'), "can't convert " + (self) + " into Rational")
      };
      return self.real.$to_r();
    }, 0);
    
    $def(self, '$to_s', function $$to_s() {
      var self = this, result = nil;

      
      result = self.real.$inspect();
      result = $rb_plus(result, (((($eqeqeq($$$('Number'), self.imag) && ($truthy(self.imag['$nan?']()))) || ($truthy(self.imag['$positive?']()))) || ($truthy(self.imag['$zero?']()))) ? ("+") : ("-")));
      result = $rb_plus(result, self.imag.$abs().$inspect());
      if (($eqeqeq($$$('Number'), self.imag) && (($truthy(self.imag['$nan?']()) || ($truthy(self.imag['$infinite?']())))))) {
        result = $rb_plus(result, "*")
      };
      return $rb_plus(result, "i");
    }, 0);
    $const_set($nesting[0], 'I', self.$new(0, 1));
    $defs(self, '$from_string', function $$from_string(str) {
      
      
      var re = /[+-]?[\d_]+(\.[\d_]+)?(e\d+)?/,
          match = str.match(re),
          real, imag, denominator;

      function isFloat() {
        return re.test(str);
      }

      function cutFloat() {
        var match = str.match(re);
        var number = match[0];
        str = str.slice(number.length);
        return number.replace(/_/g, '');
      }

      // handles both floats and rationals
      function cutNumber() {
        if (isFloat()) {
          var numerator = parseFloat(cutFloat());

          if (str[0] === '/') {
            // rational real part
            str = str.slice(1);

            if (isFloat()) {
              var denominator = parseFloat(cutFloat());
              return $Kernel.$Rational(numerator, denominator);
            } else {
              // reverting '/'
              str = '/' + str;
              return numerator;
            }
          } else {
            // float real part, no denominator
            return numerator;
          }
        } else {
          return null;
        }
      }

      real = cutNumber();

      if (!real) {
        if (str[0] === 'i') {
          // i => Complex(0, 1)
          return $Kernel.$Complex(0, 1);
        }
        if (str[0] === '-' && str[1] === 'i') {
          // -i => Complex(0, -1)
          return $Kernel.$Complex(0, -1);
        }
        if (str[0] === '+' && str[1] === 'i') {
          // +i => Complex(0, 1)
          return $Kernel.$Complex(0, 1);
        }
        // anything => Complex(0, 0)
        return $Kernel.$Complex(0, 0);
      }

      imag = cutNumber();
      if (!imag) {
        if (str[0] === 'i') {
          // 3i => Complex(0, 3)
          return $Kernel.$Complex(0, real);
        } else {
          // 3 => Complex(3, 0)
          return $Kernel.$Complex(real, 0);
        }
      } else {
        // 3+2i => Complex(3, 2)
        return $Kernel.$Complex(real, imag);
      }
    
    }, 1);
    (function(self, $parent_nesting) {
      
      return $alias(self, "rectangular", "rect")
    })(Opal.get_singleton_class(self), $nesting);
    $alias(self, "arg", "angle");
    $alias(self, "conjugate", "conj");
    $alias(self, "divide", "/");
    $alias(self, "imaginary", "imag");
    $alias(self, "magnitude", "abs");
    $alias(self, "phase", "arg");
    $alias(self, "quo", "/");
    $alias(self, "rectangular", "rect");
    
    Opal.udef(self, '$' + "negative?");;
    
    Opal.udef(self, '$' + "positive?");;
    
    
    Opal.udef(self, '$' + "step");;
    return nil;;
  })('::', $$$('Numeric'), $nesting);
};

Opal.modules["corelib/process/base"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $klass = Opal.klass, $slice = Opal.slice, $defs = Opal.defs, $return_val = Opal.return_val, nil = Opal.nil;

  
  (function($base, $super) {
    var self = $klass($base, $super, 'Signal');

    
    return $defs(self, '$trap', function $$trap($a) {
      var $post_args, $rest_arg;

      
      $post_args = $slice.call(arguments);
      $rest_arg = $post_args;
      return nil;
    }, -1)
  })('::', null);
  return (function($base, $super) {
    var self = $klass($base, $super, 'GC');

    
    return $defs(self, '$start', $return_val(nil), 0)
  })('::', null);
};

Opal.modules["corelib/file"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $truthy = Opal.truthy, $klass = Opal.klass, $const_set = Opal.const_set, $Opal = Opal.Opal, $regexp = Opal.regexp, $rb_plus = Opal.rb_plus, $def = Opal.def, $Kernel = Opal.Kernel, $eqeq = Opal.eqeq, $rb_lt = Opal.rb_lt, $rb_minus = Opal.rb_minus, $range = Opal.range, $send = Opal.send, $slice = Opal.slice, $alias = Opal.alias, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('respond_to?,to_path,coerce_to!,pwd,split,sub,+,unshift,join,home,raise,start_with?,absolute_path,==,<,dirname,-,basename,empty?,rindex,[],length,nil?,gsub,find,=~,map,each_with_index,flatten,reject,to_proc,end_with?,expand_path,exist?');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'File');

    var $nesting = [self].concat($parent_nesting), windows_root_rx = nil;

    
    $const_set($nesting[0], 'Separator', $const_set($nesting[0], 'SEPARATOR', "/"));
    $const_set($nesting[0], 'ALT_SEPARATOR', nil);
    $const_set($nesting[0], 'PATH_SEPARATOR', ":");
    $const_set($nesting[0], 'FNM_SYSCASE', 0);
    windows_root_rx = /^[a-zA-Z]:(?:\\|\/)/;
    return (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      
      $def(self, '$absolute_path', function $$absolute_path(path, basedir) {
        var sep = nil, sep_chars = nil, new_parts = nil, $ret_or_1 = nil, path_abs = nil, basedir_abs = nil, parts = nil, leading_sep = nil, abs = nil, new_path = nil;

        
        if (basedir == null) basedir = nil;
        sep = $$('SEPARATOR');
        sep_chars = $sep_chars();
        new_parts = [];
        path = ($truthy(path['$respond_to?']("to_path")) ? (path.$to_path()) : (path));
        path = $Opal['$coerce_to!'](path, $$$('String'), "to_str");
        basedir = ($truthy(($ret_or_1 = basedir)) ? ($ret_or_1) : ($$$('Dir').$pwd()));
        path_abs = path.substr(0, sep.length) === sep || windows_root_rx.test(path);
        basedir_abs = basedir.substr(0, sep.length) === sep || windows_root_rx.test(basedir);
        if ($truthy(path_abs)) {
          
          parts = path.$split($regexp(["[", sep_chars, "]"]));
          leading_sep = windows_root_rx.test(path) ? '' : path.$sub($regexp(["^([", sep_chars, "]+).*$"]), "\\1");
          abs = true;
        } else {
          
          parts = $rb_plus(basedir.$split($regexp(["[", sep_chars, "]"])), path.$split($regexp(["[", sep_chars, "]"])));
          leading_sep = windows_root_rx.test(basedir) ? '' : basedir.$sub($regexp(["^([", sep_chars, "]+).*$"]), "\\1");
          abs = basedir_abs;
        };
        
        var part;
        for (var i = 0, ii = parts.length; i < ii; i++) {
          part = parts[i];

          if (
            (part === nil) ||
            (part === ''  && ((new_parts.length === 0) || abs)) ||
            (part === '.' && ((new_parts.length === 0) || abs))
          ) {
            continue;
          }
          if (part === '..') {
            new_parts.pop();
          } else {
            new_parts.push(part);
          }
        }

        if (!abs && parts[0] !== '.') {
          new_parts.$unshift(".")
        }
      ;
        new_path = new_parts.$join(sep);
        if ($truthy(abs)) {
          new_path = $rb_plus(leading_sep, new_path)
        };
        return new_path;
      }, -2);
      
      $def(self, '$expand_path', function $$expand_path(path, basedir) {
        var self = this, sep = nil, sep_chars = nil, home = nil, leading_sep = nil, home_path_regexp = nil;

        
        if (basedir == null) basedir = nil;
        sep = $$('SEPARATOR');
        sep_chars = $sep_chars();
        if ($truthy(path[0] === '~' || (basedir && basedir[0] === '~'))) {
          
          home = $$('Dir').$home();
          if (!$truthy(home)) {
            $Kernel.$raise($$$('ArgumentError'), "couldn't find HOME environment -- expanding `~'")
          };
          leading_sep = windows_root_rx.test(home) ? '' : home.$sub($regexp(["^([", sep_chars, "]+).*$"]), "\\1");
          if (!$truthy(home['$start_with?'](leading_sep))) {
            $Kernel.$raise($$$('ArgumentError'), "non-absolute home")
          };
          home = $rb_plus(home, sep);
          home_path_regexp = $regexp(["^\\~(?:", sep, "|$)"]);
          path = path.$sub(home_path_regexp, home);
          if ($truthy(basedir)) {
            basedir = basedir.$sub(home_path_regexp, home)
          };
        };
        return self.$absolute_path(path, basedir);
      }, -2);
      
      // Coerce a given path to a path string using #to_path and #to_str
      function $coerce_to_path(path) {
        if ($truthy((path)['$respond_to?']("to_path"))) {
          path = path.$to_path();
        }

        path = $Opal['$coerce_to!'](path, $$$('String'), "to_str");

        return path;
      }

      // Return a RegExp compatible char class
      function $sep_chars() {
        if ($$('ALT_SEPARATOR') === nil) {
          return Opal.escape_regexp($$('SEPARATOR'));
        } else {
          return Opal.escape_regexp($rb_plus($$('SEPARATOR'), $$('ALT_SEPARATOR')));
        }
      }
    ;
      
      $def(self, '$dirname', function $$dirname(path, level) {
        var self = this, sep_chars = nil;

        
        if (level == null) level = 1;
        if ($eqeq(level, 0)) {
          return path
        };
        if ($truthy($rb_lt(level, 0))) {
          $Kernel.$raise($$$('ArgumentError'), "level can't be negative")
        };
        sep_chars = $sep_chars();
        path = $coerce_to_path(path);
        
        var absolute = path.match(new RegExp("^[" + (sep_chars) + "]")), out;

        path = path.replace(new RegExp("[" + (sep_chars) + "]+$"), ''); // remove trailing separators
        path = path.replace(new RegExp("[^" + (sep_chars) + "]+$"), ''); // remove trailing basename
        path = path.replace(new RegExp("[" + (sep_chars) + "]+$"), ''); // remove final trailing separators

        if (path === '') {
          out = absolute ? '/' : '.';
        }
        else {
          out = path;
        }

        if (level == 1) {
          return out;
        }
        else {
          return self.$dirname(out, $rb_minus(level, 1))
        }
      ;
      }, -2);
      
      $def(self, '$basename', function $$basename(name, suffix) {
        var sep_chars = nil;

        
        if (suffix == null) suffix = nil;
        sep_chars = $sep_chars();
        name = $coerce_to_path(name);
        
        if (name.length == 0) {
          return name;
        }

        if (suffix !== nil) {
          suffix = $Opal['$coerce_to!'](suffix, $$$('String'), "to_str")
        } else {
          suffix = null;
        }

        name = name.replace(new RegExp("(.)[" + (sep_chars) + "]*$"), '$1');
        name = name.replace(new RegExp("^(?:.*[" + (sep_chars) + "])?([^" + (sep_chars) + "]+)$"), '$1');

        if (suffix === ".*") {
          name = name.replace(/\.[^\.]+$/, '');
        } else if(suffix !== null) {
          suffix = Opal.escape_regexp(suffix);
          name = name.replace(new RegExp("" + (suffix) + "$"), '');
        }

        return name;
      ;
      }, -2);
      
      $def(self, '$extname', function $$extname(path) {
        var self = this, filename = nil, last_dot_idx = nil;

        
        path = $coerce_to_path(path);
        filename = self.$basename(path);
        if ($truthy(filename['$empty?']())) {
          return ""
        };
        last_dot_idx = filename['$[]']($range(1, -1, false)).$rindex(".");
        if (($truthy(last_dot_idx['$nil?']()) || ($eqeq($rb_plus(last_dot_idx, 1), $rb_minus(filename.$length(), 1))))) {
          return ""
        } else {
          return filename['$[]'](Opal.Range.$new($rb_plus(last_dot_idx, 1), -1, false))
        };
      }, 1);
      
      $def(self, '$exist?', function $exist$ques$1(path) {
        
        return Opal.modules[path] != null
      }, 1);
      
      $def(self, '$directory?', function $directory$ques$2(path) {
        var files = nil, file = nil;

        
        files = [];
        
        for (var key in Opal.modules) {
          files.push(key)
        }
      ;
        path = path.$gsub($regexp(["(^.", $$('SEPARATOR'), "+|", $$('SEPARATOR'), "+$)"]));
        file = $send(files, 'find', [], function $$3(f){
          
          if (f == null) f = nil;
          return f['$=~']($regexp(["^", path]));}, 1);
        return file;
      }, 1);
      
      $def(self, '$join', function $$join($a) {
        var $post_args, paths, result = nil;

        
        $post_args = $slice.call(arguments);
        paths = $post_args;
        if ($truthy(paths['$empty?']())) {
          return ""
        };
        result = "";
        paths = $send(paths.$flatten().$each_with_index(), 'map', [], function $$4(item, index){
          
          if (item == null) item = nil;
          if (index == null) index = nil;
          if (($eqeq(index, 0) && ($truthy(item['$empty?']())))) {
            return $$('SEPARATOR')
          } else if (($eqeq(paths.$length(), $rb_plus(index, 1)) && ($truthy(item['$empty?']())))) {
            return $$('SEPARATOR')
          } else {
            return item
          };}, 2);
        paths = $send(paths, 'reject', [], "empty?".$to_proc());
        $send(paths, 'each_with_index', [], function $$5(item, index){var next_item = nil;

          
          if (item == null) item = nil;
          if (index == null) index = nil;
          next_item = paths['$[]']($rb_plus(index, 1));
          if ($truthy(next_item['$nil?']())) {
            return (result = "" + (result) + (item))
          } else {
            
            if (($truthy(item['$end_with?']($$('SEPARATOR'))) && ($truthy(next_item['$start_with?']($$('SEPARATOR')))))) {
              item = item.$sub($regexp([$$('SEPARATOR'), "+$"]), "")
            };
            return (result = (($truthy(item['$end_with?']($$('SEPARATOR'))) || ($truthy(next_item['$start_with?']($$('SEPARATOR'))))) ? ("" + (result) + (item)) : ("" + (result) + (item) + ($$('SEPARATOR')))));
          };}, 2);
        return result;
      }, -1);
      
      $def(self, '$split', function $$split(path) {
        
        return path.$split($$('SEPARATOR'))
      }, 1);
      $alias(self, "realpath", "expand_path");
      return $alias(self, "exists?", "exist?");
    })(Opal.get_singleton_class(self), $nesting);
  })('::', $$$('IO'), $nesting)
};

Opal.modules["corelib/kernel/format"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $coerce_to = Opal.coerce_to, $module = Opal.module, $slice = Opal.slice, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $Opal = Opal.Opal, $Kernel = Opal.Kernel, $gvars = Opal.gvars, $def = Opal.def, $alias = Opal.alias, nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('respond_to?,[],==,length,coerce_to?,nil?,to_a,raise,to_int,fetch,Integer,Float,to_ary,to_str,inspect,to_s,format');
  return (function($base) {
    var self = $module($base, 'Kernel');

    
    
    
    $def(self, '$format', function $$format(format_string, $a) {
      var $post_args, args, ary = nil;
      if ($gvars.DEBUG == null) $gvars.DEBUG = nil;

      
      $post_args = $slice.call(arguments, 1);
      args = $post_args;
      if (($eqeq(args.$length(), 1) && ($truthy(args['$[]'](0)['$respond_to?']("to_ary"))))) {
        
        ary = $Opal['$coerce_to?'](args['$[]'](0), $$$('Array'), "to_ary");
        if (!$truthy(ary['$nil?']())) {
          args = ary.$to_a()
        };
      };
      
      var result = '',
          //used for slicing:
          begin_slice = 0,
          end_slice,
          //used for iterating over the format string:
          i,
          len = format_string.length,
          //used for processing field values:
          arg,
          str,
          //used for processing %g and %G fields:
          exponent,
          //used for keeping track of width and precision:
          width,
          precision,
          //used for holding temporary values:
          tmp_num,
          //used for processing %{} and %<> fileds:
          hash_parameter_key,
          closing_brace_char,
          //used for processing %b, %B, %o, %x, and %X fields:
          base_number,
          base_prefix,
          base_neg_zero_regex,
          base_neg_zero_digit,
          //used for processing arguments:
          next_arg,
          seq_arg_num = 1,
          pos_arg_num = 0,
          //used for keeping track of flags:
          flags,
          FNONE  = 0,
          FSHARP = 1,
          FMINUS = 2,
          FPLUS  = 4,
          FZERO  = 8,
          FSPACE = 16,
          FWIDTH = 32,
          FPREC  = 64,
          FPREC0 = 128;

      function CHECK_FOR_FLAGS() {
        if (flags&FWIDTH) { $Kernel.$raise($$$('ArgumentError'), "flag after width") }
        if (flags&FPREC0) { $Kernel.$raise($$$('ArgumentError'), "flag after precision") }
      }

      function CHECK_FOR_WIDTH() {
        if (flags&FWIDTH) { $Kernel.$raise($$$('ArgumentError'), "width given twice") }
        if (flags&FPREC0) { $Kernel.$raise($$$('ArgumentError'), "width after precision") }
      }

      function GET_NTH_ARG(num) {
        if (num >= args.length) { $Kernel.$raise($$$('ArgumentError'), "too few arguments") }
        return args[num];
      }

      function GET_NEXT_ARG() {
        switch (pos_arg_num) {
        case -1: $Kernel.$raise($$$('ArgumentError'), "unnumbered(" + (seq_arg_num) + ") mixed with numbered") // raise
        case -2: $Kernel.$raise($$$('ArgumentError'), "unnumbered(" + (seq_arg_num) + ") mixed with named") // raise
        }
        pos_arg_num = seq_arg_num++;
        return GET_NTH_ARG(pos_arg_num - 1);
      }

      function GET_POS_ARG(num) {
        if (pos_arg_num > 0) {
          $Kernel.$raise($$$('ArgumentError'), "numbered(" + (num) + ") after unnumbered(" + (pos_arg_num) + ")")
        }
        if (pos_arg_num === -2) {
          $Kernel.$raise($$$('ArgumentError'), "numbered(" + (num) + ") after named")
        }
        if (num < 1) {
          $Kernel.$raise($$$('ArgumentError'), "invalid index - " + (num) + "$")
        }
        pos_arg_num = -1;
        return GET_NTH_ARG(num - 1);
      }

      function GET_ARG() {
        return (next_arg === undefined ? GET_NEXT_ARG() : next_arg);
      }

      function READ_NUM(label) {
        var num, str = '';
        for (;; i++) {
          if (i === len) {
            $Kernel.$raise($$$('ArgumentError'), "malformed format string - %*[0-9]")
          }
          if (format_string.charCodeAt(i) < 48 || format_string.charCodeAt(i) > 57) {
            i--;
            num = parseInt(str, 10) || 0;
            if (num > 2147483647) {
              $Kernel.$raise($$$('ArgumentError'), "" + (label) + " too big")
            }
            return num;
          }
          str += format_string.charAt(i);
        }
      }

      function READ_NUM_AFTER_ASTER(label) {
        var arg, num = READ_NUM(label);
        if (format_string.charAt(i + 1) === '$') {
          i++;
          arg = GET_POS_ARG(num);
        } else {
          arg = GET_NEXT_ARG();
        }
        return (arg).$to_int();
      }

      for (i = format_string.indexOf('%'); i !== -1; i = format_string.indexOf('%', i)) {
        str = undefined;

        flags = FNONE;
        width = -1;
        precision = -1;
        next_arg = undefined;

        end_slice = i;

        i++;

        switch (format_string.charAt(i)) {
        case '%':
          begin_slice = i;
          // no-break
        case '':
        case '\n':
        case '\0':
          i++;
          continue;
        }

        format_sequence: for (; i < len; i++) {
          switch (format_string.charAt(i)) {

          case ' ':
            CHECK_FOR_FLAGS();
            flags |= FSPACE;
            continue format_sequence;

          case '#':
            CHECK_FOR_FLAGS();
            flags |= FSHARP;
            continue format_sequence;

          case '+':
            CHECK_FOR_FLAGS();
            flags |= FPLUS;
            continue format_sequence;

          case '-':
            CHECK_FOR_FLAGS();
            flags |= FMINUS;
            continue format_sequence;

          case '0':
            CHECK_FOR_FLAGS();
            flags |= FZERO;
            continue format_sequence;

          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
            tmp_num = READ_NUM('width');
            if (format_string.charAt(i + 1) === '$') {
              if (i + 2 === len) {
                str = '%';
                i++;
                break format_sequence;
              }
              if (next_arg !== undefined) {
                $Kernel.$raise($$$('ArgumentError'), "value given twice - %" + (tmp_num) + "$")
              }
              next_arg = GET_POS_ARG(tmp_num);
              i++;
            } else {
              CHECK_FOR_WIDTH();
              flags |= FWIDTH;
              width = tmp_num;
            }
            continue format_sequence;

          case '<':
          case '\{':
            closing_brace_char = (format_string.charAt(i) === '<' ? '>' : '\}');
            hash_parameter_key = '';

            i++;

            for (;; i++) {
              if (i === len) {
                $Kernel.$raise($$$('ArgumentError'), "malformed name - unmatched parenthesis")
              }
              if (format_string.charAt(i) === closing_brace_char) {

                if (pos_arg_num > 0) {
                  $Kernel.$raise($$$('ArgumentError'), "named " + (hash_parameter_key) + " after unnumbered(" + (pos_arg_num) + ")")
                }
                if (pos_arg_num === -1) {
                  $Kernel.$raise($$$('ArgumentError'), "named " + (hash_parameter_key) + " after numbered")
                }
                pos_arg_num = -2;

                if (args[0] === undefined || !args[0].$$is_hash) {
                  $Kernel.$raise($$$('ArgumentError'), "one hash required")
                }

                next_arg = (args[0]).$fetch(hash_parameter_key);

                if (closing_brace_char === '>') {
                  continue format_sequence;
                } else {
                  str = next_arg.toString();
                  if (precision !== -1) { str = str.slice(0, precision); }
                  if (flags&FMINUS) {
                    while (str.length < width) { str = str + ' '; }
                  } else {
                    while (str.length < width) { str = ' ' + str; }
                  }
                  break format_sequence;
                }
              }
              hash_parameter_key += format_string.charAt(i);
            }
            // raise

          case '*':
            i++;
            CHECK_FOR_WIDTH();
            flags |= FWIDTH;
            width = READ_NUM_AFTER_ASTER('width');
            if (width < 0) {
              flags |= FMINUS;
              width = -width;
            }
            continue format_sequence;

          case '.':
            if (flags&FPREC0) {
              $Kernel.$raise($$$('ArgumentError'), "precision given twice")
            }
            flags |= FPREC|FPREC0;
            precision = 0;
            i++;
            if (format_string.charAt(i) === '*') {
              i++;
              precision = READ_NUM_AFTER_ASTER('precision');
              if (precision < 0) {
                flags &= ~FPREC;
              }
              continue format_sequence;
            }
            precision = READ_NUM('precision');
            continue format_sequence;

          case 'd':
          case 'i':
          case 'u':
            arg = $Kernel.$Integer(GET_ARG());
            if (arg >= 0) {
              str = arg.toString();
              while (str.length < precision) { str = '0' + str; }
              if (flags&FMINUS) {
                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && precision === -1) {
                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0)) { str = '0' + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                } else {
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            } else {
              str = (-arg).toString();
              while (str.length < precision) { str = '0' + str; }
              if (flags&FMINUS) {
                str = '-' + str;
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && precision === -1) {
                  while (str.length < width - 1) { str = '0' + str; }
                  str = '-' + str;
                } else {
                  str = '-' + str;
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            }
            break format_sequence;

          case 'b':
          case 'B':
          case 'o':
          case 'x':
          case 'X':
            switch (format_string.charAt(i)) {
            case 'b':
            case 'B':
              base_number = 2;
              base_prefix = '0b';
              base_neg_zero_regex = /^1+/;
              base_neg_zero_digit = '1';
              break;
            case 'o':
              base_number = 8;
              base_prefix = '0';
              base_neg_zero_regex = /^3?7+/;
              base_neg_zero_digit = '7';
              break;
            case 'x':
            case 'X':
              base_number = 16;
              base_prefix = '0x';
              base_neg_zero_regex = /^f+/;
              base_neg_zero_digit = 'f';
              break;
            }
            arg = $Kernel.$Integer(GET_ARG());
            if (arg >= 0) {
              str = arg.toString(base_number);
              while (str.length < precision) { str = '0' + str; }
              if (flags&FMINUS) {
                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && precision === -1) {
                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0) - ((flags&FSHARP && arg !== 0) ? base_prefix.length : 0)) { str = '0' + str; }
                  if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                } else {
                  if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            } else {
              if (flags&FPLUS || flags&FSPACE) {
                str = (-arg).toString(base_number);
                while (str.length < precision) { str = '0' + str; }
                if (flags&FMINUS) {
                  if (flags&FSHARP) { str = base_prefix + str; }
                  str = '-' + str;
                  while (str.length < width) { str = str + ' '; }
                } else {
                  if (flags&FZERO && precision === -1) {
                    while (str.length < width - 1 - (flags&FSHARP ? 2 : 0)) { str = '0' + str; }
                    if (flags&FSHARP) { str = base_prefix + str; }
                    str = '-' + str;
                  } else {
                    if (flags&FSHARP) { str = base_prefix + str; }
                    str = '-' + str;
                    while (str.length < width) { str = ' ' + str; }
                  }
                }
              } else {
                str = (arg >>> 0).toString(base_number).replace(base_neg_zero_regex, base_neg_zero_digit);
                while (str.length < precision - 2) { str = base_neg_zero_digit + str; }
                if (flags&FMINUS) {
                  str = '..' + str;
                  if (flags&FSHARP) { str = base_prefix + str; }
                  while (str.length < width) { str = str + ' '; }
                } else {
                  if (flags&FZERO && precision === -1) {
                    while (str.length < width - 2 - (flags&FSHARP ? base_prefix.length : 0)) { str = base_neg_zero_digit + str; }
                    str = '..' + str;
                    if (flags&FSHARP) { str = base_prefix + str; }
                  } else {
                    str = '..' + str;
                    if (flags&FSHARP) { str = base_prefix + str; }
                    while (str.length < width) { str = ' ' + str; }
                  }
                }
              }
            }
            if (format_string.charAt(i) === format_string.charAt(i).toUpperCase()) {
              str = str.toUpperCase();
            }
            break format_sequence;

          case 'f':
          case 'e':
          case 'E':
          case 'g':
          case 'G':
            arg = $Kernel.$Float(GET_ARG());
            if (arg >= 0 || isNaN(arg)) {
              if (arg === Infinity) {
                str = 'Inf';
              } else {
                switch (format_string.charAt(i)) {
                case 'f':
                  str = arg.toFixed(precision === -1 ? 6 : precision);
                  break;
                case 'e':
                case 'E':
                  str = arg.toExponential(precision === -1 ? 6 : precision);
                  break;
                case 'g':
                case 'G':
                  str = arg.toExponential();
                  exponent = parseInt(str.split('e')[1], 10);
                  if (!(exponent < -4 || exponent >= (precision === -1 ? 6 : precision))) {
                    str = arg.toPrecision(precision === -1 ? (flags&FSHARP ? 6 : undefined) : precision);
                  }
                  break;
                }
              }
              if (flags&FMINUS) {
                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && arg !== Infinity && !isNaN(arg)) {
                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0)) { str = '0' + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                } else {
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            } else {
              if (arg === -Infinity) {
                str = 'Inf';
              } else {
                switch (format_string.charAt(i)) {
                case 'f':
                  str = (-arg).toFixed(precision === -1 ? 6 : precision);
                  break;
                case 'e':
                case 'E':
                  str = (-arg).toExponential(precision === -1 ? 6 : precision);
                  break;
                case 'g':
                case 'G':
                  str = (-arg).toExponential();
                  exponent = parseInt(str.split('e')[1], 10);
                  if (!(exponent < -4 || exponent >= (precision === -1 ? 6 : precision))) {
                    str = (-arg).toPrecision(precision === -1 ? (flags&FSHARP ? 6 : undefined) : precision);
                  }
                  break;
                }
              }
              if (flags&FMINUS) {
                str = '-' + str;
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && arg !== -Infinity) {
                  while (str.length < width - 1) { str = '0' + str; }
                  str = '-' + str;
                } else {
                  str = '-' + str;
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            }
            if (format_string.charAt(i) === format_string.charAt(i).toUpperCase() && arg !== Infinity && arg !== -Infinity && !isNaN(arg)) {
              str = str.toUpperCase();
            }
            str = str.replace(/([eE][-+]?)([0-9])$/, '$10$2');
            break format_sequence;

          case 'a':
          case 'A':
            // Not implemented because there are no specs for this field type.
            $Kernel.$raise($$$('NotImplementedError'), "`A` and `a` format field types are not implemented in Opal yet")
            // raise

          case 'c':
            arg = GET_ARG();
            if ((arg)['$respond_to?']("to_ary")) { arg = (arg).$to_ary()[0]; }
            if ((arg)['$respond_to?']("to_str")) {
              str = (arg).$to_str();
            } else {
              str = String.fromCharCode($coerce_to(arg, $$$('Integer'), 'to_int'));
            }
            if (str.length !== 1) {
              $Kernel.$raise($$$('ArgumentError'), "%c requires a character")
            }
            if (flags&FMINUS) {
              while (str.length < width) { str = str + ' '; }
            } else {
              while (str.length < width) { str = ' ' + str; }
            }
            break format_sequence;

          case 'p':
            str = (GET_ARG()).$inspect();
            if (precision !== -1) { str = str.slice(0, precision); }
            if (flags&FMINUS) {
              while (str.length < width) { str = str + ' '; }
            } else {
              while (str.length < width) { str = ' ' + str; }
            }
            break format_sequence;

          case 's':
            str = (GET_ARG()).$to_s();
            if (precision !== -1) { str = str.slice(0, precision); }
            if (flags&FMINUS) {
              while (str.length < width) { str = str + ' '; }
            } else {
              while (str.length < width) { str = ' ' + str; }
            }
            break format_sequence;

          default:
            $Kernel.$raise($$$('ArgumentError'), "malformed format string - %" + (format_string.charAt(i)))
          }
        }

        if (str === undefined) {
          $Kernel.$raise($$$('ArgumentError'), "malformed format string - %")
        }

        result += format_string.slice(begin_slice, end_slice) + str;
        begin_slice = i + 1;
      }

      if ($gvars.DEBUG && pos_arg_num >= 0 && seq_arg_num < args.length) {
        $Kernel.$raise($$$('ArgumentError'), "too many arguments for format string")
      }

      return result + format_string.slice(begin_slice);
    ;
    }, -2);
    return $alias(self, "sprintf", "format");
  })('::')
};

Opal.modules["corelib/dir"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $klass = Opal.klass, $def = Opal.def, $truthy = Opal.truthy, $alias = Opal.alias, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('[],pwd');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Dir');

    var $nesting = [self].concat($parent_nesting);

    return (function(self, $parent_nesting) {
      
      
      
      $def(self, '$chdir', function $$chdir(dir) {
        var $yield = $$chdir.$$p || nil, prev_cwd = nil;

        $$chdir.$$p = null;
        return (function() { try {
        
        prev_cwd = Opal.current_dir;
        Opal.current_dir = dir;
        return Opal.yieldX($yield, []);;
        } finally {
          Opal.current_dir = prev_cwd
        }; })()
      }, 1);
      
      $def(self, '$pwd', function $$pwd() {
        
        return Opal.current_dir || '.';
      }, 0);
      
      $def(self, '$home', function $$home() {
        var $ret_or_1 = nil;

        if ($truthy(($ret_or_1 = $$$('ENV')['$[]']("HOME")))) {
          return $ret_or_1
        } else {
          return "."
        }
      }, 0);
      return $alias(self, "getwd", "pwd");
    })(Opal.get_singleton_class(self), $nesting)
  })('::', null, $nesting)
};

Opal.modules["corelib/main"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $return_val = Opal.return_val, $def = Opal.def, $Object = Opal.Object, $slice = Opal.slice, $Kernel = Opal.Kernel, self = Opal.top, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('include,raise');
  return (function(self, $parent_nesting) {
    
    
    
    $def(self, '$to_s', $return_val("main"), 0);
    
    $def(self, '$include', function $$include(mod) {
      
      return $Object.$include(mod)
    }, 1);
    
    $def(self, '$autoload', function $$autoload($a) {
      var $post_args, args;

      
      $post_args = $slice.call(arguments);
      args = $post_args;
      return Opal.Object.$autoload.apply(Opal.Object, args);;
    }, -1);
    return $def(self, '$using', function $$using(mod) {
      
      return $Kernel.$raise("main.using is permitted only at toplevel")
    }, 1);
  })(Opal.get_singleton_class(self), $nesting)
};

Opal.modules["corelib/error"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $klass = Opal.klass, $slice = Opal.slice, $gvars = Opal.gvars, $defs = Opal.defs, $send = Opal.send, $to_a = Opal.to_a, $def = Opal.def, $truthy = Opal.truthy, $hash2 = Opal.hash2, $Kernel = Opal.Kernel, $not = Opal.not, $rb_plus = Opal.rb_plus, $eqeq = Opal.eqeq, $Object = Opal.Object, $ensure_kwargs = Opal.ensure_kwargs, $send2 = Opal.send2, $find_super = Opal.find_super, $module = Opal.module, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('new,map,backtrace,clone,to_s,merge,tty?,[],include?,raise,dup,empty?,!,caller,shift,+,class,join,cause,full_message,==,reverse,split,autoload,attr_reader,inspect');
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Exception');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.message = nil;
    
    Opal.prop(self.$$prototype, '$$is_exception', true);
    var stack_trace_limit;
    Error.stackTraceLimit = 100;
    $defs(self, '$new', function $Exception_new$1($a) {
      var $post_args, args, self = this;
      if ($gvars["!"] == null) $gvars["!"] = nil;

      
      $post_args = $slice.call(arguments);
      args = $post_args;
      
      var message   = (args.length > 0) ? args[0] : nil;
      var error     = new self.$$constructor(message);
      error.name    = self.$$name;
      error.message = message;
      error.cause   = $gvars["!"];
      Opal.send(error, error.$initialize, args);

      // Error.captureStackTrace() will use .name and .toString to build the
      // first line of the stack trace so it must be called after the error
      // has been initialized.
      // https://nodejs.org/dist/latest-v6.x/docs/api/errors.html
      if (Opal.config.enable_stack_trace && Error.captureStackTrace) {
        // Passing Kernel.raise will cut the stack trace from that point above
        Error.captureStackTrace(error, stack_trace_limit);
      }

      return error;
    ;
    }, -1);
    stack_trace_limit = self.$new;
    $defs(self, '$exception', function $$exception($a) {
      var $post_args, args, self = this;

      
      $post_args = $slice.call(arguments);
      args = $post_args;
      return $send(self, 'new', $to_a(args));
    }, -1);
    
    $def(self, '$initialize', function $$initialize($a) {
      var $post_args, args, self = this;

      
      $post_args = $slice.call(arguments);
      args = $post_args;
      return self.message = (args.length > 0) ? args[0] : nil;;
    }, -1);
    
    // Convert backtrace from any format to Ruby format
    function correct_backtrace(backtrace) {
      var new_bt = [], m;

      for (var i = 0; i < backtrace.length; i++) {
        var loc = backtrace[i];
        if (!loc || !loc.$$is_string) {
          /* Do nothing */
        }
        /* Chromium format */
        else if ((m = loc.match(/^    at (.*?) \((.*?)\)$/))) {
          new_bt.push(m[2] + ":in `" + m[1] + "'");
        }
        else if ((m = loc.match(/^    at (.*?)$/))) {
          new_bt.push(m[1] + ":in `undefined'");
        }
        /* Node format */
        else if ((m = loc.match(/^  from (.*?)$/))) {
          new_bt.push(m[1]);
        }
        /* Mozilla/Apple format */
        else if ((m = loc.match(/^(.*?)@(.*?)$/))) {
          new_bt.push(m[2] + ':in `' + m[1] + "'");
        }
      }

      return new_bt;
    }
  ;
    
    $def(self, '$backtrace', function $$backtrace() {
      var self = this;

      
      if (self.backtrace) {
        // nil is a valid backtrace
        return self.backtrace;
      }

      var backtrace = self.stack;

      if (typeof(backtrace) !== 'undefined' && backtrace.$$is_string) {
        return self.backtrace = correct_backtrace(backtrace.split("\n"));
      }
      else if (backtrace) {
        return self.backtrace = correct_backtrace(backtrace);
      }

      return [];
    
    }, 0);
    
    $def(self, '$backtrace_locations', function $$backtrace_locations() {
      var $a, self = this;

      
      if (self.backtrace_locations) return self.backtrace_locations;
      self.backtrace_locations = ($a = self.$backtrace(), ($a === nil || $a == null) ? nil : $send($a, 'map', [], function $$2(loc){
        
        if (loc == null) loc = nil;
        return $$$($$$($$$('Thread'), 'Backtrace'), 'Location').$new(loc);}, 1))
      return self.backtrace_locations;
    
    }, 0);
    
    $def(self, '$cause', function $$cause() {
      var self = this;

      return self.cause || nil;
    }, 0);
    
    $def(self, '$exception', function $$exception(str) {
      var self = this;

      
      if (str == null) str = nil;
      
      if (str === nil || self === str) {
        return self;
      }

      var cloned = self.$clone();
      cloned.message = str;
      if (self.backtrace) cloned.backtrace = self.backtrace.$dup();
      cloned.stack = self.stack;
      cloned.cause = self.cause;
      return cloned;
    ;
    }, -1);
    
    $def(self, '$message', function $$message() {
      var self = this;

      return self.$to_s()
    }, 0);
    
    $def(self, '$full_message', function $$full_message(kwargs) {
      var $a, $b, self = this, $ret_or_1 = nil, highlight = nil, order = nil, bold_underline = nil, bold = nil, reset = nil, bt = nil, first = nil, msg = nil;
      if ($gvars.stderr == null) $gvars.stderr = nil;

      
      if (kwargs == null) kwargs = nil;
      if (!$truthy((($a = $$('Hash', 'skip_raise')) ? 'constant' : nil))) {
        return "" + (self.message) + "\n" + (self.stack)
      };
      kwargs = $hash2(["highlight", "order"], {"highlight": $gvars.stderr['$tty?'](), "order": "top"}).$merge(($truthy(($ret_or_1 = kwargs)) ? ($ret_or_1) : ($hash2([], {}))));
      $b = [kwargs['$[]']("highlight"), kwargs['$[]']("order")], (highlight = $b[0]), (order = $b[1]), $b;
      if (!$truthy([true, false]['$include?'](highlight))) {
        $Kernel.$raise($$$('ArgumentError'), "expected true or false as highlight: " + (highlight))
      };
      if (!$truthy(["top", "bottom"]['$include?'](order))) {
        $Kernel.$raise($$$('ArgumentError'), "expected :top or :bottom as order: " + (order))
      };
      if ($truthy(highlight)) {
        
        bold_underline = "\u001b[1;4m";
        bold = "\u001b[1m";
        reset = "\u001b[m";
      } else {
        bold_underline = (bold = (reset = ""))
      };
      bt = self.$backtrace().$dup();
      if (($not(bt) || ($truthy(bt['$empty?']())))) {
        bt = self.$caller()
      };
      first = bt.$shift();
      msg = "" + (first) + ": ";
      msg = $rb_plus(msg, "" + (bold) + (self.$to_s()) + " (" + (bold_underline) + (self.$class()) + (reset) + (bold) + ")" + (reset) + "\n");
      msg = $rb_plus(msg, $send(bt, 'map', [], function $$3(loc){
        
        if (loc == null) loc = nil;
        return "\tfrom " + (loc) + "\n";}, 1).$join());
      if ($truthy(self.$cause())) {
        msg = $rb_plus(msg, self.$cause().$full_message($hash2(["highlight"], {"highlight": highlight})))
      };
      if ($eqeq(order, "bottom")) {
        
        msg = msg.$split("\n").$reverse().$join("\n");
        msg = $rb_plus("" + (bold) + "Traceback" + (reset) + " (most recent call last):\n", msg);
      };
      return msg;
    }, -1);
    
    $def(self, '$inspect', function $$inspect() {
      var self = this, as_str = nil;

      
      as_str = self.$to_s();
      if ($truthy(as_str['$empty?']())) {
        return self.$class().$to_s()
      } else {
        return "#<" + (self.$class().$to_s()) + ": " + (self.$to_s()) + ">"
      };
    }, 0);
    
    $def(self, '$set_backtrace', function $$set_backtrace(backtrace) {
      var self = this;

      
      var valid = true, i, ii;

      if (backtrace === nil) {
        self.backtrace = nil;
        self.stack = '';
      } else if (backtrace.$$is_string) {
        self.backtrace = [backtrace];
        self.stack = '  from ' + backtrace;
      } else {
        if (backtrace.$$is_array) {
          for (i = 0, ii = backtrace.length; i < ii; i++) {
            if (!backtrace[i].$$is_string) {
              valid = false;
              break;
            }
          }
        } else {
          valid = false;
        }

        if (valid === false) {
          $Kernel.$raise($$$('TypeError'), "backtrace must be Array of String")
        }

        self.backtrace = backtrace;
        self.stack = $send((backtrace), 'map', [], function $$4(i){
        
        if (i == null) i = nil;
        return $rb_plus("  from ", i);}, 1).join("\n");
      }

      return backtrace;
    
    }, 1);
    return $def(self, '$to_s', function $$to_s() {
      var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

      if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = self.message)) ? (self.message.$to_s()) : ($ret_or_2))))) {
        return $ret_or_1
      } else {
        return self.$class().$to_s()
      }
    }, 0);
  })('::', Error, $nesting);
  $klass('::', $$$('Exception'), 'ScriptError');
  $klass('::', $$$('ScriptError'), 'SyntaxError');
  $klass('::', $$$('ScriptError'), 'LoadError');
  $klass('::', $$$('ScriptError'), 'NotImplementedError');
  $klass('::', $$$('Exception'), 'SystemExit');
  $klass('::', $$$('Exception'), 'NoMemoryError');
  $klass('::', $$$('Exception'), 'SignalException');
  $klass('::', $$$('SignalException'), 'Interrupt');
  $klass('::', $$$('Exception'), 'SecurityError');
  $klass('::', $$$('Exception'), 'SystemStackError');
  $klass('::', $$$('Exception'), 'StandardError');
  $klass('::', $$$('StandardError'), 'EncodingError');
  $klass('::', $$$('StandardError'), 'ZeroDivisionError');
  $klass('::', $$$('StandardError'), 'NameError');
  $klass('::', $$$('NameError'), 'NoMethodError');
  $klass('::', $$$('StandardError'), 'RuntimeError');
  $klass('::', $$$('RuntimeError'), 'FrozenError');
  $klass('::', $$$('StandardError'), 'LocalJumpError');
  $klass('::', $$$('StandardError'), 'TypeError');
  $klass('::', $$$('StandardError'), 'ArgumentError');
  $klass('::', $$$('ArgumentError'), 'UncaughtThrowError');
  $klass('::', $$$('StandardError'), 'IndexError');
  $klass('::', $$$('IndexError'), 'StopIteration');
  $klass('::', $$$('StopIteration'), 'ClosedQueueError');
  $klass('::', $$$('IndexError'), 'KeyError');
  $klass('::', $$$('StandardError'), 'RangeError');
  $klass('::', $$$('RangeError'), 'FloatDomainError');
  $klass('::', $$$('StandardError'), 'IOError');
  $klass('::', $$$('IOError'), 'EOFError');
  $klass('::', $$$('StandardError'), 'SystemCallError');
  $klass('::', $$$('StandardError'), 'RegexpError');
  $klass('::', $$$('StandardError'), 'ThreadError');
  $klass('::', $$$('StandardError'), 'FiberError');
  $Object.$autoload("Errno", "corelib/error/errno");
  (function($base, $super) {
    var self = $klass($base, $super, 'FrozenError');

    
    
    self.$attr_reader("receiver");
    return $def(self, '$initialize', function $$initialize(message, $kwargs) {
      var receiver, $yield = $$initialize.$$p || nil, self = this;

      $$initialize.$$p = null;
      
      $kwargs = $ensure_kwargs($kwargs);
      
      receiver = $kwargs.$$smap["receiver"];if (receiver == null) receiver = nil;
      $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [message], null);
      return (self.receiver = receiver);
    }, -2);
  })('::', $$$('RuntimeError'));
  (function($base, $super) {
    var self = $klass($base, $super, 'UncaughtThrowError');

    var $proto = self.$$prototype;

    $proto.tag = nil;
    
    self.$attr_reader("tag", "value");
    return $def(self, '$initialize', function $$initialize(tag, value) {
      var $yield = $$initialize.$$p || nil, self = this;

      $$initialize.$$p = null;
      
      if (value == null) value = nil;
      self.tag = tag;
      self.value = value;
      return $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', ["uncaught throw " + (self.tag.$inspect())], null);
    }, -2);
  })('::', $$$('ArgumentError'));
  (function($base, $super) {
    var self = $klass($base, $super, 'NameError');

    
    
    self.$attr_reader("name");
    return $def(self, '$initialize', function $$initialize(message, name) {
      var $yield = $$initialize.$$p || nil, self = this;

      $$initialize.$$p = null;
      
      if (name == null) name = nil;
      $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [message], null);
      return (self.name = name);
    }, -2);
  })('::', null);
  (function($base, $super) {
    var self = $klass($base, $super, 'NoMethodError');

    
    
    self.$attr_reader("args");
    return $def(self, '$initialize', function $$initialize(message, name, args) {
      var $yield = $$initialize.$$p || nil, self = this;

      $$initialize.$$p = null;
      
      if (name == null) name = nil;
      if (args == null) args = [];
      $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [message, name], null);
      return (self.args = args);
    }, -2);
  })('::', null);
  (function($base, $super) {
    var self = $klass($base, $super, 'StopIteration');

    
    return self.$attr_reader("result")
  })('::', null);
  (function($base, $super) {
    var self = $klass($base, $super, 'KeyError');

    var $proto = self.$$prototype;

    $proto.receiver = $proto.key = nil;
    
    
    $def(self, '$initialize', function $$initialize(message, $kwargs) {
      var receiver, key, $yield = $$initialize.$$p || nil, self = this;

      $$initialize.$$p = null;
      
      $kwargs = $ensure_kwargs($kwargs);
      
      receiver = $kwargs.$$smap["receiver"];if (receiver == null) receiver = nil;
      
      key = $kwargs.$$smap["key"];if (key == null) key = nil;
      $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [message], null);
      self.receiver = receiver;
      return (self.key = key);
    }, -2);
    
    $def(self, '$receiver', function $$receiver() {
      var self = this, $ret_or_1 = nil;

      if ($truthy(($ret_or_1 = self.receiver))) {
        return $ret_or_1
      } else {
        return $Kernel.$raise($$$('ArgumentError'), "no receiver is available")
      }
    }, 0);
    return $def(self, '$key', function $$key() {
      var self = this, $ret_or_1 = nil;

      if ($truthy(($ret_or_1 = self.key))) {
        return $ret_or_1
      } else {
        return $Kernel.$raise($$$('ArgumentError'), "no key is available")
      }
    }, 0);
  })('::', null);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'JS');

    var $nesting = [self].concat($parent_nesting);

    return ($klass($nesting[0], null, 'Error'), nil)
  })('::', $nesting);
};

Opal.modules["corelib/basic_object"] = function(Opal) {/* Generated by Opal 1.6.1 */
  "use strict";
  var $klass = Opal.klass, $slice = Opal.slice, $def = Opal.def, $alias = Opal.alias, $return_val = Opal.return_val, $Opal = Opal.Opal, $truthy = Opal.truthy, $range = Opal.range, $Kernel = Opal.Kernel, $to_a = Opal.to_a, $hash2 = Opal.hash2, $send = Opal.send, $eqeq = Opal.eqeq, $rb_ge = Opal.rb_ge, nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('==,raise,inspect,pristine,!,nil?,cover?,size,merge,compile,proc,[],first,>=,length,instance_variable_get,any?,new,caller');
  return (function($base, $super) {
    var self = $klass($base, $super, 'BasicObject');

    
    
    
    $def(self, '$initialize', function $$initialize($a) {
      var $post_args, $rest_arg;

      
      $post_args = $slice.call(arguments);
      $rest_arg = $post_args;
      return nil;
    }, -1);
    
    $def(self, '$==', function $BasicObject_$eq_eq$1(other) {
      var self = this;

      return self === other;
    }, 1);
    
    $def(self, '$eql?', function $BasicObject_eql$ques$2(other) {
      var self = this;

      return self['$=='](other)
    }, 1);
    $alias(self, "equal?", "==");
    
    $def(self, '$__id__', function $$__id__() {
      var self = this;

      
      if (self.$$id != null) {
        return self.$$id;
      }
      Opal.prop(self, '$$id', Opal.uid());
      return self.$$id;
    
    }, 0);
    
    $def(self, '$__send__', function $$__send__(symbol, $a) {
      var block = $$__send__.$$p || nil, $post_args, args, self = this;

      $$__send__.$$p = null;
      
      ;
      $post_args = $slice.call(arguments, 1);
      args = $post_args;
      
      if (!symbol.$$is_string) {
        self.$raise($$$('TypeError'), "" + (self.$inspect()) + " is not a symbol nor a string")
      }

      var func = self['$' + symbol];

      if (func) {
        if (block !== nil) {
          func.$$p = block;
        }

        return func.apply(self, args);
      }

      if (block !== nil) {
        self.$method_missing.$$p = block;
      }

      return self.$method_missing.apply(self, [symbol].concat(args));
    ;
    }, -2);
    
    $def(self, '$!', $return_val(false), 0);
    $Opal.$pristine("!");
    
    $def(self, '$!=', function $BasicObject_$not_eq$3(other) {
      var self = this;

      return self['$=='](other)['$!']()
    }, 1);
    
    $def(self, '$instance_eval', function $$instance_eval($a) {
      var block = $$instance_eval.$$p || nil, $post_args, args, $b, self = this, string = nil, file = nil, _lineno = nil, default_eval_options = nil, $ret_or_1 = nil, compiling_options = nil, compiled = nil;

      $$instance_eval.$$p = null;
      
      ;
      $post_args = $slice.call(arguments);
      args = $post_args;
      if (($truthy(block['$nil?']()) && ($truthy(!!Opal.compile)))) {
        
        if (!$truthy($range(1, 3, false)['$cover?'](args.$size()))) {
          $Kernel.$raise($$$('ArgumentError'), "wrong number of arguments (0 for 1..3)")
        };
        $b = [].concat($to_a(args)), (string = ($b[0] == null ? nil : $b[0])), (file = ($b[1] == null ? nil : $b[1])), (_lineno = ($b[2] == null ? nil : $b[2])), $b;
        default_eval_options = $hash2(["file", "eval"], {"file": ($truthy(($ret_or_1 = file)) ? ($ret_or_1) : ("(eval)")), "eval": true});
        compiling_options = Opal.hash({ arity_check: false }).$merge(default_eval_options);
        compiled = $Opal.$compile(string, compiling_options);
        block = $send($Kernel, 'proc', [], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s;

          return new Function("Opal,self", "return " + compiled)(Opal, self);}, {$$arity: 0, $$s: self});
      } else if ((($truthy(block['$nil?']()) && ($truthy($rb_ge(args.$length(), 1)))) && ($eqeq(args.$first()['$[]'](0), "@")))) {
        return self.$instance_variable_get(args.$first())
      } else if ($truthy(args['$any?']())) {
        $Kernel.$raise($$$('ArgumentError'), "wrong number of arguments (" + (args.$size()) + " for 0)")
      };
      
      var old = block.$$s,
          result;

      block.$$s = null;

      // Need to pass $$eval so that method definitions know if this is
      // being done on a class/module. Cannot be compiler driven since
      // send(:instance_eval) needs to work.
      if (self.$$is_a_module) {
        self.$$eval = true;
        try {
          result = block.call(self, self);
        }
        finally {
          self.$$eval = false;
        }
      }
      else {
        result = block.call(self, self);
      }

      block.$$s = old;

      return result;
    ;
    }, -1);
    
    $def(self, '$instance_exec', function $$instance_exec($a) {
      var block = $$instance_exec.$$p || nil, $post_args, args, self = this;

      $$instance_exec.$$p = null;
      
      ;
      $post_args = $slice.call(arguments);
      args = $post_args;
      if (!$truthy(block)) {
        $Kernel.$raise($$$('ArgumentError'), "no block given")
      };
      
      var block_self = block.$$s,
          result;

      block.$$s = null;

      if (self.$$is_a_module) {
        self.$$eval = true;
        try {
          result = block.apply(self, args);
        }
        finally {
          self.$$eval = false;
        }
      }
      else {
        result = block.apply(self, args);
      }

      block.$$s = block_self;

      return result;
    ;
    }, -1);
    
    $def(self, '$singleton_method_added', function $$singleton_method_added($a) {
      var $post_args, $rest_arg;

      
      $post_args = $slice.call(arguments);
      $rest_arg = $post_args;
      return nil;
    }, -1);
    
    $def(self, '$singleton_method_removed', function $$singleton_method_removed($a) {
      var $post_args, $rest_arg;

      
      $post_args = $slice.call(arguments);
      $rest_arg = $post_args;
      return nil;
    }, -1);
    
    $def(self, '$singleton_method_undefined', function $$singleton_method_undefined($a) {
      var $post_args, $rest_arg;

      
      $post_args = $slice.call(arguments);
      $rest_arg = $post_args;
      return nil;
    }, -1);
    
    $def(self, '$method_missing', function $$method_missing(symbol, $a) {
      var block = $$method_missing.$$p || nil, $post_args, args, self = this, inspect_result = nil;

      $$method_missing.$$p = null;
      
      ;
      $post_args = $slice.call(arguments, 1);
      args = $post_args;
      inspect_result = $Opal.$inspect(self);
      return $Kernel.$raise($$$('NoMethodError').$new("undefined method `" + (symbol) + "' for " + (inspect_result), symbol, args), nil, $Kernel.$caller(1));
    }, -2);
    $Opal.$pristine(self, "method_missing");
    return $def(self, '$respond_to_missing?', function $BasicObject_respond_to_missing$ques$5(method_name, include_all) {
      
      
      if (include_all == null) include_all = false;
      return false;
    }, -2);
  })('::', null)
};

Opal.modules["corelib/kernel"] = function(Opal) {/* Generated by Opal 1.6.1 */
  "use strict";
  var $truthy = Opal.truthy, $coerce_to = Opal.coerce_to, $respond_to = Opal.respond_to, $Opal = Opal.Opal, $deny_frozen_access = Opal.deny_frozen_access, $freeze = Opal.freeze, $freeze_props = Opal.freeze_props, $module = Opal.module, $return_val = Opal.return_val, $def = Opal.def, $Kernel = Opal.Kernel, $gvars = Opal.gvars, $slice = Opal.slice, $send = Opal.send, $to_a = Opal.to_a, $ensure_kwargs = Opal.ensure_kwargs, $eqeq = Opal.eqeq, $hash2 = Opal.hash2, $rb_plus = Opal.rb_plus, $eqeqeq = Opal.eqeqeq, $return_self = Opal.return_self, $rb_le = Opal.rb_le, $extract_kwargs = Opal.extract_kwargs, $rb_lt = Opal.rb_lt, $Object = Opal.Object, $alias = Opal.alias, $klass = Opal.klass, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('!,=~,==,object_id,raise,new,class,coerce_to?,<<,map,caller,nil?,allocate,copy_instance_variables,copy_singleton_methods,initialize_clone,frozen?,freeze,initialize_copy,define_method,singleton_class,to_proc,initialize_dup,for,empty?,pop,call,append_features,extend_object,extended,gets,__id__,include?,each,instance_variables,instance_variable_get,inspect,+,to_s,instance_variable_name!,respond_to?,to_int,coerce_to!,Integer,===,enum_for,result,any?,print,format,puts,<=,length,[],readline,<,first,split,to_str,exception,backtrace,rand,respond_to_missing?,pristine,try_convert!,expand_path,join,start_with?,new_seed,srand,tag,value,open,is_a?,__send__,yield_self,include');
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    
    $def(self, '$=~', $return_val(false), 0);
    
    $def(self, '$!~', function $Kernel_$excl_tilde$1(obj) {
      var self = this;

      return self['$=~'](obj)['$!']()
    }, 1);
    
    $def(self, '$===', function $Kernel_$eq_eq_eq$2(other) {
      var self = this, $ret_or_1 = nil;

      if ($truthy(($ret_or_1 = self.$object_id()['$=='](other.$object_id())))) {
        return $ret_or_1
      } else {
        return self['$=='](other)
      }
    }, 1);
    
    $def(self, '$<=>', function $Kernel_$lt_eq_gt$3(other) {
      var self = this;

      
      // set guard for infinite recursion
      self.$$comparable = true;

      var x = self['$=='](other);

      if (x && x !== nil) {
        return 0;
      }

      return nil;
    
    }, 1);
    
    $def(self, '$method', function $$method(name) {
      var self = this;

      
      var meth = self['$' + name];

      if (!meth || meth.$$stub) {
        $Kernel.$raise($$$('NameError').$new("undefined method `" + (name) + "' for class `" + (self.$class()) + "'", name));
      }

      return $$$('Method').$new(self, meth.$$owner || self.$class(), meth, name);
    
    }, 1);
    
    $def(self, '$methods', function $$methods(all) {
      var self = this;

      
      if (all == null) all = true;
      
      if ($truthy(all)) {
        return Opal.methods(self);
      } else {
        return Opal.own_methods(self);
      }
    ;
    }, -1);
    
    $def(self, '$public_methods', function $$public_methods(all) {
      var self = this;

      
      if (all == null) all = true;
      
      if ($truthy(all)) {
        return Opal.methods(self);
      } else {
        return Opal.receiver_methods(self);
      }
    ;
    }, -1);
    
    $def(self, '$Array', function $$Array(object) {
      
      
      var coerced;

      if (object === nil) {
        return [];
      }

      if (object.$$is_array) {
        return object;
      }

      coerced = $Opal['$coerce_to?'](object, $$$('Array'), "to_ary");
      if (coerced !== nil) { return coerced; }

      coerced = $Opal['$coerce_to?'](object, $$$('Array'), "to_a");
      if (coerced !== nil) { return coerced; }

      return [object];
    
    }, 1);
    
    $def(self, '$at_exit', function $$at_exit() {
      var block = $$at_exit.$$p || nil, $ret_or_1 = nil;
      if ($gvars.__at_exit__ == null) $gvars.__at_exit__ = nil;

      $$at_exit.$$p = null;
      
      ;
      $gvars.__at_exit__ = ($truthy(($ret_or_1 = $gvars.__at_exit__)) ? ($ret_or_1) : ([]));
      $gvars.__at_exit__['$<<'](block);
      return block;
    }, 0);
    
    $def(self, '$caller', function $$caller(start, length) {
      
      
      if (start == null) start = 1;
      if (length == null) length = nil;
      
      var stack, result;

      stack = new Error().$backtrace();
      result = [];

      for (var i = start + 1, ii = stack.length; i < ii; i++) {
        if (!stack[i].match(/runtime\.js/)) {
          result.push(stack[i]);
        }
      }
      if (length != nil) result = result.slice(0, length);
      return result;
    ;
    }, -1);
    
    $def(self, '$caller_locations', function $$caller_locations($a) {
      var $post_args, args, self = this;

      
      $post_args = $slice.call(arguments);
      args = $post_args;
      return $send($send(self, 'caller', $to_a(args)), 'map', [], function $$4(loc){
        
        if (loc == null) loc = nil;
        return $$$($$$($$$('Thread'), 'Backtrace'), 'Location').$new(loc);}, 1);
    }, -1);
    
    $def(self, '$class', function $Kernel_class$5() {
      var self = this;

      return self.$$class;
    }, 0);
    
    $def(self, '$copy_instance_variables', function $$copy_instance_variables(other) {
      var self = this;

      
      var keys = Object.keys(other), i, ii, name;
      for (i = 0, ii = keys.length; i < ii; i++) {
        name = keys[i];
        if (name.charAt(0) !== '$' && other.hasOwnProperty(name)) {
          self[name] = other[name];
        }
      }
    
    }, 1);
    
    $def(self, '$copy_singleton_methods', function $$copy_singleton_methods(other) {
      var self = this;

      
      var i, name, names, length;

      if (other.hasOwnProperty('$$meta') && other.$$meta !== null) {
        var other_singleton_class = Opal.get_singleton_class(other);
        var self_singleton_class = Opal.get_singleton_class(self);
        names = Object.getOwnPropertyNames(other_singleton_class.$$prototype);

        for (i = 0, length = names.length; i < length; i++) {
          name = names[i];
          if (Opal.is_method(name)) {
            self_singleton_class.$$prototype[name] = other_singleton_class.$$prototype[name];
          }
        }

        self_singleton_class.$$const = Object.assign({}, other_singleton_class.$$const);
        Object.setPrototypeOf(
          self_singleton_class.$$prototype,
          Object.getPrototypeOf(other_singleton_class.$$prototype)
        );
      }

      for (i = 0, names = Object.getOwnPropertyNames(other), length = names.length; i < length; i++) {
        name = names[i];
        if (name.charAt(0) === '$' && name.charAt(1) !== '$' && other.hasOwnProperty(name)) {
          self[name] = other[name];
        }
      }
    
    }, 1);
    
    $def(self, '$clone', function $$clone($kwargs) {
      var freeze, self = this, copy = nil;

      
      $kwargs = $ensure_kwargs($kwargs);
      
      freeze = $kwargs.$$smap["freeze"];if (freeze == null) freeze = nil;
      if (!(($truthy(freeze['$nil?']()) || ($eqeq(freeze, true))) || ($eqeq(freeze, false)))) {
        self.$raise($$('ArgumentError'), "unexpected value for freeze: " + (freeze.$class()))
      };
      copy = self.$class().$allocate();
      copy.$copy_instance_variables(self);
      copy.$copy_singleton_methods(self);
      copy.$initialize_clone(self, $hash2(["freeze"], {"freeze": freeze}));
      if (($eqeq(freeze, true) || (($truthy(freeze['$nil?']()) && ($truthy(self['$frozen?']())))))) {
        copy.$freeze()
      };
      return copy;
    }, -1);
    
    $def(self, '$initialize_clone', function $$initialize_clone(other, $kwargs) {
      var freeze, self = this;

      
      $kwargs = $ensure_kwargs($kwargs);
      
      freeze = $kwargs.$$smap["freeze"];if (freeze == null) freeze = nil;
      self.$initialize_copy(other);
      return self;
    }, -2);
    
    $def(self, '$define_singleton_method', function $$define_singleton_method(name, method) {
      var block = $$define_singleton_method.$$p || nil, self = this;

      $$define_singleton_method.$$p = null;
      
      ;
      ;
      return $send(self.$singleton_class(), 'define_method', [name, method], block.$to_proc());
    }, -2);
    
    $def(self, '$dup', function $$dup() {
      var self = this, copy = nil;

      
      copy = self.$class().$allocate();
      copy.$copy_instance_variables(self);
      copy.$initialize_dup(self);
      return copy;
    }, 0);
    
    $def(self, '$initialize_dup', function $$initialize_dup(other) {
      var self = this;

      return self.$initialize_copy(other)
    }, 1);
    
    $def(self, '$enum_for', function $$enum_for($a, $b) {
      var block = $$enum_for.$$p || nil, $post_args, method, args, self = this;

      $$enum_for.$$p = null;
      
      ;
      $post_args = $slice.call(arguments);
      
      if ($post_args.length > 0) method = $post_args.shift();if (method == null) method = "each";
      args = $post_args;
      return $send($$$('Enumerator'), 'for', [self, method].concat($to_a(args)), block.$to_proc());
    }, -1);
    
    $def(self, '$equal?', function $Kernel_equal$ques$6(other) {
      var self = this;

      return self === other;
    }, 1);
    
    $def(self, '$exit', function $$exit(status) {
      var $ret_or_1 = nil, block = nil;
      if ($gvars.__at_exit__ == null) $gvars.__at_exit__ = nil;

      
      if (status == null) status = true;
      $gvars.__at_exit__ = ($truthy(($ret_or_1 = $gvars.__at_exit__)) ? ($ret_or_1) : ([]));
      while (!($truthy($gvars.__at_exit__['$empty?']()))) {
      
        block = $gvars.__at_exit__.$pop();
        block.$call();
      };
      
      if (status.$$is_boolean) {
        status = status ? 0 : 1;
      } else {
        status = $coerce_to(status, $$$('Integer'), 'to_int')
      }

      Opal.exit(status);
    ;
      return nil;
    }, -1);
    
    $def(self, '$extend', function $$extend($a) {
      var $post_args, mods, self = this;

      
      $post_args = $slice.call(arguments);
      mods = $post_args;
      
      if (mods.length == 0) {
        self.$raise($$$('ArgumentError'), "wrong number of arguments (given 0, expected 1+)")
      }

      $deny_frozen_access(self);

      var singleton = self.$singleton_class();

      for (var i = mods.length - 1; i >= 0; i--) {
        var mod = mods[i];

        if (!mod.$$is_module) {
          $Kernel.$raise($$$('TypeError'), "wrong argument type " + ((mod).$class()) + " (expected Module)");
        }

        (mod).$append_features(singleton);
        (mod).$extend_object(self);
        (mod).$extended(self);
      }
    ;
      return self;
    }, -1);
    
    $def(self, '$freeze', function $$freeze() {
      var self = this;

      
      if ($truthy(self['$frozen?']())) {
        return self
      };
      
      if (typeof(self) === "object") {
        $freeze_props(self);
        return $freeze(self);
      }
      return self;
    ;
    }, 0);
    
    $def(self, '$frozen?', function $Kernel_frozen$ques$7() {
      var self = this;

      
      switch (typeof(self)) {
      case "string":
      case "symbol":
      case "number":
      case "boolean":
        return true;
      case "object":
        return (self.$$frozen || false);
      default:
        return false;
      }
    
    }, 0);
    
    $def(self, '$gets', function $$gets($a) {
      var $post_args, args;
      if ($gvars.stdin == null) $gvars.stdin = nil;

      
      $post_args = $slice.call(arguments);
      args = $post_args;
      return $send($gvars.stdin, 'gets', $to_a(args));
    }, -1);
    
    $def(self, '$hash', function $$hash() {
      var self = this;

      return self.$__id__()
    }, 0);
    
    $def(self, '$initialize_copy', $return_val(nil), 0);
    var inspect_stack = [];
    
    $def(self, '$inspect', function $$inspect() {
      var self = this, ivs = nil, id = nil, pushed = nil, e = nil;

      return (function() { try {
      try {
        
        ivs = "";
        id = self.$__id__();
        if ($truthy((inspect_stack)['$include?'](id))) {
          ivs = " ..."
        } else {
          
          (inspect_stack)['$<<'](id);
          pushed = true;
          $send(self.$instance_variables(), 'each', [], function $$8(i){var self = $$8.$$s == null ? this : $$8.$$s, ivar = nil, inspect = nil;

            
            if (i == null) i = nil;
            ivar = self.$instance_variable_get(i);
            inspect = $$('Opal').$inspect(ivar);
            return (ivs = $rb_plus(ivs, " " + (i) + "=" + (inspect)));}, {$$arity: 1, $$s: self});
        };
        return "#<" + (self.$class()) + ":0x" + (id.$to_s(16)) + (ivs) + ">";
      } catch ($err) {
        if (Opal.rescue($err, [$$('StandardError')])) {(e = $err)
          try {
            return "#<" + (self.$class()) + ":0x" + (id.$to_s(16)) + ">"
          } finally { Opal.pop_exception(); }
        } else { throw $err; }
      }
      } finally {
        ($truthy(pushed) ? ((inspect_stack).$pop()) : nil)
      }; })()
    }, 0);
    
    $def(self, '$instance_of?', function $Kernel_instance_of$ques$9(klass) {
      var self = this;

      
      if (!klass.$$is_class && !klass.$$is_module) {
        $Kernel.$raise($$$('TypeError'), "class or module required");
      }

      return self.$$class === klass;
    
    }, 1);
    
    $def(self, '$instance_variable_defined?', function $Kernel_instance_variable_defined$ques$10(name) {
      var self = this;

      
      name = $Opal['$instance_variable_name!'](name);
      return Opal.hasOwnProperty.call(self, name.substr(1));;
    }, 1);
    
    $def(self, '$instance_variable_get', function $$instance_variable_get(name) {
      var self = this;

      
      name = $Opal['$instance_variable_name!'](name);
      
      var ivar = self[Opal.ivar(name.substr(1))];

      return ivar == null ? nil : ivar;
    ;
    }, 1);
    
    $def(self, '$instance_variable_set', function $$instance_variable_set(name, value) {
      var self = this;

      
      $deny_frozen_access(self);
      name = $Opal['$instance_variable_name!'](name);
      return self[Opal.ivar(name.substr(1))] = value;;
    }, 2);
    
    $def(self, '$remove_instance_variable', function $$remove_instance_variable(name) {
      var self = this;

      
      name = $Opal['$instance_variable_name!'](name);
      
      var key = Opal.ivar(name.substr(1)),
          val;
      if (self.hasOwnProperty(key)) {
        val = self[key];
        delete self[key];
        return val;
      }
    ;
      return $Kernel.$raise($$$('NameError'), "instance variable " + (name) + " not defined");
    }, 1);
    
    $def(self, '$instance_variables', function $$instance_variables() {
      var self = this;

      
      var result = [], ivar;

      for (var name in self) {
        if (self.hasOwnProperty(name) && name.charAt(0) !== '$') {
          if (name.substr(-1) === '$') {
            ivar = name.slice(0, name.length - 1);
          } else {
            ivar = name;
          }
          result.push('@' + ivar);
        }
      }

      return result;
    
    }, 0);
    
    $def(self, '$Integer', function $$Integer(value, base) {
      
      
      ;
      
      var i, str, base_digits;

      if (!value.$$is_string) {
        if (base !== undefined) {
          $Kernel.$raise($$$('ArgumentError'), "base specified for non string value")
        }
        if (value === nil) {
          $Kernel.$raise($$$('TypeError'), "can't convert nil into Integer")
        }
        if (value.$$is_number) {
          if (value === Infinity || value === -Infinity || isNaN(value)) {
            $Kernel.$raise($$$('FloatDomainError'), value)
          }
          return Math.floor(value);
        }
        if (value['$respond_to?']("to_int")) {
          i = value.$to_int();
          if (i !== nil) {
            return i;
          }
        }
        return $Opal['$coerce_to!'](value, $$$('Integer'), "to_i");
      }

      if (value === "0") {
        return 0;
      }

      if (base === undefined) {
        base = 0;
      } else {
        base = $coerce_to(base, $$$('Integer'), 'to_int');
        if (base === 1 || base < 0 || base > 36) {
          $Kernel.$raise($$$('ArgumentError'), "invalid radix " + (base))
        }
      }

      str = value.toLowerCase();

      str = str.replace(/(\d)_(?=\d)/g, '$1');

      str = str.replace(/^(\s*[+-]?)(0[bodx]?)/, function (_, head, flag) {
        switch (flag) {
        case '0b':
          if (base === 0 || base === 2) {
            base = 2;
            return head;
          }
          // no-break
        case '0':
        case '0o':
          if (base === 0 || base === 8) {
            base = 8;
            return head;
          }
          // no-break
        case '0d':
          if (base === 0 || base === 10) {
            base = 10;
            return head;
          }
          // no-break
        case '0x':
          if (base === 0 || base === 16) {
            base = 16;
            return head;
          }
          // no-break
        }
        $Kernel.$raise($$$('ArgumentError'), "invalid value for Integer(): \"" + (value) + "\"")
      });

      base = (base === 0 ? 10 : base);

      base_digits = '0-' + (base <= 10 ? base - 1 : '9a-' + String.fromCharCode(97 + (base - 11)));

      if (!(new RegExp('^\\s*[+-]?[' + base_digits + ']+\\s*$')).test(str)) {
        $Kernel.$raise($$$('ArgumentError'), "invalid value for Integer(): \"" + (value) + "\"")
      }

      i = parseInt(str, base);

      if (isNaN(i)) {
        $Kernel.$raise($$$('ArgumentError'), "invalid value for Integer(): \"" + (value) + "\"")
      }

      return i;
    ;
    }, -2);
    
    $def(self, '$Float', function $$Float(value) {
      
      
      var str;

      if (value === nil) {
        $Kernel.$raise($$$('TypeError'), "can't convert nil into Float")
      }

      if (value.$$is_string) {
        str = value.toString();

        str = str.replace(/(\d)_(?=\d)/g, '$1');

        //Special case for hex strings only:
        if (/^\s*[-+]?0[xX][0-9a-fA-F]+\s*$/.test(str)) {
          return $Kernel.$Integer(str);
        }

        if (!/^\s*[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?\s*$/.test(str)) {
          $Kernel.$raise($$$('ArgumentError'), "invalid value for Float(): \"" + (value) + "\"")
        }

        return parseFloat(str);
      }

      return $Opal['$coerce_to!'](value, $$$('Float'), "to_f");
    
    }, 1);
    
    $def(self, '$Hash', function $$Hash(arg) {
      
      
      if (($truthy(arg['$nil?']()) || ($eqeq(arg, [])))) {
        return $hash2([], {})
      };
      if ($eqeqeq($$$('Hash'), arg)) {
        return arg
      };
      return $Opal['$coerce_to!'](arg, $$$('Hash'), "to_hash");
    }, 1);
    
    $def(self, '$is_a?', function $Kernel_is_a$ques$11(klass) {
      var self = this;

      
      if (!klass.$$is_class && !klass.$$is_module) {
        $Kernel.$raise($$$('TypeError'), "class or module required");
      }

      return Opal.is_a(self, klass);
    
    }, 1);
    
    $def(self, '$itself', $return_self, 0);
    
    $def(self, '$lambda', function $$lambda() {
      var block = $$lambda.$$p || nil;

      $$lambda.$$p = null;
      
      ;
      return Opal.lambda(block);;
    }, 0);
    
    $def(self, '$load', function $$load(file) {
      
      
      file = $Opal['$coerce_to!'](file, $$$('String'), "to_str");
      return Opal.load(file);
    }, 1);
    
    $def(self, '$loop', function $$loop() {
      var $yield = $$loop.$$p || nil, self = this, e = nil;

      $$loop.$$p = null;
      
      if (!($yield !== nil)) {
        return $send(self, 'enum_for', ["loop"], function $$12(){
          return $$$($$$('Float'), 'INFINITY')}, 0)
      };
      while ($truthy(true)) {
      
        try {
          Opal.yieldX($yield, [])
        } catch ($err) {
          if (Opal.rescue($err, [$$$('StopIteration')])) {(e = $err)
            try {
              return e.$result()
            } finally { Opal.pop_exception(); }
          } else { throw $err; }
        };
      };
      return self;
    }, 0);
    
    $def(self, '$nil?', $return_val(false), 0);
    
    $def(self, '$printf', function $$printf($a) {
      var $post_args, args, self = this;

      
      $post_args = $slice.call(arguments);
      args = $post_args;
      if ($truthy(args['$any?']())) {
        self.$print($send(self, 'format', $to_a(args)))
      };
      return nil;
    }, -1);
    
    $def(self, '$proc', function $$proc() {
      var block = $$proc.$$p || nil;

      $$proc.$$p = null;
      
      ;
      if (!$truthy(block)) {
        $Kernel.$raise($$$('ArgumentError'), "tried to create Proc object without a block")
      };
      block.$$is_lambda = false;
      return block;
    }, 0);
    
    $def(self, '$puts', function $$puts($a) {
      var $post_args, strs;
      if ($gvars.stdout == null) $gvars.stdout = nil;

      
      $post_args = $slice.call(arguments);
      strs = $post_args;
      return $send($gvars.stdout, 'puts', $to_a(strs));
    }, -1);
    
    $def(self, '$p', function $$p($a) {
      var $post_args, args;

      
      $post_args = $slice.call(arguments);
      args = $post_args;
      $send(args, 'each', [], function $$13(obj){        if ($gvars.stdout == null) $gvars.stdout = nil;

        
        if (obj == null) obj = nil;
        return $gvars.stdout.$puts(obj.$inspect());}, 1);
      if ($truthy($rb_le(args.$length(), 1))) {
        return args['$[]'](0)
      } else {
        return args
      };
    }, -1);
    
    $def(self, '$print', function $$print($a) {
      var $post_args, strs;
      if ($gvars.stdout == null) $gvars.stdout = nil;

      
      $post_args = $slice.call(arguments);
      strs = $post_args;
      return $send($gvars.stdout, 'print', $to_a(strs));
    }, -1);
    
    $def(self, '$readline', function $$readline($a) {
      var $post_args, args;
      if ($gvars.stdin == null) $gvars.stdin = nil;

      
      $post_args = $slice.call(arguments);
      args = $post_args;
      return $send($gvars.stdin, 'readline', $to_a(args));
    }, -1);
    
    $def(self, '$warn', function $$warn($a, $b) {
      var $post_args, $kwargs, strs, uplevel, $c, $d, self = this, location = nil;
      if ($gvars.VERBOSE == null) $gvars.VERBOSE = nil;
      if ($gvars.stderr == null) $gvars.stderr = nil;

      
      $post_args = $slice.call(arguments);
      $kwargs = $extract_kwargs($post_args);
      $kwargs = $ensure_kwargs($kwargs);
      strs = $post_args;
      
      uplevel = $kwargs.$$smap["uplevel"];if (uplevel == null) uplevel = nil;
      if ($truthy(uplevel)) {
        
        uplevel = $Opal['$coerce_to!'](uplevel, $$$('Integer'), "to_str");
        if ($truthy($rb_lt(uplevel, 0))) {
          $Kernel.$raise($$$('ArgumentError'), "negative level (" + (uplevel) + ")")
        };
        location = ($c = ($d = self.$caller($rb_plus(uplevel, 1), 1).$first(), ($d === nil || $d == null) ? nil : $d.$split(":in `")), ($c === nil || $c == null) ? nil : $c.$first());
        if ($truthy(location)) {
          location = "" + (location) + ": "
        };
        strs = $send(strs, 'map', [], function $$14(s){
          
          if (s == null) s = nil;
          return "" + (location) + "warning: " + (s);}, 1);
      };
      if (($truthy($gvars.VERBOSE['$nil?']()) || ($truthy(strs['$empty?']())))) {
        return nil
      } else {
        return $send($gvars.stderr, 'puts', $to_a(strs))
      };
    }, -1);
    
    $def(self, '$raise', function $$raise(exception, string, backtrace) {
            if ($gvars["!"] == null) $gvars["!"] = nil;
      if ($gvars["@"] == null) $gvars["@"] = nil;

      
      ;
      if (string == null) string = nil;
      if (backtrace == null) backtrace = nil;
      
      if (exception == null && $gvars["!"] !== nil) {
        throw $gvars["!"];
      }
      if (exception == null) {
        exception = $$$('RuntimeError').$new("");
      }
      else if ($respond_to(exception, '$to_str')) {
        exception = $$$('RuntimeError').$new(exception.$to_str());
      }
      // using respond_to? and not an undefined check to avoid method_missing matching as true
      else if (exception.$$is_class && $respond_to(exception, '$exception')) {
        exception = exception.$exception(string);
      }
      else if (exception.$$is_exception) {
        // exception is fine
      }
      else {
        exception = $$$('TypeError').$new("exception class/object expected");
      }

      if (backtrace !== nil) {
        exception.$set_backtrace(backtrace);
      }

      if ($gvars["!"] !== nil) {
        Opal.exceptions.push($gvars["!"]);
      }

      $gvars["!"] = exception;
      $gvars["@"] = (exception).$backtrace();

      throw exception;
    ;
    }, -1);
    
    $def(self, '$rand', function $$rand(max) {
      
      
      ;
      
      if (max === undefined) {
        return $$$($$$('Random'), 'DEFAULT').$rand();
      }

      if (max.$$is_number) {
        if (max < 0) {
          max = Math.abs(max);
        }

        if (max % 1 !== 0) {
          max = max.$to_i();
        }

        if (max === 0) {
          max = undefined;
        }
      }
    ;
      return $$$($$$('Random'), 'DEFAULT').$rand(max);
    }, -1);
    
    $def(self, '$respond_to?', function $Kernel_respond_to$ques$15(name, include_all) {
      var self = this;

      
      if (include_all == null) include_all = false;
      
      var body = self['$' + name];

      if (typeof(body) === "function" && !body.$$stub) {
        return true;
      }

      if (self['$respond_to_missing?'].$$pristine === true) {
        return false;
      } else {
        return self['$respond_to_missing?'](name, include_all);
      }
    ;
    }, -2);
    
    $def(self, '$respond_to_missing?', function $Kernel_respond_to_missing$ques$16(method_name, include_all) {
      
      
      if (include_all == null) include_all = false;
      return false;
    }, -2);
    $Opal.$pristine(self, "respond_to?", "respond_to_missing?");
    
    $def(self, '$require', function $$require(file) {
      
      
      // As Object.require refers to Kernel.require once Kernel has been loaded the String
      // class may not be available yet, the coercion requires both  String and Array to be loaded.
      if (typeof file !== 'string' && Opal.String && Opal.Array) {
        (file = $Opal['$coerce_to!'](file, $$$('String'), "to_str"))
      }
      return Opal.require(file)
    
    }, 1);
    
    $def(self, '$require_relative', function $$require_relative(file) {
      
      
      $Opal['$try_convert!'](file, $$$('String'), "to_str");
      file = $$$('File').$expand_path($$$('File').$join(Opal.current_file, "..", file));
      return Opal.require(file);
    }, 1);
    
    $def(self, '$require_tree', function $$require_tree(path, $kwargs) {
      var autoload;

      
      $kwargs = $ensure_kwargs($kwargs);
      
      autoload = $kwargs.$$smap["autoload"];if (autoload == null) autoload = false;
      
      var result = [];

      path = $$$('File').$expand_path(path)
      path = Opal.normalize(path);
      if (path === '.') path = '';
      for (var name in Opal.modules) {
        if ((name)['$start_with?'](path)) {
          if(!autoload) {
            result.push([name, Opal.require(name)]);
          } else {
            result.push([name, true]); // do nothing, delegated to a autoloading
          }
        }
      }

      return result;
    ;
    }, -2);
    
    $def(self, '$singleton_class', function $$singleton_class() {
      var self = this;

      return Opal.get_singleton_class(self);
    }, 0);
    
    $def(self, '$sleep', function $$sleep(seconds) {
      
      
      if (seconds == null) seconds = nil;
      
      if (seconds === nil) {
        $Kernel.$raise($$$('TypeError'), "can't convert NilClass into time interval")
      }
      if (!seconds.$$is_number) {
        $Kernel.$raise($$$('TypeError'), "can't convert " + (seconds.$class()) + " into time interval")
      }
      if (seconds < 0) {
        $Kernel.$raise($$$('ArgumentError'), "time interval must be positive")
      }
      var get_time = Opal.global.performance ?
        function() {return performance.now()} :
        function() {return new Date()}

      var t = get_time();
      while (get_time() - t <= seconds * 1000);
      return Math.round(seconds);
    ;
    }, -1);
    
    $def(self, '$srand', function $$srand(seed) {
      
      
      if (seed == null) seed = $$('Random').$new_seed();
      return $$$('Random').$srand(seed);
    }, -1);
    
    $def(self, '$String', function $$String(str) {
      var $ret_or_1 = nil;

      if ($truthy(($ret_or_1 = $Opal['$coerce_to?'](str, $$$('String'), "to_str")))) {
        return $ret_or_1
      } else {
        return $Opal['$coerce_to!'](str, $$$('String'), "to_s")
      }
    }, 1);
    
    $def(self, '$tap', function $$tap() {
      var block = $$tap.$$p || nil, self = this;

      $$tap.$$p = null;
      
      ;
      Opal.yield1(block, self);
      return self;
    }, 0);
    
    $def(self, '$to_proc', $return_self, 0);
    
    $def(self, '$to_s', function $$to_s() {
      var self = this;

      return "#<" + (self.$class()) + ":0x" + (self.$__id__().$to_s(16)) + ">"
    }, 0);
    
    $def(self, '$catch', function $Kernel_catch$17(tag) {
      var $yield = $Kernel_catch$17.$$p || nil, $ret_or_1 = nil, e = nil;

      $Kernel_catch$17.$$p = null;
      
      if (tag == null) tag = nil;
      try {
        
        tag = ($truthy(($ret_or_1 = tag)) ? ($ret_or_1) : ($Object.$new()));
        return Opal.yield1($yield, tag);;
      } catch ($err) {
        if (Opal.rescue($err, [$$$('UncaughtThrowError')])) {(e = $err)
          try {
            
            if ($eqeq(e.$tag(), tag)) {
              return e.$value()
            };
            return $Kernel.$raise();
          } finally { Opal.pop_exception(); }
        } else { throw $err; }
      };
    }, -1);
    
    $def(self, '$throw', function $Kernel_throw$18(tag, obj) {
      
      
      if (obj == null) obj = nil;
      return $Kernel.$raise($$$('UncaughtThrowError').$new(tag, obj));
    }, -2);
    
    $def(self, '$open', function $$open($a) {
      var block = $$open.$$p || nil, $post_args, args;

      $$open.$$p = null;
      
      ;
      $post_args = $slice.call(arguments);
      args = $post_args;
      return $send($$$('File'), 'open', $to_a(args), block.$to_proc());
    }, -1);
    
    $def(self, '$yield_self', function $$yield_self() {
      var $yield = $$yield_self.$$p || nil, self = this;

      $$yield_self.$$p = null;
      
      if (!($yield !== nil)) {
        return $send(self, 'enum_for', ["yield_self"], $return_val(1), 0)
      };
      return Opal.yield1($yield, self);;
    }, 0);
    $alias(self, "fail", "raise");
    $alias(self, "kind_of?", "is_a?");
    $alias(self, "object_id", "__id__");
    $alias(self, "public_send", "__send__");
    $alias(self, "send", "__send__");
    $alias(self, "then", "yield_self");
    return $alias(self, "to_enum", "enum_for");
  })('::', $nesting);
  return (function($base, $super) {
    var self = $klass($base, $super, 'Object');

    
    
    delete $Object.$$prototype.$require;
    return self.$include($Kernel);
  })('::', null);
};

Opal.modules["corelib/struct"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $klass = Opal.klass, $slice = Opal.slice, $extract_kwargs = Opal.extract_kwargs, $ensure_kwargs = Opal.ensure_kwargs, $truthy = Opal.truthy, $neqeq = Opal.neqeq, $eqeq = Opal.eqeq, $Opal = Opal.Opal, $send = Opal.send, $Class = Opal.Class, $to_a = Opal.to_a, $def = Opal.def, $defs = Opal.defs, $Kernel = Opal.Kernel, $hash2 = Opal.hash2, $rb_gt = Opal.rb_gt, $rb_minus = Opal.rb_minus, $eqeqeq = Opal.eqeqeq, $rb_lt = Opal.rb_lt, $rb_ge = Opal.rb_ge, $rb_plus = Opal.rb_plus, $alias = Opal.alias, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,include,!=,upcase,[],==,class,unshift,const_name!,map,coerce_to!,new,each,define_struct_attribute,allocate,initialize,alias_method,module_eval,to_proc,const_set,raise,<<,members,define_method,instance_eval,last,>,length,-,keys,any?,join,[]=,each_with_index,hash,===,<,-@,size,>=,include?,to_sym,instance_of?,__id__,eql?,enum_for,+,name,each_pair,inspect,to_h,args,each_with_object,flatten,to_a,respond_to?,dig');
  
  self.$require("corelib/enumerable");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Struct');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    self.$include($$$('Enumerable'));
    $defs(self, '$new', function $Struct_new$1(const_name, $a, $b) {
      var block = $Struct_new$1.$$p || nil, $post_args, $kwargs, args, keyword_init, self = this, klass = nil;

      $Struct_new$1.$$p = null;
      
      ;
      $post_args = $slice.call(arguments, 1);
      $kwargs = $extract_kwargs($post_args);
      $kwargs = $ensure_kwargs($kwargs);
      args = $post_args;
      
      keyword_init = $kwargs.$$smap["keyword_init"];if (keyword_init == null) keyword_init = false;
      if ($truthy(const_name)) {
        if (($eqeq(const_name.$class(), $$$('String')) && ($neqeq(const_name['$[]'](0).$upcase(), const_name['$[]'](0))))) {
          
          args.$unshift(const_name);
          const_name = nil;
        } else {
          
          try {
            const_name = $Opal['$const_name!'](const_name)
          } catch ($err) {
            if (Opal.rescue($err, [$$$('TypeError'), $$$('NameError')])) {
              try {
                
                args.$unshift(const_name);
                const_name = nil;
              } finally { Opal.pop_exception(); }
            } else { throw $err; }
          };
        }
      };
      $send(args, 'map', [], function $$2(arg){
        
        if (arg == null) arg = nil;
        return $Opal['$coerce_to!'](arg, $$$('String'), "to_str");}, 1);
      klass = $send($Class, 'new', [self], function $$3(){var self = $$3.$$s == null ? this : $$3.$$s;

        
        $send(args, 'each', [], function $$4(arg){var self = $$4.$$s == null ? this : $$4.$$s;

          
          if (arg == null) arg = nil;
          return self.$define_struct_attribute(arg);}, {$$arity: 1, $$s: self});
        return (function(self, $parent_nesting) {
          
          
          
          $def(self, '$new', function $new$5($a) {
            var $post_args, args, self = this, instance = nil;

            
            $post_args = $slice.call(arguments);
            args = $post_args;
            instance = self.$allocate();
            instance.$$data = {};
            $send(instance, 'initialize', $to_a(args));
            return instance;
          }, -1);
          return self.$alias_method("[]", "new");
        })(Opal.get_singleton_class(self), $nesting);}, {$$arity: 0, $$s: self});
      if ($truthy(block)) {
        $send(klass, 'module_eval', [], block.$to_proc())
      };
      klass.$$keyword_init = keyword_init;
      if ($truthy(const_name)) {
        $$$('Struct').$const_set(const_name, klass)
      };
      return klass;
    }, -2);
    $defs(self, '$define_struct_attribute', function $$define_struct_attribute(name) {
      var self = this;

      
      if ($eqeq(self, $$$('Struct'))) {
        $Kernel.$raise($$$('ArgumentError'), "you cannot define attributes to the Struct class")
      };
      self.$members()['$<<'](name);
      $send(self, 'define_method', [name], function $$6(){var self = $$6.$$s == null ? this : $$6.$$s;

        return self.$$data[name];}, {$$arity: 0, $$s: self});
      return $send(self, 'define_method', ["" + (name) + "="], function $$7(value){var self = $$7.$$s == null ? this : $$7.$$s;

        
        if (value == null) value = nil;
        return self.$$data[name] = value;;}, {$$arity: 1, $$s: self});
    }, 1);
    $defs(self, '$members', function $$members() {
      var self = this, $ret_or_1 = nil;
      if (self.members == null) self.members = nil;

      
      if ($eqeq(self, $$$('Struct'))) {
        $Kernel.$raise($$$('ArgumentError'), "the Struct class has no members")
      };
      return (self.members = ($truthy(($ret_or_1 = self.members)) ? ($ret_or_1) : ([])));
    }, 0);
    $defs(self, '$inherited', function $$inherited(klass) {
      var self = this, members = nil;
      if (self.members == null) self.members = nil;

      
      members = self.members;
      return $send(klass, 'instance_eval', [], function $$8(){var self = $$8.$$s == null ? this : $$8.$$s;

        return (self.members = members)}, {$$arity: 0, $$s: self});
    }, 1);
    
    $def(self, '$initialize', function $$initialize($a) {
      var $post_args, args, self = this, kwargs = nil, $ret_or_1 = nil, extra = nil;

      
      $post_args = $slice.call(arguments);
      args = $post_args;
      if ($truthy(self.$class().$$keyword_init)) {
        
        kwargs = ($truthy(($ret_or_1 = args.$last())) ? ($ret_or_1) : ($hash2([], {})));
        if (($truthy($rb_gt(args.$length(), 1)) || ($truthy((args.length === 1 && !kwargs.$$is_hash))))) {
          $Kernel.$raise($$$('ArgumentError'), "wrong number of arguments (given " + (args.$length()) + ", expected 0)")
        };
        extra = $rb_minus(kwargs.$keys(), self.$class().$members());
        if ($truthy(extra['$any?']())) {
          $Kernel.$raise($$$('ArgumentError'), "unknown keywords: " + (extra.$join(", ")))
        };
        return $send(self.$class().$members(), 'each', [], function $$9(name){var $b, self = $$9.$$s == null ? this : $$9.$$s;

          
          if (name == null) name = nil;
          return ($b = [name, kwargs['$[]'](name)], $send(self, '[]=', $b), $b[$b.length - 1]);}, {$$arity: 1, $$s: self});
      } else {
        
        if ($truthy($rb_gt(args.$length(), self.$class().$members().$length()))) {
          $Kernel.$raise($$$('ArgumentError'), "struct size differs")
        };
        return $send(self.$class().$members(), 'each_with_index', [], function $$10(name, index){var $b, self = $$10.$$s == null ? this : $$10.$$s;

          
          if (name == null) name = nil;
          if (index == null) index = nil;
          return ($b = [name, args['$[]'](index)], $send(self, '[]=', $b), $b[$b.length - 1]);}, {$$arity: 2, $$s: self});
      };
    }, -1);
    
    $def(self, '$initialize_copy', function $$initialize_copy(from) {
      var self = this;

      
      self.$$data = {}
      var keys = Object.keys(from.$$data), i, max, name;
      for (i = 0, max = keys.length; i < max; i++) {
        name = keys[i];
        self.$$data[name] = from.$$data[name];
      }
    
    }, 1);
    $defs(self, '$keyword_init?', function $Struct_keyword_init$ques$11() {
      var self = this;

      return self.$$keyword_init;
    }, 0);
    
    $def(self, '$members', function $$members() {
      var self = this;

      return self.$class().$members()
    }, 0);
    
    $def(self, '$hash', function $$hash() {
      var self = this;

      return $$('Hash').$new(self.$$data).$hash()
    }, 0);
    
    $def(self, '$[]', function $Struct_$$$12(name) {
      var self = this;

      
      if ($eqeqeq($$$('Integer'), name)) {
        
        if ($truthy($rb_lt(name, self.$class().$members().$size()['$-@']()))) {
          $Kernel.$raise($$$('IndexError'), "offset " + (name) + " too small for struct(size:" + (self.$class().$members().$size()) + ")")
        };
        if ($truthy($rb_ge(name, self.$class().$members().$size()))) {
          $Kernel.$raise($$$('IndexError'), "offset " + (name) + " too large for struct(size:" + (self.$class().$members().$size()) + ")")
        };
        name = self.$class().$members()['$[]'](name);
      } else if ($eqeqeq($$$('String'), name)) {
        
        if(!self.$$data.hasOwnProperty(name)) {
          $Kernel.$raise($$$('NameError').$new("no member '" + (name) + "' in struct", name))
        }
      
      } else {
        $Kernel.$raise($$$('TypeError'), "no implicit conversion of " + (name.$class()) + " into Integer")
      };
      name = $Opal['$coerce_to!'](name, $$$('String'), "to_str");
      return self.$$data[name];;
    }, 1);
    
    $def(self, '$[]=', function $Struct_$$$eq$13(name, value) {
      var self = this;

      
      if ($eqeqeq($$$('Integer'), name)) {
        
        if ($truthy($rb_lt(name, self.$class().$members().$size()['$-@']()))) {
          $Kernel.$raise($$$('IndexError'), "offset " + (name) + " too small for struct(size:" + (self.$class().$members().$size()) + ")")
        };
        if ($truthy($rb_ge(name, self.$class().$members().$size()))) {
          $Kernel.$raise($$$('IndexError'), "offset " + (name) + " too large for struct(size:" + (self.$class().$members().$size()) + ")")
        };
        name = self.$class().$members()['$[]'](name);
      } else if ($eqeqeq($$$('String'), name)) {
        if (!$truthy(self.$class().$members()['$include?'](name.$to_sym()))) {
          $Kernel.$raise($$$('NameError').$new("no member '" + (name) + "' in struct", name))
        }
      } else {
        $Kernel.$raise($$$('TypeError'), "no implicit conversion of " + (name.$class()) + " into Integer")
      };
      name = $Opal['$coerce_to!'](name, $$$('String'), "to_str");
      return self.$$data[name] = value;;
    }, 2);
    
    $def(self, '$==', function $Struct_$eq_eq$14(other) {
      var self = this;

      
      if (!$truthy(other['$instance_of?'](self.$class()))) {
        return false
      };
      
      var recursed1 = {}, recursed2 = {};

      function _eqeq(struct, other) {
        var key, a, b;

        recursed1[(struct).$__id__()] = true;
        recursed2[(other).$__id__()] = true;

        for (key in struct.$$data) {
          a = struct.$$data[key];
          b = other.$$data[key];

          if ($$$('Struct')['$==='](a)) {
            if (!recursed1.hasOwnProperty((a).$__id__()) || !recursed2.hasOwnProperty((b).$__id__())) {
              if (!_eqeq(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$=='](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eqeq(self, other);
    ;
    }, 1);
    
    $def(self, '$eql?', function $Struct_eql$ques$15(other) {
      var self = this;

      
      if (!$truthy(other['$instance_of?'](self.$class()))) {
        return false
      };
      
      var recursed1 = {}, recursed2 = {};

      function _eqeq(struct, other) {
        var key, a, b;

        recursed1[(struct).$__id__()] = true;
        recursed2[(other).$__id__()] = true;

        for (key in struct.$$data) {
          a = struct.$$data[key];
          b = other.$$data[key];

          if ($$$('Struct')['$==='](a)) {
            if (!recursed1.hasOwnProperty((a).$__id__()) || !recursed2.hasOwnProperty((b).$__id__())) {
              if (!_eqeq(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$eql?'](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eqeq(self, other);
    ;
    }, 1);
    
    $def(self, '$each', function $$each() {
      var $yield = $$each.$$p || nil, self = this;

      $$each.$$p = null;
      
      if (!($yield !== nil)) {
        return $send(self, 'enum_for', ["each"], function $$16(){var self = $$16.$$s == null ? this : $$16.$$s;

          return self.$size()}, {$$arity: 0, $$s: self})
      };
      $send(self.$class().$members(), 'each', [], function $$17(name){var self = $$17.$$s == null ? this : $$17.$$s;

        
        if (name == null) name = nil;
        return Opal.yield1($yield, self['$[]'](name));;}, {$$arity: 1, $$s: self});
      return self;
    }, 0);
    
    $def(self, '$each_pair', function $$each_pair() {
      var $yield = $$each_pair.$$p || nil, self = this;

      $$each_pair.$$p = null;
      
      if (!($yield !== nil)) {
        return $send(self, 'enum_for', ["each_pair"], function $$18(){var self = $$18.$$s == null ? this : $$18.$$s;

          return self.$size()}, {$$arity: 0, $$s: self})
      };
      $send(self.$class().$members(), 'each', [], function $$19(name){var self = $$19.$$s == null ? this : $$19.$$s;

        
        if (name == null) name = nil;
        return Opal.yield1($yield, [name, self['$[]'](name)]);;}, {$$arity: 1, $$s: self});
      return self;
    }, 0);
    
    $def(self, '$length', function $$length() {
      var self = this;

      return self.$class().$members().$length()
    }, 0);
    
    $def(self, '$to_a', function $$to_a() {
      var self = this;

      return $send(self.$class().$members(), 'map', [], function $$20(name){var self = $$20.$$s == null ? this : $$20.$$s;

        
        if (name == null) name = nil;
        return self['$[]'](name);}, {$$arity: 1, $$s: self})
    }, 0);
    var inspect_stack = [];
    
    $def(self, '$inspect', function $$inspect() {
      var self = this, result = nil, pushed = nil;

      return (function() { try {
      
      result = "#<struct ";
      if ($truthy((inspect_stack)['$include?'](self.$__id__()))) {
        return $rb_plus(result, ":...>")
      } else {
        
        (inspect_stack)['$<<'](self.$__id__());
        pushed = true;
        if (($eqeqeq($$$('Struct'), self) && ($truthy(self.$class().$name())))) {
          result = $rb_plus(result, "" + (self.$class()) + " ")
        };
        result = $rb_plus(result, $send(self.$each_pair(), 'map', [], function $$21(name, value){
          
          if (name == null) name = nil;
          if (value == null) value = nil;
          return "" + (name) + "=" + ($$('Opal').$inspect(value));}, 2).$join(", "));
        result = $rb_plus(result, ">");
        return result;
      };
      } finally {
        ($truthy(pushed) ? (inspect_stack.pop()) : nil)
      }; })()
    }, 0);
    
    $def(self, '$to_h', function $$to_h() {
      var block = $$to_h.$$p || nil, self = this;

      $$to_h.$$p = null;
      
      ;
      if ((block !== nil)) {
        return $send($send(self, 'map', [], block.$to_proc()), 'to_h', $to_a(self.$args()))
      };
      return $send(self.$class().$members(), 'each_with_object', [$hash2([], {})], function $$22(name, h){var $a, self = $$22.$$s == null ? this : $$22.$$s;

        
        if (name == null) name = nil;
        if (h == null) h = nil;
        return ($a = [name, self['$[]'](name)], $send(h, '[]=', $a), $a[$a.length - 1]);}, {$$arity: 2, $$s: self});
    }, 0);
    
    $def(self, '$values_at', function $$values_at($a) {
      var $post_args, args, self = this;

      
      $post_args = $slice.call(arguments);
      args = $post_args;
      args = $send(args, 'map', [], function $$23(arg){
        
        if (arg == null) arg = nil;
        return arg.$$is_range ? arg.$to_a() : arg;}, 1).$flatten();
      
      var result = [];
      for (var i = 0, len = args.length; i < len; i++) {
        if (!args[i].$$is_number) {
          $Kernel.$raise($$$('TypeError'), "no implicit conversion of " + ((args[i]).$class()) + " into Integer")
        }
        result.push(self['$[]'](args[i]));
      }
      return result;
    ;
    }, -1);
    
    $def(self, '$dig', function $$dig(key, $a) {
      var $post_args, keys, self = this, item = nil;

      
      $post_args = $slice.call(arguments, 1);
      keys = $post_args;
      item = ($truthy(key.$$is_string && self.$$data.hasOwnProperty(key)) ? (self.$$data[key] || nil) : nil);
      
      if (item === nil || keys.length === 0) {
        return item;
      }
    ;
      if (!$truthy(item['$respond_to?']("dig"))) {
        $Kernel.$raise($$$('TypeError'), "" + (item.$class()) + " does not have #dig method")
      };
      return $send(item, 'dig', $to_a(keys));
    }, -2);
    $alias(self, "size", "length");
    $alias(self, "to_s", "inspect");
    return $alias(self, "values", "to_a");
  })('::', null, $nesting);
};

Opal.modules["corelib/rational/base"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $module = Opal.module, $def = Opal.def, $klass = Opal.klass, nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('convert,from_string');
  
  (function($base) {
    var self = $module($base, 'Kernel');

    
    return $def(self, '$Rational', function $$Rational(numerator, denominator) {
      
      
      if (denominator == null) denominator = 1;
      return $$$('Rational').$convert(numerator, denominator);
    }, -2)
  })('::');
  return (function($base, $super) {
    var self = $klass($base, $super, 'String');

    
    return $def(self, '$to_r', function $$to_r() {
      var self = this;

      return $$$('Rational').$from_string(self)
    }, 0)
  })('::', null);
};

Opal.modules["corelib/class"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $klass = Opal.klass, $send = Opal.send, $defs = Opal.defs, $def = Opal.def, $rb_plus = Opal.rb_plus, $return_val = Opal.return_val, $slice = Opal.slice, $send2 = Opal.send2, $find_super = Opal.find_super, $alias = Opal.alias, self = Opal.top, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('require,class_eval,to_proc,+,subclasses,flatten,map,initialize_copy,allocate,name,to_s');
  
  self.$require("corelib/module");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Class');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $defs(self, '$new', function $Class_new$1(superclass) {
      var block = $Class_new$1.$$p || nil;

      $Class_new$1.$$p = null;
      
      ;
      if (superclass == null) superclass = $$('Object');
      
      if (!superclass.$$is_class) {
        throw Opal.TypeError.$new("superclass must be a Class");
      }

      var klass = Opal.allocate_class(nil, superclass);
      superclass.$inherited(klass);
      ((block !== nil) ? ($send((klass), 'class_eval', [], block.$to_proc())) : nil)
      return klass;
    ;
    }, -1);
    
    $def(self, '$allocate', function $$allocate() {
      var self = this;

      
      var obj = new self.$$constructor();
      obj.$$id = Opal.uid();
      return obj;
    
    }, 0);
    
    $def(self, '$descendants', function $$descendants() {
      var self = this;

      return $rb_plus(self.$subclasses(), $send(self.$subclasses(), 'map', [], "descendants".$to_proc()).$flatten())
    }, 0);
    
    $def(self, '$inherited', $return_val(nil), 0);
    
    $def(self, '$initialize_dup', function $$initialize_dup(original) {
      var self = this;

      
      self.$initialize_copy(original);
      
      self.$$name = null;
      self.$$full_name = null;
    ;
    }, 1);
    
    $def(self, '$new', function $Class_new$2($a) {
      var block = $Class_new$2.$$p || nil, $post_args, args, self = this;

      $Class_new$2.$$p = null;
      
      ;
      $post_args = $slice.call(arguments);
      args = $post_args;
      
      var object = self.$allocate();
      Opal.send(object, object.$initialize, args, block);
      return object;
    ;
    }, -1);
    
    $def(self, '$subclasses', function $$subclasses() {
      var self = this;

      
      if (typeof WeakRef !== 'undefined') {
        var i, subclass, out = [];
        for (i = 0; i < self.$$subclasses.length; i++) {
          subclass = self.$$subclasses[i].deref();
          if (subclass !== undefined) {
            out.push(subclass);
          }
        }
        return out;
      }
      else {
        return self.$$subclasses;
      }
    
    }, 0);
    
    $def(self, '$superclass', function $$superclass() {
      var self = this;

      return self.$$super || nil;
    }, 0);
    
    $def(self, '$to_s', function $$to_s() {
      var $yield = $$to_s.$$p || nil, self = this;

      $$to_s.$$p = null;
      
      var singleton_of = self.$$singleton_of;

      if (singleton_of && singleton_of.$$is_a_module) {
        return "#<Class:" + ((singleton_of).$name()) + ">";
      }
      else if (singleton_of) {
        // a singleton class created from an object
        return "#<Class:#<" + ((singleton_of.$$class).$name()) + ":0x" + ((Opal.id(singleton_of)).$to_s(16)) + ">>";
      }

      return $send2(self, $find_super(self, 'to_s', $$to_s, false, true), 'to_s', [], null);
    
    }, 0);
    return $alias(self, "inspect", "to_s");
  })('::', null, $nesting);
};

Opal.modules["corelib/random/mersenne_twister"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $klass = Opal.klass, $const_set = Opal.const_set, $send = Opal.send, nil = Opal.nil, $$$ = Opal.$$$, mersenne_twister = nil;

  Opal.add_stubs('generator=');
  
  mersenne_twister = (function() {
  /* Period parameters */
  var N = 624;
  var M = 397;
  var MATRIX_A = 0x9908b0df;      /* constant vector a */
  var UMASK = 0x80000000;         /* most significant w-r bits */
  var LMASK = 0x7fffffff;         /* least significant r bits */
  var MIXBITS = function(u,v) { return ( ((u) & UMASK) | ((v) & LMASK) ); };
  var TWIST = function(u,v) { return (MIXBITS((u),(v)) >>> 1) ^ ((v & 0x1) ? MATRIX_A : 0x0); };

  function init(s) {
    var mt = {left: 0, next: N, state: new Array(N)};
    init_genrand(mt, s);
    return mt;
  }

  /* initializes mt[N] with a seed */
  function init_genrand(mt, s) {
    var j, i;
    mt.state[0] = s >>> 0;
    for (j=1; j<N; j++) {
      mt.state[j] = (1812433253 * ((mt.state[j-1] ^ (mt.state[j-1] >> 30) >>> 0)) + j);
      /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */
      /* In the previous versions, MSBs of the seed affect   */
      /* only MSBs of the array state[].                     */
      /* 2002/01/09 modified by Makoto Matsumoto             */
      mt.state[j] &= 0xffffffff;  /* for >32 bit machines */
    }
    mt.left = 1;
    mt.next = N;
  }

  /* generate N words at one time */
  function next_state(mt) {
    var p = 0, _p = mt.state;
    var j;

    mt.left = N;
    mt.next = 0;

    for (j=N-M+1; --j; p++)
      _p[p] = _p[p+(M)] ^ TWIST(_p[p+(0)], _p[p+(1)]);

    for (j=M; --j; p++)
      _p[p] = _p[p+(M-N)] ^ TWIST(_p[p+(0)], _p[p+(1)]);

    _p[p] = _p[p+(M-N)] ^ TWIST(_p[p+(0)], _p[0]);
  }

  /* generates a random number on [0,0xffffffff]-interval */
  function genrand_int32(mt) {
    /* mt must be initialized */
    var y;

    if (--mt.left <= 0) next_state(mt);
    y = mt.state[mt.next++];

    /* Tempering */
    y ^= (y >>> 11);
    y ^= (y << 7) & 0x9d2c5680;
    y ^= (y << 15) & 0xefc60000;
    y ^= (y >>> 18);

    return y >>> 0;
  }

  function int_pair_to_real_exclusive(a, b) {
    a >>>= 5;
    b >>>= 6;
    return(a*67108864.0+b)*(1.0/9007199254740992.0);
  }

  // generates a random number on [0,1) with 53-bit resolution
  function genrand_real(mt) {
    /* mt must be initialized */
    var a = genrand_int32(mt), b = genrand_int32(mt);
    return int_pair_to_real_exclusive(a, b);
  }

  return { genrand_real: genrand_real, init: init };
})();
  return (function($base, $super) {
    var self = $klass($base, $super, 'Random');

    var $a;

    
    var MAX_INT = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;
    $const_set(self, 'MERSENNE_TWISTER_GENERATOR', {
    new_seed: function() { return Math.round(Math.random() * MAX_INT); },
    reseed: function(seed) { return mersenne_twister.init(seed); },
    rand: function(mt) { return mersenne_twister.genrand_real(mt); }
  });
    return ($a = [$$$(self, 'MERSENNE_TWISTER_GENERATOR')], $send(self, 'generator=', $a), $a[$a.length - 1]);
  })('::', null);
};

Opal.modules["corelib/math"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $type_error = Opal.type_error, $module = Opal.module, $const_set = Opal.const_set, $Class = Opal.Class, $slice = Opal.slice, $Kernel = Opal.Kernel, $defs = Opal.defs, $truthy = Opal.truthy, $send = Opal.send, $def = Opal.def, $rb_minus = Opal.rb_minus, $eqeqeq = Opal.eqeqeq, $rb_divide = Opal.rb_divide, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('new,raise,Float,Integer,module_function,each,define_method,checked,float!,===,gamma,-,integer!,/,infinite?');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Math');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $const_set(self, 'E', Math.E);
    $const_set(self, 'PI', Math.PI);
    $const_set(self, 'DomainError', $Class.$new($$$('StandardError')));
    $defs(self, '$checked', function $$checked(method, $a) {
      var $post_args, args;

      
      $post_args = $slice.call(arguments, 1);
      args = $post_args;
      
      if (isNaN(args[0]) || (args.length == 2 && isNaN(args[1]))) {
        return NaN;
      }

      var result = Math[method].apply(null, args);

      if (isNaN(result)) {
        $Kernel.$raise($$('DomainError'), "Numerical argument is out of domain - \"" + (method) + "\"");
      }

      return result;
    ;
    }, -2);
    $defs(self, '$float!', function $Math_float$excl$1(value) {
      
      try {
        return $Kernel.$Float(value)
      } catch ($err) {
        if (Opal.rescue($err, [$$$('ArgumentError')])) {
          try {
            return $Kernel.$raise($type_error(value, $$$('Float')))
          } finally { Opal.pop_exception(); }
        } else { throw $err; }
      }
    }, 1);
    $defs(self, '$integer!', function $Math_integer$excl$2(value) {
      
      try {
        return $Kernel.$Integer(value)
      } catch ($err) {
        if (Opal.rescue($err, [$$$('ArgumentError')])) {
          try {
            return $Kernel.$raise($type_error(value, $$$('Integer')))
          } finally { Opal.pop_exception(); }
        } else { throw $err; }
      }
    }, 1);
    self.$module_function();
    if (!$truthy((typeof(Math.erf) !== "undefined"))) {
      
      Opal.prop(Math, 'erf', function(x) {
        var A1 =  0.254829592,
            A2 = -0.284496736,
            A3 =  1.421413741,
            A4 = -1.453152027,
            A5 =  1.061405429,
            P  =  0.3275911;

        var sign = 1;

        if (x < 0) {
            sign = -1;
        }

        x = Math.abs(x);

        var t = 1.0 / (1.0 + P * x);
        var y = 1.0 - (((((A5 * t + A4) * t) + A3) * t + A2) * t + A1) * t * Math.exp(-x * x);

        return sign * y;
      });
    
    };
    if (!$truthy((typeof(Math.erfc) !== "undefined"))) {
      
      Opal.prop(Math, 'erfc', function(x) {
        var z = Math.abs(x),
            t = 1.0 / (0.5 * z + 1.0);

        var A1 = t * 0.17087277 + -0.82215223,
            A2 = t * A1 + 1.48851587,
            A3 = t * A2 + -1.13520398,
            A4 = t * A3 + 0.27886807,
            A5 = t * A4 + -0.18628806,
            A6 = t * A5 + 0.09678418,
            A7 = t * A6 + 0.37409196,
            A8 = t * A7 + 1.00002368,
            A9 = t * A8,
            A10 = -z * z - 1.26551223 + A9;

        var a = t * Math.exp(A10);

        if (x < 0.0) {
          return 2.0 - a;
        }
        else {
          return a;
        }
      });
    
    };
    $send(["acos", "acosh", "asin", "asinh", "atan", "atanh", "cbrt", "cos", "cosh", "erf", "erfc", "exp", "sin", "sinh", "sqrt", "tanh"], 'each', [], function $Math$3(method){var self = $Math$3.$$s == null ? this : $Math$3.$$s;

      
      if (method == null) method = nil;
      return $send(self, 'define_method', [method], function $$4(x){
        
        if (x == null) x = nil;
        return $$$('Math').$checked(method, $$$('Math')['$float!'](x));}, 1);}, {$$arity: 1, $$s: self});
    
    $def(self, '$atan2', function $$atan2(y, x) {
      
      return $$$('Math').$checked("atan2", $$$('Math')['$float!'](y), $$$('Math')['$float!'](x))
    }, 2);
    
    $def(self, '$hypot', function $$hypot(x, y) {
      
      return $$$('Math').$checked("hypot", $$$('Math')['$float!'](x), $$$('Math')['$float!'](y))
    }, 2);
    
    $def(self, '$frexp', function $$frexp(x) {
      
      
      x = $$('Math')['$float!'](x);
      
      if (isNaN(x)) {
        return [NaN, 0];
      }

      var ex   = Math.floor(Math.log(Math.abs(x)) / Math.log(2)) + 1,
          frac = x / Math.pow(2, ex);

      return [frac, ex];
    ;
    }, 1);
    
    $def(self, '$gamma', function $$gamma(n) {
      
      
      n = $$('Math')['$float!'](n);
      
      var i, t, x, value, result, twoN, threeN, fourN, fiveN;

      var G = 4.7421875;

      var P = [
         0.99999999999999709182,
         57.156235665862923517,
        -59.597960355475491248,
         14.136097974741747174,
        -0.49191381609762019978,
         0.33994649984811888699e-4,
         0.46523628927048575665e-4,
        -0.98374475304879564677e-4,
         0.15808870322491248884e-3,
        -0.21026444172410488319e-3,
         0.21743961811521264320e-3,
        -0.16431810653676389022e-3,
         0.84418223983852743293e-4,
        -0.26190838401581408670e-4,
         0.36899182659531622704e-5
      ];


      if (isNaN(n)) {
        return NaN;
      }

      if (n === 0 && 1 / n < 0) {
        return -Infinity;
      }

      if (n === -1 || n === -Infinity) {
        $Kernel.$raise($$('DomainError'), "Numerical argument is out of domain - \"gamma\"");
      }

      if ($$('Integer')['$==='](n)) {
        if (n <= 0) {
          return isFinite(n) ? Infinity : NaN;
        }

        if (n > 171) {
          return Infinity;
        }

        value  = n - 2;
        result = n - 1;

        while (value > 1) {
          result *= value;
          value--;
        }

        if (result == 0) {
          result = 1;
        }

        return result;
      }

      if (n < 0.5) {
        return Math.PI / (Math.sin(Math.PI * n) * $$$('Math').$gamma($rb_minus(1, n)));
      }

      if (n >= 171.35) {
        return Infinity;
      }

      if (n > 85.0) {
        twoN   = n * n;
        threeN = twoN * n;
        fourN  = threeN * n;
        fiveN  = fourN * n;

        return Math.sqrt(2 * Math.PI / n) * Math.pow((n / Math.E), n) *
          (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) -
          571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) +
          5246819 / (75246796800 * fiveN * n));
      }

      n -= 1;
      x  = P[0];

      for (i = 1; i < P.length; ++i) {
        x += P[i] / (n + i);
      }

      t = n + G + 0.5;

      return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;
    ;
    }, 1);
    
    $def(self, '$ldexp', function $$ldexp(mantissa, exponent) {
      
      
      mantissa = $$('Math')['$float!'](mantissa);
      exponent = $$('Math')['$integer!'](exponent);
      
      if (isNaN(exponent)) {
        $Kernel.$raise($$$('RangeError'), "float NaN out of range of integer");
      }

      return mantissa * Math.pow(2, exponent);
    ;
    }, 2);
    
    $def(self, '$lgamma', function $$lgamma(n) {
      
      
      if (n == -1) {
        return [Infinity, 1];
      }
      else {
        return [Math.log(Math.abs($$$('Math').$gamma(n))), $$$('Math').$gamma(n) < 0 ? -1 : 1];
      }
    
    }, 1);
    
    $def(self, '$log', function $$log(x, base) {
      
      
      ;
      if ($eqeqeq($$$('String'), x)) {
        $Kernel.$raise($type_error(x, $$$('Float')))
      };
      if ($truthy(base == null)) {
        return $$$('Math').$checked("log", $$$('Math')['$float!'](x))
      } else {
        
        if ($eqeqeq($$$('String'), base)) {
          $Kernel.$raise($type_error(base, $$$('Float')))
        };
        return $rb_divide($$$('Math').$checked("log", $$$('Math')['$float!'](x)), $$$('Math').$checked("log", $$$('Math')['$float!'](base)));
      };
    }, -2);
    
    $def(self, '$log10', function $$log10(x) {
      
      
      if ($eqeqeq($$$('String'), x)) {
        $Kernel.$raise($type_error(x, $$$('Float')))
      };
      return $$$('Math').$checked("log10", $$$('Math')['$float!'](x));
    }, 1);
    
    $def(self, '$log2', function $$log2(x) {
      
      
      if ($eqeqeq($$$('String'), x)) {
        $Kernel.$raise($type_error(x, $$$('Float')))
      };
      return $$$('Math').$checked("log2", $$$('Math')['$float!'](x));
    }, 1);
    return $def(self, '$tan', function $$tan(x) {
      
      
      x = $$$('Math')['$float!'](x);
      if ($truthy(x['$infinite?']())) {
        return $$$($$$('Float'), 'NAN')
      };
      return $$$('Math').$checked("tan", $$$('Math')['$float!'](x));
    }, 1);
  })('::', $nesting)
};

Opal.modules["corelib/random/formatter"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $klass = Opal.klass, $module = Opal.module, $def = Opal.def, $range = Opal.range, $send = Opal.send, $rb_divide = Opal.rb_divide, $Kernel = Opal.Kernel, $Opal = Opal.Opal, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('_verify_count,bytes,encode,strict_encode64,random_bytes,urlsafe_encode64,split,hex,[]=,[],map,to_proc,join,times,<<,|,ord,/,abs,random_float,raise,coerce_to!,flatten,new,random_number,length,include,extend');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Random');

    var $nesting = [self].concat($parent_nesting);

    
    (function($base, $parent_nesting) {
      var self = $module($base, 'Formatter');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      
      $def(self, '$hex', function $$hex(count) {
        var self = this;

        
        if (count == null) count = nil;
        count = $$$('Random').$_verify_count(count);
        
        var bytes = self.$bytes(count);
        var out = "";
        for (var i = 0; i < count; i++) {
          out += bytes.charCodeAt(i).toString(16).padStart(2, '0');
        }
        return (out).$encode("US-ASCII");
      ;
      }, -1);
      
      $def(self, '$random_bytes', function $$random_bytes(count) {
        var self = this;

        
        if (count == null) count = nil;
        return self.$bytes(count);
      }, -1);
      
      $def(self, '$base64', function $$base64(count) {
        var self = this;

        
        if (count == null) count = nil;
        return $$$('Base64').$strict_encode64(self.$random_bytes(count)).$encode("US-ASCII");
      }, -1);
      
      $def(self, '$urlsafe_base64', function $$urlsafe_base64(count, padding) {
        var self = this;

        
        if (count == null) count = nil;
        if (padding == null) padding = false;
        return $$$('Base64').$urlsafe_encode64(self.$random_bytes(count), padding).$encode("US-ASCII");
      }, -1);
      
      $def(self, '$uuid', function $$uuid() {
        var self = this, str = nil;

        
        str = self.$hex(16).$split("");
        str['$[]='](12, "4");
        str['$[]='](16, (parseInt(str['$[]'](16), 16) & 3 | 8).toString(16));
        str = [str['$[]']($range(0, 8, true)), str['$[]']($range(8, 12, true)), str['$[]']($range(12, 16, true)), str['$[]']($range(16, 20, true)), str['$[]']($range(20, 32, true))];
        str = $send(str, 'map', [], "join".$to_proc());
        return str.$join("-");
      }, 0);
      
      $def(self, '$random_float', function $$random_float() {
        var self = this, bs = nil, num = nil;

        
        bs = self.$bytes(4);
        num = 0;
        $send((4), 'times', [], function $$1(i){
          
          if (i == null) i = nil;
          num = num['$<<'](8);
          return (num = num['$|'](bs['$[]'](i).$ord()));}, 1);
        return $rb_divide(num.$abs(), 2147483647);
      }, 0);
      
      $def(self, '$random_number', function $$random_number(limit) {
        var self = this;

        
        ;
        
        function randomFloat() {
          return self.$random_float();
        }

        function randomInt(max) {
          return Math.floor(randomFloat() * max);
        }

        function randomRange() {
          var min = limit.begin,
              max = limit.end;

          if (min === nil || max === nil) {
            return nil;
          }

          var length = max - min;

          if (length < 0) {
            return nil;
          }

          if (length === 0) {
            return min;
          }

          if (max % 1 === 0 && min % 1 === 0 && !limit.excl) {
            length++;
          }

          return randomInt(length) + min;
        }

        if (limit == null) {
          return randomFloat();
        } else if (limit.$$is_range) {
          return randomRange();
        } else if (limit.$$is_number) {
          if (limit <= 0) {
            $Kernel.$raise($$$('ArgumentError'), "invalid argument - " + (limit))
          }

          if (limit % 1 === 0) {
            // integer
            return randomInt(limit);
          } else {
            return randomFloat() * limit;
          }
        } else {
          limit = $Opal['$coerce_to!'](limit, $$$('Integer'), "to_int");

          if (limit <= 0) {
            $Kernel.$raise($$$('ArgumentError'), "invalid argument - " + (limit))
          }

          return randomInt(limit);
        }
      ;
      }, -1);
      return $def(self, '$alphanumeric', function $$alphanumeric(count) {
        var self = this, map = nil;

        
        if (count == null) count = nil;
        count = $$('Random').$_verify_count(count);
        map = $send([$range("0", "9", false), $range("a", "z", false), $range("A", "Z", false)], 'map', [], "to_a".$to_proc()).$flatten();
        return $send($$$('Array'), 'new', [count], function $$2(i){var self = $$2.$$s == null ? this : $$2.$$s;

          
          if (i == null) i = nil;
          return map['$[]'](self.$random_number(map.$length()));}, {$$arity: 1, $$s: self}).$join();
      }, -1);
    })(self, $nesting);
    self.$include($$$($$$('Random'), 'Formatter'));
    return self.$extend($$$($$$('Random'), 'Formatter'));
  })('::', null, $nesting)
};

Opal.modules["opal/mini"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $Object = Opal.Object, nil = Opal.nil;

  Opal.add_stubs('require');
  
  $Object.$require("opal/base");
  $Object.$require("corelib/nil");
  $Object.$require("corelib/boolean");
  $Object.$require("corelib/string");
  $Object.$require("corelib/comparable");
  $Object.$require("corelib/enumerable");
  $Object.$require("corelib/enumerator");
  $Object.$require("corelib/array");
  $Object.$require("corelib/hash");
  $Object.$require("corelib/number");
  $Object.$require("corelib/range");
  $Object.$require("corelib/proc");
  $Object.$require("corelib/method");
  $Object.$require("corelib/regexp");
  $Object.$require("corelib/variables");
  $Object.$require("corelib/io");
  return $Object.$require("opal/regexp_anchors");
};

Opal.modules["corelib/enumerable"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $truthy = Opal.truthy, $coerce_to = Opal.coerce_to, $yield1 = Opal.yield1, $yieldX = Opal.yieldX, $deny_frozen_access = Opal.deny_frozen_access, $module = Opal.module, $send = Opal.send, $slice = Opal.slice, $to_a = Opal.to_a, $Opal = Opal.Opal, $thrower = Opal.thrower, $def = Opal.def, $Kernel = Opal.Kernel, $return_val = Opal.return_val, $rb_gt = Opal.rb_gt, $rb_times = Opal.rb_times, $rb_lt = Opal.rb_lt, $eqeq = Opal.eqeq, $rb_plus = Opal.rb_plus, $rb_minus = Opal.rb_minus, $rb_divide = Opal.rb_divide, $rb_le = Opal.rb_le, $hash2 = Opal.hash2, $lambda = Opal.lambda, $not = Opal.not, $alias = Opal.alias, nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('each,public_send,destructure,to_enum,enumerator_size,new,yield,raise,slice_when,!,enum_for,flatten,map,to_proc,compact,to_a,warn,proc,==,nil?,respond_to?,coerce_to!,>,*,try_convert,<,+,-,ceil,/,size,select,__send__,length,<=,[],push,<<,[]=,===,inspect,<=>,first,reverse,sort,take,sort_by,compare,call,dup,sort!,map!,include?,-@,key?,values,transform_values,group_by,fetch,to_h,coerce_to?,class,zip,detect,find_all,collect_concat,collect,inject,entries');
  return (function($base) {
    var self = $module($base, 'Enumerable');

    
    
    
    function comparableForPattern(value) {
      if (value.length === 0) {
        value = [nil];
      }

      if (value.length > 1) {
        value = [value];
      }

      return value;
    }
  ;
    
    $def(self, '$all?', function $Enumerable_all$ques$1(pattern) {try { var $t_return = $thrower('return'); 
      var block = $Enumerable_all$ques$1.$$p || nil, self = this;

      $Enumerable_all$ques$1.$$p = null;
      
      ;
      ;
      if ($truthy(pattern !== undefined)) {
        $send(self, 'each', [], function $$2($a){var $post_args, value, comparable = nil;

          
          $post_args = $slice.call(arguments);
          value = $post_args;
          comparable = comparableForPattern(value);
          if ($truthy($send(pattern, 'public_send', ["==="].concat($to_a(comparable))))) {
            return nil
          } else {
            $t_return.$throw(false)
          };}, {$$arity: -1, $$ret: $t_return})
      } else if ((block !== nil)) {
        $send(self, 'each', [], function $$3($a){var $post_args, value;

          
          $post_args = $slice.call(arguments);
          value = $post_args;
          if ($truthy(Opal.yieldX(block, $to_a(value)))) {
            return nil
          } else {
            $t_return.$throw(false)
          };}, {$$arity: -1, $$ret: $t_return})
      } else {
        $send(self, 'each', [], function $$4($a){var $post_args, value;

          
          $post_args = $slice.call(arguments);
          value = $post_args;
          if ($truthy($Opal.$destructure(value))) {
            return nil
          } else {
            $t_return.$throw(false)
          };}, {$$arity: -1, $$ret: $t_return})
      };
      return true;} catch($e) {
        if ($e === $t_return) return $e.$v;
        throw $e;
      }
    }, -1);
    
    $def(self, '$any?', function $Enumerable_any$ques$5(pattern) {try { var $t_return = $thrower('return'); 
      var block = $Enumerable_any$ques$5.$$p || nil, self = this;

      $Enumerable_any$ques$5.$$p = null;
      
      ;
      ;
      if ($truthy(pattern !== undefined)) {
        $send(self, 'each', [], function $$6($a){var $post_args, value, comparable = nil;

          
          $post_args = $slice.call(arguments);
          value = $post_args;
          comparable = comparableForPattern(value);
          if ($truthy($send(pattern, 'public_send', ["==="].concat($to_a(comparable))))) {
            $t_return.$throw(true)
          } else {
            return nil
          };}, {$$arity: -1, $$ret: $t_return})
      } else if ((block !== nil)) {
        $send(self, 'each', [], function $$7($a){var $post_args, value;

          
          $post_args = $slice.call(arguments);
          value = $post_args;
          if ($truthy(Opal.yieldX(block, $to_a(value)))) {
            $t_return.$throw(true)
          } else {
            return nil
          };}, {$$arity: -1, $$ret: $t_return})
      } else {
        $send(self, 'each', [], function $$8($a){var $post_args, value;

          
          $post_args = $slice.call(arguments);
          value = $post_args;
          if ($truthy($Opal.$destructure(value))) {
            $t_return.$throw(true)
          } else {
            return nil
          };}, {$$arity: -1, $$ret: $t_return})
      };
      return false;} catch($e) {
        if ($e === $t_return) return $e.$v;
        throw $e;
      }
    }, -1);
    
    $def(self, '$chunk', function $$chunk() {
      var block = $$chunk.$$p || nil, self = this;

      $$chunk.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return $send(self, 'to_enum', ["chunk"], function $$9(){var self = $$9.$$s == null ? this : $$9.$$s;

          return self.$enumerator_size()}, {$$arity: 0, $$s: self})
      };
      return $send($$$('Enumerator'), 'new', [], function $$10(yielder){var self = $$10.$$s == null ? this : $$10.$$s;

        
        if (yielder == null) yielder = nil;
        
        var previous = nil, accumulate = [];

        function releaseAccumulate() {
          if (accumulate.length > 0) {
            yielder.$yield(previous, accumulate)
          }
        }

        self.$each.$$p = function(value) {
          var key = $yield1(block, value);

          if (key === nil) {
            releaseAccumulate();
            accumulate = [];
            previous = nil;
          } else {
            if (previous === nil || previous === key) {
              accumulate.push(value);
            } else {
              releaseAccumulate();
              accumulate = [value];
            }

            previous = key;
          }
        }

        self.$each();

        releaseAccumulate();
      ;}, {$$arity: 1, $$s: self});
    }, 0);
    
    $def(self, '$chunk_while', function $$chunk_while() {
      var block = $$chunk_while.$$p || nil, self = this;

      $$chunk_while.$$p = null;
      
      ;
      if (!(block !== nil)) {
        $Kernel.$raise($$$('ArgumentError'), "no block given")
      };
      return $send(self, 'slice_when', [], function $$11(before, after){
        
        if (before == null) before = nil;
        if (after == null) after = nil;
        return Opal.yieldX(block, [before, after])['$!']();}, 2);
    }, 0);
    
    $def(self, '$collect', function $$collect() {
      var block = $$collect.$$p || nil, self = this;

      $$collect.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return $send(self, 'enum_for', ["collect"], function $$12(){var self = $$12.$$s == null ? this : $$12.$$s;

          return self.$enumerator_size()}, {$$arity: 0, $$s: self})
      };
      
      var result = [];

      self.$each.$$p = function() {
        var value = $yieldX(block, arguments);

        result.push(value);
      };

      self.$each();

      return result;
    ;
    }, 0);
    
    $def(self, '$collect_concat', function $$collect_concat() {
      var block = $$collect_concat.$$p || nil, self = this;

      $$collect_concat.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return $send(self, 'enum_for', ["collect_concat"], function $$13(){var self = $$13.$$s == null ? this : $$13.$$s;

          return self.$enumerator_size()}, {$$arity: 0, $$s: self})
      };
      return $send(self, 'map', [], block.$to_proc()).$flatten(1);
    }, 0);
    
    $def(self, '$compact', function $$compact() {
      var self = this;

      return self.$to_a().$compact()
    }, 0);
    
    $def(self, '$count', function $$count(object) {
      var block = $$count.$$p || nil, self = this, result = nil;

      $$count.$$p = null;
      
      ;
      ;
      result = 0;
      
      if (object != null && block !== nil) {
        self.$warn("warning: given block not used")
      }
    ;
      if ($truthy(object != null)) {
        block = $send($Kernel, 'proc', [], function $$14($a){var $post_args, args;

          
          $post_args = $slice.call(arguments);
          args = $post_args;
          return $Opal.$destructure(args)['$=='](object);}, -1)
      } else if ($truthy(block['$nil?']())) {
        block = $send($Kernel, 'proc', [], $return_val(true), 0)
      };
      $send(self, 'each', [], function $$15($a){var $post_args, args;

        
        $post_args = $slice.call(arguments);
        args = $post_args;
        if ($truthy($yieldX(block, args))) {
          return result++;
        } else {
          return nil
        };}, -1);
      return result;
    }, -1);
    
    $def(self, '$cycle', function $$cycle(n) {
      var block = $$cycle.$$p || nil, self = this;

      $$cycle.$$p = null;
      
      ;
      if (n == null) n = nil;
      if (!(block !== nil)) {
        return $send(self, 'enum_for', ["cycle", n], function $$16(){var self = $$16.$$s == null ? this : $$16.$$s;

          if ($truthy(n['$nil?']())) {
            if ($truthy(self['$respond_to?']("size"))) {
              return $$$($$$('Float'), 'INFINITY')
            } else {
              return nil
            }
          } else {
            
            n = $Opal['$coerce_to!'](n, $$$('Integer'), "to_int");
            if ($truthy($rb_gt(n, 0))) {
              return $rb_times(self.$enumerator_size(), n)
            } else {
              return 0
            };
          }}, {$$arity: 0, $$s: self})
      };
      if (!$truthy(n['$nil?']())) {
        
        n = $Opal['$coerce_to!'](n, $$$('Integer'), "to_int");
        if ($truthy(n <= 0)) {
          return nil
        };
      };
      
      var all = [], i, length, value;

      self.$each.$$p = function() {
        var param = $Opal.$destructure(arguments),
            value = $yield1(block, param);

        all.push(param);
      }

      self.$each();

      if (all.length === 0) {
        return nil;
      }

      if (n === nil) {
        while (true) {
          for (i = 0, length = all.length; i < length; i++) {
            value = $yield1(block, all[i]);
          }
        }
      }
      else {
        while (n > 1) {
          for (i = 0, length = all.length; i < length; i++) {
            value = $yield1(block, all[i]);
          }

          n--;
        }
      }
    ;
    }, -1);
    
    $def(self, '$detect', function $$detect(ifnone) {try { var $t_return = $thrower('return'); 
      var block = $$detect.$$p || nil, self = this;

      $$detect.$$p = null;
      
      ;
      ;
      if (!(block !== nil)) {
        return self.$enum_for("detect", ifnone)
      };
      $send(self, 'each', [], function $$17($a){var $post_args, args, value = nil;

        
        $post_args = $slice.call(arguments);
        args = $post_args;
        value = $Opal.$destructure(args);
        if ($truthy(Opal.yield1(block, value))) {
          $t_return.$throw(value)
        } else {
          return nil
        };}, {$$arity: -1, $$ret: $t_return});
      
      if (ifnone !== undefined) {
        if (typeof(ifnone) === 'function') {
          return ifnone();
        } else {
          return ifnone;
        }
      }
    ;
      return nil;} catch($e) {
        if ($e === $t_return) return $e.$v;
        throw $e;
      }
    }, -1);
    
    $def(self, '$drop', function $$drop(number) {
      var self = this;

      
      number = $coerce_to(number, $$$('Integer'), 'to_int');
      if ($truthy(number < 0)) {
        $Kernel.$raise($$$('ArgumentError'), "attempt to drop negative size")
      };
      
      var result  = [],
          current = 0;

      self.$each.$$p = function() {
        if (number <= current) {
          result.push($Opal.$destructure(arguments));
        }

        current++;
      };

      self.$each()

      return result;
    ;
    }, 1);
    
    $def(self, '$drop_while', function $$drop_while() {
      var block = $$drop_while.$$p || nil, self = this;

      $$drop_while.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return self.$enum_for("drop_while")
      };
      
      var result   = [],
          dropping = true;

      self.$each.$$p = function() {
        var param = $Opal.$destructure(arguments);

        if (dropping) {
          var value = $yield1(block, param);

          if (!$truthy(value)) {
            dropping = false;
            result.push(param);
          }
        }
        else {
          result.push(param);
        }
      };

      self.$each();

      return result;
    ;
    }, 0);
    
    $def(self, '$each_cons', function $$each_cons(n) {
      var block = $$each_cons.$$p || nil, self = this;

      $$each_cons.$$p = null;
      
      ;
      if ($truthy(arguments.length != 1)) {
        $Kernel.$raise($$$('ArgumentError'), "wrong number of arguments (" + (arguments.length) + " for 1)")
      };
      n = $Opal.$try_convert(n, $$$('Integer'), "to_int");
      if ($truthy(n <= 0)) {
        $Kernel.$raise($$$('ArgumentError'), "invalid size")
      };
      if (!(block !== nil)) {
        return $send(self, 'enum_for', ["each_cons", n], function $$18(){var self = $$18.$$s == null ? this : $$18.$$s, enum_size = nil;

          
          enum_size = self.$enumerator_size();
          if ($truthy(enum_size['$nil?']())) {
            return nil
          } else if (($eqeq(enum_size, 0) || ($truthy($rb_lt(enum_size, n))))) {
            return 0
          } else {
            return $rb_plus($rb_minus(enum_size, n), 1)
          };}, {$$arity: 0, $$s: self})
      };
      
      var buffer = [];

      self.$each.$$p = function() {
        var element = $Opal.$destructure(arguments);
        buffer.push(element);
        if (buffer.length > n) {
          buffer.shift();
        }
        if (buffer.length == n) {
          $yield1(block, buffer.slice(0, n));
        }
      }

      self.$each();

      return self;
    ;
    }, 1);
    
    $def(self, '$each_entry', function $$each_entry($a) {
      var block = $$each_entry.$$p || nil, $post_args, data, self = this;

      $$each_entry.$$p = null;
      
      ;
      $post_args = $slice.call(arguments);
      data = $post_args;
      if (!(block !== nil)) {
        return $send(self, 'to_enum', ["each_entry"].concat($to_a(data)), function $$19(){var self = $$19.$$s == null ? this : $$19.$$s;

          return self.$enumerator_size()}, {$$arity: 0, $$s: self})
      };
      
      self.$each.$$p = function() {
        var item = $Opal.$destructure(arguments);

        $yield1(block, item);
      }

      self.$each.apply(self, data);

      return self;
    ;
    }, -1);
    
    $def(self, '$each_slice', function $$each_slice(n) {
      var block = $$each_slice.$$p || nil, self = this;

      $$each_slice.$$p = null;
      
      ;
      n = $coerce_to(n, $$$('Integer'), 'to_int');
      if ($truthy(n <= 0)) {
        $Kernel.$raise($$$('ArgumentError'), "invalid slice size")
      };
      if (!(block !== nil)) {
        return $send(self, 'enum_for', ["each_slice", n], function $$20(){var self = $$20.$$s == null ? this : $$20.$$s;

          if ($truthy(self['$respond_to?']("size"))) {
            return $rb_divide(self.$size(), n).$ceil()
          } else {
            return nil
          }}, {$$arity: 0, $$s: self})
      };
      
      var slice = []

      self.$each.$$p = function() {
        var param = $Opal.$destructure(arguments);

        slice.push(param);

        if (slice.length === n) {
          $yield1(block, slice);
          slice = [];
        }
      };

      self.$each();

      // our "last" group, if smaller than n then won't have been yielded
      if (slice.length > 0) {
        $yield1(block, slice);
      }
    ;
      return self;
    }, 1);
    
    $def(self, '$each_with_index', function $$each_with_index($a) {
      var block = $$each_with_index.$$p || nil, $post_args, args, self = this;

      $$each_with_index.$$p = null;
      
      ;
      $post_args = $slice.call(arguments);
      args = $post_args;
      if (!(block !== nil)) {
        return $send(self, 'enum_for', ["each_with_index"].concat($to_a(args)), function $$21(){var self = $$21.$$s == null ? this : $$21.$$s;

          return self.$enumerator_size()}, {$$arity: 0, $$s: self})
      };
      
      var index = 0;

      self.$each.$$p = function() {
        var param = $Opal.$destructure(arguments);

        block(param, index);

        index++;
      };

      self.$each.apply(self, args);
    ;
      return self;
    }, -1);
    
    $def(self, '$each_with_object', function $$each_with_object(object) {
      var block = $$each_with_object.$$p || nil, self = this;

      $$each_with_object.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return $send(self, 'enum_for', ["each_with_object", object], function $$22(){var self = $$22.$$s == null ? this : $$22.$$s;

          return self.$enumerator_size()}, {$$arity: 0, $$s: self})
      };
      
      self.$each.$$p = function() {
        var param = $Opal.$destructure(arguments);

        block(param, object);
      };

      self.$each();
    ;
      return object;
    }, 1);
    
    $def(self, '$entries', function $$entries($a) {
      var $post_args, args, self = this;

      
      $post_args = $slice.call(arguments);
      args = $post_args;
      
      var result = [];

      self.$each.$$p = function() {
        result.push($Opal.$destructure(arguments));
      };

      self.$each.apply(self, args);

      return result;
    ;
    }, -1);
    
    $def(self, '$filter_map', function $$filter_map() {
      var block = $$filter_map.$$p || nil, self = this;

      $$filter_map.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return $send(self, 'enum_for', ["filter_map"], function $$23(){var self = $$23.$$s == null ? this : $$23.$$s;

          return self.$enumerator_size()}, {$$arity: 0, $$s: self})
      };
      return $send($send(self, 'map', [], block.$to_proc()), 'select', [], "itself".$to_proc());
    }, 0);
    
    $def(self, '$find_all', function $$find_all() {
      var block = $$find_all.$$p || nil, self = this;

      $$find_all.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return $send(self, 'enum_for', ["find_all"], function $$24(){var self = $$24.$$s == null ? this : $$24.$$s;

          return self.$enumerator_size()}, {$$arity: 0, $$s: self})
      };
      
      var result = [];

      self.$each.$$p = function() {
        var param = $Opal.$destructure(arguments),
            value = $yield1(block, param);

        if ($truthy(value)) {
          result.push(param);
        }
      };

      self.$each();

      return result;
    ;
    }, 0);
    
    $def(self, '$find_index', function $$find_index(object) {try { var $t_return = $thrower('return'); 
      var block = $$find_index.$$p || nil, self = this, index = nil;

      $$find_index.$$p = null;
      
      ;
      ;
      if ($truthy(object === undefined && block === nil)) {
        return self.$enum_for("find_index")
      };
      
      if (object != null && block !== nil) {
        self.$warn("warning: given block not used")
      }
    ;
      index = 0;
      if ($truthy(object != null)) {
        $send(self, 'each', [], function $$25($a){var $post_args, value;

          
          $post_args = $slice.call(arguments);
          value = $post_args;
          if ($eqeq($Opal.$destructure(value), object)) {
            $t_return.$throw(index)
          };
          return index += 1;;}, {$$arity: -1, $$ret: $t_return})
      } else {
        $send(self, 'each', [], function $$26($a){var $post_args, value;

          
          $post_args = $slice.call(arguments);
          value = $post_args;
          if ($truthy(Opal.yieldX(block, $to_a(value)))) {
            $t_return.$throw(index)
          };
          return index += 1;;}, {$$arity: -1, $$ret: $t_return})
      };
      return nil;} catch($e) {
        if ($e === $t_return) return $e.$v;
        throw $e;
      }
    }, -1);
    
    $def(self, '$first', function $$first(number) {try { var $t_return = $thrower('return'); 
      var self = this, result = nil, current = nil;

      
      ;
      if ($truthy(number === undefined)) {
        return $send(self, 'each', [], function $$27(value){
          
          if (value == null) value = nil;
          $t_return.$throw(value);}, {$$arity: 1, $$ret: $t_return})
      } else {
        
        result = [];
        number = $coerce_to(number, $$$('Integer'), 'to_int');
        if ($truthy(number < 0)) {
          $Kernel.$raise($$$('ArgumentError'), "attempt to take negative size")
        };
        if ($truthy(number == 0)) {
          return []
        };
        current = 0;
        $send(self, 'each', [], function $$28($a){var $post_args, args;

          
          $post_args = $slice.call(arguments);
          args = $post_args;
          result.push($Opal.$destructure(args));
          if ($truthy(number <= ++current)) {
            $t_return.$throw(result)
          } else {
            return nil
          };}, {$$arity: -1, $$ret: $t_return});
        return result;
      };} catch($e) {
        if ($e === $t_return) return $e.$v;
        throw $e;
      }
    }, -1);
    
    $def(self, '$grep', function $$grep(pattern) {
      var block = $$grep.$$p || nil, self = this, result = nil;

      $$grep.$$p = null;
      
      ;
      result = [];
      $send(self, 'each', [], function $$29($a){var $post_args, value, cmp = nil;

        
        $post_args = $slice.call(arguments);
        value = $post_args;
        cmp = comparableForPattern(value);
        if (!$truthy($send(pattern, '__send__', ["==="].concat($to_a(cmp))))) {
          return nil
        };
        if ((block !== nil)) {
          
          if ($truthy($rb_gt(value.$length(), 1))) {
            value = [value]
          };
          value = Opal.yieldX(block, $to_a(value));
        } else if ($truthy($rb_le(value.$length(), 1))) {
          value = value['$[]'](0)
        };
        return result.$push(value);}, -1);
      return result;
    }, 1);
    
    $def(self, '$grep_v', function $$grep_v(pattern) {
      var block = $$grep_v.$$p || nil, self = this, result = nil;

      $$grep_v.$$p = null;
      
      ;
      result = [];
      $send(self, 'each', [], function $$30($a){var $post_args, value, cmp = nil;

        
        $post_args = $slice.call(arguments);
        value = $post_args;
        cmp = comparableForPattern(value);
        if ($truthy($send(pattern, '__send__', ["==="].concat($to_a(cmp))))) {
          return nil
        };
        if ((block !== nil)) {
          
          if ($truthy($rb_gt(value.$length(), 1))) {
            value = [value]
          };
          value = Opal.yieldX(block, $to_a(value));
        } else if ($truthy($rb_le(value.$length(), 1))) {
          value = value['$[]'](0)
        };
        return result.$push(value);}, -1);
      return result;
    }, 1);
    
    $def(self, '$group_by', function $$group_by() {
      var block = $$group_by.$$p || nil, $a, self = this, hash = nil, $ret_or_1 = nil;

      $$group_by.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return $send(self, 'enum_for', ["group_by"], function $$31(){var self = $$31.$$s == null ? this : $$31.$$s;

          return self.$enumerator_size()}, {$$arity: 0, $$s: self})
      };
      hash = $hash2([], {});
      
      var result;

      self.$each.$$p = function() {
        var param = $Opal.$destructure(arguments),
            value = $yield1(block, param);

        ($truthy(($ret_or_1 = hash['$[]'](value))) ? ($ret_or_1) : (($a = [value, []], $send(hash, '[]=', $a), $a[$a.length - 1])))['$<<'](param);
      }

      self.$each();

      if (result !== undefined) {
        return result;
      }
    ;
      return hash;
    }, 0);
    
    $def(self, '$include?', function $Enumerable_include$ques$32(obj) {try { var $t_return = $thrower('return'); 
      var self = this;

      
      $send(self, 'each', [], function $$33($a){var $post_args, args;

        
        $post_args = $slice.call(arguments);
        args = $post_args;
        if ($eqeq($Opal.$destructure(args), obj)) {
          $t_return.$throw(true)
        } else {
          return nil
        };}, {$$arity: -1, $$ret: $t_return});
      return false;} catch($e) {
        if ($e === $t_return) return $e.$v;
        throw $e;
      }
    }, 1);
    
    $def(self, '$inject', function $$inject(object, sym) {
      var block = $$inject.$$p || nil, self = this;

      $$inject.$$p = null;
      
      ;
      ;
      ;
      
      var result = object;

      if (block !== nil && sym === undefined) {
        self.$each.$$p = function() {
          var value = $Opal.$destructure(arguments);

          if (result === undefined) {
            result = value;
            return;
          }

          value = $yieldX(block, [result, value]);

          result = value;
        };
      }
      else {
        if (sym === undefined) {
          if (!$$$('Symbol')['$==='](object)) {
            $Kernel.$raise($$$('TypeError'), "" + (object.$inspect()) + " is not a Symbol");
          }

          sym    = object;
          result = undefined;
        }

        self.$each.$$p = function() {
          var value = $Opal.$destructure(arguments);

          if (result === undefined) {
            result = value;
            return;
          }

          result = (result).$__send__(sym, value);
        };
      }

      self.$each();

      return result == undefined ? nil : result;
    ;
    }, -1);
    
    $def(self, '$lazy', function $$lazy() {
      var self = this;

      return $send($$$($$$('Enumerator'), 'Lazy'), 'new', [self, self.$enumerator_size()], function $$34(enum$, $a){var $post_args, args;

        
        if (enum$ == null) enum$ = nil;
        $post_args = $slice.call(arguments, 1);
        args = $post_args;
        return $send(enum$, 'yield', $to_a(args));}, -2)
    }, 0);
    
    $def(self, '$enumerator_size', function $$enumerator_size() {
      var self = this;

      if ($truthy(self['$respond_to?']("size"))) {
        return self.$size()
      } else {
        return nil
      }
    }, 0);
    
    $def(self, '$max', function $$max(n) {
      var block = $$max.$$p || nil, self = this;

      $$max.$$p = null;
      
      ;
      ;
      
      if (n === undefined || n === nil) {
        var result, value;

        self.$each.$$p = function() {
          var item = $Opal.$destructure(arguments);

          if (result === undefined) {
            result = item;
            return;
          }

          if (block !== nil) {
            value = $yieldX(block, [item, result]);
          } else {
            value = (item)['$<=>'](result);
          }

          if (value === nil) {
            $Kernel.$raise($$$('ArgumentError'), "comparison failed");
          }

          if (value > 0) {
            result = item;
          }
        }

        self.$each();

        if (result === undefined) {
          return nil;
        } else {
          return result;
        }
      }

      n = $coerce_to(n, $$$('Integer'), 'to_int');
    ;
      return $send(self, 'sort', [], block.$to_proc()).$reverse().$first(n);
    }, -1);
    
    $def(self, '$max_by', function $$max_by(n) {
      var block = $$max_by.$$p || nil, self = this;

      $$max_by.$$p = null;
      
      ;
      if (n == null) n = nil;
      if (!$truthy(block)) {
        return $send(self, 'enum_for', ["max_by", n], function $$35(){var self = $$35.$$s == null ? this : $$35.$$s;

          return self.$enumerator_size()}, {$$arity: 0, $$s: self})
      };
      if (!$truthy(n['$nil?']())) {
        return $send(self, 'sort_by', [], block.$to_proc()).$reverse().$take(n)
      };
      
      var result,
          by;

      self.$each.$$p = function() {
        var param = $Opal.$destructure(arguments),
            value = $yield1(block, param);

        if (result === undefined) {
          result = param;
          by     = value;
          return;
        }

        if ((value)['$<=>'](by) > 0) {
          result = param
          by     = value;
        }
      };

      self.$each();

      return result === undefined ? nil : result;
    ;
    }, -1);
    
    $def(self, '$min', function $$min(n) {
      var block = $$min.$$p || nil, self = this;

      $$min.$$p = null;
      
      ;
      if (n == null) n = nil;
      if (!$truthy(n['$nil?']())) {
        if ((block !== nil)) {
          return $send(self, 'sort', [], function $$36(a, b){
            
            if (a == null) a = nil;
            if (b == null) b = nil;
            return Opal.yieldX(block, [a, b]);;}, 2).$take(n)
        } else {
          return self.$sort().$take(n)
        }
      };
      
      var result;

      if (block !== nil) {
        self.$each.$$p = function() {
          var param = $Opal.$destructure(arguments);

          if (result === undefined) {
            result = param;
            return;
          }

          var value = block(param, result);

          if (value === nil) {
            $Kernel.$raise($$$('ArgumentError'), "comparison failed");
          }

          if (value < 0) {
            result = param;
          }
        };
      }
      else {
        self.$each.$$p = function() {
          var param = $Opal.$destructure(arguments);

          if (result === undefined) {
            result = param;
            return;
          }

          if ($Opal.$compare(param, result) < 0) {
            result = param;
          }
        };
      }

      self.$each();

      return result === undefined ? nil : result;
    ;
    }, -1);
    
    $def(self, '$min_by', function $$min_by(n) {
      var block = $$min_by.$$p || nil, self = this;

      $$min_by.$$p = null;
      
      ;
      if (n == null) n = nil;
      if (!$truthy(block)) {
        return $send(self, 'enum_for', ["min_by", n], function $$37(){var self = $$37.$$s == null ? this : $$37.$$s;

          return self.$enumerator_size()}, {$$arity: 0, $$s: self})
      };
      if (!$truthy(n['$nil?']())) {
        return $send(self, 'sort_by', [], block.$to_proc()).$take(n)
      };
      
      var result,
          by;

      self.$each.$$p = function() {
        var param = $Opal.$destructure(arguments),
            value = $yield1(block, param);

        if (result === undefined) {
          result = param;
          by     = value;
          return;
        }

        if ((value)['$<=>'](by) < 0) {
          result = param
          by     = value;
        }
      };

      self.$each();

      return result === undefined ? nil : result;
    ;
    }, -1);
    
    $def(self, '$minmax', function $$minmax() {
      var block = $$minmax.$$p || nil, self = this, $ret_or_1 = nil;

      $$minmax.$$p = null;
      
      ;
      block = ($truthy(($ret_or_1 = block)) ? ($ret_or_1) : ($send($Kernel, 'proc', [], function $$38(a, b){
        
        if (a == null) a = nil;
        if (b == null) b = nil;
        return a['$<=>'](b);}, 2)));
      
      var min = nil, max = nil, first_time = true;

      self.$each.$$p = function() {
        var element = $Opal.$destructure(arguments);
        if (first_time) {
          min = max = element;
          first_time = false;
        } else {
          var min_cmp = block.$call(min, element);

          if (min_cmp === nil) {
            $Kernel.$raise($$$('ArgumentError'), "comparison failed")
          } else if (min_cmp > 0) {
            min = element;
          }

          var max_cmp = block.$call(max, element);

          if (max_cmp === nil) {
            $Kernel.$raise($$$('ArgumentError'), "comparison failed")
          } else if (max_cmp < 0) {
            max = element;
          }
        }
      }

      self.$each();

      return [min, max];
    ;
    }, 0);
    
    $def(self, '$minmax_by', function $$minmax_by() {
      var block = $$minmax_by.$$p || nil, self = this;

      $$minmax_by.$$p = null;
      
      ;
      if (!$truthy(block)) {
        return $send(self, 'enum_for', ["minmax_by"], function $$39(){var self = $$39.$$s == null ? this : $$39.$$s;

          return self.$enumerator_size()}, {$$arity: 0, $$s: self})
      };
      
      var min_result = nil,
          max_result = nil,
          min_by,
          max_by;

      self.$each.$$p = function() {
        var param = $Opal.$destructure(arguments),
            value = $yield1(block, param);

        if ((min_by === undefined) || (value)['$<=>'](min_by) < 0) {
          min_result = param;
          min_by     = value;
        }

        if ((max_by === undefined) || (value)['$<=>'](max_by) > 0) {
          max_result = param;
          max_by     = value;
        }
      };

      self.$each();

      return [min_result, max_result];
    ;
    }, 0);
    
    $def(self, '$none?', function $Enumerable_none$ques$40(pattern) {try { var $t_return = $thrower('return'); 
      var block = $Enumerable_none$ques$40.$$p || nil, self = this;

      $Enumerable_none$ques$40.$$p = null;
      
      ;
      ;
      if ($truthy(pattern !== undefined)) {
        $send(self, 'each', [], function $$41($a){var $post_args, value, comparable = nil;

          
          $post_args = $slice.call(arguments);
          value = $post_args;
          comparable = comparableForPattern(value);
          if ($truthy($send(pattern, 'public_send', ["==="].concat($to_a(comparable))))) {
            $t_return.$throw(false)
          } else {
            return nil
          };}, {$$arity: -1, $$ret: $t_return})
      } else if ((block !== nil)) {
        $send(self, 'each', [], function $$42($a){var $post_args, value;

          
          $post_args = $slice.call(arguments);
          value = $post_args;
          if ($truthy(Opal.yieldX(block, $to_a(value)))) {
            $t_return.$throw(false)
          } else {
            return nil
          };}, {$$arity: -1, $$ret: $t_return})
      } else {
        $send(self, 'each', [], function $$43($a){var $post_args, value, item = nil;

          
          $post_args = $slice.call(arguments);
          value = $post_args;
          item = $Opal.$destructure(value);
          if ($truthy(item)) {
            $t_return.$throw(false)
          } else {
            return nil
          };}, {$$arity: -1, $$ret: $t_return})
      };
      return true;} catch($e) {
        if ($e === $t_return) return $e.$v;
        throw $e;
      }
    }, -1);
    
    $def(self, '$one?', function $Enumerable_one$ques$44(pattern) {try { var $t_return = $thrower('return'); 
      var block = $Enumerable_one$ques$44.$$p || nil, self = this, count = nil;

      $Enumerable_one$ques$44.$$p = null;
      
      ;
      ;
      count = 0;
      if ($truthy(pattern !== undefined)) {
        $send(self, 'each', [], function $$45($a){var $post_args, value, comparable = nil;

          
          $post_args = $slice.call(arguments);
          value = $post_args;
          comparable = comparableForPattern(value);
          if ($truthy($send(pattern, 'public_send', ["==="].concat($to_a(comparable))))) {
            
            count = $rb_plus(count, 1);
            if ($truthy($rb_gt(count, 1))) {
              $t_return.$throw(false)
            } else {
              return nil
            };
          } else {
            return nil
          };}, {$$arity: -1, $$ret: $t_return})
      } else if ((block !== nil)) {
        $send(self, 'each', [], function $$46($a){var $post_args, value;

          
          $post_args = $slice.call(arguments);
          value = $post_args;
          if (!$truthy(Opal.yieldX(block, $to_a(value)))) {
            return nil
          };
          count = $rb_plus(count, 1);
          if ($truthy($rb_gt(count, 1))) {
            $t_return.$throw(false)
          } else {
            return nil
          };}, {$$arity: -1, $$ret: $t_return})
      } else {
        $send(self, 'each', [], function $$47($a){var $post_args, value;

          
          $post_args = $slice.call(arguments);
          value = $post_args;
          if (!$truthy($Opal.$destructure(value))) {
            return nil
          };
          count = $rb_plus(count, 1);
          if ($truthy($rb_gt(count, 1))) {
            $t_return.$throw(false)
          } else {
            return nil
          };}, {$$arity: -1, $$ret: $t_return})
      };
      return count['$=='](1);} catch($e) {
        if ($e === $t_return) return $e.$v;
        throw $e;
      }
    }, -1);
    
    $def(self, '$partition', function $$partition() {
      var block = $$partition.$$p || nil, self = this;

      $$partition.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return $send(self, 'enum_for', ["partition"], function $$48(){var self = $$48.$$s == null ? this : $$48.$$s;

          return self.$enumerator_size()}, {$$arity: 0, $$s: self})
      };
      
      var truthy = [], falsy = [], result;

      self.$each.$$p = function() {
        var param = $Opal.$destructure(arguments),
            value = $yield1(block, param);

        if ($truthy(value)) {
          truthy.push(param);
        }
        else {
          falsy.push(param);
        }
      };

      self.$each();

      return [truthy, falsy];
    ;
    }, 0);
    
    $def(self, '$reject', function $$reject() {
      var block = $$reject.$$p || nil, self = this;

      $$reject.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return $send(self, 'enum_for', ["reject"], function $$49(){var self = $$49.$$s == null ? this : $$49.$$s;

          return self.$enumerator_size()}, {$$arity: 0, $$s: self})
      };
      
      var result = [];

      self.$each.$$p = function() {
        var param = $Opal.$destructure(arguments),
            value = $yield1(block, param);

        if (!$truthy(value)) {
          result.push(param);
        }
      };

      self.$each();

      return result;
    ;
    }, 0);
    
    $def(self, '$reverse_each', function $$reverse_each() {
      var block = $$reverse_each.$$p || nil, self = this;

      $$reverse_each.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return $send(self, 'enum_for', ["reverse_each"], function $$50(){var self = $$50.$$s == null ? this : $$50.$$s;

          return self.$enumerator_size()}, {$$arity: 0, $$s: self})
      };
      
      var result = [];

      self.$each.$$p = function() {
        result.push(arguments);
      };

      self.$each();

      for (var i = result.length - 1; i >= 0; i--) {
        $yieldX(block, result[i]);
      }

      return result;
    ;
    }, 0);
    
    $def(self, '$slice_before', function $$slice_before(pattern) {
      var block = $$slice_before.$$p || nil, self = this;

      $$slice_before.$$p = null;
      
      ;
      ;
      if ($truthy(pattern === undefined && block === nil)) {
        $Kernel.$raise($$$('ArgumentError'), "both pattern and block are given")
      };
      if ($truthy(pattern !== undefined && block !== nil || arguments.length > 1)) {
        $Kernel.$raise($$$('ArgumentError'), "wrong number of arguments (" + (arguments.length) + " expected 1)")
      };
      return $send($$$('Enumerator'), 'new', [], function $$51(e){var self = $$51.$$s == null ? this : $$51.$$s;

        
        if (e == null) e = nil;
        
        var slice = [];

        if (block !== nil) {
          if (pattern === undefined) {
            self.$each.$$p = function() {
              var param = $Opal.$destructure(arguments),
                  value = $yield1(block, param);

              if ($truthy(value) && slice.length > 0) {
                e['$<<'](slice);
                slice = [];
              }

              slice.push(param);
            };
          }
          else {
            self.$each.$$p = function() {
              var param = $Opal.$destructure(arguments),
                  value = block(param, pattern.$dup());

              if ($truthy(value) && slice.length > 0) {
                e['$<<'](slice);
                slice = [];
              }

              slice.push(param);
            };
          }
        }
        else {
          self.$each.$$p = function() {
            var param = $Opal.$destructure(arguments),
                value = pattern['$==='](param);

            if ($truthy(value) && slice.length > 0) {
              e['$<<'](slice);
              slice = [];
            }

            slice.push(param);
          };
        }

        self.$each();

        if (slice.length > 0) {
          e['$<<'](slice);
        }
      ;}, {$$arity: 1, $$s: self});
    }, -1);
    
    $def(self, '$slice_after', function $$slice_after(pattern) {
      var block = $$slice_after.$$p || nil, self = this;

      $$slice_after.$$p = null;
      
      ;
      ;
      if ($truthy(pattern === undefined && block === nil)) {
        $Kernel.$raise($$$('ArgumentError'), "both pattern and block are given")
      };
      if ($truthy(pattern !== undefined && block !== nil || arguments.length > 1)) {
        $Kernel.$raise($$$('ArgumentError'), "wrong number of arguments (" + (arguments.length) + " expected 1)")
      };
      if ($truthy(pattern !== undefined)) {
        block = $send($Kernel, 'proc', [], function $$52(e){
          
          if (e == null) e = nil;
          return pattern['$==='](e);}, 1)
      };
      return $send($$$('Enumerator'), 'new', [], function $$53(yielder){var self = $$53.$$s == null ? this : $$53.$$s;

        
        if (yielder == null) yielder = nil;
        
        var accumulate;

        self.$each.$$p = function() {
          var element = $Opal.$destructure(arguments),
              end_chunk = $yield1(block, element);

          if (accumulate == null) {
            accumulate = [];
          }

          if ($truthy(end_chunk)) {
            accumulate.push(element);
            yielder.$yield(accumulate);
            accumulate = null;
          } else {
            accumulate.push(element)
          }
        }

        self.$each();

        if (accumulate != null) {
          yielder.$yield(accumulate);
        }
      ;}, {$$arity: 1, $$s: self});
    }, -1);
    
    $def(self, '$slice_when', function $$slice_when() {
      var block = $$slice_when.$$p || nil, self = this;

      $$slice_when.$$p = null;
      
      ;
      if (!(block !== nil)) {
        $Kernel.$raise($$$('ArgumentError'), "wrong number of arguments (0 for 1)")
      };
      return $send($$$('Enumerator'), 'new', [], function $$54(yielder){var self = $$54.$$s == null ? this : $$54.$$s;

        
        if (yielder == null) yielder = nil;
        
        var slice = nil, last_after = nil;

        self.$each_cons.$$p = function() {
          var params = $Opal.$destructure(arguments),
              before = params[0],
              after = params[1],
              match = $yieldX(block, [before, after]);

          last_after = after;

          if (slice === nil) {
            slice = [];
          }

          if ($truthy(match)) {
            slice.push(before);
            yielder.$yield(slice);
            slice = [];
          } else {
            slice.push(before);
          }
        }

        self.$each_cons(2);

        if (slice !== nil) {
          slice.push(last_after);
          yielder.$yield(slice);
        }
      ;}, {$$arity: 1, $$s: self});
    }, 0);
    
    $def(self, '$sort', function $$sort() {
      var block = $$sort.$$p || nil, self = this, ary = nil;

      $$sort.$$p = null;
      
      ;
      ary = self.$to_a();
      if (!(block !== nil)) {
        block = $lambda(function $$55(a, b){
          
          if (a == null) a = nil;
          if (b == null) b = nil;
          return a['$<=>'](b);}, 2)
      };
      return $send(ary, 'sort', [], block.$to_proc());
    }, 0);
    
    $def(self, '$sort_by', function $$sort_by() {
      var block = $$sort_by.$$p || nil, self = this, dup = nil;

      $$sort_by.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return $send(self, 'enum_for', ["sort_by"], function $$56(){var self = $$56.$$s == null ? this : $$56.$$s;

          return self.$enumerator_size()}, {$$arity: 0, $$s: self})
      };
      dup = $send(self, 'map', [], function $$57(){var arg = nil;

        
        arg = $Opal.$destructure(arguments);
        return [Opal.yield1(block, arg), arg];}, 0);
      $send(dup, 'sort!', [], function $$58(a, b){
        
        if (a == null) a = nil;
        if (b == null) b = nil;
        return (a[0])['$<=>'](b[0]);}, 2);
      return $send(dup, 'map!', [], function $$59(i){
        
        if (i == null) i = nil;
        return i[1];;}, 1);
    }, 0);
    
    $def(self, '$sum', function $$sum(initial) {
      var $yield = $$sum.$$p || nil, self = this, result = nil, compensation = nil;

      $$sum.$$p = null;
      
      if (initial == null) initial = 0;
      result = initial;
      compensation = 0;
      $send(self, 'each', [], function $$60($a){var $post_args, args, item = nil, y = nil, t = nil;

        
        $post_args = $slice.call(arguments);
        args = $post_args;
        item = (($yield !== nil) ? (Opal.yieldX($yield, $to_a(args))) : ($Opal.$destructure(args)));
        if (($not([$$$($$$('Float'), 'INFINITY'), $$$($$$('Float'), 'INFINITY')['$-@']()]['$include?'](item)) && ($truthy(item['$respond_to?']("-"))))) {
          
          y = $rb_minus(item, compensation);
          t = $rb_plus(result, y);
          compensation = $rb_minus($rb_minus(t, result), y);
          return (result = t);
        } else {
          return (result = $rb_plus(result, item))
        };}, -1);
      return result;
    }, -1);
    
    $def(self, '$take', function $$take(num) {
      var self = this;

      return self.$first(num)
    }, 1);
    
    $def(self, '$take_while', function $$take_while() {try { var $t_return = $thrower('return'); 
      var block = $$take_while.$$p || nil, self = this, result = nil;

      $$take_while.$$p = null;
      
      ;
      if (!$truthy(block)) {
        return self.$enum_for("take_while")
      };
      result = [];
      return $send(self, 'each', [], function $$61($a){var $post_args, args, value = nil;

        
        $post_args = $slice.call(arguments);
        args = $post_args;
        value = $Opal.$destructure(args);
        if (!$truthy(Opal.yield1(block, value))) {
          $t_return.$throw(result)
        };
        return result.push(value);;}, {$$arity: -1, $$ret: $t_return});} catch($e) {
        if ($e === $t_return) return $e.$v;
        throw $e;
      }
    }, 0);
    
    $def(self, '$uniq', function $$uniq() {
      var block = $$uniq.$$p || nil, self = this, hash = nil;

      $$uniq.$$p = null;
      
      ;
      hash = $hash2([], {});
      $send(self, 'each', [], function $$62($a){var $post_args, args, $b, value = nil, produced = nil;

        
        $post_args = $slice.call(arguments);
        args = $post_args;
        value = $Opal.$destructure(args);
        produced = ((block !== nil) ? (Opal.yield1(block, value)) : (value));
        if ($truthy(hash['$key?'](produced))) {
          return nil
        } else {
          return ($b = [produced, value], $send(hash, '[]=', $b), $b[$b.length - 1])
        };}, -1);
      return hash.$values();
    }, 0);
    
    $def(self, '$tally', function $$tally(hash) {
      var self = this, out = nil;

      
      ;
      if (hash && hash !== nil) { $deny_frozen_access(hash); };
      out = $send($send(self, 'group_by', [], "itself".$to_proc()), 'transform_values', [], "count".$to_proc());
      if ($truthy(hash)) {
        
        $send(out, 'each', [], function $$63(k, v){var $a;

          
          if (k == null) k = nil;
          if (v == null) v = nil;
          return ($a = [k, $rb_plus(hash.$fetch(k, 0), v)], $send(hash, '[]=', $a), $a[$a.length - 1]);}, 2);
        return hash;
      } else {
        return out
      };
    }, -1);
    
    $def(self, '$to_h', function $$to_h($a) {
      var block = $$to_h.$$p || nil, $post_args, args, self = this;

      $$to_h.$$p = null;
      
      ;
      $post_args = $slice.call(arguments);
      args = $post_args;
      if ((block !== nil)) {
        return $send($send(self, 'map', [], block.$to_proc()), 'to_h', $to_a(args))
      };
      
      var hash = $hash2([], {});

      self.$each.$$p = function() {
        var param = $Opal.$destructure(arguments);
        var ary = $Opal['$coerce_to?'](param, $$$('Array'), "to_ary"), key, val;
        if (!ary.$$is_array) {
          $Kernel.$raise($$$('TypeError'), "wrong element type " + ((ary).$class()) + " (expected array)")
        }
        if (ary.length !== 2) {
          $Kernel.$raise($$$('ArgumentError'), "wrong array length (expected 2, was " + ((ary).$length()) + ")")
        }
        key = ary[0];
        val = ary[1];

        Opal.hash_put(hash, key, val);
      };

      self.$each.apply(self, args);

      return hash;
    ;
    }, -1);
    
    $def(self, '$zip', function $$zip($a) {
      var block = $$zip.$$p || nil, $post_args, others, self = this;

      $$zip.$$p = null;
      
      ;
      $post_args = $slice.call(arguments);
      others = $post_args;
      return $send(self.$to_a(), 'zip', $to_a(others));
    }, -1);
    $alias(self, "find", "detect");
    $alias(self, "filter", "find_all");
    $alias(self, "flat_map", "collect_concat");
    $alias(self, "map", "collect");
    $alias(self, "member?", "include?");
    $alias(self, "reduce", "inject");
    $alias(self, "select", "find_all");
    return $alias(self, "to_a", "entries");
  })('::')
};

Opal.modules["corelib/io"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $klass = Opal.klass, $const_set = Opal.const_set, $not = Opal.not, $truthy = Opal.truthy, $def = Opal.def, $return_ivar = Opal.return_ivar, $return_val = Opal.return_val, $slice = Opal.slice, $Kernel = Opal.Kernel, $gvars = Opal.gvars, $send = Opal.send, $to_a = Opal.to_a, $rb_plus = Opal.rb_plus, $neqeq = Opal.neqeq, $range = Opal.range, $hash2 = Opal.hash2, $eqeq = Opal.eqeq, $to_ary = Opal.to_ary, $rb_gt = Opal.rb_gt, $assign_ivar_val = Opal.assign_ivar_val, $alias = Opal.alias, $a, nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('attr_reader,attr_accessor,!,match?,include?,size,write,String,flatten,puts,sysread_noraise,+,!=,[],ord,getc,readchar,raise,gets,==,to_str,length,split,sub,sysread,>,to_a,each_line,enum_for,getbyte,closed_write?,closed_read?,each,eof,new,write_proc=,read_proc=');
  
  (function($base, $super) {
    var self = $klass($base, $super, 'IO');

    var $proto = self.$$prototype;

    $proto.read_buffer = $proto.closed = nil;
    
    $const_set(self, 'SEEK_SET', 0);
    $const_set(self, 'SEEK_CUR', 1);
    $const_set(self, 'SEEK_END', 2);
    $const_set(self, 'SEEK_DATA', 3);
    $const_set(self, 'SEEK_HOLE', 4);
    $const_set(self, 'READABLE', 1);
    $const_set(self, 'WRITABLE', 4);
    self.$attr_reader("eof");
    self.$attr_accessor("read_proc", "sync", "tty", "write_proc");
    
    $def(self, '$initialize', function $$initialize(fd, flags) {
      var self = this;

      
      if (flags == null) flags = "r";
      self.fd = fd;
      self.flags = flags;
      self.eof = false;
      if (($truthy(flags['$include?']("r")) && ($not(flags['$match?'](/[wa+]/))))) {
        return (self.closed = "write")
      } else if (($truthy(flags['$match?'](/[wa]/)) && ($not(flags['$match?'](/[r+]/))))) {
        return (self.closed = "read")
      } else {
        return nil
      };
    }, -2);
    
    $def(self, '$fileno', $return_ivar("fd"), 0);
    
    $def(self, '$tty?', function $IO_tty$ques$1() {
      var self = this;

      return self.tty == true;
    }, 0);
    
    $def(self, '$write', function $$write(string) {
      var self = this;

      
      self.write_proc(string);
      return string.$size();
    }, 1);
    
    $def(self, '$flush', $return_val(nil), 0);
    
    $def(self, '$<<', function $IO_$lt$lt$2(string) {
      var self = this;

      
      self.$write(string);
      return self;
    }, 1);
    
    $def(self, '$print', function $$print($a) {
      var $post_args, args, self = this;
      if ($gvars[","] == null) $gvars[","] = nil;

      
      $post_args = $slice.call(arguments);
      args = $post_args;
      
      for (var i = 0, ii = args.length; i < ii; i++) {
        args[i] = $Kernel.$String(args[i])
      }
      self.$write(args.join($gvars[","]));
    ;
      return nil;
    }, -1);
    
    $def(self, '$puts', function $$puts($a) {
      var $post_args, args, self = this;

      
      $post_args = $slice.call(arguments);
      args = $post_args;
      
      var line
      if (args.length === 0) {
        self.$write("\n");
        return nil;
      } else {
        for (var i = 0, ii = args.length; i < ii; i++) {
          if (args[i].$$is_array){
            var ary = (args[i]).$flatten()
            if (ary.length > 0) $send(self, 'puts', $to_a((ary)))
          } else {
            if (args[i].$$is_string) {
              line = args[i].valueOf();
            } else {
              line = $Kernel.$String(args[i]);
            }
            if (!line.endsWith("\n")) line += "\n"
            self.$write(line)
          }
        }
      }
    ;
      return nil;
    }, -1);
    
    $def(self, '$getc', function $$getc() {
      var self = this, $ret_or_1 = nil, parts = nil, ret = nil;

      
      self.read_buffer = ($truthy(($ret_or_1 = self.read_buffer)) ? ($ret_or_1) : (""));
      parts = "";
      do {
      
        self.read_buffer = $rb_plus(self.read_buffer, parts);
        if ($neqeq(self.read_buffer, "")) {
          
          ret = self.read_buffer['$[]'](0);
          self.read_buffer = self.read_buffer['$[]']($range(1, -1, false));
          return ret;
        };
      } while ($truthy((parts = self.$sysread_noraise(1))));;
      return nil;
    }, 0);
    
    $def(self, '$getbyte', function $$getbyte() {
      var $a, self = this;

      return ($a = self.$getc(), ($a === nil || $a == null) ? nil : $a.$ord())
    }, 0);
    
    $def(self, '$readbyte', function $$readbyte() {
      var self = this;

      return self.$readchar().$ord()
    }, 0);
    
    $def(self, '$readchar', function $$readchar() {
      var self = this, $ret_or_1 = nil;

      if ($truthy(($ret_or_1 = self.$getc()))) {
        return $ret_or_1
      } else {
        return $Kernel.$raise($$$('EOFError'), "end of file reached")
      }
    }, 0);
    
    $def(self, '$readline', function $$readline($a) {
      var $post_args, args, self = this, $ret_or_1 = nil;

      
      $post_args = $slice.call(arguments);
      args = $post_args;
      if ($truthy(($ret_or_1 = $send(self, 'gets', $to_a(args))))) {
        return $ret_or_1
      } else {
        return $Kernel.$raise($$$('EOFError'), "end of file reached")
      };
    }, -1);
    
    $def(self, '$gets', function $$gets(sep, limit, opts) {
      var $a, $b, self = this, orig_sep = nil, $ret_or_1 = nil, seplen = nil, data = nil, ret = nil, orig_buffer = nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      
      if (sep == null) sep = false;
      if (limit == null) limit = nil;
      if (opts == null) opts = $hash2([], {});
      if (($truthy(sep.$$is_number) && ($not(limit)))) {
        $a = [false, sep, limit], (sep = $a[0]), (limit = $a[1]), (opts = $a[2]), $a
      };
      if ((($truthy(sep.$$is_hash) && ($not(limit))) && ($eqeq(opts, $hash2([], {}))))) {
        $a = [false, nil, sep], (sep = $a[0]), (limit = $a[1]), (opts = $a[2]), $a
      } else if (($truthy(limit.$$is_hash) && ($eqeq(opts, $hash2([], {}))))) {
        $a = [sep, nil, limit], (sep = $a[0]), (limit = $a[1]), (opts = $a[2]), $a
      };
      orig_sep = sep;
      if ($eqeq(sep, false)) {
        sep = $gvars["/"]
      };
      if ($eqeq(sep, "")) {
        sep = /\r?\n\r?\n/
      };
      sep = ($truthy(($ret_or_1 = sep)) ? ($ret_or_1) : (""));
      if (!$eqeq(orig_sep, "")) {
        sep = sep.$to_str()
      };
      seplen = ($eqeq(orig_sep, "") ? (2) : (sep.$length()));
      if ($eqeq(sep, " ")) {
        sep = / /
      };
      self.read_buffer = ($truthy(($ret_or_1 = self.read_buffer)) ? ($ret_or_1) : (""));
      data = "";
      ret = nil;
      do {
      
        self.read_buffer = $rb_plus(self.read_buffer, data);
        if (($neqeq(sep, "") && ($truthy(($truthy(sep.$$is_regexp) ? (self.read_buffer['$match?'](sep)) : (self.read_buffer['$include?'](sep))))))) {
          
          orig_buffer = self.read_buffer;
          $b = self.read_buffer.$split(sep, 2), $a = $to_ary($b), (ret = ($a[0] == null ? nil : $a[0])), (self.read_buffer = ($a[1] == null ? nil : $a[1])), $b;
          if ($neqeq(ret, orig_buffer)) {
            ret = $rb_plus(ret, orig_buffer['$[]'](ret.$length(), seplen))
          };
          break;
        };
      } while ($truthy((data = self.$sysread_noraise(($eqeq(sep, "") ? (65536) : (1))))));;
      if (!$truthy(ret)) {
        
        $a = [($truthy(($ret_or_1 = self.read_buffer)) ? ($ret_or_1) : ("")), ""], (ret = $a[0]), (self.read_buffer = $a[1]), $a;
        if ($eqeq(ret, "")) {
          ret = nil
        };
      };
      if ($truthy(ret)) {
        
        if ($truthy(limit)) {
          
          ret = ret['$[]'](Opal.Range.$new(0,limit, true));
          self.read_buffer = $rb_plus(ret['$[]'](Opal.Range.$new(limit, -1, false)), self.read_buffer);
        };
        if ($truthy(opts['$[]']("chomp"))) {
          ret = ret.$sub(/\r?\n$/, "")
        };
        if ($eqeq(orig_sep, "")) {
          ret = ret.$sub(/^[\r\n]+/, "")
        };
      };
      if ($eqeq(orig_sep, false)) {
        $gvars._ = ret
      };
      return ret;
    }, -1);
    
    $def(self, '$sysread', function $$sysread(integer) {
      var self = this, $ret_or_1 = nil;

      if ($truthy(($ret_or_1 = self.read_proc(integer)))) {
        return $ret_or_1
      } else {
        
        self.eof = true;
        return $Kernel.$raise($$$('EOFError'), "end of file reached");
      }
    }, 1);
    
    $def(self, '$sysread_noraise', function $$sysread_noraise(integer) {
      var self = this;

      try {
        return self.$sysread(integer)
      } catch ($err) {
        if (Opal.rescue($err, [$$$('EOFError')])) {
          try {
            return nil
          } finally { Opal.pop_exception(); }
        } else { throw $err; }
      }
    }, 1);
    
    $def(self, '$readpartial', function $$readpartial(integer) {
      var $a, self = this, $ret_or_1 = nil, part = nil, ret = nil;

      
      self.read_buffer = ($truthy(($ret_or_1 = self.read_buffer)) ? ($ret_or_1) : (""));
      part = self.$sysread(integer);
      $a = [$rb_plus(self.read_buffer, ($truthy(($ret_or_1 = part)) ? ($ret_or_1) : (""))), ""], (ret = $a[0]), (self.read_buffer = $a[1]), $a;
      if ($eqeq(ret, "")) {
        ret = nil
      };
      return ret;
    }, 1);
    
    $def(self, '$read', function $$read(integer) {
      var $a, self = this, $ret_or_1 = nil, parts = nil, ret = nil;

      
      if (integer == null) integer = nil;
      self.read_buffer = ($truthy(($ret_or_1 = self.read_buffer)) ? ($ret_or_1) : (""));
      parts = "";
      ret = nil;
      do {
      
        self.read_buffer = $rb_plus(self.read_buffer, parts);
        if (($truthy(integer) && ($truthy($rb_gt(self.read_buffer.$length(), integer))))) {
          
          $a = [self.read_buffer['$[]'](Opal.Range.$new(0,integer, true)), self.read_buffer['$[]'](Opal.Range.$new(integer, -1, false))], (ret = $a[0]), (self.read_buffer = $a[1]), $a;
          return ret;
        };
      } while ($truthy((parts = self.$sysread_noraise(($truthy(($ret_or_1 = integer)) ? ($ret_or_1) : (65536))))));;
      $a = [self.read_buffer, ""], (ret = $a[0]), (self.read_buffer = $a[1]), $a;
      return ret;
    }, -1);
    
    $def(self, '$readlines', function $$readlines(separator) {
      var self = this;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      
      if (separator == null) separator = $gvars["/"];
      return self.$each_line(separator).$to_a();
    }, -1);
    
    $def(self, '$each', function $$each($a, $b) {
      var block = $$each.$$p || nil, $post_args, sep, args, self = this, s = nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      $$each.$$p = null;
      
      ;
      $post_args = $slice.call(arguments);
      
      if ($post_args.length > 0) sep = $post_args.shift();if (sep == null) sep = $gvars["/"];
      args = $post_args;
      if (!(block !== nil)) {
        return $send(self, 'enum_for', ["each", sep].concat($to_a(args)))
      };
      while ($truthy((s = $send(self, 'gets', [sep].concat($to_a(args)))))) {
      Opal.yield1(block, s)
      };
      return self;
    }, -1);
    
    $def(self, '$each_byte', function $$each_byte() {
      var block = $$each_byte.$$p || nil, self = this, s = nil;

      $$each_byte.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return self.$enum_for("each_byte")
      };
      while ($truthy((s = self.$getbyte()))) {
      Opal.yield1(block, s)
      };
      return self;
    }, 0);
    
    $def(self, '$each_char', function $$each_char() {
      var block = $$each_char.$$p || nil, self = this, s = nil;

      $$each_char.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return self.$enum_for("each_char")
      };
      while ($truthy((s = self.$getc()))) {
      Opal.yield1(block, s)
      };
      return self;
    }, 0);
    
    $def(self, '$close', $assign_ivar_val("closed", "both"), 0);
    
    $def(self, '$close_read', function $$close_read() {
      var self = this;

      if ($eqeq(self.closed, "write")) {
        return (self.closed = "both")
      } else {
        return (self.closed = "read")
      }
    }, 0);
    
    $def(self, '$close_write', function $$close_write() {
      var self = this;

      if ($eqeq(self.closed, "read")) {
        return (self.closed = "both")
      } else {
        return (self.closed = "write")
      }
    }, 0);
    
    $def(self, '$closed?', function $IO_closed$ques$3() {
      var self = this;

      return self.closed['$==']("both")
    }, 0);
    
    $def(self, '$closed_read?', function $IO_closed_read$ques$4() {
      var self = this, $ret_or_1 = nil;

      if ($truthy(($ret_or_1 = self.closed['$==']("read")))) {
        return $ret_or_1
      } else {
        return self.closed['$==']("both")
      }
    }, 0);
    
    $def(self, '$closed_write?', function $IO_closed_write$ques$5() {
      var self = this, $ret_or_1 = nil;

      if ($truthy(($ret_or_1 = self.closed['$==']("write")))) {
        return $ret_or_1
      } else {
        return self.closed['$==']("both")
      }
    }, 0);
    
    $def(self, '$check_writable', function $$check_writable() {
      var self = this;

      if ($truthy(self['$closed_write?']())) {
        return $Kernel.$raise($$$('IOError'), "not opened for writing")
      } else {
        return nil
      }
    }, 0);
    
    $def(self, '$check_readable', function $$check_readable() {
      var self = this;

      if ($truthy(self['$closed_read?']())) {
        return $Kernel.$raise($$$('IOError'), "not opened for reading")
      } else {
        return nil
      }
    }, 0);
    $alias(self, "each_line", "each");
    return $alias(self, "eof?", "eof");
  })('::', null);
  $const_set('::', 'STDIN', ($gvars.stdin = $$$('IO').$new(0, "r")));
  $const_set('::', 'STDOUT', ($gvars.stdout = $$$('IO').$new(1, "w")));
  $const_set('::', 'STDERR', ($gvars.stderr = $$$('IO').$new(2, "w")));
  var console = Opal.global.console;
  $$$('STDOUT')['$write_proc='](typeof(process) === 'object' && typeof(process.stdout) === 'object' ? function(s){process.stdout.write(s)} : function(s){console.log(s)});
  $$$('STDERR')['$write_proc='](typeof(process) === 'object' && typeof(process.stderr) === 'object' ? function(s){process.stderr.write(s)} : function(s){console.warn(s)});
  return ($a = [function(s) { var p = prompt(); if (p !== null) return p + "\n"; return nil; }], $send($$$('STDIN'), 'read_proc=', $a), $a[$a.length - 1]);
};

Opal.modules["corelib/method"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $klass = Opal.klass, $def = Opal.def, $truthy = Opal.truthy, $slice = Opal.slice, $alias = Opal.alias, $Kernel = Opal.Kernel, $send = Opal.send, $to_a = Opal.to_a, nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('attr_reader,arity,curry,>>,<<,new,class,join,source_location,call,raise,bind,to_proc');
  
  (function($base, $super) {
    var self = $klass($base, $super, 'Method');

    var $proto = self.$$prototype;

    $proto.method = $proto.receiver = $proto.owner = $proto.name = nil;
    
    self.$attr_reader("owner", "receiver", "name");
    
    $def(self, '$initialize', function $$initialize(receiver, owner, method, name) {
      var self = this;

      
      self.receiver = receiver;
      self.owner = owner;
      self.name = name;
      return (self.method = method);
    }, 4);
    
    $def(self, '$arity', function $$arity() {
      var self = this;

      return self.method.$arity()
    }, 0);
    
    $def(self, '$parameters', function $$parameters() {
      var self = this;

      return self.method.$$parameters
    }, 0);
    
    $def(self, '$source_location', function $$source_location() {
      var self = this, $ret_or_1 = nil;

      if ($truthy(($ret_or_1 = self.method.$$source_location))) {
        return $ret_or_1
      } else {
        return ["(eval)", 0]
      }
    }, 0);
    
    $def(self, '$comments', function $$comments() {
      var self = this, $ret_or_1 = nil;

      if ($truthy(($ret_or_1 = self.method.$$comments))) {
        return $ret_or_1
      } else {
        return []
      }
    }, 0);
    
    $def(self, '$call', function $$call($a) {
      var block = $$call.$$p || nil, $post_args, args, self = this;

      $$call.$$p = null;
      
      ;
      $post_args = $slice.call(arguments);
      args = $post_args;
      
      self.method.$$p = block;

      return self.method.apply(self.receiver, args);
    ;
    }, -1);
    
    $def(self, '$curry', function $$curry(arity) {
      var self = this;

      
      ;
      return self.method.$curry(arity);
    }, -1);
    
    $def(self, '$>>', function $Method_$gt$gt$1(other) {
      var self = this;

      return self.method['$>>'](other)
    }, 1);
    
    $def(self, '$<<', function $Method_$lt$lt$2(other) {
      var self = this;

      return self.method['$<<'](other)
    }, 1);
    
    $def(self, '$unbind', function $$unbind() {
      var self = this;

      return $$$('UnboundMethod').$new(self.receiver.$class(), self.owner, self.method, self.name)
    }, 0);
    
    $def(self, '$to_proc', function $$to_proc() {
      var self = this;

      
      var proc = self.$call.bind(self);
      proc.$$unbound = self.method;
      proc.$$is_lambda = true;
      proc.$$arity = self.method.$$arity;
      proc.$$parameters = self.method.$$parameters;
      return proc;
    
    }, 0);
    
    $def(self, '$inspect', function $$inspect() {
      var self = this;

      return "#<" + (self.$class()) + ": " + (self.receiver.$class()) + "#" + (self.name) + " (defined in " + (self.owner) + " in " + (self.$source_location().$join(":")) + ")>"
    }, 0);
    $alias(self, "[]", "call");
    return $alias(self, "===", "call");
  })('::', null);
  return (function($base, $super) {
    var self = $klass($base, $super, 'UnboundMethod');

    var $proto = self.$$prototype;

    $proto.method = $proto.owner = $proto.name = $proto.source = nil;
    
    self.$attr_reader("source", "owner", "name");
    
    $def(self, '$initialize', function $$initialize(source, owner, method, name) {
      var self = this;

      
      self.source = source;
      self.owner = owner;
      self.method = method;
      return (self.name = name);
    }, 4);
    
    $def(self, '$arity', function $$arity() {
      var self = this;

      return self.method.$arity()
    }, 0);
    
    $def(self, '$parameters', function $$parameters() {
      var self = this;

      return self.method.$$parameters
    }, 0);
    
    $def(self, '$source_location', function $$source_location() {
      var self = this, $ret_or_1 = nil;

      if ($truthy(($ret_or_1 = self.method.$$source_location))) {
        return $ret_or_1
      } else {
        return ["(eval)", 0]
      }
    }, 0);
    
    $def(self, '$comments', function $$comments() {
      var self = this, $ret_or_1 = nil;

      if ($truthy(($ret_or_1 = self.method.$$comments))) {
        return $ret_or_1
      } else {
        return []
      }
    }, 0);
    
    $def(self, '$bind', function $$bind(object) {
      var self = this;

      
      if (self.owner.$$is_module || Opal.is_a(object, self.owner)) {
        return $$$('Method').$new(object, self.owner, self.method, self.name);
      }
      else {
        $Kernel.$raise($$$('TypeError'), "can't bind singleton method to a different class (expected " + (object) + ".kind_of?(" + (self.owner) + " to be true)");
      }
    
    }, 1);
    
    $def(self, '$bind_call', function $$bind_call(object, $a) {
      var block = $$bind_call.$$p || nil, $post_args, args, self = this;

      $$bind_call.$$p = null;
      
      ;
      $post_args = $slice.call(arguments, 1);
      args = $post_args;
      return $send(self.$bind(object), 'call', $to_a(args), block.$to_proc());
    }, -2);
    return $def(self, '$inspect', function $$inspect() {
      var self = this;

      return "#<" + (self.$class()) + ": " + (self.source) + "#" + (self.name) + " (defined in " + (self.owner) + " in " + (self.$source_location().$join(":")) + ")>"
    }, 0);
  })('::', null);
};

Opal.modules["corelib/variables"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $gvars = Opal.gvars, $const_set = Opal.const_set, $Object = Opal.Object, $hash2 = Opal.hash2, nil = Opal.nil;

  Opal.add_stubs('new');
  
  $gvars['&'] = $gvars['~'] = $gvars['`'] = $gvars["'"] = nil;
  $gvars.LOADED_FEATURES = ($gvars["\""] = Opal.loaded_features);
  $gvars.LOAD_PATH = ($gvars[":"] = []);
  $gvars["/"] = "\n";
  $gvars[","] = nil;
  $const_set('::', 'ARGV', []);
  $const_set('::', 'ARGF', $Object.$new());
  $const_set('::', 'ENV', $hash2([], {}));
  $gvars.VERBOSE = false;
  $gvars.DEBUG = false;
  return ($gvars.SAFE = 0);
};

Opal.modules["corelib/comparable"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $truthy = Opal.truthy, $module = Opal.module, $rb_gt = Opal.rb_gt, $rb_lt = Opal.rb_lt, $eqeqeq = Opal.eqeqeq, $Kernel = Opal.Kernel, $def = Opal.def, nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('>,<,===,raise,class,<=>,equal?');
  return (function($base) {
    var self = $module($base, 'Comparable');

    var $ret_or_1 = nil;

    
    
    function normalize(what) {
      if (Opal.is_a(what, Opal.Integer)) { return what; }

      if ($rb_gt(what, 0)) { return 1; }
      if ($rb_lt(what, 0)) { return -1; }
      return 0;
    }

    function fail_comparison(lhs, rhs) {
      var class_name;
      (($eqeqeq(nil, ($ret_or_1 = rhs)) || (($eqeqeq(true, $ret_or_1) || (($eqeqeq(false, $ret_or_1) || (($eqeqeq($$$('Integer'), $ret_or_1) || ($eqeqeq($$$('Float'), $ret_or_1))))))))) ? (class_name = rhs.$inspect()) : (class_name = rhs.$$class))
      $Kernel.$raise($$$('ArgumentError'), "comparison of " + ((lhs).$class()) + " with " + (class_name) + " failed")
    }

    function cmp_or_fail(lhs, rhs) {
      var cmp = (lhs)['$<=>'](rhs);
      if (!$truthy(cmp)) fail_comparison(lhs, rhs);
      return normalize(cmp);
    }
  ;
    
    $def(self, '$==', function $Comparable_$eq_eq$1(other) {
      var self = this, cmp = nil;

      
      if ($truthy(self['$equal?'](other))) {
        return true
      };
      
      if (self["$<=>"] == Opal.Kernel["$<=>"]) {
        return false;
      }

      // check for infinite recursion
      if (self.$$comparable) {
        self.$$comparable = false;
        return false;
      }
    ;
      if (!$truthy((cmp = self['$<=>'](other)))) {
        return false
      };
      return normalize(cmp) == 0;;
    }, 1);
    
    $def(self, '$>', function $Comparable_$gt$2(other) {
      var self = this;

      return cmp_or_fail(self, other) > 0;
    }, 1);
    
    $def(self, '$>=', function $Comparable_$gt_eq$3(other) {
      var self = this;

      return cmp_or_fail(self, other) >= 0;
    }, 1);
    
    $def(self, '$<', function $Comparable_$lt$4(other) {
      var self = this;

      return cmp_or_fail(self, other) < 0;
    }, 1);
    
    $def(self, '$<=', function $Comparable_$lt_eq$5(other) {
      var self = this;

      return cmp_or_fail(self, other) <= 0;
    }, 1);
    
    $def(self, '$between?', function $Comparable_between$ques$6(min, max) {
      var self = this;

      
      if ($rb_lt(self, min)) {
        return false
      };
      if ($rb_gt(self, max)) {
        return false
      };
      return true;
    }, 2);
    return $def(self, '$clamp', function $$clamp(min, max) {
      var self = this;

      
      if (max == null) max = nil;
      
      var c, excl;

      if (max === nil) {
        // We are dealing with a new Ruby 2.7 behaviour that we are able to
        // provide a single Range argument instead of 2 Comparables.

        if (!Opal.is_a(min, Opal.Range)) {
          $Kernel.$raise($$$('TypeError'), "wrong argument type " + (min.$class()) + " (expected Range)")
        }

        excl = min.excl;
        max = min.end;
        min = min.begin;

        if (max !== nil && excl) {
          $Kernel.$raise($$$('ArgumentError'), "cannot clamp with an exclusive range")
        }
      }

      if (min !== nil && max !== nil && cmp_or_fail(min, max) > 0) {
        $Kernel.$raise($$$('ArgumentError'), "min argument must be smaller than max argument")
      }

      if (min !== nil) {
        c = cmp_or_fail(self, min);

        if (c == 0) return self;
        if (c < 0) return min;
      }

      if (max !== nil) {
        c = cmp_or_fail(self, max);

        if (c > 0) return max;
      }

      return self;
    ;
    }, -2);
  })('::')
};

Opal.modules["corelib/regexp"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $coerce_to = Opal.coerce_to, $prop = Opal.prop, $freeze = Opal.freeze, $klass = Opal.klass, $const_set = Opal.const_set, $send2 = Opal.send2, $find_super = Opal.find_super, $def = Opal.def, $truthy = Opal.truthy, $gvars = Opal.gvars, $slice = Opal.slice, $Kernel = Opal.Kernel, $Opal = Opal.Opal, $alias = Opal.alias, $send = Opal.send, $hash2 = Opal.hash2, $rb_plus = Opal.rb_plus, $ensure_kwargs = Opal.ensure_kwargs, $rb_ge = Opal.rb_ge, $to_a = Opal.to_a, $eqeqeq = Opal.eqeqeq, $rb_minus = Opal.rb_minus, $return_ivar = Opal.return_ivar, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('nil?,[],raise,escape,options,to_str,new,join,coerce_to!,!,match,coerce_to?,begin,frozen?,uniq,map,scan,source,to_proc,transform_values,group_by,each_with_index,+,last,=~,==,attr_reader,>=,length,is_a?,include?,names,regexp,named_captures,===,captures,-,inspect,empty?,each,to_a');
  
  $klass('::', $$$('StandardError'), 'RegexpError');
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Regexp');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $const_set(self, 'IGNORECASE', 1);
    $const_set(self, 'EXTENDED', 2);
    $const_set(self, 'MULTILINE', 4);
    Opal.prop(self.$$prototype, '$$is_regexp', true);
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      
      $def(self, '$allocate', function $$allocate() {
        var $yield = $$allocate.$$p || nil, self = this, allocated = nil;

        $$allocate.$$p = null;
        
        allocated = $send2(self, $find_super(self, 'allocate', $$allocate, false, true), 'allocate', [], $yield);
        allocated.uninitialized = true;
        return allocated;
      }, 0);
      
      $def(self, '$escape', function $$escape(string) {
        
        return Opal.escape_regexp(string);
      }, 1);
      
      $def(self, '$last_match', function $$last_match(n) {
                if ($gvars["~"] == null) $gvars["~"] = nil;

        
        if (n == null) n = nil;
        if ($truthy(n['$nil?']())) {
          return $gvars["~"]
        } else if ($truthy($gvars["~"])) {
          return $gvars["~"]['$[]'](n)
        } else {
          return nil
        };
      }, -1);
      
      $def(self, '$union', function $$union($a) {
        var $post_args, parts, self = this;

        
        $post_args = $slice.call(arguments);
        parts = $post_args;
        
        var is_first_part_array, quoted_validated, part, options, each_part_options;
        if (parts.length == 0) {
          return /(?!)/;
        }
        // return fast if there's only one element
        if (parts.length == 1 && parts[0].$$is_regexp) {
          return parts[0];
        }
        // cover the 2 arrays passed as arguments case
        is_first_part_array = parts[0].$$is_array;
        if (parts.length > 1 && is_first_part_array) {
          $Kernel.$raise($$$('TypeError'), "no implicit conversion of Array into String")
        }
        // deal with splat issues (related to https://github.com/opal/opal/issues/858)
        if (is_first_part_array) {
          parts = parts[0];
        }
        options = undefined;
        quoted_validated = [];
        for (var i=0; i < parts.length; i++) {
          part = parts[i];
          if (part.$$is_string) {
            quoted_validated.push(self.$escape(part));
          }
          else if (part.$$is_regexp) {
            each_part_options = (part).$options();
            if (options != undefined && options != each_part_options) {
              $Kernel.$raise($$$('TypeError'), "All expressions must use the same options")
            }
            options = each_part_options;
            quoted_validated.push('('+part.source+')');
          }
          else {
            quoted_validated.push(self.$escape((part).$to_str()));
          }
        }
      ;
        return self.$new((quoted_validated).$join("|"), options);
      }, -1);
      
      $def(self, '$new', function $new$1(regexp, options) {
        
        
        ;
        
        if (regexp.$$is_regexp) {
          return new RegExp(regexp);
        }

        regexp = $Opal['$coerce_to!'](regexp, $$$('String'), "to_str");

        if (regexp.charAt(regexp.length - 1) === '\\' && regexp.charAt(regexp.length - 2) !== '\\') {
          $Kernel.$raise($$$('RegexpError'), "too short escape sequence: /" + (regexp) + "/")
        }

        regexp = regexp.replace('\\A', '^').replace('\\z', '$')

        if (options === undefined || options['$!']()) {
          return new RegExp(regexp);
        }

        if (options.$$is_number) {
          var temp = '';
          if ($$('IGNORECASE') & options) { temp += 'i'; }
          if ($$('MULTILINE')  & options) { temp += 'm'; }
          options = temp;
        }
        else {
          options = 'i';
        }

        return new RegExp(regexp, options);
      ;
      }, -2);
      $alias(self, "compile", "new");
      return $alias(self, "quote", "escape");
    })(Opal.get_singleton_class(self), $nesting);
    
    $def(self, '$==', function $Regexp_$eq_eq$2(other) {
      var self = this;

      return other instanceof RegExp && self.toString() === other.toString();
    }, 1);
    
    $def(self, '$===', function $Regexp_$eq_eq_eq$3(string) {
      var self = this;

      return self.$match($Opal['$coerce_to?'](string, $$$('String'), "to_str")) !== nil
    }, 1);
    
    $def(self, '$=~', function $Regexp_$eq_tilde$4(string) {
      var self = this, $ret_or_1 = nil;
      if ($gvars["~"] == null) $gvars["~"] = nil;

      if ($truthy(($ret_or_1 = self.$match(string)))) {
        return $gvars["~"].$begin(0)
      } else {
        return $ret_or_1
      }
    }, 1);
    
    $def(self, '$freeze', function $$freeze() {
      var self = this;

      
      if ($truthy(self['$frozen?']())) {
        return self
      };
      
      if (!self.hasOwnProperty('$$g')) { $prop(self, '$$g', null); }
      if (!self.hasOwnProperty('$$gm')) { $prop(self, '$$gm', null); }

      return $freeze(self);
    ;
    }, 0);
    
    $def(self, '$inspect', function $$inspect() {
      var self = this;

      
      var regexp_format = /^\/(.*)\/([^\/]*)$/;
      var value = self.toString();
      var matches = regexp_format.exec(value);
      if (matches) {
        var regexp_pattern = matches[1];
        var regexp_flags = matches[2];
        var chars = regexp_pattern.split('');
        var chars_length = chars.length;
        var char_escaped = false;
        var regexp_pattern_escaped = '';
        for (var i = 0; i < chars_length; i++) {
          var current_char = chars[i];
          if (!char_escaped && current_char == '/') {
            regexp_pattern_escaped = regexp_pattern_escaped.concat('\\');
          }
          regexp_pattern_escaped = regexp_pattern_escaped.concat(current_char);
          if (current_char == '\\') {
            if (char_escaped) {
              // does not over escape
              char_escaped = false;
            } else {
              char_escaped = true;
            }
          } else {
            char_escaped = false;
          }
        }
        return '/' + regexp_pattern_escaped + '/' + regexp_flags;
      } else {
        return value;
      }
    
    }, 0);
    
    $def(self, '$match', function $$match(string, pos) {
      var block = $$match.$$p || nil, self = this;
      if ($gvars["~"] == null) $gvars["~"] = nil;

      $$match.$$p = null;
      
      ;
      ;
      
      if (self.uninitialized) {
        $Kernel.$raise($$$('TypeError'), "uninitialized Regexp")
      }

      if (pos === undefined) {
        if (string === nil) return ($gvars["~"] = nil);
        var m = self.exec($coerce_to(string, $$$('String'), 'to_str'));
        if (m) {
          ($gvars["~"] = $$$('MatchData').$new(self, m));
          return block === nil ? $gvars["~"] : Opal.yield1(block, $gvars["~"]);
        } else {
          return ($gvars["~"] = nil);
        }
      }

      pos = $coerce_to(pos, $$$('Integer'), 'to_int');

      if (string === nil) {
        return ($gvars["~"] = nil);
      }

      string = $coerce_to(string, $$$('String'), 'to_str');

      if (pos < 0) {
        pos += string.length;
        if (pos < 0) {
          return ($gvars["~"] = nil);
        }
      }

      // global RegExp maintains state, so not using self/this
      var md, re = Opal.global_regexp(self);

      while (true) {
        md = re.exec(string);
        if (md === null) {
          return ($gvars["~"] = nil);
        }
        if (md.index >= pos) {
          ($gvars["~"] = $$$('MatchData').$new(re, md));
          return block === nil ? $gvars["~"] : Opal.yield1(block, $gvars["~"]);
        }
        re.lastIndex = md.index + 1;
      }
    ;
    }, -2);
    
    $def(self, '$match?', function $Regexp_match$ques$5(string, pos) {
      var self = this;

      
      ;
      
      if (self.uninitialized) {
        $Kernel.$raise($$$('TypeError'), "uninitialized Regexp")
      }

      if (pos === undefined) {
        return string === nil ? false : self.test($coerce_to(string, $$$('String'), 'to_str'));
      }

      pos = $coerce_to(pos, $$$('Integer'), 'to_int');

      if (string === nil) {
        return false;
      }

      string = $coerce_to(string, $$$('String'), 'to_str');

      if (pos < 0) {
        pos += string.length;
        if (pos < 0) {
          return false;
        }
      }

      // global RegExp maintains state, so not using self/this
      var md, re = Opal.global_regexp(self);

      md = re.exec(string);
      if (md === null || md.index < pos) {
        return false;
      } else {
        return true;
      }
    ;
    }, -2);
    
    $def(self, '$names', function $$names() {
      var self = this;

      return $send(self.$source().$scan(/\(?<(\w+)>/, $hash2(["no_matchdata"], {"no_matchdata": true})), 'map', [], "first".$to_proc()).$uniq()
    }, 0);
    
    $def(self, '$named_captures', function $$named_captures() {
      var self = this;

      return $send($send($send(self.$source().$scan(/\(?<(\w+)>/, $hash2(["no_matchdata"], {"no_matchdata": true})), 'map', [], "first".$to_proc()).$each_with_index(), 'group_by', [], "first".$to_proc()), 'transform_values', [], function $$6(i){
        
        if (i == null) i = nil;
        return $send(i, 'map', [], function $$7(j){
          
          if (j == null) j = nil;
          return $rb_plus(j.$last(), 1);}, 1);}, 1)
    }, 0);
    
    $def(self, '$~', function $Regexp_$$8() {
      var self = this;
      if ($gvars._ == null) $gvars._ = nil;

      return self['$=~']($gvars._)
    }, 0);
    
    $def(self, '$source', function $$source() {
      var self = this;

      return self.source;
    }, 0);
    
    $def(self, '$options', function $$options() {
      var self = this;

      
      if (self.uninitialized) {
        $Kernel.$raise($$$('TypeError'), "uninitialized Regexp")
      }
      var result = 0;
      // should be supported in IE6 according to https://msdn.microsoft.com/en-us/library/7f5z26w4(v=vs.94).aspx
      if (self.multiline) {
        result |= $$('MULTILINE');
      }
      if (self.ignoreCase) {
        result |= $$('IGNORECASE');
      }
      return result;
    
    }, 0);
    
    $def(self, '$casefold?', function $Regexp_casefold$ques$9() {
      var self = this;

      return self.ignoreCase;
    }, 0);
    $alias(self, "eql?", "==");
    return $alias(self, "to_s", "source");
  })('::', RegExp, $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'MatchData');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.matches = nil;
    
    self.$attr_reader("post_match", "pre_match", "regexp", "string");
    
    $def(self, '$initialize', function $$initialize(regexp, match_groups, $kwargs) {
      var no_matchdata, self = this;

      
      $kwargs = $ensure_kwargs($kwargs);
      
      no_matchdata = $kwargs.$$smap["no_matchdata"];if (no_matchdata == null) no_matchdata = false;
      if (!$truthy(no_matchdata)) {
        $gvars["~"] = self
      };
      self.regexp = regexp;
      self.begin = match_groups.index;
      self.string = match_groups.input;
      self.pre_match = match_groups.input.slice(0, match_groups.index);
      self.post_match = match_groups.input.slice(match_groups.index + match_groups[0].length);
      self.matches = [];
      
      for (var i = 0, length = match_groups.length; i < length; i++) {
        var group = match_groups[i];

        if (group == null) {
          self.matches.push(nil);
        }
        else {
          self.matches.push(group);
        }
      }
    ;
    }, -3);
    
    $def(self, '$match', function $$match(idx) {
      var self = this, match = nil;

      if ($truthy((match = self['$[]'](idx)))) {
        return match
      } else if (($truthy(idx['$is_a?']($$('Integer'))) && ($truthy($rb_ge(idx, self.$length()))))) {
        return $Kernel.$raise($$$('IndexError'), "index " + (idx) + " out of matches")
      } else {
        return nil
      }
    }, 1);
    
    $def(self, '$match_length', function $$match_length(idx) {
      var $a, self = this;

      return ($a = self.$match(idx), ($a === nil || $a == null) ? nil : $a.$length())
    }, 1);
    
    $def(self, '$[]', function $MatchData_$$$10($a) {
      var $post_args, args, self = this;

      
      $post_args = $slice.call(arguments);
      args = $post_args;
      
      if (args[0].$$is_string) {
        if (self.$regexp().$names()['$include?'](args['$[]'](0))['$!']()) {
          $Kernel.$raise($$$('IndexError'), "undefined group name reference: " + (args['$[]'](0)))
        }
        return self.$named_captures()['$[]'](args['$[]'](0))
      }
      else {
        return $send(self.matches, '[]', $to_a(args))
      }
    ;
    }, -1);
    
    $def(self, '$offset', function $$offset(n) {
      var self = this;

      
      if (n !== 0) {
        $Kernel.$raise($$$('ArgumentError'), "MatchData#offset only supports 0th element")
      }
      return [self.begin, self.begin + self.matches[n].length];
    
    }, 1);
    
    $def(self, '$==', function $MatchData_$eq_eq$11(other) {
      var self = this, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil, $ret_or_4 = nil;

      
      if (!$eqeqeq($$$('MatchData'), other)) {
        return false
      };
      if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = ($truthy(($ret_or_3 = ($truthy(($ret_or_4 = self.string == other.string)) ? (self.regexp.toString() == other.regexp.toString()) : ($ret_or_4)))) ? (self.pre_match == other.pre_match) : ($ret_or_3)))) ? (self.post_match == other.post_match) : ($ret_or_2))))) {
        return self.begin == other.begin;
      } else {
        return $ret_or_1
      };
    }, 1);
    
    $def(self, '$begin', function $$begin(n) {
      var self = this;

      
      if (n !== 0) {
        $Kernel.$raise($$$('ArgumentError'), "MatchData#begin only supports 0th element")
      }
      return self.begin;
    
    }, 1);
    
    $def(self, '$end', function $$end(n) {
      var self = this;

      
      if (n !== 0) {
        $Kernel.$raise($$$('ArgumentError'), "MatchData#end only supports 0th element")
      }
      return self.begin + self.matches[n].length;
    
    }, 1);
    
    $def(self, '$captures', function $$captures() {
      var self = this;

      return self.matches.slice(1)
    }, 0);
    
    $def(self, '$named_captures', function $$named_captures() {
      var self = this, matches = nil;

      
      matches = self.$captures();
      return $send(self.$regexp().$named_captures(), 'transform_values', [], function $$12(i){
        
        if (i == null) i = nil;
        return matches['$[]']($rb_minus(i.$last(), 1));}, 1);
    }, 0);
    
    $def(self, '$names', function $$names() {
      var self = this;

      return self.$regexp().$names()
    }, 0);
    
    $def(self, '$inspect', function $$inspect() {
      var self = this;

      
      var str = "#<MatchData " + (self.matches[0]).$inspect();

      if (self.$regexp().$names()['$empty?']()) {
        for (var i = 1, length = self.matches.length; i < length; i++) {
          str += " " + i + ":" + (self.matches[i]).$inspect();
        }
      }
      else {
        $send(self.$named_captures(), 'each', [], function $$13(k, v){
        
        if (k == null) k = nil;
        if (v == null) v = nil;
        return                str += " " + k + ":" + v.$inspect();}, 2)
      }

      return str + ">";
    
    }, 0);
    
    $def(self, '$length', function $$length() {
      var self = this;

      return self.matches.length
    }, 0);
    
    $def(self, '$to_a', $return_ivar("matches"), 0);
    
    $def(self, '$to_s', function $$to_s() {
      var self = this;

      return self.matches[0]
    }, 0);
    
    $def(self, '$values_at', function $$values_at($a) {
      var $post_args, args, self = this;

      
      $post_args = $slice.call(arguments);
      args = $post_args;
      
      var i, a, index, values = [];

      for (i = 0; i < args.length; i++) {

        if (args[i].$$is_range) {
          a = (args[i]).$to_a();
          a.unshift(i, 1);
          Array.prototype.splice.apply(args, a);
        }

        index = $Opal['$coerce_to!'](args[i], $$$('Integer'), "to_int");

        if (index < 0) {
          index += self.matches.length;
          if (index < 0) {
            values.push(nil);
            continue;
          }
        }

        values.push(self.matches[index]);
      }

      return values;
    ;
    }, -1);
    $alias(self, "eql?", "==");
    return $alias(self, "size", "length");
  })($nesting[0], null, $nesting);
};

Opal.modules["corelib/range"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $klass = Opal.klass, $truthy = Opal.truthy, $Kernel = Opal.Kernel, $def = Opal.def, $not = Opal.not, $send2 = Opal.send2, $find_super = Opal.find_super, $rb_lt = Opal.rb_lt, $rb_le = Opal.rb_le, $send = Opal.send, $eqeq = Opal.eqeq, $eqeqeq = Opal.eqeqeq, $return_ivar = Opal.return_ivar, $rb_gt = Opal.rb_gt, $rb_minus = Opal.rb_minus, $Opal = Opal.Opal, $rb_divide = Opal.rb_divide, $rb_plus = Opal.rb_plus, $rb_times = Opal.rb_times, $rb_ge = Opal.rb_ge, $thrower = Opal.thrower, $alias = Opal.alias, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,include,attr_reader,raise,nil?,<=>,include?,!,<,<=,enum_for,size,upto,to_proc,respond_to?,class,succ,==,===,exclude_end?,eql?,begin,end,last,to_a,>,-@,-,to_i,coerce_to!,ceil,/,is_a?,new,loop,+,*,>=,each_with_index,%,step,bsearch,inspect,[],hash,cover?');
  
  self.$require("corelib/enumerable");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Range');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.begin = $proto.end = $proto.excl = nil;
    
    self.$include($$$('Enumerable'));
    self.$$prototype.$$is_range = true;
    self.$attr_reader("begin", "end");
    
    $def(self, '$initialize', function $$initialize(first, last, exclude) {
      var self = this;

      
      if (exclude == null) exclude = false;
      if ($truthy(self.begin)) {
        $Kernel.$raise($$$('NameError'), "'initialize' called twice")
      };
      if (!(($truthy(first['$<=>'](last)) || ($truthy(first['$nil?']()))) || ($truthy(last['$nil?']())))) {
        $Kernel.$raise($$$('ArgumentError'), "bad value for range")
      };
      self.begin = first;
      self.end = last;
      return (self.excl = exclude);
    }, -3);
    
    $def(self, '$===', function $Range_$eq_eq_eq$1(value) {
      var self = this;

      return self['$include?'](value)
    }, 1);
    
    function is_infinite(self) {
      if (self.begin === nil || self.end === nil ||
          self.begin === -Infinity || self.end === Infinity ||
          self.begin === Infinity || self.end === -Infinity) return true;
      return false;
    }
  ;
    
    $def(self, '$count', function $$count() {
      var block = $$count.$$p || nil, self = this;

      $$count.$$p = null;
      
      ;
      if (($not((block !== nil)) && ($truthy(is_infinite(self))))) {
        return $$$($$$('Float'), 'INFINITY')
      };
      return $send2(self, $find_super(self, 'count', $$count, false, true), 'count', [], block);
    }, 0);
    
    $def(self, '$to_a', function $$to_a() {
      var $yield = $$to_a.$$p || nil, self = this;

      $$to_a.$$p = null;
      
      if ($truthy(is_infinite(self))) {
        $Kernel.$raise($$$('TypeError'), "cannot convert endless range to an array")
      };
      return $send2(self, $find_super(self, 'to_a', $$to_a, false, true), 'to_a', [], $yield);
    }, 0);
    
    $def(self, '$cover?', function $Range_cover$ques$2(value) {
      var self = this, beg_cmp = nil, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil, end_cmp = nil;

      
      beg_cmp = ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = ($truthy(($ret_or_3 = self.begin['$nil?']())) ? (-1) : ($ret_or_3)))) ? ($ret_or_2) : (self.begin['$<=>'](value))))) && ($ret_or_1));
      end_cmp = ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = ($truthy(($ret_or_3 = self.end['$nil?']())) ? (-1) : ($ret_or_3)))) ? ($ret_or_2) : (value['$<=>'](self.end))))) && ($ret_or_1));
      if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = ($truthy(self.excl) ? (($truthy(($ret_or_3 = end_cmp)) ? ($rb_lt(end_cmp, 0)) : ($ret_or_3))) : ($truthy(($ret_or_3 = end_cmp)) ? ($rb_le(end_cmp, 0)) : ($ret_or_3))))) ? (beg_cmp) : ($ret_or_2))))) {
        return $rb_le(beg_cmp, 0)
      } else {
        return $ret_or_1
      };
    }, 1);
    
    $def(self, '$each', function $$each() {
      var block = $$each.$$p || nil, self = this, current = nil, last = nil, $ret_or_1 = nil;

      $$each.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return $send(self, 'enum_for', ["each"], function $$3(){var self = $$3.$$s == null ? this : $$3.$$s;

          return self.$size()}, {$$arity: 0, $$s: self})
      };
      
      var i, limit;

      if (self.begin.$$is_number && self.end.$$is_number) {
        if (self.begin % 1 !== 0 || self.end % 1 !== 0) {
          $Kernel.$raise($$$('TypeError'), "can't iterate from Float")
        }

        for (i = self.begin, limit = self.end + ($truthy(self.excl) ? (0) : (1)); i < limit; i++) {
          block(i);
        }

        return self;
      }

      if (self.begin.$$is_string && self.end.$$is_string) {
        $send(self.begin, 'upto', [self.end, self.excl], block.$to_proc())
        return self;
      }
    ;
      current = self.begin;
      last = self.end;
      if (!$truthy(current['$respond_to?']("succ"))) {
        $Kernel.$raise($$$('TypeError'), "can't iterate from " + (current.$class()))
      };
      while ($truthy(($truthy(($ret_or_1 = self.end['$nil?']())) ? ($ret_or_1) : ($rb_lt(current['$<=>'](last), 0))))) {
      
        Opal.yield1(block, current);
        current = current.$succ();
      };
      if (($not(self.excl) && ($eqeq(current, last)))) {
        Opal.yield1(block, current)
      };
      return self;
    }, 0);
    
    $def(self, '$eql?', function $Range_eql$ques$4(other) {
      var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

      
      if (!$eqeqeq($$$('Range'), other)) {
        return false
      };
      if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = self.excl['$==='](other['$exclude_end?']()))) ? (self.begin['$eql?'](other.$begin())) : ($ret_or_2))))) {
        return self.end['$eql?'](other.$end())
      } else {
        return $ret_or_1
      };
    }, 1);
    
    $def(self, '$exclude_end?', $return_ivar("excl"), 0);
    
    $def(self, '$first', function $$first(n) {
      var $yield = $$first.$$p || nil, self = this;

      $$first.$$p = null;
      
      ;
      if ($truthy(self.begin['$nil?']())) {
        $Kernel.$raise($$$('RangeError'), "cannot get the minimum of beginless range")
      };
      if ($truthy(n == null)) {
        return self.begin
      };
      return $send2(self, $find_super(self, 'first', $$first, false, true), 'first', [n], $yield);
    }, -1);
    
    $def(self, '$last', function $$last(n) {
      var self = this;

      
      ;
      if ($truthy(self.end['$nil?']())) {
        $Kernel.$raise($$$('RangeError'), "cannot get the maximum of endless range")
      };
      if ($truthy(n == null)) {
        return self.end
      };
      return self.$to_a().$last(n);
    }, -1);
    
    $def(self, '$max', function $$max() {
      var $yield = $$max.$$p || nil, self = this;

      $$max.$$p = null;
      if ($truthy(self.end['$nil?']())) {
        return $Kernel.$raise($$$('RangeError'), "cannot get the maximum of endless range")
      } else if (($yield !== nil)) {
        return $send2(self, $find_super(self, 'max', $$max, false, true), 'max', [], $yield)
      } else if (($not(self.begin['$nil?']()) && (($truthy($rb_gt(self.begin, self.end)) || (($truthy(self.excl) && ($eqeq(self.begin, self.end)))))))) {
        return nil
      } else {
        return self.excl ? self.end - 1 : self.end
      }
    }, 0);
    
    $def(self, '$min', function $$min() {
      var $yield = $$min.$$p || nil, self = this;

      $$min.$$p = null;
      if ($truthy(self.begin['$nil?']())) {
        return $Kernel.$raise($$$('RangeError'), "cannot get the minimum of beginless range")
      } else if (($yield !== nil)) {
        return $send2(self, $find_super(self, 'min', $$min, false, true), 'min', [], $yield)
      } else if (($not(self.end['$nil?']()) && (($truthy($rb_gt(self.begin, self.end)) || (($truthy(self.excl) && ($eqeq(self.begin, self.end)))))))) {
        return nil
      } else {
        return self.begin
      }
    }, 0);
    
    $def(self, '$size', function $$size() {
      var self = this, infinity = nil, range_begin = nil, range_end = nil;

      
      infinity = $$$($$$('Float'), 'INFINITY');
      if ((($eqeq(self.begin, infinity) && ($not(self.end['$nil?']()))) || (($eqeq(self.end, infinity['$-@']()) && ($not(self.begin['$nil?']())))))) {
        return 0
      };
      if ($truthy(is_infinite(self))) {
        return infinity
      };
      if (!($eqeqeq($$$('Numeric'), self.begin) && ($eqeqeq($$$('Numeric'), self.end)))) {
        return nil
      };
      range_begin = self.begin;
      range_end = self.end;
      if ($truthy(self.excl)) {
        range_end = $rb_minus(range_end, 1)
      };
      if ($truthy($rb_lt(range_end, range_begin))) {
        return 0
      };
      return (Math.abs(range_end - range_begin) + 1).$to_i();
    }, 0);
    
    $def(self, '$step', function $$step(n) {
      var $yield = $$step.$$p || nil, self = this, $ret_or_1 = nil, i = nil;

      $$step.$$p = null;
      
      ;
      
      function coerceStepSize() {
        if (n == null) {
          n = 1;
        }
        else if (!n.$$is_number) {
          n = $Opal['$coerce_to!'](n, $$$('Integer'), "to_int")
        }

        if (n < 0) {
          $Kernel.$raise($$$('ArgumentError'), "step can't be negative")
        } else if (n === 0) {
          $Kernel.$raise($$$('ArgumentError'), "step can't be 0")
        }
      }

      function enumeratorSize() {
        if (!self.begin['$respond_to?']("succ")) {
          return nil;
        }

        if (self.begin.$$is_string && self.end.$$is_string) {
          return nil;
        }

        if (n % 1 === 0) {
          return $rb_divide(self.$size(), n).$ceil();
        } else {
          // n is a float
          var begin = self.begin, end = self.end,
              abs = Math.abs, floor = Math.floor,
              err = (abs(begin) + abs(end) + abs(end - begin)) / abs(n) * $$$($$$('Float'), 'EPSILON'),
              size;

          if (err > 0.5) {
            err = 0.5;
          }

          if (self.excl) {
            size = floor((end - begin) / n - err);
            if (size * n + begin < end) {
              size++;
            }
          } else {
            size = floor((end - begin) / n + err) + 1
          }

          return size;
        }
      }
    ;
      if (!($yield !== nil)) {
        if (((($truthy(self.begin['$is_a?']($$('Numeric'))) || ($truthy(self.begin['$nil?']()))) && (($truthy(self.end['$is_a?']($$('Numeric'))) || ($truthy(self.end['$nil?']()))))) && ($not(($truthy(($ret_or_1 = self.begin['$nil?']())) ? (self.end['$nil?']()) : ($ret_or_1)))))) {
          return $$$($$$('Enumerator'), 'ArithmeticSequence').$new(self, n, "step")
        } else {
          return $send(self, 'enum_for', ["step", n], function $$5(){
            
            coerceStepSize();
            return enumeratorSize();
          }, 0)
        }
      };
      coerceStepSize();
      if ($truthy(self.begin.$$is_number && self.end.$$is_number)) {
        
        i = 0;
        (function(){try { var $t_break = $thrower('break'); return $send(self, 'loop', [], function $$6(){var self = $$6.$$s == null ? this : $$6.$$s, current = nil;
          if (self.begin == null) self.begin = nil;
          if (self.excl == null) self.excl = nil;
          if (self.end == null) self.end = nil;

          
          current = $rb_plus(self.begin, $rb_times(i, n));
          if ($truthy(self.excl)) {
            if ($truthy($rb_ge(current, self.end))) {
              $t_break.$throw()
            }
          } else if ($truthy($rb_gt(current, self.end))) {
            $t_break.$throw()
          };
          Opal.yield1($yield, current);
          return (i = $rb_plus(i, 1));}, {$$arity: 0, $$s: self})} catch($e) {
          if ($e === $t_break) return $e.$v;
          throw $e;
        }})();
      } else {
        
        
        if (self.begin.$$is_string && self.end.$$is_string && n % 1 !== 0) {
          $Kernel.$raise($$$('TypeError'), "no implicit conversion to float from string")
        }
      ;
        $send(self, 'each_with_index', [], function $$7(value, idx){
          
          if (value == null) value = nil;
          if (idx == null) idx = nil;
          if ($eqeq(idx['$%'](n), 0)) {
            return Opal.yield1($yield, value);
          } else {
            return nil
          };}, 2);
      };
      return self;
    }, -1);
    
    $def(self, '$%', function $Range_$percent$8(n) {
      var self = this;

      if (($truthy(self.begin['$is_a?']($$('Numeric'))) && ($truthy(self.end['$is_a?']($$('Numeric')))))) {
        return $$$($$$('Enumerator'), 'ArithmeticSequence').$new(self, n, "%")
      } else {
        return self.$step(n)
      }
    }, 1);
    
    $def(self, '$bsearch', function $$bsearch() {
      var block = $$bsearch.$$p || nil, self = this;

      $$bsearch.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return self.$enum_for("bsearch")
      };
      if ($truthy(is_infinite(self) && (self.begin.$$is_number || self.end.$$is_number))) {
        $Kernel.$raise($$$('NotImplementedError'), "Can't #bsearch an infinite range")
      };
      if (!$truthy(self.begin.$$is_number && self.end.$$is_number)) {
        $Kernel.$raise($$$('TypeError'), "can't do binary search for " + (self.begin.$class()))
      };
      return $send(self.$to_a(), 'bsearch', [], block.$to_proc());
    }, 0);
    
    $def(self, '$to_s', function $$to_s() {
      var self = this, $ret_or_1 = nil;

      return "" + (($truthy(($ret_or_1 = self.begin)) ? ($ret_or_1) : (""))) + (($truthy(self.excl) ? ("...") : (".."))) + (($truthy(($ret_or_1 = self.end)) ? ($ret_or_1) : ("")))
    }, 0);
    
    $def(self, '$inspect', function $$inspect() {
      var self = this, $ret_or_1 = nil;

      return "" + (($truthy(($ret_or_1 = self.begin)) ? (self.begin.$inspect()) : ($ret_or_1))) + (($truthy(self.excl) ? ("...") : (".."))) + (($truthy(($ret_or_1 = self.end)) ? (self.end.$inspect()) : ($ret_or_1)))
    }, 0);
    
    $def(self, '$marshal_load', function $$marshal_load(args) {
      var self = this;

      
      self.begin = args['$[]']("begin");
      self.end = args['$[]']("end");
      return (self.excl = args['$[]']("excl"));
    }, 1);
    
    $def(self, '$hash', function $$hash() {
      var self = this;

      return [self.begin, self.end, self.excl].$hash()
    }, 0);
    $alias(self, "==", "eql?");
    $alias(self, "include?", "cover?");
    return $alias(self, "member?", "cover?");
  })('::', null, $nesting);
};

Opal.modules["corelib/string"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $coerce_to = Opal.coerce_to, $respond_to = Opal.respond_to, $global_multiline_regexp = Opal.global_multiline_regexp, $prop = Opal.prop, $klass = Opal.klass, $def = Opal.def, $Opal = Opal.Opal, $defs = Opal.defs, $slice = Opal.slice, $send = Opal.send, $to_a = Opal.to_a, $extract_kwargs = Opal.extract_kwargs, $ensure_kwargs = Opal.ensure_kwargs, $eqeqeq = Opal.eqeqeq, $Kernel = Opal.Kernel, $truthy = Opal.truthy, $gvars = Opal.gvars, $rb_divide = Opal.rb_divide, $rb_plus = Opal.rb_plus, $eqeq = Opal.eqeq, $hash2 = Opal.hash2, $alias = Opal.alias, $const_set = Opal.const_set, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,include,coerce_to?,initialize,===,format,raise,respond_to?,to_s,to_str,<=>,==,=~,new,force_encoding,casecmp,empty?,ljust,ceil,/,+,rjust,floor,coerce_to!,nil?,class,copy_singleton_methods,initialize_clone,initialize_dup,enum_for,chomp,[],to_i,length,each_line,to_proc,to_a,match,match?,captures,proc,succ,escape,include?,upcase,unicode_normalize,dup,__id__,next,intern,pristine');
  
  self.$require("corelib/comparable");
  self.$require("corelib/regexp");
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    self.$include($$$('Comparable'));
    
    Opal.prop(self.$$prototype, '$$is_string', true);
  ;
    
    $def(self, '$__id__', function $$__id__() {
      var self = this;

      return self.toString();
    }, 0);
    $defs(self, '$try_convert', function $$try_convert(what) {
      
      return $Opal['$coerce_to?'](what, $$$('String'), "to_str")
    }, 1);
    $defs(self, '$new', function $String_new$1($a) {
      var $post_args, args, self = this;

      
      $post_args = $slice.call(arguments);
      args = $post_args;
      
      var str = args[0] || "";
      var opts = args[args.length-1];
      str = $coerce_to(str, $$$('String'), 'to_str');
      if (opts && opts.$$is_hash) {
        if (opts.$$smap.encoding) str = str.$force_encoding(opts.$$smap.encoding);
      }
      str = new self.$$constructor(str);
      if (!str.$initialize.$$pristine) $send((str), 'initialize', $to_a(args));
      return str;
    ;
    }, -1);
    
    $def(self, '$initialize', function $$initialize($a, $b) {
      var $post_args, $kwargs, str, encoding, capacity;

      
      $post_args = $slice.call(arguments);
      $kwargs = $extract_kwargs($post_args);
      $kwargs = $ensure_kwargs($kwargs);
      
      if ($post_args.length > 0) str = $post_args.shift();;
      
      encoding = $kwargs.$$smap["encoding"];if (encoding == null) encoding = nil;
      
      capacity = $kwargs.$$smap["capacity"];if (capacity == null) capacity = nil;
      return nil;
    }, -1);
    
    $def(self, '$%', function $String_$percent$2(data) {
      var self = this;

      if ($eqeqeq($$$('Array'), data)) {
        return $send(self, 'format', [self].concat($to_a(data)))
      } else {
        return self.$format(self, data)
      }
    }, 1);
    
    $def(self, '$*', function $String_$$3(count) {
      var self = this;

      
      count = $coerce_to(count, $$$('Integer'), 'to_int');

      if (count < 0) {
        $Kernel.$raise($$$('ArgumentError'), "negative argument")
      }

      if (count === 0) {
        return '';
      }

      var result = '',
          string = self.toString();

      // All credit for the bit-twiddling magic code below goes to Mozilla
      // polyfill implementation of String.prototype.repeat() posted here:
      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat

      if (string.length * count >= 1 << 28) {
        $Kernel.$raise($$$('RangeError'), "multiply count must not overflow maximum string size")
      }

      for (;;) {
        if ((count & 1) === 1) {
          result += string;
        }
        count >>>= 1;
        if (count === 0) {
          break;
        }
        string += string;
      }

      return result;
    
    }, 1);
    
    $def(self, '$+', function $String_$plus$4(other) {
      var self = this;

      
      other = $coerce_to(other, $$$('String'), 'to_str');
      
      if (other == "" && self.$$class === Opal.String) return self;
      if (self == "" && other.$$class === Opal.String) return other;
      var out = self + other;
      if (self.encoding === out.encoding && other.encoding === out.encoding) return out;
      if (self.encoding.name === "UTF-8" || other.encoding.name === "UTF-8") return out;
      return Opal.enc(out, self.encoding);
    ;
    }, 1);
    
    $def(self, '$<=>', function $String_$lt_eq_gt$5(other) {
      var self = this;

      if ($truthy(other['$respond_to?']("to_str"))) {
        
        other = other.$to_str().$to_s();
        return self > other ? 1 : (self < other ? -1 : 0);;
      } else {
        
        var cmp = other['$<=>'](self);

        if (cmp === nil) {
          return nil;
        }
        else {
          return cmp > 0 ? -1 : (cmp < 0 ? 1 : 0);
        }
      
      }
    }, 1);
    
    $def(self, '$==', function $String_$eq_eq$6(other) {
      var self = this;

      
      if (other.$$is_string) {
        return self.toString() === other.toString();
      }
      if ($respond_to(other, '$to_str')) {
        return other['$=='](self);
      }
      return false;
    
    }, 1);
    
    $def(self, '$=~', function $String_$eq_tilde$7(other) {
      var self = this;

      
      if (other.$$is_string) {
        $Kernel.$raise($$$('TypeError'), "type mismatch: String given");
      }

      return other['$=~'](self);
    
    }, 1);
    
    $def(self, '$[]', function $String_$$$8(index, length) {
      var self = this;

      
      ;
      
      var size = self.length, exclude, range;

      if (index.$$is_range) {
        exclude = index.excl;
        range   = index;
        length  = index.end === nil ? -1 : $coerce_to(index.end, $$$('Integer'), 'to_int');
        index   = index.begin === nil ? 0 : $coerce_to(index.begin, $$$('Integer'), 'to_int');

        if (Math.abs(index) > size) {
          return nil;
        }

        if (index < 0) {
          index += size;
        }

        if (length < 0) {
          length += size;
        }

        if (!exclude || range.end === nil) {
          length += 1;
        }

        length = length - index;

        if (length < 0) {
          length = 0;
        }

        return self.substr(index, length);
      }


      if (index.$$is_string) {
        if (length != null) {
          $Kernel.$raise($$$('TypeError'))
        }
        return self.indexOf(index) !== -1 ? index : nil;
      }


      if (index.$$is_regexp) {
        var match = self.match(index);

        if (match === null) {
          ($gvars["~"] = nil)
          return nil;
        }

        ($gvars["~"] = $$$('MatchData').$new(index, match))

        if (length == null) {
          return match[0];
        }

        length = $coerce_to(length, $$$('Integer'), 'to_int');

        if (length < 0 && -length < match.length) {
          return match[length += match.length];
        }

        if (length >= 0 && length < match.length) {
          return match[length];
        }

        return nil;
      }


      index = $coerce_to(index, $$$('Integer'), 'to_int');

      if (index < 0) {
        index += size;
      }

      if (length == null) {
        if (index >= size || index < 0) {
          return nil;
        }
        return self.substr(index, 1);
      }

      length = $coerce_to(length, $$$('Integer'), 'to_int');

      if (length < 0) {
        return nil;
      }

      if (index > size || index < 0) {
        return nil;
      }

      return self.substr(index, length);
    ;
    }, -2);
    
    $def(self, '$b', function $$b() {
      var self = this;

      return (new String(self)).$force_encoding("binary")
    }, 0);
    
    $def(self, '$capitalize', function $$capitalize() {
      var self = this;

      return self.charAt(0).toUpperCase() + self.substr(1).toLowerCase();
    }, 0);
    
    $def(self, '$casecmp', function $$casecmp(other) {
      var self = this;

      
      if (!$truthy(other['$respond_to?']("to_str"))) {
        return nil
      };
      other = ($coerce_to(other, $$$('String'), 'to_str')).$to_s();
      
      var ascii_only = /^[\x00-\x7F]*$/;
      if (ascii_only.test(self) && ascii_only.test(other)) {
        self = self.toLowerCase();
        other = other.toLowerCase();
      }
    ;
      return self['$<=>'](other);
    }, 1);
    
    $def(self, '$casecmp?', function $String_casecmp$ques$9(other) {
      var self = this;

      
      var cmp = self.$casecmp(other);
      if (cmp === nil) {
        return nil;
      } else {
        return cmp === 0;
      }
    
    }, 1);
    
    $def(self, '$center', function $$center(width, padstr) {
      var self = this;

      
      if (padstr == null) padstr = " ";
      width = $coerce_to(width, $$$('Integer'), 'to_int');
      padstr = ($coerce_to(padstr, $$$('String'), 'to_str')).$to_s();
      if ($truthy(padstr['$empty?']())) {
        $Kernel.$raise($$$('ArgumentError'), "zero width padding")
      };
      if ($truthy(width <= self.length)) {
        return self
      };
      
      var ljustified = self.$ljust($rb_divide($rb_plus(width, self.length), 2).$ceil(), padstr),
          rjustified = self.$rjust($rb_divide($rb_plus(width, self.length), 2).$floor(), padstr);

      return rjustified + ljustified.slice(self.length);
    ;
    }, -2);
    
    $def(self, '$chomp', function $$chomp(separator) {
      var self = this;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      
      if (separator == null) separator = $gvars["/"];
      if ($truthy(separator === nil || self.length === 0)) {
        return self
      };
      separator = $Opal['$coerce_to!'](separator, $$$('String'), "to_str").$to_s();
      
      var result;

      if (separator === "\n") {
        result = self.replace(/\r?\n?$/, '');
      }
      else if (separator === "") {
        result = self.replace(/(\r?\n)+$/, '');
      }
      else if (self.length >= separator.length) {
        var tail = self.substr(self.length - separator.length, separator.length);

        if (tail === separator) {
          result = self.substr(0, self.length - separator.length);
        }
      }

      if (result != null) {
        return result;
      }
    ;
      return self;
    }, -1);
    
    $def(self, '$chop', function $$chop() {
      var self = this;

      
      var length = self.length, result;

      if (length <= 1) {
        result = "";
      } else if (self.charAt(length - 1) === "\n" && self.charAt(length - 2) === "\r") {
        result = self.substr(0, length - 2);
      } else {
        result = self.substr(0, length - 1);
      }

      return result;
    
    }, 0);
    
    $def(self, '$chr', function $$chr() {
      var self = this;

      return self.charAt(0);
    }, 0);
    
    $def(self, '$clone', function $$clone($kwargs) {
      var freeze, self = this, copy = nil;

      
      $kwargs = $ensure_kwargs($kwargs);
      
      freeze = $kwargs.$$smap["freeze"];if (freeze == null) freeze = nil;
      if (!(($truthy(freeze['$nil?']()) || ($eqeq(freeze, true))) || ($eqeq(freeze, false)))) {
        self.$raise($$('ArgumentError'), "unexpected value for freeze: " + (freeze.$class()))
      };
      copy = new String(self);
      copy.$copy_singleton_methods(self);
      copy.$initialize_clone(self, $hash2(["freeze"], {"freeze": freeze}));
      if ($eqeq(freeze, true)) {
        if (!copy.$$frozen) { copy.$$frozen = true; }
      } else if ($truthy(freeze['$nil?']())) {
        if (self.$$frozen) { copy.$$frozen = true; }
      };
      return copy;
    }, -1);
    
    $def(self, '$dup', function $$dup() {
      var self = this, copy = nil;

      
      copy = new String(self);
      copy.$initialize_dup(self);
      return copy;
    }, 0);
    
    $def(self, '$count', function $$count($a) {
      var $post_args, sets, self = this;

      
      $post_args = $slice.call(arguments);
      sets = $post_args;
      
      if (sets.length === 0) {
        $Kernel.$raise($$$('ArgumentError'), "ArgumentError: wrong number of arguments (0 for 1+)")
      }
      var char_class = char_class_from_char_sets(sets);
      if (char_class === null) {
        return 0;
      }
      return self.length - self.replace(new RegExp(char_class, 'g'), '').length;
    ;
    }, -1);
    
    $def(self, '$delete', function $String_delete$10($a) {
      var $post_args, sets, self = this;

      
      $post_args = $slice.call(arguments);
      sets = $post_args;
      
      if (sets.length === 0) {
        $Kernel.$raise($$$('ArgumentError'), "ArgumentError: wrong number of arguments (0 for 1+)")
      }
      var char_class = char_class_from_char_sets(sets);
      if (char_class === null) {
        return self;
      }
      return self.replace(new RegExp(char_class, 'g'), '');
    ;
    }, -1);
    
    $def(self, '$delete_prefix', function $$delete_prefix(prefix) {
      var self = this;

      
      if (!prefix.$$is_string) {
        prefix = $coerce_to(prefix, $$$('String'), 'to_str');
      }

      if (self.slice(0, prefix.length) === prefix) {
        return self.slice(prefix.length);
      } else {
        return self;
      }
    
    }, 1);
    
    $def(self, '$delete_suffix', function $$delete_suffix(suffix) {
      var self = this;

      
      if (!suffix.$$is_string) {
        suffix = $coerce_to(suffix, $$$('String'), 'to_str');
      }

      if (self.slice(self.length - suffix.length) === suffix) {
        return self.slice(0, self.length - suffix.length);
      } else {
        return self;
      }
    
    }, 1);
    
    $def(self, '$downcase', function $$downcase() {
      var self = this;

      return self.toLowerCase();
    }, 0);
    
    $def(self, '$each_line', function $$each_line($a, $b) {
      var block = $$each_line.$$p || nil, $post_args, $kwargs, separator, chomp, self = this;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      $$each_line.$$p = null;
      
      ;
      $post_args = $slice.call(arguments);
      $kwargs = $extract_kwargs($post_args);
      $kwargs = $ensure_kwargs($kwargs);
      
      if ($post_args.length > 0) separator = $post_args.shift();if (separator == null) separator = $gvars["/"];
      
      chomp = $kwargs.$$smap["chomp"];if (chomp == null) chomp = false;
      if (!(block !== nil)) {
        return self.$enum_for("each_line", separator, $hash2(["chomp"], {"chomp": chomp}))
      };
      
      if (separator === nil) {
        Opal.yield1(block, self);

        return self;
      }

      separator = $coerce_to(separator, $$$('String'), 'to_str');

      var a, i, n, length, chomped, trailing, splitted, value;

      if (separator.length === 0) {
        for (a = self.split(/((?:\r?\n){2})(?:(?:\r?\n)*)/), i = 0, n = a.length; i < n; i += 2) {
          if (a[i] || a[i + 1]) {
            value = (a[i] || "") + (a[i + 1] || "");
            if (chomp) {
              value = (value).$chomp("\n");
            }
            Opal.yield1(block, value);
          }
        }

        return self;
      }

      chomped  = self.$chomp(separator);
      trailing = self.length != chomped.length;
      splitted = chomped.split(separator);

      for (i = 0, length = splitted.length; i < length; i++) {
        value = splitted[i];
        if (i < length - 1 || trailing) {
          value += separator;
        }
        if (chomp) {
          value = (value).$chomp(separator);
        }
        Opal.yield1(block, value);
      }
    ;
      return self;
    }, -1);
    
    $def(self, '$empty?', function $String_empty$ques$11() {
      var self = this;

      return self.length === 0;
    }, 0);
    
    $def(self, '$end_with?', function $String_end_with$ques$12($a) {
      var $post_args, suffixes, self = this;

      
      $post_args = $slice.call(arguments);
      suffixes = $post_args;
      
      for (var i = 0, length = suffixes.length; i < length; i++) {
        var suffix = $coerce_to(suffixes[i], $$$('String'), 'to_str').$to_s();

        if (self.length >= suffix.length &&
            self.substr(self.length - suffix.length, suffix.length) == suffix) {
          return true;
        }
      }
    ;
      return false;
    }, -1);
    
    $def(self, '$gsub', function $$gsub(pattern, replacement) {
      var block = $$gsub.$$p || nil, self = this;

      $$gsub.$$p = null;
      
      ;
      ;
      
      if (replacement === undefined && block === nil) {
        return self.$enum_for("gsub", pattern);
      }

      var result = '', match_data = nil, index = 0, match, _replacement;

      if (pattern.$$is_regexp) {
        pattern = $global_multiline_regexp(pattern);
      } else {
        pattern = $coerce_to(pattern, $$$('String'), 'to_str');
        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gm');
      }

      var lastIndex;
      while (true) {
        match = pattern.exec(self);

        if (match === null) {
          ($gvars["~"] = nil)
          result += self.slice(index);
          break;
        }

        match_data = $$$('MatchData').$new(pattern, match);

        if (replacement === undefined) {
          lastIndex = pattern.lastIndex;
          _replacement = block(match[0]);
          pattern.lastIndex = lastIndex; // save and restore lastIndex
        }
        else if (replacement.$$is_hash) {
          _replacement = (replacement)['$[]'](match[0]).$to_s();
        }
        else {
          if (!replacement.$$is_string) {
            replacement = $coerce_to(replacement, $$$('String'), 'to_str');
          }
          _replacement = replacement.replace(/([\\]+)([0-9+&`'])/g, function (original, slashes, command) {
            if (slashes.length % 2 === 0) {
              return original;
            }
            switch (command) {
            case "+":
              for (var i = match.length - 1; i > 0; i--) {
                if (match[i] !== undefined) {
                  return slashes.slice(1) + match[i];
                }
              }
              return '';
            case "&": return slashes.slice(1) + match[0];
            case "`": return slashes.slice(1) + self.slice(0, match.index);
            case "'": return slashes.slice(1) + self.slice(match.index + match[0].length);
            default:  return slashes.slice(1) + (match[command] || '');
            }
          }).replace(/\\\\/g, '\\');
        }

        if (pattern.lastIndex === match.index) {
          result += (self.slice(index, match.index) + _replacement + (self[match.index] || ""));
          pattern.lastIndex += 1;
        }
        else {
          result += (self.slice(index, match.index) + _replacement)
        }
        index = pattern.lastIndex;
      }

      ($gvars["~"] = match_data)
      return result;
    ;
    }, -2);
    
    $def(self, '$hash', function $$hash() {
      var self = this;

      return self.toString();
    }, 0);
    
    $def(self, '$hex', function $$hex() {
      var self = this;

      return self.$to_i(16)
    }, 0);
    
    $def(self, '$include?', function $String_include$ques$13(other) {
      var self = this;

      
      if (!other.$$is_string) {
        other = $coerce_to(other, $$$('String'), 'to_str');
      }
      return self.indexOf(other) !== -1;
    
    }, 1);
    
    $def(self, '$index', function $$index(search, offset) {
      var self = this;

      
      ;
      
      var index,
          match,
          regex;

      if (offset === undefined) {
        offset = 0;
      } else {
        offset = $coerce_to(offset, $$$('Integer'), 'to_int');
        if (offset < 0) {
          offset += self.length;
          if (offset < 0) {
            return nil;
          }
        }
      }

      if (search.$$is_regexp) {
        regex = $global_multiline_regexp(search);
        while (true) {
          match = regex.exec(self);
          if (match === null) {
            ($gvars["~"] = nil);
            index = -1;
            break;
          }
          if (match.index >= offset) {
            ($gvars["~"] = $$$('MatchData').$new(regex, match))
            index = match.index;
            break;
          }
          regex.lastIndex = match.index + 1;
        }
      } else {
        search = $coerce_to(search, $$$('String'), 'to_str');
        if (search.length === 0 && offset > self.length) {
          index = -1;
        } else {
          index = self.indexOf(search, offset);
        }
      }

      return index === -1 ? nil : index;
    ;
    }, -2);
    
    $def(self, '$inspect', function $$inspect() {
      var self = this;

      
      /* eslint-disable no-misleading-character-class */
      var escapable = /[\\\"\x00-\x1f\u007F-\u009F\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
          meta = {
            '\u0007': '\\a',
            '\u001b': '\\e',
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '\v': '\\v',
            '"' : '\\"',
            '\\': '\\\\'
          },
          escaped = self.replace(escapable, function (chr) {
            if (meta[chr]) return meta[chr];
            chr = chr.charCodeAt(0);
            if (chr <= 0xff && (self.encoding["$binary?"]() || self.internal_encoding["$binary?"]())) {
              return '\\x' + ('00' + chr.toString(16).toUpperCase()).slice(-2);
            } else {
              return '\\u' + ('0000' + chr.toString(16).toUpperCase()).slice(-4);
            }
          });
      return '"' + escaped.replace(/\#[\$\@\{]/g, '\\$&') + '"';
      /* eslint-enable no-misleading-character-class */
    
    }, 0);
    
    $def(self, '$intern', function $$intern() {
      var self = this;

      return self.toString();
    }, 0);
    
    $def(self, '$length', function $$length() {
      var self = this;

      return self.length;
    }, 0);
    $alias(self, "size", "length");
    
    $def(self, '$lines', function $$lines($a, $b) {
      var block = $$lines.$$p || nil, $post_args, $kwargs, separator, chomp, self = this, e = nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      $$lines.$$p = null;
      
      ;
      $post_args = $slice.call(arguments);
      $kwargs = $extract_kwargs($post_args);
      $kwargs = $ensure_kwargs($kwargs);
      
      if ($post_args.length > 0) separator = $post_args.shift();if (separator == null) separator = $gvars["/"];
      
      chomp = $kwargs.$$smap["chomp"];if (chomp == null) chomp = false;
      e = $send(self, 'each_line', [separator, $hash2(["chomp"], {"chomp": chomp})], block.$to_proc());
      if ($truthy(block)) {
        return self
      } else {
        return e.$to_a()
      };
    }, -1);
    
    $def(self, '$ljust', function $$ljust(width, padstr) {
      var self = this;

      
      if (padstr == null) padstr = " ";
      width = $coerce_to(width, $$$('Integer'), 'to_int');
      padstr = ($coerce_to(padstr, $$$('String'), 'to_str')).$to_s();
      if ($truthy(padstr['$empty?']())) {
        $Kernel.$raise($$$('ArgumentError'), "zero width padding")
      };
      if ($truthy(width <= self.length)) {
        return self
      };
      
      var index  = -1,
          result = "";

      width -= self.length;

      while (++index < width) {
        result += padstr;
      }

      return self + result.slice(0, width);
    ;
    }, -2);
    
    $def(self, '$lstrip', function $$lstrip() {
      var self = this;

      return self.replace(/^[\u0000\s]*/, '');
    }, 0);
    
    $def(self, '$ascii_only?', function $String_ascii_only$ques$14() {
      var self = this;

      
      if (!self.encoding.ascii) return false;
      return /^[\x00-\x7F]*$/.test(self);
    
    }, 0);
    
    $def(self, '$match', function $$match(pattern, pos) {
      var block = $$match.$$p || nil, self = this;

      $$match.$$p = null;
      
      ;
      ;
      if (($eqeqeq($$('String'), pattern) || ($truthy(pattern['$respond_to?']("to_str"))))) {
        pattern = $$$('Regexp').$new(pattern.$to_str())
      };
      if (!$eqeqeq($$$('Regexp'), pattern)) {
        $Kernel.$raise($$$('TypeError'), "wrong argument type " + (pattern.$class()) + " (expected Regexp)")
      };
      return $send(pattern, 'match', [self, pos], block.$to_proc());
    }, -2);
    
    $def(self, '$match?', function $String_match$ques$15(pattern, pos) {
      var self = this;

      
      ;
      if (($eqeqeq($$('String'), pattern) || ($truthy(pattern['$respond_to?']("to_str"))))) {
        pattern = $$$('Regexp').$new(pattern.$to_str())
      };
      if (!$eqeqeq($$$('Regexp'), pattern)) {
        $Kernel.$raise($$$('TypeError'), "wrong argument type " + (pattern.$class()) + " (expected Regexp)")
      };
      return pattern['$match?'](self, pos);
    }, -2);
    
    $def(self, '$next', function $$next() {
      var self = this;

      
      var i = self.length;
      if (i === 0) {
        return '';
      }
      var result = self;
      var first_alphanum_char_index = self.search(/[a-zA-Z0-9]/);
      var carry = false;
      var code;
      while (i--) {
        code = self.charCodeAt(i);
        if ((code >= 48 && code <= 57) ||
          (code >= 65 && code <= 90) ||
          (code >= 97 && code <= 122)) {
          switch (code) {
          case 57:
            carry = true;
            code = 48;
            break;
          case 90:
            carry = true;
            code = 65;
            break;
          case 122:
            carry = true;
            code = 97;
            break;
          default:
            carry = false;
            code += 1;
          }
        } else {
          if (first_alphanum_char_index === -1) {
            if (code === 255) {
              carry = true;
              code = 0;
            } else {
              carry = false;
              code += 1;
            }
          } else {
            carry = true;
          }
        }
        result = result.slice(0, i) + String.fromCharCode(code) + result.slice(i + 1);
        if (carry && (i === 0 || i === first_alphanum_char_index)) {
          switch (code) {
          case 65:
            break;
          case 97:
            break;
          default:
            code += 1;
          }
          if (i === 0) {
            result = String.fromCharCode(code) + result;
          } else {
            result = result.slice(0, i) + String.fromCharCode(code) + result.slice(i);
          }
          carry = false;
        }
        if (!carry) {
          break;
        }
      }
      return result;
    
    }, 0);
    
    $def(self, '$oct', function $$oct() {
      var self = this;

      
      var result,
          string = self,
          radix = 8;

      if (/^\s*_/.test(string)) {
        return 0;
      }

      string = string.replace(/^(\s*[+-]?)(0[bodx]?)(.+)$/i, function (original, head, flag, tail) {
        switch (tail.charAt(0)) {
        case '+':
        case '-':
          return original;
        case '0':
          if (tail.charAt(1) === 'x' && flag === '0x') {
            return original;
          }
        }
        switch (flag) {
        case '0b':
          radix = 2;
          break;
        case '0':
        case '0o':
          radix = 8;
          break;
        case '0d':
          radix = 10;
          break;
        case '0x':
          radix = 16;
          break;
        }
        return head + tail;
      });

      result = parseInt(string.replace(/_(?!_)/g, ''), radix);
      return isNaN(result) ? 0 : result;
    
    }, 0);
    
    $def(self, '$ord', function $$ord() {
      var self = this;

      
      if (typeof self.codePointAt === "function") {
        return self.codePointAt(0);
      }
      else {
        return self.charCodeAt(0);
      }
    
    }, 0);
    
    $def(self, '$partition', function $$partition(sep) {
      var self = this;

      
      var i, m;

      if (sep.$$is_regexp) {
        m = sep.exec(self);
        if (m === null) {
          i = -1;
        } else {
          $$$('MatchData').$new(sep, m);
          sep = m[0];
          i = m.index;
        }
      } else {
        sep = $coerce_to(sep, $$$('String'), 'to_str');
        i = self.indexOf(sep);
      }

      if (i === -1) {
        return [self, '', ''];
      }

      return [
        self.slice(0, i),
        self.slice(i, i + sep.length),
        self.slice(i + sep.length)
      ];
    
    }, 1);
    
    $def(self, '$reverse', function $$reverse() {
      var self = this;

      return self.split('').reverse().join('');
    }, 0);
    
    $def(self, '$rindex', function $$rindex(search, offset) {
      var self = this;

      
      ;
      
      var i, m, r, _m;

      if (offset === undefined) {
        offset = self.length;
      } else {
        offset = $coerce_to(offset, $$$('Integer'), 'to_int');
        if (offset < 0) {
          offset += self.length;
          if (offset < 0) {
            return nil;
          }
        }
      }

      if (search.$$is_regexp) {
        m = null;
        r = $global_multiline_regexp(search);
        while (true) {
          _m = r.exec(self);
          if (_m === null || _m.index > offset) {
            break;
          }
          m = _m;
          r.lastIndex = m.index + 1;
        }
        if (m === null) {
          ($gvars["~"] = nil)
          i = -1;
        } else {
          $$$('MatchData').$new(r, m);
          i = m.index;
        }
      } else {
        search = $coerce_to(search, $$$('String'), 'to_str');
        i = self.lastIndexOf(search, offset);
      }

      return i === -1 ? nil : i;
    ;
    }, -2);
    
    $def(self, '$rjust', function $$rjust(width, padstr) {
      var self = this;

      
      if (padstr == null) padstr = " ";
      width = $coerce_to(width, $$$('Integer'), 'to_int');
      padstr = ($coerce_to(padstr, $$$('String'), 'to_str')).$to_s();
      if ($truthy(padstr['$empty?']())) {
        $Kernel.$raise($$$('ArgumentError'), "zero width padding")
      };
      if ($truthy(width <= self.length)) {
        return self
      };
      
      var chars     = Math.floor(width - self.length),
          patterns  = Math.floor(chars / padstr.length),
          result    = Array(patterns + 1).join(padstr),
          remaining = chars - result.length;

      return result + padstr.slice(0, remaining) + self;
    ;
    }, -2);
    
    $def(self, '$rpartition', function $$rpartition(sep) {
      var self = this;

      
      var i, m, r, _m;

      if (sep.$$is_regexp) {
        m = null;
        r = $global_multiline_regexp(sep);

        while (true) {
          _m = r.exec(self);
          if (_m === null) {
            break;
          }
          m = _m;
          r.lastIndex = m.index + 1;
        }

        if (m === null) {
          i = -1;
        } else {
          $$$('MatchData').$new(r, m);
          sep = m[0];
          i = m.index;
        }

      } else {
        sep = $coerce_to(sep, $$$('String'), 'to_str');
        i = self.lastIndexOf(sep);
      }

      if (i === -1) {
        return ['', '', self];
      }

      return [
        self.slice(0, i),
        self.slice(i, i + sep.length),
        self.slice(i + sep.length)
      ];
    
    }, 1);
    
    $def(self, '$rstrip', function $$rstrip() {
      var self = this;

      return self.replace(/[\s\u0000]*$/, '');
    }, 0);
    
    $def(self, '$scan', function $$scan(pattern, $kwargs) {
      var block = $$scan.$$p || nil, no_matchdata, self = this;

      $$scan.$$p = null;
      
      ;
      $kwargs = $ensure_kwargs($kwargs);
      
      no_matchdata = $kwargs.$$smap["no_matchdata"];if (no_matchdata == null) no_matchdata = false;
      
      var result = [],
          match_data = nil,
          match;

      if (pattern.$$is_regexp) {
        pattern = $global_multiline_regexp(pattern);
      } else {
        pattern = $coerce_to(pattern, $$$('String'), 'to_str');
        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gm');
      }

      while ((match = pattern.exec(self)) != null) {
        match_data = $$$('MatchData').$new(pattern, match, $hash2(["no_matchdata"], {"no_matchdata": no_matchdata}));
        if (block === nil) {
          match.length == 1 ? result.push(match[0]) : result.push((match_data).$captures());
        } else {
          match.length == 1 ? Opal.yield1(block, match[0]) : Opal.yield1(block, (match_data).$captures());
        }
        if (pattern.lastIndex === match.index) {
          pattern.lastIndex += 1;
        }
      }

      if (!no_matchdata) ($gvars["~"] = match_data);

      return (block !== nil ? self : result);
    ;
    }, -2);
    
    $def(self, '$singleton_class', function $$singleton_class() {
      var self = this;

      return Opal.get_singleton_class(self);
    }, 0);
    
    $def(self, '$split', function $$split(pattern, limit) {
      var self = this, $ret_or_1 = nil;
      if ($gvars[";"] == null) $gvars[";"] = nil;

      
      ;
      ;
      
      if (self.length === 0) {
        return [];
      }

      if (limit === undefined) {
        limit = 0;
      } else {
        limit = $Opal['$coerce_to!'](limit, $$$('Integer'), "to_int");
        if (limit === 1) {
          return [self];
        }
      }

      if (pattern === undefined || pattern === nil) {
        pattern = ($truthy(($ret_or_1 = $gvars[";"])) ? ($ret_or_1) : (" "));
      }

      var result = [],
          string = self.toString(),
          index = 0,
          match,
          i, ii;

      if (pattern.$$is_regexp) {
        pattern = $global_multiline_regexp(pattern);
      } else {
        pattern = $coerce_to(pattern, $$$('String'), 'to_str').$to_s();
        if (pattern === ' ') {
          pattern = /\s+/gm;
          string = string.replace(/^\s+/, '');
        } else {
          pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gm');
        }
      }

      result = string.split(pattern);

      if (result.length === 1 && result[0] === string) {
        return [result[0]];
      }

      while ((i = result.indexOf(undefined)) !== -1) {
        result.splice(i, 1);
      }

      if (limit === 0) {
        while (result[result.length - 1] === '') {
          result.length -= 1;
        }
        return result;
      }

      match = pattern.exec(string);

      if (limit < 0) {
        if (match !== null && match[0] === '' && pattern.source.indexOf('(?=') === -1) {
          for (i = 0, ii = match.length; i < ii; i++) {
            result.push('');
          }
        }
        return result;
      }

      if (match !== null && match[0] === '') {
        result.splice(limit - 1, result.length - 1, result.slice(limit - 1).join(''));
        return result;
      }

      if (limit >= result.length) {
        return result;
      }

      i = 0;
      while (match !== null) {
        i++;
        index = pattern.lastIndex;
        if (i + 1 === limit) {
          break;
        }
        match = pattern.exec(string);
      }
      result.splice(limit - 1, result.length - 1, string.slice(index));
      return result;
    ;
    }, -1);
    
    $def(self, '$squeeze', function $$squeeze($a) {
      var $post_args, sets, self = this;

      
      $post_args = $slice.call(arguments);
      sets = $post_args;
      
      if (sets.length === 0) {
        return self.replace(/(.)\1+/g, '$1');
      }
      var char_class = char_class_from_char_sets(sets);
      if (char_class === null) {
        return self;
      }
      return self.replace(new RegExp('(' + char_class + ')\\1+', 'g'), '$1');
    ;
    }, -1);
    
    $def(self, '$start_with?', function $String_start_with$ques$16($a) {
      var $post_args, prefixes, self = this;

      
      $post_args = $slice.call(arguments);
      prefixes = $post_args;
      
      for (var i = 0, length = prefixes.length; i < length; i++) {
        if (prefixes[i].$$is_regexp) {
          var regexp = prefixes[i];
          var match = regexp.exec(self);

          if (match != null && match.index === 0) {
            ($gvars["~"] = $$$('MatchData').$new(regexp, match));
            return true;
          } else {
            ($gvars["~"] = nil)
          }
        } else {
          var prefix = $coerce_to(prefixes[i], $$$('String'), 'to_str').$to_s();

          if (self.indexOf(prefix) === 0) {
            return true;
          }
        }
      }

      return false;
    ;
    }, -1);
    
    $def(self, '$strip', function $$strip() {
      var self = this;

      return self.replace(/^[\s\u0000]*|[\s\u0000]*$/g, '');
    }, 0);
    
    $def(self, '$sub', function $$sub(pattern, replacement) {
      var block = $$sub.$$p || nil, self = this;

      $$sub.$$p = null;
      
      ;
      ;
      
      if (!pattern.$$is_regexp) {
        pattern = $coerce_to(pattern, $$$('String'), 'to_str');
        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'));
      }

      var result, match = pattern.exec(self);

      if (match === null) {
        ($gvars["~"] = nil)
        result = self.toString();
      } else {
        $$$('MatchData').$new(pattern, match)

        if (replacement === undefined) {

          if (block === nil) {
            $Kernel.$raise($$$('ArgumentError'), "wrong number of arguments (1 for 2)")
          }
          result = self.slice(0, match.index) + block(match[0]) + self.slice(match.index + match[0].length);

        } else if (replacement.$$is_hash) {

          result = self.slice(0, match.index) + (replacement)['$[]'](match[0]).$to_s() + self.slice(match.index + match[0].length);

        } else {

          replacement = $coerce_to(replacement, $$$('String'), 'to_str');

          replacement = replacement.replace(/([\\]+)([0-9+&`'])/g, function (original, slashes, command) {
            if (slashes.length % 2 === 0) {
              return original;
            }
            switch (command) {
            case "+":
              for (var i = match.length - 1; i > 0; i--) {
                if (match[i] !== undefined) {
                  return slashes.slice(1) + match[i];
                }
              }
              return '';
            case "&": return slashes.slice(1) + match[0];
            case "`": return slashes.slice(1) + self.slice(0, match.index);
            case "'": return slashes.slice(1) + self.slice(match.index + match[0].length);
            default:  return slashes.slice(1) + (match[command] || '');
            }
          }).replace(/\\\\/g, '\\');

          result = self.slice(0, match.index) + replacement + self.slice(match.index + match[0].length);
        }
      }

      return result;
    ;
    }, -2);
    
    $def(self, '$sum', function $$sum(n) {
      var self = this;

      
      if (n == null) n = 16;
      
      n = $coerce_to(n, $$$('Integer'), 'to_int');

      var result = 0,
          length = self.length,
          i = 0;

      for (; i < length; i++) {
        result += self.charCodeAt(i);
      }

      if (n <= 0) {
        return result;
      }

      return result & (Math.pow(2, n) - 1);
    ;
    }, -1);
    
    $def(self, '$swapcase', function $$swapcase() {
      var self = this;

      
      var str = self.replace(/([a-z]+)|([A-Z]+)/g, function($0,$1,$2) {
        return $1 ? $0.toUpperCase() : $0.toLowerCase();
      });

      return str;
    
    }, 0);
    
    $def(self, '$to_f', function $$to_f() {
      var self = this;

      
      if (self.charAt(0) === '_') {
        return 0;
      }

      var result = parseFloat(self.replace(/_/g, ''));

      if (isNaN(result) || result == Infinity || result == -Infinity) {
        return 0;
      }
      else {
        return result;
      }
    
    }, 0);
    
    $def(self, '$to_i', function $$to_i(base) {
      var self = this;

      
      if (base == null) base = 10;
      
      var result,
          string = self.toLowerCase(),
          radix = $coerce_to(base, $$$('Integer'), 'to_int');

      if (radix === 1 || radix < 0 || radix > 36) {
        $Kernel.$raise($$$('ArgumentError'), "invalid radix " + (radix))
      }

      if (/^\s*_/.test(string)) {
        return 0;
      }

      string = string.replace(/^(\s*[+-]?)(0[bodx]?)(.+)$/, function (original, head, flag, tail) {
        switch (tail.charAt(0)) {
        case '+':
        case '-':
          return original;
        case '0':
          if (tail.charAt(1) === 'x' && flag === '0x' && (radix === 0 || radix === 16)) {
            return original;
          }
        }
        switch (flag) {
        case '0b':
          if (radix === 0 || radix === 2) {
            radix = 2;
            return head + tail;
          }
          break;
        case '0':
        case '0o':
          if (radix === 0 || radix === 8) {
            radix = 8;
            return head + tail;
          }
          break;
        case '0d':
          if (radix === 0 || radix === 10) {
            radix = 10;
            return head + tail;
          }
          break;
        case '0x':
          if (radix === 0 || radix === 16) {
            radix = 16;
            return head + tail;
          }
          break;
        }
        return original
      });

      result = parseInt(string.replace(/_(?!_)/g, ''), radix);
      return isNaN(result) ? 0 : result;
    ;
    }, -1);
    
    $def(self, '$to_proc', function $$to_proc() {
      var $yield = $$to_proc.$$p || nil, self = this, method_name = nil, proc = nil;

      $$to_proc.$$p = null;
      
      method_name = self.valueOf();
      proc = $send($Kernel, 'proc', [], function $$17($a){var block = $$17.$$p || nil, $post_args, args;

        $$17.$$p = null;
        
        ;
        $post_args = $slice.call(arguments);
        args = $post_args;
        
        if (args.length === 0) {
          $Kernel.$raise($$$('ArgumentError'), "no receiver given")
        }

        var recv = args[0];

        if (recv == null) recv = nil;

        var body = recv['$' + method_name];

        if (!body) {
          body = recv.$method_missing;
          args[0] = method_name;
        } else {
          args = args.slice(1);
        }

        if (typeof block === 'function') {
          body.$$p = block;
        }

        if (args.length === 0) {
          return body.call(recv);
        } else {
          return body.apply(recv, args);
        }
      ;}, -1);
      proc.$$source_location = nil;
      return proc;
    }, 0);
    
    $def(self, '$to_s', function $$to_s() {
      var self = this;

      return self.toString();
    }, 0);
    
    $def(self, '$tr', function $$tr(from, to) {
      var self = this;

      
      from = $coerce_to(from, $$$('String'), 'to_str').$to_s();
      to = $coerce_to(to, $$$('String'), 'to_str').$to_s();

      if (from.length == 0 || from === to) {
        return self;
      }

      var i, in_range, c, ch, start, end, length;
      var subs = {};
      var from_chars = from.split('');
      var from_length = from_chars.length;
      var to_chars = to.split('');
      var to_length = to_chars.length;

      var inverse = false;
      var global_sub = null;
      if (from_chars[0] === '^' && from_chars.length > 1) {
        inverse = true;
        from_chars.shift();
        global_sub = to_chars[to_length - 1]
        from_length -= 1;
      }

      var from_chars_expanded = [];
      var last_from = null;
      in_range = false;
      for (i = 0; i < from_length; i++) {
        ch = from_chars[i];
        if (last_from == null) {
          last_from = ch;
          from_chars_expanded.push(ch);
        }
        else if (ch === '-') {
          if (last_from === '-') {
            from_chars_expanded.push('-');
            from_chars_expanded.push('-');
          }
          else if (i == from_length - 1) {
            from_chars_expanded.push('-');
          }
          else {
            in_range = true;
          }
        }
        else if (in_range) {
          start = last_from.charCodeAt(0);
          end = ch.charCodeAt(0);
          if (start > end) {
            $Kernel.$raise($$$('ArgumentError'), "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
          }
          for (c = start + 1; c < end; c++) {
            from_chars_expanded.push(String.fromCharCode(c));
          }
          from_chars_expanded.push(ch);
          in_range = null;
          last_from = null;
        }
        else {
          from_chars_expanded.push(ch);
        }
      }

      from_chars = from_chars_expanded;
      from_length = from_chars.length;

      if (inverse) {
        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = true;
        }
      }
      else {
        if (to_length > 0) {
          var to_chars_expanded = [];
          var last_to = null;
          in_range = false;
          for (i = 0; i < to_length; i++) {
            ch = to_chars[i];
            if (last_to == null) {
              last_to = ch;
              to_chars_expanded.push(ch);
            }
            else if (ch === '-') {
              if (last_to === '-') {
                to_chars_expanded.push('-');
                to_chars_expanded.push('-');
              }
              else if (i == to_length - 1) {
                to_chars_expanded.push('-');
              }
              else {
                in_range = true;
              }
            }
            else if (in_range) {
              start = last_to.charCodeAt(0);
              end = ch.charCodeAt(0);
              if (start > end) {
                $Kernel.$raise($$$('ArgumentError'), "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
              }
              for (c = start + 1; c < end; c++) {
                to_chars_expanded.push(String.fromCharCode(c));
              }
              to_chars_expanded.push(ch);
              in_range = null;
              last_to = null;
            }
            else {
              to_chars_expanded.push(ch);
            }
          }

          to_chars = to_chars_expanded;
          to_length = to_chars.length;
        }

        var length_diff = from_length - to_length;
        if (length_diff > 0) {
          var pad_char = (to_length > 0 ? to_chars[to_length - 1] : '');
          for (i = 0; i < length_diff; i++) {
            to_chars.push(pad_char);
          }
        }

        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = to_chars[i];
        }
      }

      var new_str = ''
      for (i = 0, length = self.length; i < length; i++) {
        ch = self.charAt(i);
        var sub = subs[ch];
        if (inverse) {
          new_str += (sub == null ? global_sub : ch);
        }
        else {
          new_str += (sub != null ? sub : ch);
        }
      }
      return new_str;
    
    }, 2);
    
    $def(self, '$tr_s', function $$tr_s(from, to) {
      var self = this;

      
      from = $coerce_to(from, $$$('String'), 'to_str').$to_s();
      to = $coerce_to(to, $$$('String'), 'to_str').$to_s();

      if (from.length == 0) {
        return self;
      }

      var i, in_range, c, ch, start, end, length;
      var subs = {};
      var from_chars = from.split('');
      var from_length = from_chars.length;
      var to_chars = to.split('');
      var to_length = to_chars.length;

      var inverse = false;
      var global_sub = null;
      if (from_chars[0] === '^' && from_chars.length > 1) {
        inverse = true;
        from_chars.shift();
        global_sub = to_chars[to_length - 1]
        from_length -= 1;
      }

      var from_chars_expanded = [];
      var last_from = null;
      in_range = false;
      for (i = 0; i < from_length; i++) {
        ch = from_chars[i];
        if (last_from == null) {
          last_from = ch;
          from_chars_expanded.push(ch);
        }
        else if (ch === '-') {
          if (last_from === '-') {
            from_chars_expanded.push('-');
            from_chars_expanded.push('-');
          }
          else if (i == from_length - 1) {
            from_chars_expanded.push('-');
          }
          else {
            in_range = true;
          }
        }
        else if (in_range) {
          start = last_from.charCodeAt(0);
          end = ch.charCodeAt(0);
          if (start > end) {
            $Kernel.$raise($$$('ArgumentError'), "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
          }
          for (c = start + 1; c < end; c++) {
            from_chars_expanded.push(String.fromCharCode(c));
          }
          from_chars_expanded.push(ch);
          in_range = null;
          last_from = null;
        }
        else {
          from_chars_expanded.push(ch);
        }
      }

      from_chars = from_chars_expanded;
      from_length = from_chars.length;

      if (inverse) {
        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = true;
        }
      }
      else {
        if (to_length > 0) {
          var to_chars_expanded = [];
          var last_to = null;
          in_range = false;
          for (i = 0; i < to_length; i++) {
            ch = to_chars[i];
            if (last_from == null) {
              last_from = ch;
              to_chars_expanded.push(ch);
            }
            else if (ch === '-') {
              if (last_to === '-') {
                to_chars_expanded.push('-');
                to_chars_expanded.push('-');
              }
              else if (i == to_length - 1) {
                to_chars_expanded.push('-');
              }
              else {
                in_range = true;
              }
            }
            else if (in_range) {
              start = last_from.charCodeAt(0);
              end = ch.charCodeAt(0);
              if (start > end) {
                $Kernel.$raise($$$('ArgumentError'), "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
              }
              for (c = start + 1; c < end; c++) {
                to_chars_expanded.push(String.fromCharCode(c));
              }
              to_chars_expanded.push(ch);
              in_range = null;
              last_from = null;
            }
            else {
              to_chars_expanded.push(ch);
            }
          }

          to_chars = to_chars_expanded;
          to_length = to_chars.length;
        }

        var length_diff = from_length - to_length;
        if (length_diff > 0) {
          var pad_char = (to_length > 0 ? to_chars[to_length - 1] : '');
          for (i = 0; i < length_diff; i++) {
            to_chars.push(pad_char);
          }
        }

        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = to_chars[i];
        }
      }
      var new_str = ''
      var last_substitute = null
      for (i = 0, length = self.length; i < length; i++) {
        ch = self.charAt(i);
        var sub = subs[ch]
        if (inverse) {
          if (sub == null) {
            if (last_substitute == null) {
              new_str += global_sub;
              last_substitute = true;
            }
          }
          else {
            new_str += ch;
            last_substitute = null;
          }
        }
        else {
          if (sub != null) {
            if (last_substitute == null || last_substitute !== sub) {
              new_str += sub;
              last_substitute = sub;
            }
          }
          else {
            new_str += ch;
            last_substitute = null;
          }
        }
      }
      return new_str;
    
    }, 2);
    
    $def(self, '$upcase', function $$upcase() {
      var self = this;

      return self.toUpperCase();
    }, 0);
    
    $def(self, '$upto', function $$upto(stop, excl) {
      var block = $$upto.$$p || nil, self = this;

      $$upto.$$p = null;
      
      ;
      if (excl == null) excl = false;
      if (!(block !== nil)) {
        return self.$enum_for("upto", stop, excl)
      };
      
      var a, b, s = self.toString();

      stop = $coerce_to(stop, $$$('String'), 'to_str');

      if (s.length === 1 && stop.length === 1) {

        a = s.charCodeAt(0);
        b = stop.charCodeAt(0);

        while (a <= b) {
          if (excl && a === b) {
            break;
          }

          block(String.fromCharCode(a));

          a += 1;
        }

      } else if (parseInt(s, 10).toString() === s && parseInt(stop, 10).toString() === stop) {

        a = parseInt(s, 10);
        b = parseInt(stop, 10);

        while (a <= b) {
          if (excl && a === b) {
            break;
          }

          block(a.toString());

          a += 1;
        }

      } else {

        while (s.length <= stop.length && s <= stop) {
          if (excl && s === stop) {
            break;
          }

          block(s);

          s = (s).$succ();
        }

      }
      return self;
    ;
    }, -2);
    
    function char_class_from_char_sets(sets) {
      function explode_sequences_in_character_set(set) {
        var result = '',
            i, len = set.length,
            curr_char,
            skip_next_dash,
            char_code_from,
            char_code_upto,
            char_code;
        for (i = 0; i < len; i++) {
          curr_char = set.charAt(i);
          if (curr_char === '-' && i > 0 && i < (len - 1) && !skip_next_dash) {
            char_code_from = set.charCodeAt(i - 1);
            char_code_upto = set.charCodeAt(i + 1);
            if (char_code_from > char_code_upto) {
              $Kernel.$raise($$$('ArgumentError'), "invalid range \"" + (char_code_from) + "-" + (char_code_upto) + "\" in string transliteration")
            }
            for (char_code = char_code_from + 1; char_code < char_code_upto + 1; char_code++) {
              result += String.fromCharCode(char_code);
            }
            skip_next_dash = true;
            i++;
          } else {
            skip_next_dash = (curr_char === '\\');
            result += curr_char;
          }
        }
        return result;
      }

      function intersection(setA, setB) {
        if (setA.length === 0) {
          return setB;
        }
        var result = '',
            i, len = setA.length,
            chr;
        for (i = 0; i < len; i++) {
          chr = setA.charAt(i);
          if (setB.indexOf(chr) !== -1) {
            result += chr;
          }
        }
        return result;
      }

      var i, len, set, neg, chr, tmp,
          pos_intersection = '',
          neg_intersection = '';

      for (i = 0, len = sets.length; i < len; i++) {
        set = $coerce_to(sets[i], $$$('String'), 'to_str');
        neg = (set.charAt(0) === '^' && set.length > 1);
        set = explode_sequences_in_character_set(neg ? set.slice(1) : set);
        if (neg) {
          neg_intersection = intersection(neg_intersection, set);
        } else {
          pos_intersection = intersection(pos_intersection, set);
        }
      }

      if (pos_intersection.length > 0 && neg_intersection.length > 0) {
        tmp = '';
        for (i = 0, len = pos_intersection.length; i < len; i++) {
          chr = pos_intersection.charAt(i);
          if (neg_intersection.indexOf(chr) === -1) {
            tmp += chr;
          }
        }
        pos_intersection = tmp;
        neg_intersection = '';
      }

      if (pos_intersection.length > 0) {
        return '[' + $$$('Regexp').$escape(pos_intersection) + ']';
      }

      if (neg_intersection.length > 0) {
        return '[^' + $$$('Regexp').$escape(neg_intersection) + ']';
      }

      return null;
    }
  ;
    
    $def(self, '$instance_variables', function $$instance_variables() {
      
      return []
    }, 0);
    $defs(self, '$_load', function $$_load($a) {
      var $post_args, args, self = this;

      
      $post_args = $slice.call(arguments);
      args = $post_args;
      return $send(self, 'new', $to_a(args));
    }, -1);
    
    $def(self, '$unicode_normalize', function $$unicode_normalize(form) {
      var self = this;

      
      if (form == null) form = "nfc";
      if (!$truthy(["nfc", "nfd", "nfkc", "nfkd"]['$include?'](form))) {
        $Kernel.$raise($$$('ArgumentError'), "Invalid normalization form " + (form))
      };
      return self.normalize(form.$upcase());
    }, -1);
    
    $def(self, '$unicode_normalized?', function $String_unicode_normalized$ques$18(form) {
      var self = this;

      
      if (form == null) form = "nfc";
      return self.$unicode_normalize(form)['$=='](self);
    }, -1);
    
    $def(self, '$unpack', function $$unpack(format) {
      
      return $Kernel.$raise("To use String#unpack, you must first require 'corelib/string/unpack'.")
    }, 1);
    
    $def(self, '$unpack1', function $$unpack1(format) {
      
      return $Kernel.$raise("To use String#unpack1, you must first require 'corelib/string/unpack'.")
    }, 1);
    
    $def(self, '$freeze', function $$freeze() {
      var self = this;

      
      if (typeof self === 'string') { return self; }
      $prop(self, "$$frozen", true);
      return self;
    
    }, 0);
    
    $def(self, '$-@', function $String_$minus$$19() {
      var self = this;

      
      if (typeof self === 'string') return self;
      if (self.$$frozen) return self;
      if (self.encoding.name == 'UTF-8' && self.internal_encoding.name == 'UTF-8') return self.toString();
      return self.$dup().$freeze();
    
    }, 0);
    
    $def(self, '$frozen?', function $String_frozen$ques$20() {
      var self = this;

      return typeof self === 'string' || self.$$frozen === true;
    }, 0);
    $alias(self, "+@", "dup");
    $alias(self, "===", "==");
    $alias(self, "byteslice", "[]");
    $alias(self, "eql?", "==");
    $alias(self, "equal?", "===");
    $alias(self, "object_id", "__id__");
    $alias(self, "slice", "[]");
    $alias(self, "succ", "next");
    $alias(self, "to_str", "to_s");
    $alias(self, "to_sym", "intern");
    return $Opal.$pristine(self, "initialize");
  })('::', String, $nesting);
  return $const_set($nesting[0], 'Symbol', $$('String'));
};

Opal.modules["corelib/hash"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $yield1 = Opal.yield1, $hash = Opal.hash, $hash_init = Opal.hash_init, $hash_get = Opal.hash_get, $hash_put = Opal.hash_put, $hash_delete = Opal.hash_delete, $deny_frozen_access = Opal.deny_frozen_access, $freeze = Opal.freeze, $klass = Opal.klass, $slice = Opal.slice, $Opal = Opal.Opal, $Kernel = Opal.Kernel, $defs = Opal.defs, $def = Opal.def, $send = Opal.send, $rb_ge = Opal.rb_ge, $rb_gt = Opal.rb_gt, $hash2 = Opal.hash2, $truthy = Opal.truthy, $to_a = Opal.to_a, $return_self = Opal.return_self, $alias = Opal.alias, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,include,coerce_to?,[],merge!,allocate,raise,coerce_to!,each,fetch,>=,>,==,compare_by_identity,lambda?,abs,arity,enum_for,size,respond_to?,class,dig,except!,dup,delete,new,inspect,map,to_proc,flatten,frozen?,eql?,default,default_proc,default_proc=,default=,to_h,proc,clone,select,select!,has_key?,indexes,index,length,[]=,has_value?');
  
  self.$require("corelib/enumerable");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Hash');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    self.$include($$$('Enumerable'));
    self.$$prototype.$$is_hash = true;
    $defs(self, '$[]', function $Hash_$$$1($a) {
      var $post_args, argv, self = this;

      
      $post_args = $slice.call(arguments);
      argv = $post_args;
      
      var hash, argc = argv.length, i;

      if (argc === 1) {
        hash = $Opal['$coerce_to?'](argv['$[]'](0), $$$('Hash'), "to_hash");
        if (hash !== nil) {
          return self.$allocate()['$merge!'](hash);
        }

        argv = $Opal['$coerce_to?'](argv['$[]'](0), $$$('Array'), "to_ary");
        if (argv === nil) {
          $Kernel.$raise($$$('ArgumentError'), "odd number of arguments for Hash")
        }

        argc = argv.length;
        hash = self.$allocate();

        for (i = 0; i < argc; i++) {
          if (!argv[i].$$is_array) continue;
          switch(argv[i].length) {
          case 1:
            hash.$store(argv[i][0], nil);
            break;
          case 2:
            hash.$store(argv[i][0], argv[i][1]);
            break;
          default:
            $Kernel.$raise($$$('ArgumentError'), "invalid number of elements (" + (argv[i].length) + " for 1..2)")
          }
        }

        return hash;
      }

      if (argc % 2 !== 0) {
        $Kernel.$raise($$$('ArgumentError'), "odd number of arguments for Hash")
      }

      hash = self.$allocate();

      for (i = 0; i < argc; i += 2) {
        hash.$store(argv[i], argv[i + 1]);
      }

      return hash;
    ;
    }, -1);
    $defs(self, '$allocate', function $$allocate() {
      var self = this;

      
      var hash = new self.$$constructor();

      $hash_init(hash);

      hash.$$none = nil;
      hash.$$proc = nil;

      return hash;
    
    }, 0);
    $defs(self, '$try_convert', function $$try_convert(obj) {
      
      return $Opal['$coerce_to?'](obj, $$$('Hash'), "to_hash")
    }, 1);
    
    $def(self, '$initialize', function $$initialize(defaults) {
      var block = $$initialize.$$p || nil, self = this;

      $$initialize.$$p = null;
      
      ;
      ;
      
      $deny_frozen_access(self);

      if (defaults !== undefined && block !== nil) {
        $Kernel.$raise($$$('ArgumentError'), "wrong number of arguments (1 for 0)")
      }
      self.$$none = (defaults === undefined ? nil : defaults);
      self.$$proc = block;

      return self;
    ;
    }, -1);
    
    $def(self, '$==', function $Hash_$eq_eq$2(other) {
      var self = this;

      
      if (self === other) {
        return true;
      }

      if (!other.$$is_hash) {
        return false;
      }

      if (self.$$keys.length !== other.$$keys.length) {
        return false;
      }

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, other_value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
          other_value = other.$$smap[key];
        } else {
          value = key.value;
          other_value = $hash_get(other, key.key);
        }

        if (other_value === undefined || !value['$eql?'](other_value)) {
          return false;
        }
      }

      return true;
    
    }, 1);
    
    $def(self, '$>=', function $Hash_$gt_eq$3(other) {
      var self = this, result = nil;

      
      other = $Opal['$coerce_to!'](other, $$$('Hash'), "to_hash");
      
      if (self.$$keys.length < other.$$keys.length) {
        return false
      }
    ;
      result = true;
      $send(other, 'each', [], function $$4(other_key, other_val){var self = $$4.$$s == null ? this : $$4.$$s, val = nil;

        
        if (other_key == null) other_key = nil;
        if (other_val == null) other_val = nil;
        val = self.$fetch(other_key, null);
        
        if (val == null || val !== other_val) {
          result = false;
          return;
        }
      ;}, {$$arity: 2, $$s: self});
      return result;
    }, 1);
    
    $def(self, '$>', function $Hash_$gt$5(other) {
      var self = this;

      
      other = $Opal['$coerce_to!'](other, $$$('Hash'), "to_hash");
      
      if (self.$$keys.length <= other.$$keys.length) {
        return false
      }
    ;
      return $rb_ge(self, other);
    }, 1);
    
    $def(self, '$<', function $Hash_$lt$6(other) {
      var self = this;

      
      other = $Opal['$coerce_to!'](other, $$$('Hash'), "to_hash");
      return $rb_gt(other, self);
    }, 1);
    
    $def(self, '$<=', function $Hash_$lt_eq$7(other) {
      var self = this;

      
      other = $Opal['$coerce_to!'](other, $$$('Hash'), "to_hash");
      return $rb_ge(other, self);
    }, 1);
    
    $def(self, '$[]', function $Hash_$$$8(key) {
      var self = this;

      
      var value = $hash_get(self, key);

      if (value !== undefined) {
        return value;
      }

      return self.$default(key);
    
    }, 1);
    
    $def(self, '$[]=', function $Hash_$$$eq$9(key, value) {
      var self = this;

      
      $deny_frozen_access(self);

      $hash_put(self, key, value);
      return value;
    
    }, 2);
    
    $def(self, '$assoc', function $$assoc(object) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          if ((key)['$=='](object)) {
            return [key, self.$$smap[key]];
          }
        } else {
          if ((key.key)['$=='](object)) {
            return [key.key, key.value];
          }
        }
      }

      return nil;
    
    }, 1);
    
    $def(self, '$clear', function $$clear() {
      var self = this;

      
      $deny_frozen_access(self);

      $hash_init(self);
      return self;
    
    }, 0);
    
    $def(self, '$clone', function $$clone() {
      var self = this;

      
      var hash = new self.$$class();

      $hash_init(hash);
      Opal.hash_clone(self, hash);

      return hash;
    
    }, 0);
    
    $def(self, '$compact', function $$compact() {
      var self = this;

      
      var hash = $hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        if (value !== nil) {
          $hash_put(hash, key, value);
        }
      }

      return hash;
    
    }, 0);
    
    $def(self, '$compact!', function $Hash_compact$excl$10() {
      var self = this;

      
      $deny_frozen_access(self);

      var changes_were_made = false;

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        if (value === nil) {
          if ($hash_delete(self, key) !== undefined) {
            changes_were_made = true;
            length--;
            i--;
          }
        }
      }

      return changes_were_made ? self : nil;
    
    }, 0);
    
    $def(self, '$compare_by_identity', function $$compare_by_identity() {
      var self = this;

      
      $deny_frozen_access(self);

      var i, ii, key, keys = self.$$keys, identity_hash;

      if (self.$$by_identity) return self;
      if (self.$$keys.length === 0) {
        self.$$by_identity = true
        return self;
      }

      identity_hash = $hash2([], {}).$compare_by_identity();
      for(i = 0, ii = keys.length; i < ii; i++) {
        key = keys[i];
        if (!key.$$is_string) key = key.key;
        $hash_put(identity_hash, key, $hash_get(self, key));
      }

      self.$$by_identity = true;
      self.$$map = identity_hash.$$map;
      self.$$smap = identity_hash.$$smap;
      return self;
    
    }, 0);
    
    $def(self, '$compare_by_identity?', function $Hash_compare_by_identity$ques$11() {
      var self = this;

      return self.$$by_identity === true;
    }, 0);
    
    $def(self, '$default', function $Hash_default$12(key) {
      var self = this;

      
      ;
      
      if (key !== undefined && self.$$proc !== nil && self.$$proc !== undefined) {
        return self.$$proc.$call(self, key);
      }
      if (self.$$none === undefined) {
        return nil;
      }
      return self.$$none;
    ;
    }, -1);
    
    $def(self, '$default=', function $Hash_default$eq$13(object) {
      var self = this;

      
      $deny_frozen_access(self);

      self.$$proc = nil;
      self.$$none = object;

      return object;
    
    }, 1);
    
    $def(self, '$default_proc', function $$default_proc() {
      var self = this;

      
      if (self.$$proc !== undefined) {
        return self.$$proc;
      }
      return nil;
    
    }, 0);
    
    $def(self, '$default_proc=', function $Hash_default_proc$eq$14(default_proc) {
      var self = this;

      
      $deny_frozen_access(self);

      var proc = default_proc;

      if (proc !== nil) {
        proc = $Opal['$coerce_to!'](proc, $$$('Proc'), "to_proc");

        if ((proc)['$lambda?']() && (proc).$arity().$abs() !== 2) {
          $Kernel.$raise($$$('TypeError'), "default_proc takes two arguments");
        }
      }

      self.$$none = nil;
      self.$$proc = proc;

      return default_proc;
    
    }, 1);
    
    $def(self, '$delete', function $Hash_delete$15(key) {
      var block = $Hash_delete$15.$$p || nil, self = this;

      $Hash_delete$15.$$p = null;
      
      ;
      
      $deny_frozen_access(self);
      var value = $hash_delete(self, key);

      if (value !== undefined) {
        return value;
      }

      if (block !== nil) {
        return Opal.yield1(block, key);
      }

      return nil;
    ;
    }, 1);
    
    $def(self, '$delete_if', function $$delete_if() {
      var block = $$delete_if.$$p || nil, self = this;

      $$delete_if.$$p = null;
      
      ;
      if (!$truthy(block)) {
        return $send(self, 'enum_for', ["delete_if"], function $$16(){var self = $$16.$$s == null ? this : $$16.$$s;

          return self.$size()}, {$$arity: 0, $$s: self})
      };
      
      $deny_frozen_access(self);

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj !== false && obj !== nil) {
          if ($hash_delete(self, key) !== undefined) {
            length--;
            i--;
          }
        }
      }

      return self;
    ;
    }, 0);
    
    $def(self, '$dig', function $$dig(key, $a) {
      var $post_args, keys, self = this, item = nil;

      
      $post_args = $slice.call(arguments, 1);
      keys = $post_args;
      item = self['$[]'](key);
      
      if (item === nil || keys.length === 0) {
        return item;
      }
    ;
      if (!$truthy(item['$respond_to?']("dig"))) {
        $Kernel.$raise($$$('TypeError'), "" + (item.$class()) + " does not have #dig method")
      };
      return $send(item, 'dig', $to_a(keys));
    }, -2);
    
    $def(self, '$each', function $$each() {
      var block = $$each.$$p || nil, self = this;

      $$each.$$p = null;
      
      ;
      if (!$truthy(block)) {
        return $send(self, 'enum_for', ["each"], function $$17(){var self = $$17.$$s == null ? this : $$17.$$s;

          return self.$size()}, {$$arity: 0, $$s: self})
      };
      
      for (var i = 0, keys = self.$$keys.slice(), length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        $yield1(block, [key, value]);
      }

      return self;
    ;
    }, 0);
    
    $def(self, '$each_key', function $$each_key() {
      var block = $$each_key.$$p || nil, self = this;

      $$each_key.$$p = null;
      
      ;
      if (!$truthy(block)) {
        return $send(self, 'enum_for', ["each_key"], function $$18(){var self = $$18.$$s == null ? this : $$18.$$s;

          return self.$size()}, {$$arity: 0, $$s: self})
      };
      
      for (var i = 0, keys = self.$$keys.slice(), length = keys.length, key; i < length; i++) {
        key = keys[i];

        block(key.$$is_string ? key : key.key);
      }

      return self;
    ;
    }, 0);
    
    $def(self, '$each_value', function $$each_value() {
      var block = $$each_value.$$p || nil, self = this;

      $$each_value.$$p = null;
      
      ;
      if (!$truthy(block)) {
        return $send(self, 'enum_for', ["each_value"], function $$19(){var self = $$19.$$s == null ? this : $$19.$$s;

          return self.$size()}, {$$arity: 0, $$s: self})
      };
      
      for (var i = 0, keys = self.$$keys.slice(), length = keys.length, key; i < length; i++) {
        key = keys[i];

        block(key.$$is_string ? self.$$smap[key] : key.value);
      }

      return self;
    ;
    }, 0);
    
    $def(self, '$empty?', function $Hash_empty$ques$20() {
      var self = this;

      return self.$$keys.length === 0;
    }, 0);
    
    $def(self, '$except', function $$except($a) {
      var $post_args, keys, self = this;

      
      $post_args = $slice.call(arguments);
      keys = $post_args;
      return $send(self.$dup(), 'except!', $to_a(keys));
    }, -1);
    
    $def(self, '$except!', function $Hash_except$excl$21($a) {
      var $post_args, keys, self = this;

      
      $post_args = $slice.call(arguments);
      keys = $post_args;
      $send(keys, 'each', [], function $$22(key){var self = $$22.$$s == null ? this : $$22.$$s;

        
        if (key == null) key = nil;
        return self.$delete(key);}, {$$arity: 1, $$s: self});
      return self;
    }, -1);
    
    $def(self, '$fetch', function $$fetch(key, defaults) {
      var block = $$fetch.$$p || nil, self = this;

      $$fetch.$$p = null;
      
      ;
      ;
      
      var value = $hash_get(self, key);

      if (value !== undefined) {
        return value;
      }

      if (block !== nil) {
        return block(key);
      }

      if (defaults !== undefined) {
        return defaults;
      }
    ;
      return $Kernel.$raise($$$('KeyError').$new("key not found: " + (key.$inspect()), $hash2(["key", "receiver"], {"key": key, "receiver": self})));
    }, -2);
    
    $def(self, '$fetch_values', function $$fetch_values($a) {
      var block = $$fetch_values.$$p || nil, $post_args, keys, self = this;

      $$fetch_values.$$p = null;
      
      ;
      $post_args = $slice.call(arguments);
      keys = $post_args;
      return $send(keys, 'map', [], function $$23(key){var self = $$23.$$s == null ? this : $$23.$$s;

        
        if (key == null) key = nil;
        return $send(self, 'fetch', [key], block.$to_proc());}, {$$arity: 1, $$s: self});
    }, -1);
    
    $def(self, '$flatten', function $$flatten(level) {
      var self = this;

      
      if (level == null) level = 1;
      level = $Opal['$coerce_to!'](level, $$$('Integer'), "to_int");
      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push(key);

        if (value.$$is_array) {
          if (level === 1) {
            result.push(value);
            continue;
          }

          result = result.concat((value).$flatten(level - 2));
          continue;
        }

        result.push(value);
      }

      return result;
    ;
    }, -1);
    
    $def(self, '$freeze', function $$freeze() {
      var self = this;

      
      if ($truthy(self['$frozen?']())) {
        return self
      };
      return $freeze(self);;
    }, 0);
    
    $def(self, '$has_key?', function $Hash_has_key$ques$24(key) {
      var self = this;

      return $hash_get(self, key) !== undefined;
    }, 1);
    
    $def(self, '$has_value?', function $Hash_has_value$ques$25(value) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (((key.$$is_string ? self.$$smap[key] : key.value))['$=='](value)) {
          return true;
        }
      }

      return false;
    
    }, 1);
    
    $def(self, '$hash', function $$hash() {
      var self = this;

      
      var top = (Opal.hash_ids === undefined),
          hash_id = self.$object_id(),
          result = ['Hash'],
          key, item;

      try {
        if (top) {
          Opal.hash_ids = Object.create(null);
        }

        if (Opal[hash_id]) {
          return 'self';
        }

        for (key in Opal.hash_ids) {
          item = Opal.hash_ids[key];
          if (self['$eql?'](item)) {
            return 'self';
          }
        }

        Opal.hash_ids[hash_id] = self;

        for (var i = 0, keys = self.$$keys, length = keys.length; i < length; i++) {
          key = keys[i];

          if (key.$$is_string) {
            result.push([key, self.$$smap[key].$hash()]);
          } else {
            result.push([key.key_hash, key.value.$hash()]);
          }
        }

        return result.sort().join();

      } finally {
        if (top) {
          Opal.hash_ids = undefined;
        }
      }
    
    }, 0);
    
    $def(self, '$index', function $$index(object) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        if ((value)['$=='](object)) {
          return key;
        }
      }

      return nil;
    
    }, 1);
    
    $def(self, '$indexes', function $$indexes($a) {
      var $post_args, args, self = this;

      
      $post_args = $slice.call(arguments);
      args = $post_args;
      
      var result = [];

      for (var i = 0, length = args.length, key, value; i < length; i++) {
        key = args[i];
        value = $hash_get(self, key);

        if (value === undefined) {
          result.push(self.$default());
          continue;
        }

        result.push(value);
      }

      return result;
    ;
    }, -1);
    var inspect_ids;
    
    $def(self, '$inspect', function $$inspect() {
      var self = this;

      
      
      var top = (inspect_ids === undefined),
          hash_id = self.$object_id(),
          result = [];
    ;
      
      return (function() { try {
      
      
        if (top) {
          inspect_ids = {};
        }

        if (inspect_ids.hasOwnProperty(hash_id)) {
          return '{...}';
        }

        inspect_ids[hash_id] = true;

        for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
          key = keys[i];

          if (key.$$is_string) {
            value = self.$$smap[key];
          } else {
            value = key.value;
            key = key.key;
          }

          key = $$('Opal').$inspect(key)
          value = $$('Opal').$inspect(value)

          result.push(key + '=>' + value);
        }

        return '{' + result.join(', ') + '}';
      ;
      return nil;
      } finally {
        if (top) inspect_ids = undefined
      }; })();;
    }, 0);
    
    $def(self, '$invert', function $$invert() {
      var self = this;

      
      var hash = $hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        $hash_put(hash, value, key);
      }

      return hash;
    
    }, 0);
    
    $def(self, '$keep_if', function $$keep_if() {
      var block = $$keep_if.$$p || nil, self = this;

      $$keep_if.$$p = null;
      
      ;
      if (!$truthy(block)) {
        return $send(self, 'enum_for', ["keep_if"], function $$26(){var self = $$26.$$s == null ? this : $$26.$$s;

          return self.$size()}, {$$arity: 0, $$s: self})
      };
      
      $deny_frozen_access(self);

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj === false || obj === nil) {
          if ($hash_delete(self, key) !== undefined) {
            length--;
            i--;
          }
        }
      }

      return self;
    ;
    }, 0);
    
    $def(self, '$keys', function $$keys() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          result.push(key);
        } else {
          result.push(key.key);
        }
      }

      return result;
    
    }, 0);
    
    $def(self, '$length', function $$length() {
      var self = this;

      return self.$$keys.length;
    }, 0);
    
    $def(self, '$merge', function $$merge($a) {
      var block = $$merge.$$p || nil, $post_args, others, self = this;

      $$merge.$$p = null;
      
      ;
      $post_args = $slice.call(arguments);
      others = $post_args;
      return $send(self.$dup(), 'merge!', $to_a(others), block.$to_proc());
    }, -1);
    
    $def(self, '$merge!', function $Hash_merge$excl$27($a) {
      var block = $Hash_merge$excl$27.$$p || nil, $post_args, others, self = this;

      $Hash_merge$excl$27.$$p = null;
      
      ;
      $post_args = $slice.call(arguments);
      others = $post_args;
      
      $deny_frozen_access(self);
      var i, j, other, other_keys, length, key, value, other_value;
      for (i = 0; i < others.length; ++i) {
        other = $Opal['$coerce_to!'](others[i], $$$('Hash'), "to_hash");
        other_keys = other.$$keys, length = other_keys.length;

        if (block === nil) {
          for (j = 0; j < length; j++) {
            key = other_keys[j];

            if (key.$$is_string) {
              other_value = other.$$smap[key];
            } else {
              other_value = key.value;
              key = key.key;
            }

            $hash_put(self, key, other_value);
          }
        } else {
          for (j = 0; j < length; j++) {
            key = other_keys[j];

            if (key.$$is_string) {
              other_value = other.$$smap[key];
            } else {
              other_value = key.value;
              key = key.key;
            }

            value = $hash_get(self, key);

            if (value === undefined) {
              $hash_put(self, key, other_value);
              continue;
            }

            $hash_put(self, key, block(key, value, other_value));
          }
        }
      }

      return self;
    ;
    }, -1);
    
    $def(self, '$rassoc', function $$rassoc(object) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        if ((value)['$=='](object)) {
          return [key, value];
        }
      }

      return nil;
    
    }, 1);
    
    $def(self, '$rehash', function $$rehash() {
      var self = this;

      
      $deny_frozen_access(self);
      Opal.hash_rehash(self);
      return self;
    
    }, 0);
    
    $def(self, '$reject', function $$reject() {
      var block = $$reject.$$p || nil, self = this;

      $$reject.$$p = null;
      
      ;
      if (!$truthy(block)) {
        return $send(self, 'enum_for', ["reject"], function $$28(){var self = $$28.$$s == null ? this : $$28.$$s;

          return self.$size()}, {$$arity: 0, $$s: self})
      };
      
      var hash = $hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj === false || obj === nil) {
          $hash_put(hash, key, value);
        }
      }

      return hash;
    ;
    }, 0);
    
    $def(self, '$reject!', function $Hash_reject$excl$29() {
      var block = $Hash_reject$excl$29.$$p || nil, self = this;

      $Hash_reject$excl$29.$$p = null;
      
      ;
      if (!$truthy(block)) {
        return $send(self, 'enum_for', ["reject!"], function $$30(){var self = $$30.$$s == null ? this : $$30.$$s;

          return self.$size()}, {$$arity: 0, $$s: self})
      };
      
      $deny_frozen_access(self);

      var changes_were_made = false;

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj !== false && obj !== nil) {
          if ($hash_delete(self, key) !== undefined) {
            changes_were_made = true;
            length--;
            i--;
          }
        }
      }

      return changes_were_made ? self : nil;
    ;
    }, 0);
    
    $def(self, '$replace', function $$replace(other) {
      var self = this;

      
      $deny_frozen_access(self);;
      other = $Opal['$coerce_to!'](other, $$$('Hash'), "to_hash");
      
      $hash_init(self);

      for (var i = 0, other_keys = other.$$keys, length = other_keys.length, key, value, other_value; i < length; i++) {
        key = other_keys[i];

        if (key.$$is_string) {
          other_value = other.$$smap[key];
        } else {
          other_value = key.value;
          key = key.key;
        }

        $hash_put(self, key, other_value);
      }
    ;
      if ($truthy(other.$default_proc())) {
        self['$default_proc='](other.$default_proc())
      } else {
        self['$default='](other.$default())
      };
      return self;
    }, 1);
    
    $def(self, '$select', function $$select() {
      var block = $$select.$$p || nil, self = this;

      $$select.$$p = null;
      
      ;
      if (!$truthy(block)) {
        return $send(self, 'enum_for', ["select"], function $$31(){var self = $$31.$$s == null ? this : $$31.$$s;

          return self.$size()}, {$$arity: 0, $$s: self})
      };
      
      var hash = $hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj !== false && obj !== nil) {
          $hash_put(hash, key, value);
        }
      }

      return hash;
    ;
    }, 0);
    
    $def(self, '$select!', function $Hash_select$excl$32() {
      var block = $Hash_select$excl$32.$$p || nil, self = this;

      $Hash_select$excl$32.$$p = null;
      
      ;
      if (!$truthy(block)) {
        return $send(self, 'enum_for', ["select!"], function $$33(){var self = $$33.$$s == null ? this : $$33.$$s;

          return self.$size()}, {$$arity: 0, $$s: self})
      };
      
      $deny_frozen_access(self);

      var result = nil;

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj === false || obj === nil) {
          if ($hash_delete(self, key) !== undefined) {
            length--;
            i--;
          }
          result = self;
        }
      }

      return result;
    ;
    }, 0);
    
    $def(self, '$shift', function $$shift() {
      var self = this;

      
      $deny_frozen_access(self);
      var keys = self.$$keys,
          key;

      if (keys.length > 0) {
        key = keys[0];

        key = key.$$is_string ? key : key.key;

        return [key, $hash_delete(self, key)];
      }

      return self.$default(nil);
    
    }, 0);
    
    $def(self, '$slice', function $$slice($a) {
      var $post_args, keys, self = this;

      
      $post_args = $slice.call(arguments);
      keys = $post_args;
      
      var result = $hash();

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i], value = $hash_get(self, key);

        if (value !== undefined) {
          $hash_put(result, key, value);
        }
      }

      return result;
    ;
    }, -1);
    
    $def(self, '$to_a', function $$to_a() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push([key, value]);
      }

      return result;
    
    }, 0);
    
    $def(self, '$to_h', function $$to_h() {
      var block = $$to_h.$$p || nil, self = this;

      $$to_h.$$p = null;
      
      ;
      if ((block !== nil)) {
        return $send(self, 'map', [], block.$to_proc()).$to_h()
      };
      
      if (self.$$class === Opal.Hash) {
        return self;
      }

      var hash = new Opal.Hash();

      $hash_init(hash);
      Opal.hash_clone(self, hash);

      return hash;
    ;
    }, 0);
    
    $def(self, '$to_hash', $return_self, 0);
    
    $def(self, '$to_proc', function $$to_proc() {
      var self = this;

      return $send(self, 'proc', [], function $$34(key){var self = $$34.$$s == null ? this : $$34.$$s;

        
        ;
        
        if (key == null) {
          $Kernel.$raise($$$('ArgumentError'), "no key given")
        }
      ;
        return self['$[]'](key);}, {$$arity: -1, $$s: self})
    }, 0);
    
    $def(self, '$transform_keys', function $$transform_keys() {
      var block = $$transform_keys.$$p || nil, self = this;

      $$transform_keys.$$p = null;
      
      ;
      if (!$truthy(block)) {
        return $send(self, 'enum_for', ["transform_keys"], function $$35(){var self = $$35.$$s == null ? this : $$35.$$s;

          return self.$size()}, {$$arity: 0, $$s: self})
      };
      
      var result = $hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        key = $yield1(block, key);

        $hash_put(result, key, value);
      }

      return result;
    ;
    }, 0);
    
    $def(self, '$transform_keys!', function $Hash_transform_keys$excl$36() {
      var block = $Hash_transform_keys$excl$36.$$p || nil, self = this;

      $Hash_transform_keys$excl$36.$$p = null;
      
      ;
      if (!$truthy(block)) {
        return $send(self, 'enum_for', ["transform_keys!"], function $$37(){var self = $$37.$$s == null ? this : $$37.$$s;

          return self.$size()}, {$$arity: 0, $$s: self})
      };
      
      $deny_frozen_access(self);

      var keys = Opal.slice.call(self.$$keys),
          i, length = keys.length, key, value, new_key;

      for (i = 0; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        new_key = $yield1(block, key);

        $hash_delete(self, key);
        $hash_put(self, new_key, value);
      }

      return self;
    ;
    }, 0);
    
    $def(self, '$transform_values', function $$transform_values() {
      var block = $$transform_values.$$p || nil, self = this;

      $$transform_values.$$p = null;
      
      ;
      if (!$truthy(block)) {
        return $send(self, 'enum_for', ["transform_values"], function $$38(){var self = $$38.$$s == null ? this : $$38.$$s;

          return self.$size()}, {$$arity: 0, $$s: self})
      };
      
      var result = $hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        value = $yield1(block, value);

        $hash_put(result, key, value);
      }

      return result;
    ;
    }, 0);
    
    $def(self, '$transform_values!', function $Hash_transform_values$excl$39() {
      var block = $Hash_transform_values$excl$39.$$p || nil, self = this;

      $Hash_transform_values$excl$39.$$p = null;
      
      ;
      if (!$truthy(block)) {
        return $send(self, 'enum_for', ["transform_values!"], function $$40(){var self = $$40.$$s == null ? this : $$40.$$s;

          return self.$size()}, {$$arity: 0, $$s: self})
      };
      
      $deny_frozen_access(self);

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        value = $yield1(block, value);

        $hash_put(self, key, value);
      }

      return self;
    ;
    }, 0);
    
    $def(self, '$values', function $$values() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          result.push(self.$$smap[key]);
        } else {
          result.push(key.value);
        }
      }

      return result;
    
    }, 0);
    $alias(self, "dup", "clone");
    $alias(self, "each_pair", "each");
    $alias(self, "eql?", "==");
    $alias(self, "filter", "select");
    $alias(self, "filter!", "select!");
    $alias(self, "include?", "has_key?");
    $alias(self, "indices", "indexes");
    $alias(self, "key", "index");
    $alias(self, "key?", "has_key?");
    $alias(self, "member?", "has_key?");
    $alias(self, "size", "length");
    $alias(self, "store", "[]=");
    $alias(self, "to_s", "inspect");
    $alias(self, "update", "merge!");
    $alias(self, "value?", "has_value?");
    return $alias(self, "values_at", "indexes");
  })('::', null, $nesting);
};

Opal.modules["corelib/numeric"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $klass = Opal.klass, $truthy = Opal.truthy, $Kernel = Opal.Kernel, $def = Opal.def, $to_ary = Opal.to_ary, $return_self = Opal.return_self, $rb_minus = Opal.rb_minus, $rb_times = Opal.rb_times, $rb_lt = Opal.rb_lt, $eqeq = Opal.eqeq, $rb_divide = Opal.rb_divide, $return_val = Opal.return_val, $Opal = Opal.Opal, $slice = Opal.slice, $extract_kwargs = Opal.extract_kwargs, $ensure_kwargs = Opal.ensure_kwargs, $not = Opal.not, $send = Opal.send, $rb_ge = Opal.rb_ge, $rb_le = Opal.rb_le, $rb_plus = Opal.rb_plus, $rb_gt = Opal.rb_gt, $alias = Opal.alias, self = Opal.top, nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,include,instance_of?,class,Float,respond_to?,coerce,__send__,raise,equal?,-,*,div,<,-@,ceil,to_f,denominator,to_r,==,floor,/,%,Complex,zero?,numerator,abs,arg,coerce_to!,round,<=>,compare,is_a?,!,new,enum_for,to_proc,negative?,>=,<=,+,to_i,truncate,>,angle,conj,imag,rect');
  
  self.$require("corelib/comparable");
  return (function($base, $super) {
    var self = $klass($base, $super, 'Numeric');

    
    
    self.$include($$$('Comparable'));
    
    $def(self, '$coerce', function $$coerce(other) {
      var self = this;

      
      if ($truthy(other['$instance_of?'](self.$class()))) {
        return [other, self]
      };
      return [$Kernel.$Float(other), $Kernel.$Float(self)];
    }, 1);
    
    $def(self, '$__coerced__', function $$__coerced__(method, other) {
      var $a, $b, self = this, a = nil, b = nil;

      if ($truthy(other['$respond_to?']("coerce"))) {
        
        $b = other.$coerce(self), $a = $to_ary($b), (a = ($a[0] == null ? nil : $a[0])), (b = ($a[1] == null ? nil : $a[1])), $b;
        return a.$__send__(method, b);
      } else 
      switch (method) {
        case "+":
        case "-":
        case "*":
        case "/":
        case "%":
        case "&":
        case "|":
        case "^":
        case "**":
          return $Kernel.$raise($$$('TypeError'), "" + (other.$class()) + " can't be coerced into Numeric")
        case ">":
        case ">=":
        case "<":
        case "<=":
        case "<=>":
          return $Kernel.$raise($$$('ArgumentError'), "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
        default:
          return nil
      }
    }, 2);
    
    $def(self, '$<=>', function $Numeric_$lt_eq_gt$1(other) {
      var self = this;

      
      if ($truthy(self['$equal?'](other))) {
        return 0
      };
      return nil;
    }, 1);
    
    $def(self, '$+@', $return_self, 0);
    
    $def(self, '$-@', function $Numeric_$minus$$2() {
      var self = this;

      return $rb_minus(0, self)
    }, 0);
    
    $def(self, '$%', function $Numeric_$percent$3(other) {
      var self = this;

      return $rb_minus(self, $rb_times(other, self.$div(other)))
    }, 1);
    
    $def(self, '$abs', function $$abs() {
      var self = this;

      if ($rb_lt(self, 0)) {
        return self['$-@']()
      } else {
        return self
      }
    }, 0);
    
    $def(self, '$abs2', function $$abs2() {
      var self = this;

      return $rb_times(self, self)
    }, 0);
    
    $def(self, '$angle', function $$angle() {
      var self = this;

      if ($rb_lt(self, 0)) {
        return $$$($$$('Math'), 'PI')
      } else {
        return 0
      }
    }, 0);
    
    $def(self, '$ceil', function $$ceil(ndigits) {
      var self = this;

      
      if (ndigits == null) ndigits = 0;
      return self.$to_f().$ceil(ndigits);
    }, -1);
    
    $def(self, '$conj', $return_self, 0);
    
    $def(self, '$denominator', function $$denominator() {
      var self = this;

      return self.$to_r().$denominator()
    }, 0);
    
    $def(self, '$div', function $$div(other) {
      var self = this;

      
      if ($eqeq(other, 0)) {
        $Kernel.$raise($$$('ZeroDivisionError'), "divided by o")
      };
      return $rb_divide(self, other).$floor();
    }, 1);
    
    $def(self, '$divmod', function $$divmod(other) {
      var self = this;

      return [self.$div(other), self['$%'](other)]
    }, 1);
    
    $def(self, '$fdiv', function $$fdiv(other) {
      var self = this;

      return $rb_divide(self.$to_f(), other)
    }, 1);
    
    $def(self, '$floor', function $$floor(ndigits) {
      var self = this;

      
      if (ndigits == null) ndigits = 0;
      return self.$to_f().$floor(ndigits);
    }, -1);
    
    $def(self, '$i', function $$i() {
      var self = this;

      return $Kernel.$Complex(0, self)
    }, 0);
    
    $def(self, '$imag', $return_val(0), 0);
    
    $def(self, '$integer?', $return_val(false), 0);
    
    $def(self, '$nonzero?', function $Numeric_nonzero$ques$4() {
      var self = this;

      if ($truthy(self['$zero?']())) {
        return nil
      } else {
        return self
      }
    }, 0);
    
    $def(self, '$numerator', function $$numerator() {
      var self = this;

      return self.$to_r().$numerator()
    }, 0);
    
    $def(self, '$polar', function $$polar() {
      var self = this;

      return [self.$abs(), self.$arg()]
    }, 0);
    
    $def(self, '$quo', function $$quo(other) {
      var self = this;

      return $rb_divide($Opal['$coerce_to!'](self, $$$('Rational'), "to_r"), other)
    }, 1);
    
    $def(self, '$real', $return_self, 0);
    
    $def(self, '$real?', $return_val(true), 0);
    
    $def(self, '$rect', function $$rect() {
      var self = this;

      return [self, 0]
    }, 0);
    
    $def(self, '$round', function $$round(digits) {
      var self = this;

      
      ;
      return self.$to_f().$round(digits);
    }, -1);
    
    $def(self, '$step', function $$step($a, $b, $c) {
      var block = $$step.$$p || nil, $post_args, $kwargs, limit, step, to, by, self = this, counter = nil;

      $$step.$$p = null;
      
      ;
      $post_args = $slice.call(arguments);
      $kwargs = $extract_kwargs($post_args);
      $kwargs = $ensure_kwargs($kwargs);
      
      if ($post_args.length > 0) limit = $post_args.shift();;
      
      if ($post_args.length > 0) step = $post_args.shift();;
      
      to = $kwargs.$$smap["to"];;
      
      by = $kwargs.$$smap["by"];;
      
      if (limit !== undefined && to !== undefined) {
        $Kernel.$raise($$$('ArgumentError'), "to is given twice")
      }

      if (step !== undefined && by !== undefined) {
        $Kernel.$raise($$$('ArgumentError'), "step is given twice")
      }

      if (to !== undefined) {
        limit = to;
      }

      if (by !== undefined) {
        step = by;
      }

      if (limit === undefined) {
        limit = nil;
      }

      function validateParameters() {
        if (step === nil) {
          $Kernel.$raise($$$('TypeError'), "step must be numeric")
        }

        if (step != null && step['$=='](0)) {
          $Kernel.$raise($$$('ArgumentError'), "step can't be 0")
        }

        if (step === nil || step == null) {
          step = 1;
        }

        var sign = step['$<=>'](0);

        if (sign === nil) {
          $Kernel.$raise($$$('ArgumentError'), "0 can't be coerced into " + (step.$class()))
        }

        if (limit === nil || limit == null) {
          limit = sign > 0 ? $$$($$$('Float'), 'INFINITY') : $$$($$$('Float'), 'INFINITY')['$-@']();
        }

        $Opal.$compare(self, limit)
      }

      function stepFloatSize() {
        if ((step > 0 && self > limit) || (step < 0 && self < limit)) {
          return 0;
        } else if (step === Infinity || step === -Infinity) {
          return 1;
        } else {
          var abs = Math.abs, floor = Math.floor,
              err = (abs(self) + abs(limit) + abs(limit - self)) / abs(step) * $$$($$$('Float'), 'EPSILON');

          if (err === Infinity || err === -Infinity) {
            return 0;
          } else {
            if (err > 0.5) {
              err = 0.5;
            }

            return floor((limit - self) / step + err) + 1
          }
        }
      }

      function stepSize() {
        validateParameters();

        if (step === 0) {
          return Infinity;
        }

        if (step % 1 !== 0) {
          return stepFloatSize();
        } else if ((step > 0 && self > limit) || (step < 0 && self < limit)) {
          return 0;
        } else {
          var ceil = Math.ceil, abs = Math.abs,
              lhs = abs(self - limit) + 1,
              rhs = abs(step);

          return ceil(lhs / rhs);
        }
      }

    ;
      if (!(block !== nil)) {
        if ((($not(limit) || ($truthy(limit['$is_a?']($$$('Numeric'))))) && (($not(step) || ($truthy(step['$is_a?']($$$('Numeric')))))))) {
          return $$$($$$('Enumerator'), 'ArithmeticSequence').$new([limit, step, ($truthy(to) ? ("to: ") : nil), ($truthy(by) ? ("by: ") : nil)], self)
        } else {
          return $send(self, 'enum_for', ["step", limit, step], (stepSize).$to_proc())
        }
      };
      
      validateParameters();

      var isDesc = step['$negative?'](),
          isInf = step['$=='](0) ||
                  (limit === Infinity && !isDesc) ||
                  (limit === -Infinity && isDesc);

      if (self.$$is_number && step.$$is_number && limit.$$is_number) {
        if (self % 1 === 0 && (isInf || limit % 1 === 0) && step % 1 === 0) {
          var value = self;

          if (isInf) {
            for (;; value += step) {
              block(value);
            }
          } else if (isDesc) {
            for (; value >= limit; value += step) {
              block(value);
            }
          } else {
            for (; value <= limit; value += step) {
              block(value);
            }
          }

          return self;
        } else {
          var begin = self.$to_f().valueOf();
          step = step.$to_f().valueOf();
          limit = limit.$to_f().valueOf();

          var n = stepFloatSize();

          if (!isFinite(step)) {
            if (n !== 0) block(begin);
          } else if (step === 0) {
            while (true) {
              block(begin);
            }
          } else {
            for (var i = 0; i < n; i++) {
              var d = i * step + self;
              if (step >= 0 ? limit < d : limit > d) {
                d = limit;
              }
              block(d);
            }
          }

          return self;
        }
      }
    ;
      counter = self;
      while ($truthy(isDesc ? $rb_ge(counter, limit) : $rb_le(counter, limit))) {
      
        Opal.yield1(block, counter);
        counter = $rb_plus(counter, step);
      };
    }, -1);
    
    $def(self, '$to_c', function $$to_c() {
      var self = this;

      return $Kernel.$Complex(self, 0)
    }, 0);
    
    $def(self, '$to_int', function $$to_int() {
      var self = this;

      return self.$to_i()
    }, 0);
    
    $def(self, '$truncate', function $$truncate(ndigits) {
      var self = this;

      
      if (ndigits == null) ndigits = 0;
      return self.$to_f().$truncate(ndigits);
    }, -1);
    
    $def(self, '$zero?', function $Numeric_zero$ques$5() {
      var self = this;

      return self['$=='](0)
    }, 0);
    
    $def(self, '$positive?', function $Numeric_positive$ques$6() {
      var self = this;

      return $rb_gt(self, 0)
    }, 0);
    
    $def(self, '$negative?', function $Numeric_negative$ques$7() {
      var self = this;

      return $rb_lt(self, 0)
    }, 0);
    
    $def(self, '$dup', $return_self, 0);
    
    $def(self, '$clone', function $$clone($kwargs) {
      var freeze, self = this;

      
      $kwargs = $ensure_kwargs($kwargs);
      
      freeze = $kwargs.$$smap["freeze"];if (freeze == null) freeze = true;
      return self;
    }, -1);
    
    $def(self, '$finite?', $return_val(true), 0);
    
    $def(self, '$infinite?', $return_val(nil), 0);
    $alias(self, "arg", "angle");
    $alias(self, "conjugate", "conj");
    $alias(self, "imaginary", "imag");
    $alias(self, "magnitude", "abs");
    $alias(self, "modulo", "%");
    $alias(self, "phase", "arg");
    return $alias(self, "rectangular", "rect");
  })('::', null);
};

Opal.modules["corelib/enumerator"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $slice = Opal.slice, $coerce_to = Opal.coerce_to, $deny_frozen_access = Opal.deny_frozen_access, $klass = Opal.klass, $defs = Opal.defs, $truthy = Opal.truthy, $send = Opal.send, $not = Opal.not, $def = Opal.def, $rb_plus = Opal.rb_plus, $to_a = Opal.to_a, $Opal = Opal.Opal, $send2 = Opal.send2, $find_super = Opal.find_super, $rb_ge = Opal.rb_ge, $Kernel = Opal.Kernel, $rb_le = Opal.rb_le, $alias = Opal.alias, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,include,allocate,new,to_proc,!,respond_to?,empty?,nil?,+,class,__send__,call,enum_for,size,destructure,map,>=,length,raise,[],peek_values,<=,next_values,inspect,any?,each_with_object,autoload');
  
  self.$require("corelib/enumerable");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Enumerator');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.size = $proto.args = $proto.object = $proto.method = $proto.values = $proto.cursor = nil;
    
    self.$include($$$('Enumerable'));
    self.$$prototype.$$is_enumerator = true;
    $defs(self, '$for', function $Enumerator_for$1(object, $a, $b) {
      var block = $Enumerator_for$1.$$p || nil, $post_args, method, args, self = this;

      $Enumerator_for$1.$$p = null;
      
      ;
      $post_args = $slice.call(arguments, 1);
      
      if ($post_args.length > 0) method = $post_args.shift();if (method == null) method = "each";
      args = $post_args;
      
      var obj = self.$allocate();

      obj.object = object;
      obj.size   = block;
      obj.method = method;
      obj.args   = args;
      obj.cursor = 0;

      return obj;
    ;
    }, -2);
    
    $def(self, '$initialize', function $$initialize($a) {
      var block = $$initialize.$$p || nil, $post_args, $rest_arg, self = this;

      $$initialize.$$p = null;
      
      ;
      $post_args = $slice.call(arguments);
      $rest_arg = $post_args;
      $deny_frozen_access(self);
      self.cursor = 0;
      if ($truthy(block)) {
        
        self.object = $send($$('Generator'), 'new', [], block.$to_proc());
        self.method = "each";
        self.args = [];
        self.size = arguments[0] || nil;
        if (($truthy(self.size) && ($not(self.size['$respond_to?']("call"))))) {
          return (self.size = $coerce_to(self.size, $$$('Integer'), 'to_int'))
        } else {
          return nil
        };
      } else {
        
        self.object = arguments[0];
        self.method = arguments[1] || "each";
        self.args = $slice.call(arguments, 2);
        return (self.size = nil);
      };
    }, -1);
    
    $def(self, '$each', function $$each($a) {
      var block = $$each.$$p || nil, $post_args, args, self = this;

      $$each.$$p = null;
      
      ;
      $post_args = $slice.call(arguments);
      args = $post_args;
      if (($truthy(block['$nil?']()) && ($truthy(args['$empty?']())))) {
        return self
      };
      args = $rb_plus(self.args, args);
      if ($truthy(block['$nil?']())) {
        return $send(self.$class(), 'new', [self.object, self.method].concat($to_a(args)))
      };
      return $send(self.object, '__send__', [self.method].concat($to_a(args)), block.$to_proc());
    }, -1);
    
    $def(self, '$size', function $$size() {
      var self = this;

      if ($truthy(self.size['$respond_to?']("call"))) {
        return $send(self.size, 'call', $to_a(self.args))
      } else {
        return self.size
      }
    }, 0);
    
    $def(self, '$with_index', function $$with_index(offset) {
      var block = $$with_index.$$p || nil, self = this;

      $$with_index.$$p = null;
      
      ;
      if (offset == null) offset = 0;
      offset = ($truthy(offset) ? ($coerce_to(offset, $$$('Integer'), 'to_int')) : (0));
      if (!$truthy(block)) {
        return $send(self, 'enum_for', ["with_index", offset], function $$2(){var self = $$2.$$s == null ? this : $$2.$$s;

          return self.$size()}, {$$arity: 0, $$s: self})
      };
      
      var result, index = offset;

      self.$each.$$p = function() {
        var param = $Opal.$destructure(arguments),
            value = block(param, index);

        index++;

        return value;
      }

      return self.$each();
    ;
    }, -1);
    
    $def(self, '$each_with_index', function $$each_with_index() {
      var block = $$each_with_index.$$p || nil, self = this;

      $$each_with_index.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return $send(self, 'enum_for', ["each_with_index"], function $$3(){var self = $$3.$$s == null ? this : $$3.$$s;

          return self.$size()}, {$$arity: 0, $$s: self})
      };
      $send2(self, $find_super(self, 'each_with_index', $$each_with_index, false, true), 'each_with_index', [], block);
      return self.object;
    }, 0);
    
    $def(self, '$rewind', function $$rewind() {
      var self = this;

      
      self.cursor = 0;
      return self;
    }, 0);
    
    $def(self, '$peek_values', function $$peek_values() {
      var self = this, $ret_or_1 = nil;

      
      self.values = ($truthy(($ret_or_1 = self.values)) ? ($ret_or_1) : ($send(self, 'map', [], function $$4($a){var $post_args, i;

        
        $post_args = $slice.call(arguments);
        i = $post_args;
        return i;}, -1)));
      if ($truthy($rb_ge(self.cursor, self.values.$length()))) {
        $Kernel.$raise($$$('StopIteration'), "iteration reached an end")
      };
      return self.values['$[]'](self.cursor);
    }, 0);
    
    $def(self, '$peek', function $$peek() {
      var self = this, values = nil;

      
      values = self.$peek_values();
      if ($truthy($rb_le(values.$length(), 1))) {
        return values['$[]'](0)
      } else {
        return values
      };
    }, 0);
    
    $def(self, '$next_values', function $$next_values() {
      var self = this, out = nil;

      
      out = self.$peek_values();
      self.cursor = $rb_plus(self.cursor, 1);
      return out;
    }, 0);
    
    $def(self, '$next', function $$next() {
      var self = this, values = nil;

      
      values = self.$next_values();
      if ($truthy($rb_le(values.$length(), 1))) {
        return values['$[]'](0)
      } else {
        return values
      };
    }, 0);
    
    $def(self, '$feed', function $$feed(arg) {
      var self = this;

      return self.$raise($$('NotImplementedError'), "Opal doesn't support Enumerator#feed")
    }, 1);
    
    $def(self, '$+', function $Enumerator_$plus$5(other) {
      var self = this;

      return $$$($$$('Enumerator'), 'Chain').$new(self, other)
    }, 1);
    
    $def(self, '$inspect', function $$inspect() {
      var self = this, result = nil;

      
      result = "#<" + (self.$class()) + ": " + (self.object.$inspect()) + ":" + (self.method);
      if ($truthy(self.args['$any?']())) {
        result = $rb_plus(result, "(" + (self.args.$inspect()['$[]']($$$('Range').$new(1, -2))) + ")")
      };
      return $rb_plus(result, ">");
    }, 0);
    $alias(self, "with_object", "each_with_object");
    self.$autoload("ArithmeticSequence", "corelib/enumerator/arithmetic_sequence");
    self.$autoload("Chain", "corelib/enumerator/chain");
    self.$autoload("Generator", "corelib/enumerator/generator");
    self.$autoload("Lazy", "corelib/enumerator/lazy");
    return self.$autoload("Yielder", "corelib/enumerator/yielder");
  })('::', null, $nesting);
};

Opal.modules["corelib/constants"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $const_set = Opal.const_set, nil = Opal.nil, $$$ = Opal.$$$;

  
  $const_set('::', 'RUBY_PLATFORM', "opal");
  $const_set('::', 'RUBY_ENGINE', "opal");
  $const_set('::', 'RUBY_VERSION', "3.1.0");
  $const_set('::', 'RUBY_ENGINE_VERSION', "1.6.1");
  $const_set('::', 'RUBY_RELEASE_DATE', "2022-12-09");
  $const_set('::', 'RUBY_PATCHLEVEL', 0);
  $const_set('::', 'RUBY_REVISION', "0");
  $const_set('::', 'RUBY_COPYRIGHT', "opal - Copyright (C) 2013-2022 Adam Beynon and the Opal contributors");
  return $const_set('::', 'RUBY_DESCRIPTION', "opal " + ($$$('RUBY_ENGINE_VERSION')) + " (" + ($$$('RUBY_RELEASE_DATE')) + " revision " + ($$$('RUBY_REVISION')) + ")");
};

Opal.modules["corelib/enumerator/lazy"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $truthy = Opal.truthy, $coerce_to = Opal.coerce_to, $yield1 = Opal.yield1, $yieldX = Opal.yieldX, $deny_frozen_access = Opal.deny_frozen_access, $klass = Opal.klass, $slice = Opal.slice, $send2 = Opal.send2, $find_super = Opal.find_super, $to_a = Opal.to_a, $defs = Opal.defs, $Kernel = Opal.Kernel, $send = Opal.send, $def = Opal.def, $return_self = Opal.return_self, $Opal = Opal.Opal, $rb_lt = Opal.rb_lt, $eqeqeq = Opal.eqeqeq, $rb_plus = Opal.rb_plus, $alias = Opal.alias, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('raise,each,new,enumerator_size,yield,respond_to?,try_convert,<,===,+,for,class,to_proc,destructure,inspect,to_a,find_all,collect_concat,collect,enum_for');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Enumerator');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Lazy');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.enumerator = nil;
      
      $klass(self, $$$('Exception'), 'StopLazyError');
      $defs(self, '$for', function $Lazy_for$1(object, $a) {
        var $post_args, $rest_arg, $yield = $Lazy_for$1.$$p || nil, self = this, lazy = nil;

        $Lazy_for$1.$$p = null;
        
        $post_args = $slice.call(arguments, 1);
        $rest_arg = $post_args;
        lazy = $send2(self, $find_super(self, 'for', $Lazy_for$1, false, true), 'for', [object].concat($to_a($rest_arg)), $yield);
        lazy.enumerator = object;
        return lazy;
      }, -2);
      
      $def(self, '$initialize', function $$initialize(object, size) {
        var block = $$initialize.$$p || nil, self = this;

        $$initialize.$$p = null;
        
        ;
        if (size == null) size = nil;
        $deny_frozen_access(self);
        if (!(block !== nil)) {
          $Kernel.$raise($$$('ArgumentError'), "tried to call lazy new without a block")
        };
        self.enumerator = object;
        return $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [size], function $$2(yielder, $a){var $post_args, each_args;

          
          if (yielder == null) yielder = nil;
          $post_args = $slice.call(arguments, 1);
          each_args = $post_args;
          try {
            return $send(object, 'each', $to_a(each_args), function $$3($b){var $post_args, args;

              
              $post_args = $slice.call(arguments);
              args = $post_args;
              
            args.unshift(yielder);

            $yieldX(block, args);
          ;}, -1)
          } catch ($err) {
            if (Opal.rescue($err, [$$('StopLazyError')])) {
              try {
                return nil
              } finally { Opal.pop_exception(); }
            } else { throw $err; }
          };}, -2);
      }, -2);
      
      $def(self, '$lazy', $return_self, 0);
      
      $def(self, '$collect', function $$collect() {
        var block = $$collect.$$p || nil, self = this;

        $$collect.$$p = null;
        
        ;
        if (!$truthy(block)) {
          $Kernel.$raise($$$('ArgumentError'), "tried to call lazy map without a block")
        };
        return $send($$('Lazy'), 'new', [self, self.$enumerator_size()], function $$4(enum$, $a){var $post_args, args;

          
          if (enum$ == null) enum$ = nil;
          $post_args = $slice.call(arguments, 1);
          args = $post_args;
          
          var value = $yieldX(block, args);

          enum$.$yield(value);
        ;}, -2);
      }, 0);
      
      $def(self, '$collect_concat', function $$collect_concat() {
        var block = $$collect_concat.$$p || nil, self = this;

        $$collect_concat.$$p = null;
        
        ;
        if (!$truthy(block)) {
          $Kernel.$raise($$$('ArgumentError'), "tried to call lazy map without a block")
        };
        return $send($$('Lazy'), 'new', [self, nil], function $$5(enum$, $a){var $post_args, args;

          
          if (enum$ == null) enum$ = nil;
          $post_args = $slice.call(arguments, 1);
          args = $post_args;
          
          var value = $yieldX(block, args);

          if ((value)['$respond_to?']("force") && (value)['$respond_to?']("each")) {
            $send((value), 'each', [], function $$6(v){
            
            if (v == null) v = nil;
            return enum$.$yield(v);}, 1)
          }
          else {
            var array = $Opal.$try_convert(value, $$$('Array'), "to_ary");

            if (array === nil) {
              enum$.$yield(value);
            }
            else {
              $send((value), 'each', [], function $$7(v){
            
            if (v == null) v = nil;
            return enum$.$yield(v);}, 1);
            }
          }
        ;}, -2);
      }, 0);
      
      $def(self, '$drop', function $$drop(n) {
        var self = this, current_size = nil, set_size = nil, dropped = nil;

        
        n = $coerce_to(n, $$$('Integer'), 'to_int');
        if ($truthy($rb_lt(n, 0))) {
          $Kernel.$raise($$$('ArgumentError'), "attempt to drop negative size")
        };
        current_size = self.$enumerator_size();
        set_size = ($eqeqeq($$$('Integer'), current_size) ? (($truthy($rb_lt(n, current_size)) ? (n) : (current_size))) : (current_size));
        dropped = 0;
        return $send($$('Lazy'), 'new', [self, set_size], function $$8(enum$, $a){var $post_args, args;

          
          if (enum$ == null) enum$ = nil;
          $post_args = $slice.call(arguments, 1);
          args = $post_args;
          if ($truthy($rb_lt(dropped, n))) {
            return (dropped = $rb_plus(dropped, 1))
          } else {
            return $send(enum$, 'yield', $to_a(args))
          };}, -2);
      }, 1);
      
      $def(self, '$drop_while', function $$drop_while() {
        var block = $$drop_while.$$p || nil, self = this, succeeding = nil;

        $$drop_while.$$p = null;
        
        ;
        if (!$truthy(block)) {
          $Kernel.$raise($$$('ArgumentError'), "tried to call lazy drop_while without a block")
        };
        succeeding = true;
        return $send($$('Lazy'), 'new', [self, nil], function $$9(enum$, $a){var $post_args, args;

          
          if (enum$ == null) enum$ = nil;
          $post_args = $slice.call(arguments, 1);
          args = $post_args;
          if ($truthy(succeeding)) {
            
            var value = $yieldX(block, args);

            if (!$truthy(value)) {
              succeeding = false;

              $send(enum$, 'yield', $to_a(args));
            }
          
          } else {
            return $send(enum$, 'yield', $to_a(args))
          };}, -2);
      }, 0);
      
      $def(self, '$enum_for', function $$enum_for($a, $b) {
        var block = $$enum_for.$$p || nil, $post_args, method, args, self = this;

        $$enum_for.$$p = null;
        
        ;
        $post_args = $slice.call(arguments);
        
        if ($post_args.length > 0) method = $post_args.shift();if (method == null) method = "each";
        args = $post_args;
        return $send(self.$class(), 'for', [self, method].concat($to_a(args)), block.$to_proc());
      }, -1);
      
      $def(self, '$find_all', function $$find_all() {
        var block = $$find_all.$$p || nil, self = this;

        $$find_all.$$p = null;
        
        ;
        if (!$truthy(block)) {
          $Kernel.$raise($$$('ArgumentError'), "tried to call lazy select without a block")
        };
        return $send($$('Lazy'), 'new', [self, nil], function $$10(enum$, $a){var $post_args, args;

          
          if (enum$ == null) enum$ = nil;
          $post_args = $slice.call(arguments, 1);
          args = $post_args;
          
          var value = $yieldX(block, args);

          if ($truthy(value)) {
            $send(enum$, 'yield', $to_a(args));
          }
        ;}, -2);
      }, 0);
      
      $def(self, '$grep', function $$grep(pattern) {
        var block = $$grep.$$p || nil, self = this;

        $$grep.$$p = null;
        
        ;
        if ($truthy(block)) {
          return $send($$('Lazy'), 'new', [self, nil], function $$11(enum$, $a){var $post_args, args;

            
            if (enum$ == null) enum$ = nil;
            $post_args = $slice.call(arguments, 1);
            args = $post_args;
            
            var param = $Opal.$destructure(args),
                value = pattern['$==='](param);

            if ($truthy(value)) {
              value = $yield1(block, param);

              enum$.$yield($yield1(block, param));
            }
          ;}, -2)
        } else {
          return $send($$('Lazy'), 'new', [self, nil], function $$12(enum$, $a){var $post_args, args;

            
            if (enum$ == null) enum$ = nil;
            $post_args = $slice.call(arguments, 1);
            args = $post_args;
            
            var param = $Opal.$destructure(args),
                value = pattern['$==='](param);

            if ($truthy(value)) {
              enum$.$yield(param);
            }
          ;}, -2)
        };
      }, 1);
      
      $def(self, '$reject', function $$reject() {
        var block = $$reject.$$p || nil, self = this;

        $$reject.$$p = null;
        
        ;
        if (!$truthy(block)) {
          $Kernel.$raise($$$('ArgumentError'), "tried to call lazy reject without a block")
        };
        return $send($$('Lazy'), 'new', [self, nil], function $$13(enum$, $a){var $post_args, args;

          
          if (enum$ == null) enum$ = nil;
          $post_args = $slice.call(arguments, 1);
          args = $post_args;
          
          var value = $yieldX(block, args);

          if (!$truthy(value)) {
            $send(enum$, 'yield', $to_a(args));
          }
        ;}, -2);
      }, 0);
      
      $def(self, '$take', function $$take(n) {
        var self = this, current_size = nil, set_size = nil, taken = nil;

        
        n = $coerce_to(n, $$$('Integer'), 'to_int');
        if ($truthy($rb_lt(n, 0))) {
          $Kernel.$raise($$$('ArgumentError'), "attempt to take negative size")
        };
        current_size = self.$enumerator_size();
        set_size = ($eqeqeq($$$('Integer'), current_size) ? (($truthy($rb_lt(n, current_size)) ? (n) : (current_size))) : (current_size));
        taken = 0;
        return $send($$('Lazy'), 'new', [self, set_size], function $$14(enum$, $a){var $post_args, args;

          
          if (enum$ == null) enum$ = nil;
          $post_args = $slice.call(arguments, 1);
          args = $post_args;
          if ($truthy($rb_lt(taken, n))) {
            
            $send(enum$, 'yield', $to_a(args));
            return (taken = $rb_plus(taken, 1));
          } else {
            return $Kernel.$raise($$('StopLazyError'))
          };}, -2);
      }, 1);
      
      $def(self, '$take_while', function $$take_while() {
        var block = $$take_while.$$p || nil, self = this;

        $$take_while.$$p = null;
        
        ;
        if (!$truthy(block)) {
          $Kernel.$raise($$$('ArgumentError'), "tried to call lazy take_while without a block")
        };
        return $send($$('Lazy'), 'new', [self, nil], function $$15(enum$, $a){var $post_args, args;

          
          if (enum$ == null) enum$ = nil;
          $post_args = $slice.call(arguments, 1);
          args = $post_args;
          
          var value = $yieldX(block, args);

          if ($truthy(value)) {
            $send(enum$, 'yield', $to_a(args));
          }
          else {
            $Kernel.$raise($$('StopLazyError'));
          }
        ;}, -2);
      }, 0);
      
      $def(self, '$inspect', function $$inspect() {
        var self = this;

        return "#<" + (self.$class()) + ": " + (self.enumerator.$inspect()) + ">"
      }, 0);
      $alias(self, "force", "to_a");
      $alias(self, "filter", "find_all");
      $alias(self, "flat_map", "collect_concat");
      $alias(self, "map", "collect");
      $alias(self, "select", "find_all");
      return $alias(self, "to_enum", "enum_for");
    })(self, self, $nesting)
  })('::', null, $nesting)
};

Opal.modules["corelib/enumerator/yielder"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $klass = Opal.klass, $def = Opal.def, $slice = Opal.slice, $send = Opal.send, $to_a = Opal.to_a, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('yield,proc');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Enumerator');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super) {
      var self = $klass($base, $super, 'Yielder');

      var $proto = self.$$prototype;

      $proto.block = nil;
      
      
      $def(self, '$initialize', function $$initialize() {
        var block = $$initialize.$$p || nil, self = this;

        $$initialize.$$p = null;
        
        ;
        self.block = block;
        return self;
      }, 0);
      
      $def(self, '$yield', function $Yielder_yield$1($a) {
        var $post_args, values, self = this;

        
        $post_args = $slice.call(arguments);
        values = $post_args;
        
        var value = Opal.yieldX(self.block, values);

        if (value && value.$thrower_type == "break") {
          throw value;
        }

        return value;
      ;
      }, -1);
      
      $def(self, '$<<', function $Yielder_$lt$lt$2(value) {
        var self = this;

        
        self.$yield(value);
        return self;
      }, 1);
      return $def(self, '$to_proc', function $$to_proc() {
        var self = this;

        return $send(self, 'proc', [], function $$3($a){var $post_args, values, self = $$3.$$s == null ? this : $$3.$$s;

          
          $post_args = $slice.call(arguments);
          values = $post_args;
          return $send(self, 'yield', $to_a(values));}, {$$arity: -1, $$s: self})
      }, 0);
    })($nesting[0], null)
  })($nesting[0], null, $nesting)
};

Opal.modules["corelib/enumerator/arithmetic_sequence"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $klass = Opal.klass, $truthy = Opal.truthy, $to_a = Opal.to_a, $eqeq = Opal.eqeq, $Kernel = Opal.Kernel, $def = Opal.def, $rb_gt = Opal.rb_gt, $rb_lt = Opal.rb_lt, $rb_le = Opal.rb_le, $rb_ge = Opal.rb_ge, $rb_plus = Opal.rb_plus, $rb_minus = Opal.rb_minus, $eqeqeq = Opal.eqeqeq, $not = Opal.not, $rb_times = Opal.rb_times, $rb_divide = Opal.rb_divide, $alias = Opal.alias, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('is_a?,==,raise,respond_to?,class,attr_reader,begin,end,exclude_end?,>,step,<,<=,>=,-@,_lesser_than_end?,<<,+,-,===,%,_greater_than_begin?,reverse,!,include?,*,to_i,abs,/,hash,inspect');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Enumerator');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'ArithmeticSequence');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.step_arg2 = $proto.receiver_num = $proto.step_arg1 = $proto.step = $proto.range = $proto.topfx = $proto.bypfx = $proto.creation_method = $proto.skipped_arg = nil;
      
      Opal.prop(self.$$prototype, '$$is_arithmetic_seq', true);
      var inf = Infinity;
      
      $def(self, '$initialize', function $$initialize(range, step, creation_method) {
        var $a, self = this, $ret_or_1 = nil;

        
        ;
        if (creation_method == null) creation_method = "step";
        self.creation_method = creation_method;
        if ($truthy(range['$is_a?']($$$('Array')))) {
          
          $a = [].concat($to_a(range)), (self.step_arg1 = ($a[0] == null ? nil : $a[0])), (self.step_arg2 = ($a[1] == null ? nil : $a[1])), (self.topfx = ($a[2] == null ? nil : $a[2])), (self.bypfx = ($a[3] == null ? nil : $a[3])), $a;
          self.receiver_num = step;
          self.step = 1;
          self.range = ($truthy(self.step_arg2) ? (((self.step = self.step_arg2), Opal.Range.$new(self.receiver_num, self.step_arg1, false))) : ($truthy(self.step_arg1) ? (Opal.Range.$new(self.receiver_num, self.step_arg1, false)) : (Opal.Range.$new(self.receiver_num, nil, false))));
        } else {
          
          if (!$truthy(step)) {
            self.skipped_arg = true
          };
          $a = [range, ($truthy(($ret_or_1 = step)) ? ($ret_or_1) : (1))], (self.range = $a[0]), (self.step = $a[1]), $a;
        };
        self.object = self;
        if ($eqeq(self.step, 0)) {
          $Kernel.$raise($$('ArgumentError'), "step can't be 0")
        };
        if ($truthy(self.step['$respond_to?']("to_int"))) {
          return nil
        } else {
          return $Kernel.$raise($$('ArgumentError'), "" + ("no implicit conversion of " + (self.step.$class()) + " ") + "into Integer")
        };
      }, -2);
      self.$attr_reader("step");
      
      $def(self, '$begin', function $$begin() {
        var self = this;

        return self.range.$begin()
      }, 0);
      
      $def(self, '$end', function $$end() {
        var self = this;

        return self.range.$end()
      }, 0);
      
      $def(self, '$exclude_end?', function $ArithmeticSequence_exclude_end$ques$1() {
        var self = this;

        return self.range['$exclude_end?']()
      }, 0);
      
      $def(self, '$_lesser_than_end?', function $ArithmeticSequence__lesser_than_end$ques$2(val) {
        var self = this, end_ = nil, $ret_or_1 = nil;

        
        end_ = ($truthy(($ret_or_1 = self.$end())) ? ($ret_or_1) : (inf));
        if ($truthy($rb_gt(self.$step(), 0))) {
          if ($truthy(self['$exclude_end?']())) {
            return $rb_lt(val, end_)
          } else {
            return $rb_le(val, end_)
          }
        } else if ($truthy(self['$exclude_end?']())) {
          return $rb_gt(val, end_)
        } else {
          return $rb_ge(val, end_)
        };
      }, 1);
      
      $def(self, '$_greater_than_begin?', function $ArithmeticSequence__greater_than_begin$ques$3(val) {
        var self = this, begin_ = nil, $ret_or_1 = nil;

        
        begin_ = ($truthy(($ret_or_1 = self.$begin())) ? ($ret_or_1) : ((inf)['$-@']()));
        if ($truthy($rb_gt(self.$step(), 0))) {
          return $rb_gt(val, begin_)
        } else {
          return $rb_lt(val, begin_)
        };
      }, 1);
      
      $def(self, '$first', function $$first(count) {
        var self = this, iter = nil, $ret_or_1 = nil, out = nil;

        
        ;
        iter = ($truthy(($ret_or_1 = self.$begin())) ? ($ret_or_1) : ((inf)['$-@']()));
        if (!$truthy(count)) {
          return ($truthy(self['$_lesser_than_end?'](iter)) ? (iter) : (nil))
        };
        out = [];
        while ($truthy(($truthy(($ret_or_1 = self['$_lesser_than_end?'](iter))) ? ($rb_gt(count, 0)) : ($ret_or_1)))) {
        
          out['$<<'](iter);
          iter = $rb_plus(iter, self.$step());
          count = $rb_minus(count, 1);
        };
        return out;
      }, -1);
      
      $def(self, '$each', function $$each() {
        var block = $$each.$$p || nil, self = this, $ret_or_1 = nil, iter = nil;

        $$each.$$p = null;
        
        ;
        if (!(block !== nil)) {
          return self
        };
        if ($eqeqeq(nil, ($ret_or_1 = self.$begin()))) {
          $Kernel.$raise($$('TypeError'), "nil can't be coerced into Integer")
        } else {
          nil
        };
        iter = ($truthy(($ret_or_1 = self.$begin())) ? ($ret_or_1) : ((inf)['$-@']()));
        while ($truthy(self['$_lesser_than_end?'](iter))) {
        
          Opal.yield1(block, iter);
          iter = $rb_plus(iter, self.$step());
        };
        return self;
      }, 0);
      
      $def(self, '$last', function $$last(count) {
        var self = this, $ret_or_1 = nil, iter = nil, out = nil;

        
        ;
        if (($eqeqeq(inf, ($ret_or_1 = self.$end())) || ($eqeqeq((inf)['$-@'](), $ret_or_1)))) {
          $Kernel.$raise($$$('FloatDomainError'), self.$end())
        } else if ($eqeqeq(nil, $ret_or_1)) {
          $Kernel.$raise($$$('RangeError'), "cannot get the last element of endless arithmetic sequence")
        } else {
          nil
        };
        iter = $rb_minus(self.$end(), $rb_minus(self.$end(), self.$begin())['$%'](self.$step()));
        if (!$truthy(self['$_lesser_than_end?'](iter))) {
          iter = $rb_minus(iter, self.$step())
        };
        if (!$truthy(count)) {
          return ($truthy(self['$_greater_than_begin?'](iter)) ? (iter) : (nil))
        };
        out = [];
        while ($truthy(($truthy(($ret_or_1 = self['$_greater_than_begin?'](iter))) ? ($rb_gt(count, 0)) : ($ret_or_1)))) {
        
          out['$<<'](iter);
          iter = $rb_minus(iter, self.$step());
          count = $rb_minus(count, 1);
        };
        return out.$reverse();
      }, -1);
      
      $def(self, '$size', function $$size() {
        var self = this, step_sign = nil, iter = nil;

        
        step_sign = ($truthy($rb_gt(self.$step(), 0)) ? (1) : (-1));
        if ($not(self['$_lesser_than_end?'](self.$begin()))) {
          return 0
        } else if ($truthy([(inf)['$-@'](), inf]['$include?'](self.$step()))) {
          return 1
        } else if (($truthy([$rb_times((inf)['$-@'](), step_sign), nil]['$include?'](self.$begin())) || ($truthy([$rb_times(inf, step_sign), nil]['$include?'](self.$end()))))) {
          return inf;
        } else {
          
          iter = $rb_minus(self.$end(), $rb_minus(self.$end(), self.$begin())['$%'](self.$step()));
          if (!$truthy(self['$_lesser_than_end?'](iter))) {
            iter = $rb_minus(iter, self.$step())
          };
          return $rb_plus($rb_divide($rb_minus(iter, self.$begin()), self.$step()).$abs().$to_i(), 1);
        };
      }, 0);
      
      $def(self, '$==', function $ArithmeticSequence_$eq_eq$4(other) {
        var self = this, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil, $ret_or_4 = nil;

        if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = ($truthy(($ret_or_3 = ($truthy(($ret_or_4 = self.$class()['$=='](other.$class()))) ? (self.$begin()['$=='](other.$begin())) : ($ret_or_4)))) ? (self.$end()['$=='](other.$end())) : ($ret_or_3)))) ? (self.$step()['$=='](other.$step())) : ($ret_or_2))))) {
          return self['$exclude_end?']()['$=='](other['$exclude_end?']())
        } else {
          return $ret_or_1
        }
      }, 1);
      
      $def(self, '$hash', function $$hash() {
        var self = this;

        return [self.$begin(), self.$end(), self.$step(), self['$exclude_end?']()].$hash()
      }, 0);
      
      $def(self, '$inspect', function $$inspect() {
        var self = this, args = nil;

        if ($truthy(self.receiver_num)) {
          
          args = ($truthy(self.step_arg2) ? ("(" + (self.topfx) + (self.step_arg1.$inspect()) + ", " + (self.bypfx) + (self.step_arg2.$inspect()) + ")") : ($truthy(self.step_arg1) ? ("(" + (self.topfx) + (self.step_arg1.$inspect()) + ")") : nil));
          return "(" + (self.receiver_num.$inspect()) + "." + (self.creation_method) + (args) + ")";
        } else {
          
          args = ($truthy(self.skipped_arg) ? (nil) : ("(" + (self.step) + ")"));
          return "((" + (self.range.$inspect()) + ")." + (self.creation_method) + (args) + ")";
        }
      }, 0);
      $alias(self, "===", "==");
      return $alias(self, "eql?", "==");
    })(self, self, $nesting)
  })('::', null, $nesting)
};

Opal.modules["corelib/module"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $truthy = Opal.truthy, $coerce_to = Opal.coerce_to, $const_set = Opal.const_set, $Object = Opal.Object, $return_ivar = Opal.return_ivar, $assign_ivar = Opal.assign_ivar, $ivar = Opal.ivar, $deny_frozen_access = Opal.deny_frozen_access, $freeze = Opal.freeze, $prop = Opal.prop, $klass = Opal.klass, $defs = Opal.defs, $send = Opal.send, $def = Opal.def, $eqeqeq = Opal.eqeqeq, $Module = Opal.Module, $Kernel = Opal.Kernel, $rb_lt = Opal.rb_lt, $rb_gt = Opal.rb_gt, $slice = Opal.slice, $to_a = Opal.to_a, $hash2 = Opal.hash2, $Opal = Opal.Opal, $eqeq = Opal.eqeq, $return_val = Opal.return_val, $lambda = Opal.lambda, $range = Opal.range, $send2 = Opal.send2, $find_super = Opal.find_super, $alias = Opal.alias, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('module_eval,to_proc,===,raise,equal?,<,>,nil?,attr_reader,attr_writer,warn,attr_accessor,const_name?,class_variable_name!,const_name!,=~,new,inject,split,const_get,==,start_with?,!~,bind,call,class,frozen?,name,append_features,included,cover?,size,merge,compile,proc,any?,prepend_features,prepended,to_s,__id__,constants,include?,copy_class_variables,copy_constants,class_exec,module_exec,inspect');
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Module');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $defs(self, '$allocate', function $$allocate() {
      var self = this;

      
      var module = Opal.allocate_module(nil, function(){});
      // Link the prototype of Module subclasses
      if (self !== Opal.Module) Object.setPrototypeOf(module, self.$$prototype);
      return module;
    
    }, 0);
    
    $def(self, '$initialize', function $$initialize() {
      var block = $$initialize.$$p || nil, self = this;

      $$initialize.$$p = null;
      
      ;
      if ((block !== nil)) {
        return $send(self, 'module_eval', [], block.$to_proc())
      } else {
        return nil
      };
    }, 0);
    
    $def(self, '$===', function $Module_$eq_eq_eq$1(object) {
      var self = this;

      
      if ($truthy(object == null)) {
        return false
      };
      return Opal.is_a(object, self);;
    }, 1);
    
    $def(self, '$<', function $Module_$lt$2(other) {
      var self = this;

      
      if (!$eqeqeq($Module, other)) {
        $Kernel.$raise($$$('TypeError'), "compared with non class/module")
      };
      
      var working = self,
          ancestors,
          i, length;

      if (working === other) {
        return false;
      }

      for (i = 0, ancestors = Opal.ancestors(self), length = ancestors.length; i < length; i++) {
        if (ancestors[i] === other) {
          return true;
        }
      }

      for (i = 0, ancestors = Opal.ancestors(other), length = ancestors.length; i < length; i++) {
        if (ancestors[i] === self) {
          return false;
        }
      }

      return nil;
    ;
    }, 1);
    
    $def(self, '$<=', function $Module_$lt_eq$3(other) {
      var self = this, $ret_or_1 = nil;

      if ($truthy(($ret_or_1 = self['$equal?'](other)))) {
        return $ret_or_1
      } else {
        return $rb_lt(self, other)
      }
    }, 1);
    
    $def(self, '$>', function $Module_$gt$4(other) {
      var self = this;

      
      if (!$eqeqeq($Module, other)) {
        $Kernel.$raise($$$('TypeError'), "compared with non class/module")
      };
      return $rb_lt(other, self);
    }, 1);
    
    $def(self, '$>=', function $Module_$gt_eq$5(other) {
      var self = this, $ret_or_1 = nil;

      if ($truthy(($ret_or_1 = self['$equal?'](other)))) {
        return $ret_or_1
      } else {
        return $rb_gt(self, other)
      }
    }, 1);
    
    $def(self, '$<=>', function $Module_$lt_eq_gt$6(other) {
      var self = this, lt = nil;

      
      
      if (self === other) {
        return 0;
      }
    ;
      if (!$eqeqeq($Module, other)) {
        return nil
      };
      lt = $rb_lt(self, other);
      if ($truthy(lt['$nil?']())) {
        return nil
      };
      if ($truthy(lt)) {
        return -1
      } else {
        return 1
      };
    }, 1);
    
    $def(self, '$alias_method', function $$alias_method(newname, oldname) {
      var self = this;

      
      $deny_frozen_access(self);
      newname = $coerce_to(newname, $$$('String'), 'to_str');
      oldname = $coerce_to(oldname, $$$('String'), 'to_str');
      Opal.alias(self, newname, oldname);
      return self;
    }, 2);
    
    $def(self, '$alias_native', function $$alias_native(mid, jsid) {
      var self = this;

      
      if (jsid == null) jsid = mid;
      $deny_frozen_access(self);
      Opal.alias_native(self, mid, jsid);
      return self;
    }, -2);
    
    $def(self, '$ancestors', function $$ancestors() {
      var self = this;

      return Opal.ancestors(self);
    }, 0);
    
    $def(self, '$append_features', function $$append_features(includer) {
      var self = this;

      
      $deny_frozen_access(includer);
      Opal.append_features(self, includer);
      return self;
    }, 1);
    
    $def(self, '$attr_accessor', function $$attr_accessor($a) {
      var $post_args, names, self = this;

      
      $post_args = $slice.call(arguments);
      names = $post_args;
      $send(self, 'attr_reader', $to_a(names));
      return $send(self, 'attr_writer', $to_a(names));
    }, -1);
    
    $def(self, '$attr', function $$attr($a) {
      var $post_args, args, self = this;

      
      $post_args = $slice.call(arguments);
      args = $post_args;
      
      if (args.length == 2 && (args[1] === true || args[1] === false)) {
        self.$warn("optional boolean argument is obsoleted", $hash2(["uplevel"], {"uplevel": 1}))

        args[1] ? self.$attr_accessor(args[0]) : self.$attr_reader(args[0]);
        return nil;
      }
    ;
      return $send(self, 'attr_reader', $to_a(args));
    }, -1);
    
    $def(self, '$attr_reader', function $$attr_reader($a) {
      var $post_args, names, self = this;

      
      $post_args = $slice.call(arguments);
      names = $post_args;
      
      $deny_frozen_access(self);

      var proto = self.$$prototype;

      for (var i = names.length - 1; i >= 0; i--) {
        var name = names[i],
            id   = '$' + name,
            ivar = $ivar(name);

        var body = $return_ivar(ivar);

        // initialize the instance variable as nil
        Opal.prop(proto, ivar, nil);

        body.$$parameters = [];
        body.$$arity = 0;

        Opal.defn(self, id, body);
      }
    ;
      return nil;
    }, -1);
    
    $def(self, '$attr_writer', function $$attr_writer($a) {
      var $post_args, names, self = this;

      
      $post_args = $slice.call(arguments);
      names = $post_args;
      
      $deny_frozen_access(self);

      var proto = self.$$prototype;

      for (var i = names.length - 1; i >= 0; i--) {
        var name = names[i],
            id   = '$' + name + '=',
            ivar = $ivar(name);

        var body = $assign_ivar(ivar)

        body.$$parameters = [['req']];
        body.$$arity = 1;

        // initialize the instance variable as nil
        Opal.prop(proto, ivar, nil);

        Opal.defn(self, id, body);
      }
    ;
      return nil;
    }, -1);
    
    $def(self, '$autoload', function $$autoload(const$, path) {
      var self = this;

      
      $deny_frozen_access(self);

      if (!$$('Opal')['$const_name?'](const$)) {
        $Kernel.$raise($$$('NameError'), "autoload must be constant name: " + (const$))
      }

      if (path == "") {
        $Kernel.$raise($$$('ArgumentError'), "empty file name")
      }

      if (!self.$$const.hasOwnProperty(const$)) {
        if (!self.$$autoload) {
          self.$$autoload = {};
        }
        Opal.const_cache_version++;
        self.$$autoload[const$] = { path: path, loaded: false, required: false, success: false, exception: false };
      }
      return nil;
    
    }, 2);
    
    $def(self, '$autoload?', function $Module_autoload$ques$7(const$) {
      var self = this;

      
      if (self.$$autoload && self.$$autoload[const$] && !self.$$autoload[const$].required && !self.$$autoload[const$].success) {
        return self.$$autoload[const$].path;
      }

      var ancestors = self.$ancestors();

      for (var i = 0, length = ancestors.length; i < length; i++) {
        if (ancestors[i].$$autoload && ancestors[i].$$autoload[const$] && !ancestors[i].$$autoload[const$].required && !ancestors[i].$$autoload[const$].success) {
          return ancestors[i].$$autoload[const$].path;
        }
      }
      return nil;
    
    }, 1);
    
    $def(self, '$class_variables', function $$class_variables() {
      var self = this;

      return Object.keys(Opal.class_variables(self));
    }, 0);
    
    $def(self, '$class_variable_get', function $$class_variable_get(name) {
      var self = this;

      
      name = $Opal['$class_variable_name!'](name);
      return Opal.class_variable_get(self, name, false);;
    }, 1);
    
    $def(self, '$class_variable_set', function $$class_variable_set(name, value) {
      var self = this;

      
      $deny_frozen_access(self);
      name = $Opal['$class_variable_name!'](name);
      return Opal.class_variable_set(self, name, value);;
    }, 2);
    
    $def(self, '$class_variable_defined?', function $Module_class_variable_defined$ques$8(name) {
      var self = this;

      
      name = $Opal['$class_variable_name!'](name);
      return Opal.class_variables(self).hasOwnProperty(name);;
    }, 1);
    
    $def(self, '$remove_class_variable', function $$remove_class_variable(name) {
      var self = this;

      
      $deny_frozen_access(self);
      name = $Opal['$class_variable_name!'](name);
      
      if (Opal.hasOwnProperty.call(self.$$cvars, name)) {
        var value = self.$$cvars[name];
        delete self.$$cvars[name];
        return value;
      } else {
        $Kernel.$raise($$$('NameError'), "cannot remove " + (name) + " for " + (self))
      }
    ;
    }, 1);
    
    $def(self, '$constants', function $$constants(inherit) {
      var self = this;

      
      if (inherit == null) inherit = true;
      return Opal.constants(self, inherit);;
    }, -1);
    $defs(self, '$constants', function $$constants(inherit) {
      var self = this;

      
      ;
      
      if (inherit == null) {
        var nesting = (self.$$nesting || []).concat($Object),
            constant, constants = {},
            i, ii;

        for(i = 0, ii = nesting.length; i < ii; i++) {
          for (constant in nesting[i].$$const) {
            constants[constant] = true;
          }
        }
        return Object.keys(constants);
      } else {
        return Opal.constants(self, inherit)
      }
    ;
    }, -1);
    $defs(self, '$nesting', function $$nesting() {
      var self = this;

      return self.$$nesting || [];
    }, 0);
    
    $def(self, '$const_defined?', function $Module_const_defined$ques$9(name, inherit) {
      var self = this;

      
      if (inherit == null) inherit = true;
      name = $$('Opal')['$const_name!'](name);
      if (!$truthy(name['$=~']($$$($Opal, 'CONST_NAME_REGEXP')))) {
        $Kernel.$raise($$$('NameError').$new("wrong constant name " + (name), name))
      };
      
      var module, modules = [self], module_constants, i, ii;

      // Add up ancestors if inherit is true
      if (inherit) {
        modules = modules.concat(Opal.ancestors(self));

        // Add Object's ancestors if it's a module – modules have no ancestors otherwise
        if (self.$$is_module) {
          modules = modules.concat([$Object]).concat(Opal.ancestors($Object));
        }
      }

      for (i = 0, ii = modules.length; i < ii; i++) {
        module = modules[i];
        if (module.$$const[name] != null) { return true; }
        if (
          module.$$autoload &&
          module.$$autoload[name] &&
          !module.$$autoload[name].required &&
          !module.$$autoload[name].success
        ) {
          return true;
        }
      }

      return false;
    ;
    }, -2);
    
    $def(self, '$const_get', function $$const_get(name, inherit) {
      var self = this;

      
      if (inherit == null) inherit = true;
      name = $$('Opal')['$const_name!'](name);
      
      if (name.indexOf('::') === 0 && name !== '::'){
        name = name.slice(2);
      }
    ;
      if ($truthy(name.indexOf('::') != -1 && name != '::')) {
        return $send(name.$split("::"), 'inject', [self], function $$10(o, c){
          
          if (o == null) o = nil;
          if (c == null) c = nil;
          return o.$const_get(c);}, 2)
      };
      if (!$truthy(name['$=~']($$$($Opal, 'CONST_NAME_REGEXP')))) {
        $Kernel.$raise($$$('NameError').$new("wrong constant name " + (name), name))
      };
      
      if (inherit) {
        return Opal.$$([self], name);
      } else {
        return Opal.const_get_local(self, name);
      }
    ;
    }, -2);
    
    $def(self, '$const_missing', function $$const_missing(name) {
      var self = this, full_const_name = nil;

      
      full_const_name = ($eqeq(self, $Object) ? (name) : ("" + (self) + "::" + (name)));
      return $Kernel.$raise($$$('NameError').$new("uninitialized constant " + (full_const_name), name));
    }, 1);
    
    $def(self, '$const_set', function $$const_set(name, value) {
      var self = this;

      
      $deny_frozen_access(self);
      name = $Opal['$const_name!'](name);
      if (($truthy(name['$!~']($$$($Opal, 'CONST_NAME_REGEXP'))) || ($truthy(name['$start_with?']("::"))))) {
        $Kernel.$raise($$$('NameError').$new("wrong constant name " + (name), name))
      };
      $const_set(self, name, value);
      return value;
    }, 2);
    
    $def(self, '$public_constant', $return_val(nil), 0);
    
    $def(self, '$define_method', function $$define_method(name, method) {
      var block = $$define_method.$$p || nil, self = this, $ret_or_1 = nil, $ret_or_2 = nil;

      $$define_method.$$p = null;
      
      ;
      ;
      
      $deny_frozen_access(self);

      if (method === undefined && block === nil)
        $Kernel.$raise($$$('ArgumentError'), "tried to create a Proc object without a block")
    ;
      block = ($truthy(($ret_or_1 = block)) ? ($ret_or_1) : ($eqeqeq($$$('Proc'), ($ret_or_2 = method)) ? (method) : ($eqeqeq($$$('Method'), $ret_or_2) ? (method.$to_proc().$$unbound) : ($eqeqeq($$$('UnboundMethod'), $ret_or_2) ? ($lambda(function $$11($a){var $post_args, args, self = $$11.$$s == null ? this : $$11.$$s, bound = nil;

        
        $post_args = $slice.call(arguments);
        args = $post_args;
        bound = method.$bind(self);
        return $send(bound, 'call', $to_a(args));}, {$$arity: -1, $$s: self})) : ($Kernel.$raise($$$('TypeError'), "wrong argument type " + (block.$class()) + " (expected Proc/Method)"))))));
      
      if (typeof(Proxy) !== 'undefined') {
        var meta = Object.create(null)

        block.$$proxy_target = block
        block = new Proxy(block, {
          apply: function(target, self, args) {
            var old_name = target.$$jsid
            target.$$jsid = name;
            try {
              return target.apply(self, args);
            } catch(e) {
              if (e === target.$$brk || e === target.$$ret) return e.$v;
              throw e;
            } finally {
              target.$$jsid = old_name
            }
          }
        })
      }

      block.$$jsid        = name;
      block.$$s           = null;
      block.$$def         = block;
      block.$$define_meth = true;

      return Opal.defn(self, '$' + name, block);
    ;
    }, -2);
    
    $def(self, '$freeze', function $$freeze() {
      var self = this;

      
      if ($truthy(self['$frozen?']())) {
        return self
      };
      
      if (!self.hasOwnProperty('$$base_module')) { $prop(self, '$$base_module', null); }

      return $freeze(self);
    ;
    }, 0);
    
    $def(self, '$remove_method', function $$remove_method($a) {
      var $post_args, names, self = this;

      
      $post_args = $slice.call(arguments);
      names = $post_args;
      
      for (var i = 0; i < names.length; i++) {
        var name = names[i];
        if (!(typeof name === "string" || name.$$is_string)) {
          self.$raise($$$('TypeError'), "" + (self.$name()) + " is not a symbol nor a string")
        }
        $deny_frozen_access(self);

        Opal.rdef(self, "$" + name);
      }
    ;
      return self;
    }, -1);
    
    $def(self, '$singleton_class?', function $Module_singleton_class$ques$12() {
      var self = this;

      return !!self.$$is_singleton;
    }, 0);
    
    $def(self, '$include', function $$include($a) {
      var $post_args, mods, self = this;

      
      $post_args = $slice.call(arguments);
      mods = $post_args;
      
      for (var i = mods.length - 1; i >= 0; i--) {
        var mod = mods[i];

        if (!mod.$$is_module) {
          $Kernel.$raise($$$('TypeError'), "wrong argument type " + ((mod).$class()) + " (expected Module)");
        }

        (mod).$append_features(self);
        (mod).$included(self);
      }
    ;
      return self;
    }, -1);
    
    $def(self, '$included_modules', function $$included_modules() {
      var self = this;

      return Opal.included_modules(self);
    }, 0);
    
    $def(self, '$include?', function $Module_include$ques$13(mod) {
      var self = this;

      
      if (!mod.$$is_module) {
        $Kernel.$raise($$$('TypeError'), "wrong argument type " + ((mod).$class()) + " (expected Module)");
      }

      var i, ii, mod2, ancestors = Opal.ancestors(self);

      for (i = 0, ii = ancestors.length; i < ii; i++) {
        mod2 = ancestors[i];
        if (mod2 === mod && mod2 !== self) {
          return true;
        }
      }

      return false;
    
    }, 1);
    
    $def(self, '$instance_method', function $$instance_method(name) {
      var self = this;

      
      var meth = self.$$prototype['$' + name];

      if (!meth || meth.$$stub) {
        $Kernel.$raise($$$('NameError').$new("undefined method `" + (name) + "' for class `" + (self.$name()) + "'", name));
      }

      return $$$('UnboundMethod').$new(self, meth.$$owner || self, meth, name);
    
    }, 1);
    
    $def(self, '$instance_methods', function $$instance_methods(include_super) {
      var self = this;

      
      if (include_super == null) include_super = true;
      
      if ($truthy(include_super)) {
        return Opal.instance_methods(self);
      } else {
        return Opal.own_instance_methods(self);
      }
    ;
    }, -1);
    
    $def(self, '$included', $return_val(nil), 0);
    
    $def(self, '$extended', $return_val(nil), 0);
    
    $def(self, '$extend_object', function $$extend_object(object) {
      
      
      $deny_frozen_access(object);
      return nil;
    }, 1);
    
    $def(self, '$method_added', function $$method_added($a) {
      var $post_args, $rest_arg;

      
      $post_args = $slice.call(arguments);
      $rest_arg = $post_args;
      return nil;
    }, -1);
    
    $def(self, '$method_removed', function $$method_removed($a) {
      var $post_args, $rest_arg;

      
      $post_args = $slice.call(arguments);
      $rest_arg = $post_args;
      return nil;
    }, -1);
    
    $def(self, '$method_undefined', function $$method_undefined($a) {
      var $post_args, $rest_arg;

      
      $post_args = $slice.call(arguments);
      $rest_arg = $post_args;
      return nil;
    }, -1);
    
    $def(self, '$module_eval', function $$module_eval($a) {
      var block = $$module_eval.$$p || nil, $post_args, args, $b, self = this, string = nil, file = nil, _lineno = nil, default_eval_options = nil, $ret_or_1 = nil, compiling_options = nil, compiled = nil;

      $$module_eval.$$p = null;
      
      ;
      $post_args = $slice.call(arguments);
      args = $post_args;
      if (($truthy(block['$nil?']()) && ($truthy(!!Opal.compile)))) {
        
        if (!$truthy($range(1, 3, false)['$cover?'](args.$size()))) {
          $Kernel.$raise($$$('ArgumentError'), "wrong number of arguments (0 for 1..3)")
        };
        $b = [].concat($to_a(args)), (string = ($b[0] == null ? nil : $b[0])), (file = ($b[1] == null ? nil : $b[1])), (_lineno = ($b[2] == null ? nil : $b[2])), $b;
        default_eval_options = $hash2(["file", "eval"], {"file": ($truthy(($ret_or_1 = file)) ? ($ret_or_1) : ("(eval)")), "eval": true});
        compiling_options = Opal.hash({ arity_check: false }).$merge(default_eval_options);
        compiled = $Opal.$compile(string, compiling_options);
        block = $send($Kernel, 'proc', [], function $$14(){var self = $$14.$$s == null ? this : $$14.$$s;

          return new Function("Opal,self", "return " + compiled)(Opal, self);}, {$$arity: 0, $$s: self});
      } else if ($truthy(args['$any?']())) {
        $Kernel.$raise($$$('ArgumentError'), "" + ("wrong number of arguments (" + (args.$size()) + " for 0)") + "\n\n  NOTE:If you want to enable passing a String argument please add \"require 'opal-parser'\" to your script\n")
      };
      
      var old = block.$$s,
          result;

      block.$$s = null;
      result = block.apply(self, [self]);
      block.$$s = old;

      return result;
    ;
    }, -1);
    
    $def(self, '$module_exec', function $$module_exec($a) {
      var block = $$module_exec.$$p || nil, $post_args, args, self = this;

      $$module_exec.$$p = null;
      
      ;
      $post_args = $slice.call(arguments);
      args = $post_args;
      
      if (block === nil) {
        $Kernel.$raise($$$('LocalJumpError'), "no block given")
      }

      var block_self = block.$$s, result;

      block.$$s = null;
      result = block.apply(self, args);
      block.$$s = block_self;

      return result;
    ;
    }, -1);
    
    $def(self, '$method_defined?', function $Module_method_defined$ques$15(method) {
      var self = this;

      
      var body = self.$$prototype['$' + method];
      return (!!body) && !body.$$stub;
    
    }, 1);
    
    $def(self, '$module_function', function $$module_function($a) {
      var $post_args, methods, self = this;

      
      $post_args = $slice.call(arguments);
      methods = $post_args;
      
      $deny_frozen_access(self);

      if (methods.length === 0) {
        self.$$module_function = true;
        return nil;
      }
      else {
        for (var i = 0, length = methods.length; i < length; i++) {
          var meth = methods[i],
              id   = '$' + meth,
              func = self.$$prototype[id];

          Opal.defs(self, id, func);
        }
        return methods.length === 1 ? methods[0] : methods;
      }

      return self;
    ;
    }, -1);
    
    $def(self, '$name', function $$name() {
      var self = this;

      
      if (self.$$full_name) {
        return self.$$full_name;
      }

      var result = [], base = self;

      while (base) {
        // Give up if any of the ancestors is unnamed
        if (base.$$name === nil || base.$$name == null) return nil;

        result.unshift(base.$$name);

        base = base.$$base_module;

        if (base === $Object) {
          break;
        }
      }

      if (result.length === 0) {
        return nil;
      }

      return self.$$full_name = result.join('::');
    
    }, 0);
    
    $def(self, '$prepend', function $$prepend($a) {
      var $post_args, mods, self = this;

      
      $post_args = $slice.call(arguments);
      mods = $post_args;
      
      if (mods.length === 0) {
        $Kernel.$raise($$$('ArgumentError'), "wrong number of arguments (given 0, expected 1+)")
      }

      for (var i = mods.length - 1; i >= 0; i--) {
        var mod = mods[i];

        if (!mod.$$is_module) {
          $Kernel.$raise($$$('TypeError'), "wrong argument type " + ((mod).$class()) + " (expected Module)");
        }

        (mod).$prepend_features(self);
        (mod).$prepended(self);
      }
    ;
      return self;
    }, -1);
    
    $def(self, '$prepend_features', function $$prepend_features(prepender) {
      var self = this;

      
      
      $deny_frozen_access(prepender);

      if (!self.$$is_module) {
        $Kernel.$raise($$$('TypeError'), "wrong argument type " + (self.$class()) + " (expected Module)");
      }

      Opal.prepend_features(self, prepender)
    ;
      return self;
    }, 1);
    
    $def(self, '$prepended', $return_val(nil), 0);
    
    $def(self, '$remove_const', function $$remove_const(name) {
      var self = this;

      
      $deny_frozen_access(self);
      return Opal.const_remove(self, name);;
    }, 1);
    
    $def(self, '$to_s', function $$to_s() {
      var self = this, $ret_or_1 = nil;

      if ($truthy(($ret_or_1 = Opal.Module.$name.call(self)))) {
        return $ret_or_1
      } else {
        return "#<" + (self.$$is_module ? 'Module' : 'Class') + ":0x" + (self.$__id__().$to_s(16)) + ">"
      }
    }, 0);
    
    $def(self, '$undef_method', function $$undef_method($a) {
      var $post_args, names, self = this;

      
      $post_args = $slice.call(arguments);
      names = $post_args;
      
      for (var i = 0; i < names.length; i++) {
        var name = names[i];
        if (!(typeof name === "string" || name.$$is_string)) {
          self.$raise($$$('TypeError'), "" + (self.$name()) + " is not a symbol nor a string")
        }
        $deny_frozen_access(self);

        Opal.udef(self, "$" + names[i]);
      }
    ;
      return self;
    }, -1);
    
    $def(self, '$instance_variables', function $$instance_variables() {
      var self = this, consts = nil;

      
      consts = (Opal.Module.$$nesting = $nesting, self.$constants());
      
      var result = [];

      for (var name in self) {
        if (self.hasOwnProperty(name) && name.charAt(0) !== '$' && name !== 'constructor' && !consts['$include?'](name)) {
          result.push('@' + name);
        }
      }

      return result;
    ;
    }, 0);
    
    $def(self, '$dup', function $$dup() {
      var $yield = $$dup.$$p || nil, self = this, copy = nil;

      $$dup.$$p = null;
      
      copy = $send2(self, $find_super(self, 'dup', $$dup, false, true), 'dup', [], $yield);
      copy.$copy_class_variables(self);
      copy.$copy_constants(self);
      return copy;
    }, 0);
    
    $def(self, '$copy_class_variables', function $$copy_class_variables(other) {
      var self = this;

      
      for (var name in other.$$cvars) {
        self.$$cvars[name] = other.$$cvars[name];
      }
    
    }, 1);
    
    $def(self, '$copy_constants', function $$copy_constants(other) {
      var self = this;

      
      var name, other_constants = other.$$const;

      for (name in other_constants) {
        $const_set(self, name, other_constants[name]);
      }
    
    }, 1);
    
    $def(self, '$refine', function $$refine(klass) {
      var block = $$refine.$$p || nil, $a, self = this, refinement_module = nil, m = nil, klass_id = nil;

      $$refine.$$p = null;
      
      ;
      $a = [self, nil, nil], (refinement_module = $a[0]), (m = $a[1]), (klass_id = $a[2]), $a;
      
      klass_id = Opal.id(klass);
      if (typeof self.$$refine_modules === "undefined") {
        self.$$refine_modules = {};
      }
      if (typeof self.$$refine_modules[klass_id] === "undefined") {
        m = self.$$refine_modules[klass_id] = $$$('Refinement').$new();
      }
      else {
        m = self.$$refine_modules[klass_id];
      }
      m.refinement_module = refinement_module
      m.refined_class = klass
    ;
      $send(m, 'class_exec', [], block.$to_proc());
      return m;
    }, 1);
    
    $def(self, '$using', function $$using(mod) {
      
      return $Kernel.$raise("Module#using is not permitted in methods")
    }, 1);
    $alias(self, "class_eval", "module_eval");
    $alias(self, "class_exec", "module_exec");
    return $alias(self, "inspect", "to_s");
  })('::', null, $nesting);
  return (function($base, $super) {
    var self = $klass($base, $super, 'Refinement');

    var $proto = self.$$prototype;

    $proto.refinement_module = $proto.refined_class = nil;
    return $def(self, '$inspect', function $$inspect() {
      var $yield = $$inspect.$$p || nil, self = this;

      $$inspect.$$p = null;
      if ($truthy(self.refinement_module)) {
        return "#<refinement:" + (self.refined_class.$inspect()) + "@" + (self.refinement_module.$inspect()) + ">"
      } else {
        return $send2(self, $find_super(self, 'inspect', $$inspect, false, true), 'inspect', [], $yield)
      }
    }, 0)
  })('::', $Module);
};

Opal.modules["corelib/helpers"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $type_error = Opal.type_error, $coerce_to = Opal.coerce_to, $module = Opal.module, $defs = Opal.defs, $slice = Opal.slice, $eqeqeq = Opal.eqeqeq, $Kernel = Opal.Kernel, $truthy = Opal.truthy, $Opal = Opal.Opal, nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('===,raise,respond_to?,nil?,__send__,<=>,class,coerce_to!,new,to_s,__id__');
  return (function($base) {
    var self = $module($base, 'Opal');

    
    
    $defs(self, '$bridge', function $$bridge(constructor, klass) {
      
      return Opal.bridge(constructor, klass);
    }, 2);
    $defs(self, '$coerce_to!', function $Opal_coerce_to$excl$1(object, type, method, $a) {
      var $post_args, args, coerced = nil;

      
      $post_args = $slice.call(arguments, 3);
      args = $post_args;
      coerced = $coerce_to(object, type, method, args);
      if (!$eqeqeq(type, coerced)) {
        $Kernel.$raise($type_error(object, type, method, coerced))
      };
      return coerced;
    }, -4);
    $defs(self, '$coerce_to?', function $Opal_coerce_to$ques$2(object, type, method, $a) {
      var $post_args, args, coerced = nil;

      
      $post_args = $slice.call(arguments, 3);
      args = $post_args;
      if (!$truthy(object['$respond_to?'](method))) {
        return nil
      };
      coerced = $coerce_to(object, type, method, args);
      if ($truthy(coerced['$nil?']())) {
        return nil
      };
      if (!$eqeqeq(type, coerced)) {
        $Kernel.$raise($type_error(object, type, method, coerced))
      };
      return coerced;
    }, -4);
    $defs(self, '$try_convert', function $$try_convert(object, type, method) {
      
      
      if ($eqeqeq(type, object)) {
        return object
      };
      if ($truthy(object['$respond_to?'](method))) {
        return object.$__send__(method)
      } else {
        return nil
      };
    }, 3);
    $defs(self, '$compare', function $$compare(a, b) {
      var compare = nil;

      
      compare = a['$<=>'](b);
      if ($truthy(compare === nil)) {
        $Kernel.$raise($$$('ArgumentError'), "comparison of " + (a.$class()) + " with " + (b.$class()) + " failed")
      };
      return compare;
    }, 2);
    $defs(self, '$destructure', function $$destructure(args) {
      
      
      if (args.length == 1) {
        return args[0];
      }
      else if (args.$$is_array) {
        return args;
      }
      else {
        var args_ary = new Array(args.length);
        for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = args[i]; }

        return args_ary;
      }
    
    }, 1);
    $defs(self, '$respond_to?', function $Opal_respond_to$ques$3(obj, method, include_all) {
      
      
      if (include_all == null) include_all = false;
      
      if (obj == null || !obj.$$class) {
        return false;
      }
    ;
      return obj['$respond_to?'](method, include_all);
    }, -3);
    $defs(self, '$instance_variable_name!', function $Opal_instance_variable_name$excl$4(name) {
      
      
      name = $Opal['$coerce_to!'](name, $$$('String'), "to_str");
      if (!$truthy(/^@[a-zA-Z_][a-zA-Z0-9_]*?$/.test(name))) {
        $Kernel.$raise($$$('NameError').$new("'" + (name) + "' is not allowed as an instance variable name", name))
      };
      return name;
    }, 1);
    $defs(self, '$class_variable_name!', function $Opal_class_variable_name$excl$5(name) {
      
      
      name = $Opal['$coerce_to!'](name, $$$('String'), "to_str");
      if ($truthy(name.length < 3 || name.slice(0,2) !== '@@')) {
        $Kernel.$raise($$$('NameError').$new("`" + (name) + "' is not allowed as a class variable name", name))
      };
      return name;
    }, 1);
    $defs(self, '$const_name?', function $Opal_const_name$ques$6(const_name) {
      
      
      if (typeof const_name !== 'string') {
        (const_name = $Opal['$coerce_to!'](const_name, $$$('String'), "to_str"))
      }

      return const_name[0] === const_name[0].toUpperCase()
    
    }, 1);
    $defs(self, '$const_name!', function $Opal_const_name$excl$7(const_name) {
      var $a, self = this;

      
      if ($truthy((($a = $$$('::', 'String', 'skip_raise')) ? 'constant' : nil))) {
        const_name = $Opal['$coerce_to!'](const_name, $$$('String'), "to_str")
      };
      
      if (!const_name || const_name[0] != const_name[0].toUpperCase()) {
        self.$raise($$$('NameError'), "wrong constant name " + (const_name))
      }
    ;
      return const_name;
    }, 1);
    $defs(self, '$pristine', function $$pristine(owner_class, $a) {
      var $post_args, method_names;

      
      $post_args = $slice.call(arguments, 1);
      method_names = $post_args;
      
      var method_name, method;
      for (var i = method_names.length - 1; i >= 0; i--) {
        method_name = method_names[i];
        method = owner_class.$$prototype['$'+method_name];

        if (method && !method.$$stub) {
          method.$$pristine = true;
        }
      }
    ;
      return nil;
    }, -2);
    var inspect_stack = [];
    return $defs(self, '$inspect', function $$inspect(value) {
      var e = nil;

      
      ;
      var pushed = false;
      
      return (function() { try {
      try {
        
        
        if (value === null) {
          // JS null value
          return 'null';
        }
        else if (value === undefined) {
          // JS undefined value
          return 'undefined';
        }
        else if (typeof value.$$class === 'undefined') {
          // JS object / other value that is not bridged
          return Object.prototype.toString.apply(value);
        }
        else if (typeof value.$inspect !== 'function' || value.$inspect.$$stub) {
          // BasicObject and friends
          return "#<" + (value.$$class) + ":0x" + (value.$__id__().$to_s(16)) + ">"
        }
        else if (inspect_stack.indexOf(value.$__id__()) !== -1) {
          // inspect recursing inside inspect to find out about the
          // same object
          return "#<" + (value.$$class) + ":0x" + (value.$__id__().$to_s(16)) + ">"
        }
        else {
          // anything supporting Opal
          inspect_stack.push(value.$__id__());
          pushed = true;
          return value.$inspect();
        }
      ;
        return nil;
      } catch ($err) {
        if (Opal.rescue($err, [$$$('Exception')])) {(e = $err)
          try {
            return "#<" + (value.$$class) + ":0x" + (value.$__id__().$to_s(16)) + ">"
          } finally { Opal.pop_exception(); }
        } else { throw $err; }
      }
      } finally {
        if (pushed) inspect_stack.pop()
      }; })();;
    }, -1);
  })('::')
};

Opal.modules["corelib/error/errno"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $module = Opal.module, $truthy = Opal.truthy, $rb_plus = Opal.rb_plus, $send2 = Opal.send2, $find_super = Opal.find_super, $def = Opal.def, $klass = Opal.klass, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('+,errno,class,attr_reader');
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Errno');

    var $nesting = [self].concat($parent_nesting), errors = nil, klass = nil;

    
    errors = [["EINVAL", "Invalid argument", 22], ["EEXIST", "File exists", 17], ["EISDIR", "Is a directory", 21], ["EMFILE", "Too many open files", 24], ["ESPIPE", "Illegal seek", 29], ["EACCES", "Permission denied", 13], ["EPERM", "Operation not permitted", 1], ["ENOENT", "No such file or directory", 2], ["ENAMETOOLONG", "File name too long", 36]];
    klass = nil;
    
    var i;
    for (i = 0; i < errors.length; i++) {
      (function() { // Create a closure
        var class_name = errors[i][0];
        var default_message = errors[i][1];
        var errno = errors[i][2];

        klass = Opal.klass(self, Opal.SystemCallError, class_name);
        klass.errno = errno;

        (function(self, $parent_nesting) {
      
      return $def(self, '$new', function $new$1(name) {
        var $yield = $new$1.$$p || nil, self = this, message = nil;

        $new$1.$$p = null;
        
        if (name == null) name = nil;
        message = default_message;
        if ($truthy(name)) {
          message = $rb_plus(message, " - " + (name))
        };
        return $send2(self, $find_super(self, 'new', $new$1, false, true), 'new', [message], null);
      }, -1)
    })(Opal.get_singleton_class(klass), $nesting)
      })();
    }
  ;
  })('::', $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'SystemCallError');

    var $nesting = [self].concat($parent_nesting);

    
    
    $def(self, '$errno', function $$errno() {
      var self = this;

      return self.$class().$errno()
    }, 0);
    return (function(self, $parent_nesting) {
      
      return self.$attr_reader("errno")
    })(Opal.get_singleton_class(self), $nesting);
  })('::', $$$('StandardError'), $nesting);
};

Opal.modules["opal/regexp_anchors"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $module = Opal.module, $const_set = Opal.const_set, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('new');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $const_set(self, 'REGEXP_START', "^");
    $const_set(self, 'REGEXP_END', "$");
    $const_set(self, 'FORBIDDEN_STARTING_IDENTIFIER_CHARS', "\\u0001-\\u002F\\u003A-\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");
    $const_set(self, 'FORBIDDEN_ENDING_IDENTIFIER_CHARS', "\\u0001-\\u0020\\u0022-\\u002F\\u003A-\\u003E\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");
    $const_set(self, 'INLINE_IDENTIFIER_REGEXP', $$('Regexp').$new("[^" + ($$$(self, 'FORBIDDEN_STARTING_IDENTIFIER_CHARS')) + "]*[^" + ($$$(self, 'FORBIDDEN_ENDING_IDENTIFIER_CHARS')) + "]"));
    $const_set(self, 'FORBIDDEN_CONST_NAME_CHARS', "\\u0001-\\u0020\\u0021-\\u002F\\u003B-\\u003F\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");
    return $const_set(self, 'CONST_NAME_REGEXP', $$('Regexp').$new("" + ($$$(self, 'REGEXP_START')) + "(::)?[A-Z][^" + ($$$(self, 'FORBIDDEN_CONST_NAME_CHARS')) + "]*" + ($$$(self, 'REGEXP_END'))));
  })($nesting[0], $nesting)
};

Opal.modules["corelib/proc"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $Kernel = Opal.Kernel, $defs = Opal.defs, $def = Opal.def, $send = Opal.send, $to_a = Opal.to_a, $return_self = Opal.return_self, $Opal = Opal.Opal, $alias = Opal.alias, nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('raise,proc,call,to_proc,new,source_location,coerce_to!,dup');
  return (function($base, $super) {
    var self = $klass($base, $super, 'Proc');

    
    
    Opal.prop(self.$$prototype, '$$is_proc', true);
    Opal.prop(self.$$prototype, '$$is_lambda', false);
    $defs(self, '$new', function $Proc_new$1() {
      var block = $Proc_new$1.$$p || nil;

      $Proc_new$1.$$p = null;
      
      ;
      if (!$truthy(block)) {
        $Kernel.$raise($$$('ArgumentError'), "tried to create a Proc object without a block")
      };
      return block;
    }, 0);
    
    $def(self, '$call', function $$call($a) {
      var block = $$call.$$p || nil, $post_args, args, self = this;

      $$call.$$p = null;
      
      ;
      $post_args = $slice.call(arguments);
      args = $post_args;
      
      if (block !== nil) {
        self.$$p = block;
      }

      var result, $brk = self.$$brk, $ret = self.$$ret;

      if ($brk || ($ret && self.$$is_lambda)) {
        try {
          if (self.$$is_lambda) {
            result = self.apply(null, args);
          }
          else {
            result = Opal.yieldX(self, args);
          }
        } catch (err) {
          if (err === $brk) {
            return err.$v;
          }
          else if (self.$$is_lambda && err === $ret) {
            return err.$v;
          }
          else {
            throw err;
          }
        }
      }
      else {
        if (self.$$is_lambda) {
          result = self.apply(null, args);
        }
        else {
          result = Opal.yieldX(self, args);
        }
      }

      return result;
    ;
    }, -1);
    
    $def(self, '$>>', function $Proc_$gt$gt$2(other) {
      var $yield = $Proc_$gt$gt$2.$$p || nil, self = this;

      $Proc_$gt$gt$2.$$p = null;
      return $send($Kernel, 'proc', [], function $$3($a){var block = $$3.$$p || nil, $post_args, args, self = $$3.$$s == null ? this : $$3.$$s, out = nil;

        $$3.$$p = null;
        
        ;
        $post_args = $slice.call(arguments);
        args = $post_args;
        out = $send(self, 'call', $to_a(args), block.$to_proc());
        return other.$call(out);}, {$$arity: -1, $$s: self})
    }, 1);
    
    $def(self, '$<<', function $Proc_$lt$lt$4(other) {
      var $yield = $Proc_$lt$lt$4.$$p || nil, self = this;

      $Proc_$lt$lt$4.$$p = null;
      return $send($Kernel, 'proc', [], function $$5($a){var block = $$5.$$p || nil, $post_args, args, self = $$5.$$s == null ? this : $$5.$$s, out = nil;

        $$5.$$p = null;
        
        ;
        $post_args = $slice.call(arguments);
        args = $post_args;
        out = $send(other, 'call', $to_a(args), block.$to_proc());
        return self.$call(out);}, {$$arity: -1, $$s: self})
    }, 1);
    
    $def(self, '$to_proc', $return_self, 0);
    
    $def(self, '$lambda?', function $Proc_lambda$ques$6() {
      var self = this;

      return !!self.$$is_lambda;
    }, 0);
    
    $def(self, '$arity', function $$arity() {
      var self = this;

      
      if (self.$$is_curried) {
        return -1;
      } else {
        return self.$$arity;
      }
    
    }, 0);
    
    $def(self, '$source_location', function $$source_location() {
      var self = this, $ret_or_1 = nil;

      
      if (self.$$is_curried) { return nil; };
      if ($truthy(($ret_or_1 = self.$$source_location))) {
        return $ret_or_1
      } else {
        return nil
      };
    }, 0);
    
    $def(self, '$binding', function $$binding() {
      var $a, self = this;

      
      if (self.$$is_curried) { $Kernel.$raise($$$('ArgumentError'), "Can't create Binding") };
      if ($truthy((($a = $$$('::', 'Binding', 'skip_raise')) ? 'constant' : nil))) {
        return $$$('Binding').$new(nil, [], self.$$s, self.$source_location())
      } else {
        return nil
      };
    }, 0);
    
    $def(self, '$parameters', function $$parameters() {
      var self = this;

      
      if (self.$$is_curried) {
        return [["rest"]];
      } else if (self.$$parameters) {
        if (self.$$is_lambda) {
          return self.$$parameters;
        } else {
          var result = [], i, length;

          for (i = 0, length = self.$$parameters.length; i < length; i++) {
            var parameter = self.$$parameters[i];

            if (parameter[0] === 'req') {
              // required arguments always have name
              parameter = ['opt', parameter[1]];
            }

            result.push(parameter);
          }

          return result;
        }
      } else {
        return [];
      }
    
    }, 0);
    
    $def(self, '$curry', function $$curry(arity) {
      var self = this;

      
      ;
      
      if (arity === undefined) {
        arity = self.length;
      }
      else {
        arity = $Opal['$coerce_to!'](arity, $$$('Integer'), "to_int");
        if (self.$$is_lambda && arity !== self.length) {
          $Kernel.$raise($$$('ArgumentError'), "wrong number of arguments (" + (arity) + " for " + (self.length) + ")")
        }
      }

      function curried () {
        var args = $slice.call(arguments),
            length = args.length,
            result;

        if (length > arity && self.$$is_lambda && !self.$$is_curried) {
          $Kernel.$raise($$$('ArgumentError'), "wrong number of arguments (" + (length) + " for " + (arity) + ")")
        }

        if (length >= arity) {
          return self.$call.apply(self, args);
        }

        result = function () {
          return curried.apply(null,
            args.concat($slice.call(arguments)));
        }
        result.$$is_lambda = self.$$is_lambda;
        result.$$is_curried = true;

        return result;
      };

      curried.$$is_lambda = self.$$is_lambda;
      curried.$$is_curried = true;
      return curried;
    ;
    }, -1);
    
    $def(self, '$dup', function $$dup() {
      var self = this;

      
      var original_proc = self.$$original_proc || self,
          proc = function () {
            return original_proc.apply(this, arguments);
          };

      for (var prop in self) {
        if (self.hasOwnProperty(prop)) {
          proc[prop] = self[prop];
        }
      }

      return proc;
    
    }, 0);
    $alias(self, "===", "call");
    $alias(self, "clone", "dup");
    $alias(self, "yield", "call");
    return $alias(self, "[]", "call");
  })('::', Function)
};

Opal.modules["corelib/number"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $klass = Opal.klass, $Opal = Opal.Opal, $Kernel = Opal.Kernel, $def = Opal.def, $eqeqeq = Opal.eqeqeq, $truthy = Opal.truthy, $rb_gt = Opal.rb_gt, $not = Opal.not, $rb_lt = Opal.rb_lt, $alias = Opal.alias, $send2 = Opal.send2, $find_super = Opal.find_super, $send = Opal.send, $rb_plus = Opal.rb_plus, $rb_minus = Opal.rb_minus, $eqeq = Opal.eqeq, $return_self = Opal.return_self, $rb_divide = Opal.rb_divide, $to_ary = Opal.to_ary, $rb_times = Opal.rb_times, $rb_le = Opal.rb_le, $rb_ge = Opal.rb_ge, $return_val = Opal.return_val, $const_set = Opal.const_set, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,bridge,raise,name,class,Float,respond_to?,coerce_to!,__coerced__,===,>,!,**,new,<,to_f,==,nan?,infinite?,enum_for,+,-,gcd,lcm,%,/,frexp,to_i,ldexp,rationalize,*,<<,to_r,truncate,-@,size,<=,>=,inspect,angle,to_s,is_a?,abs,__id__,next,coerce_to?');
  
  self.$require("corelib/numeric");
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Number');

    var $nesting = [self].concat($parent_nesting);

    
    $Opal.$bridge(Number, self);
    Opal.prop(self.$$prototype, '$$is_number', true);
    self.$$is_number_class = true;
    (function(self, $parent_nesting) {
      
      
      
      $def(self, '$allocate', function $$allocate() {
        var self = this;

        return $Kernel.$raise($$$('TypeError'), "allocator undefined for " + (self.$name()))
      }, 0);
      
      
      Opal.udef(self, '$' + "new");;
      return nil;;
    })(Opal.get_singleton_class(self), $nesting);
    
    $def(self, '$coerce', function $$coerce(other) {
      var self = this;

      
      if (other === nil) {
        $Kernel.$raise($$$('TypeError'), "can't convert " + (other.$class()) + " into Float");
      }
      else if (other.$$is_string) {
        return [$Kernel.$Float(other), self];
      }
      else if (other['$respond_to?']("to_f")) {
        return [$Opal['$coerce_to!'](other, $$$('Float'), "to_f"), self];
      }
      else if (other.$$is_number) {
        return [other, self];
      }
      else {
        $Kernel.$raise($$$('TypeError'), "can't convert " + (other.$class()) + " into Float");
      }
    
    }, 1);
    
    $def(self, '$__id__', function $$__id__() {
      var self = this;

      return (self * 2) + 1;
    }, 0);
    
    $def(self, '$+', function $Number_$plus$1(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self + other;
      }
      else {
        return self.$__coerced__("+", other);
      }
    
    }, 1);
    
    $def(self, '$-', function $Number_$minus$2(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self - other;
      }
      else {
        return self.$__coerced__("-", other);
      }
    
    }, 1);
    
    $def(self, '$*', function $Number_$$3(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self * other;
      }
      else {
        return self.$__coerced__("*", other);
      }
    
    }, 1);
    
    $def(self, '$/', function $Number_$slash$4(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self / other;
      }
      else {
        return self.$__coerced__("/", other);
      }
    
    }, 1);
    
    $def(self, '$%', function $Number_$percent$5(other) {
      var self = this;

      
      if (other.$$is_number) {
        if (other == -Infinity) {
          return other;
        }
        else if (other == 0) {
          $Kernel.$raise($$$('ZeroDivisionError'), "divided by 0");
        }
        else if (other < 0 || self < 0) {
          return (self % other + other) % other;
        }
        else {
          return self % other;
        }
      }
      else {
        return self.$__coerced__("%", other);
      }
    
    }, 1);
    
    $def(self, '$&', function $Number_$$6(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self & other;
      }
      else {
        return self.$__coerced__("&", other);
      }
    
    }, 1);
    
    $def(self, '$|', function $Number_$$7(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self | other;
      }
      else {
        return self.$__coerced__("|", other);
      }
    
    }, 1);
    
    $def(self, '$^', function $Number_$$8(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self ^ other;
      }
      else {
        return self.$__coerced__("^", other);
      }
    
    }, 1);
    
    $def(self, '$<', function $Number_$lt$9(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self < other;
      }
      else {
        return self.$__coerced__("<", other);
      }
    
    }, 1);
    
    $def(self, '$<=', function $Number_$lt_eq$10(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self <= other;
      }
      else {
        return self.$__coerced__("<=", other);
      }
    
    }, 1);
    
    $def(self, '$>', function $Number_$gt$11(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self > other;
      }
      else {
        return self.$__coerced__(">", other);
      }
    
    }, 1);
    
    $def(self, '$>=', function $Number_$gt_eq$12(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self >= other;
      }
      else {
        return self.$__coerced__(">=", other);
      }
    
    }, 1);
    
    var spaceship_operator = function(self, other) {
      if (other.$$is_number) {
        if (isNaN(self) || isNaN(other)) {
          return nil;
        }

        if (self > other) {
          return 1;
        } else if (self < other) {
          return -1;
        } else {
          return 0;
        }
      }
      else {
        return self.$__coerced__("<=>", other);
      }
    }
  ;
    
    $def(self, '$<=>', function $Number_$lt_eq_gt$13(other) {
      var self = this;

      try {
        return spaceship_operator(self, other);
      } catch ($err) {
        if (Opal.rescue($err, [$$$('ArgumentError')])) {
          try {
            return nil
          } finally { Opal.pop_exception(); }
        } else { throw $err; }
      }
    }, 1);
    
    $def(self, '$<<', function $Number_$lt$lt$14(count) {
      var self = this;

      
      count = $Opal['$coerce_to!'](count, $$$('Integer'), "to_int");
      return count > 0 ? self << count : self >> -count;
    }, 1);
    
    $def(self, '$>>', function $Number_$gt$gt$15(count) {
      var self = this;

      
      count = $Opal['$coerce_to!'](count, $$$('Integer'), "to_int");
      return count > 0 ? self >> count : self << -count;
    }, 1);
    
    $def(self, '$[]', function $Number_$$$16(bit) {
      var self = this;

      
      bit = $Opal['$coerce_to!'](bit, $$$('Integer'), "to_int");
      
      if (bit < 0) {
        return 0;
      }
      if (bit >= 32) {
        return self < 0 ? 1 : 0;
      }
      return (self >> bit) & 1;
    ;
    }, 1);
    
    $def(self, '$+@', function $Number_$plus$$17() {
      var self = this;

      return +self;
    }, 0);
    
    $def(self, '$-@', function $Number_$minus$$18() {
      var self = this;

      return -self;
    }, 0);
    
    $def(self, '$~', function $Number_$$19() {
      var self = this;

      return ~self;
    }, 0);
    
    $def(self, '$**', function $Number_$$$20(other) {
      var self = this;

      if ($eqeqeq($$$('Integer'), other)) {
        if (($not($$$('Integer')['$==='](self)) || ($truthy($rb_gt(other, 0))))) {
          return Math.pow(self, other);
        } else {
          return $$$('Rational').$new(self, 1)['$**'](other)
        }
      } else if (($rb_lt(self, 0) && (($eqeqeq($$$('Float'), other) || ($eqeqeq($$$('Rational'), other)))))) {
        return $$$('Complex').$new(self, 0)['$**'](other.$to_f())
      } else if ($truthy(other.$$is_number != null)) {
        return Math.pow(self, other);
      } else {
        return self.$__coerced__("**", other)
      }
    }, 1);
    
    $def(self, '$==', function $Number_$eq_eq$21(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self.valueOf() === other.valueOf();
      }
      else if (other['$respond_to?']("==")) {
        return other['$=='](self);
      }
      else {
        return false;
      }
    
    }, 1);
    $alias(self, "===", "==");
    
    $def(self, '$abs', function $$abs() {
      var self = this;

      return Math.abs(self);
    }, 0);
    
    $def(self, '$abs2', function $$abs2() {
      var self = this;

      return Math.abs(self * self);
    }, 0);
    
    $def(self, '$allbits?', function $Number_allbits$ques$22(mask) {
      var self = this;

      
      mask = $Opal['$coerce_to!'](mask, $$$('Integer'), "to_int");
      return (self & mask) == mask;;
    }, 1);
    
    $def(self, '$anybits?', function $Number_anybits$ques$23(mask) {
      var self = this;

      
      mask = $Opal['$coerce_to!'](mask, $$$('Integer'), "to_int");
      return (self & mask) !== 0;;
    }, 1);
    
    $def(self, '$angle', function $$angle() {
      var self = this;

      
      if ($truthy(self['$nan?']())) {
        return self
      };
      
      if (self == 0) {
        if (1 / self > 0) {
          return 0;
        }
        else {
          return Math.PI;
        }
      }
      else if (self < 0) {
        return Math.PI;
      }
      else {
        return 0;
      }
    ;
    }, 0);
    
    $def(self, '$bit_length', function $$bit_length() {
      var self = this;

      
      if (!$eqeqeq($$$('Integer'), self)) {
        $Kernel.$raise($$$('NoMethodError').$new("undefined method `bit_length` for " + (self) + ":Float", "bit_length"))
      };
      
      if (self === 0 || self === -1) {
        return 0;
      }

      var result = 0,
          value  = self < 0 ? ~self : self;

      while (value != 0) {
        result   += 1;
        value  >>>= 1;
      }

      return result;
    ;
    }, 0);
    
    $def(self, '$ceil', function $$ceil(ndigits) {
      var self = this;

      
      if (ndigits == null) ndigits = 0;
      
      var f = self.$to_f();

      if (f % 1 === 0 && ndigits >= 0) {
        return f;
      }

      var factor = Math.pow(10, ndigits),
          result = Math.ceil(f * factor) / factor;

      if (f % 1 === 0) {
        result = Math.round(result);
      }

      return result;
    ;
    }, -1);
    
    $def(self, '$chr', function $$chr(encoding) {
      var self = this;

      
      ;
      return Opal.enc(String.fromCharCode(self), encoding || "BINARY");;
    }, -1);
    
    $def(self, '$denominator', function $$denominator() {
      var $yield = $$denominator.$$p || nil, self = this;

      $$denominator.$$p = null;
      if (($truthy(self['$nan?']()) || ($truthy(self['$infinite?']())))) {
        return 1
      } else {
        return $send2(self, $find_super(self, 'denominator', $$denominator, false, true), 'denominator', [], $yield)
      }
    }, 0);
    
    $def(self, '$downto', function $$downto(stop) {
      var block = $$downto.$$p || nil, self = this;

      $$downto.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return $send(self, 'enum_for', ["downto", stop], function $$24(){var self = $$24.$$s == null ? this : $$24.$$s;

          
          if (!$eqeqeq($$$('Numeric'), stop)) {
            $Kernel.$raise($$$('ArgumentError'), "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
          };
          if ($truthy($rb_gt(stop, self))) {
            return 0
          } else {
            return $rb_plus($rb_minus(self, stop), 1)
          };}, {$$arity: 0, $$s: self})
      };
      
      if (!stop.$$is_number) {
        $Kernel.$raise($$$('ArgumentError'), "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
      }
      for (var i = self; i >= stop; i--) {
        block(i);
      }
    ;
      return self;
    }, 1);
    
    $def(self, '$equal?', function $Number_equal$ques$25(other) {
      var self = this, $ret_or_1 = nil;

      if ($truthy(($ret_or_1 = self['$=='](other)))) {
        return $ret_or_1
      } else {
        return isNaN(self) && isNaN(other);
      }
    }, 1);
    
    $def(self, '$even?', function $Number_even$ques$26() {
      var self = this;

      return self % 2 === 0;
    }, 0);
    
    $def(self, '$floor', function $$floor(ndigits) {
      var self = this;

      
      if (ndigits == null) ndigits = 0;
      
      var f = self.$to_f();

      if (f % 1 === 0 && ndigits >= 0) {
        return f;
      }

      var factor = Math.pow(10, ndigits),
          result = Math.floor(f * factor) / factor;

      if (f % 1 === 0) {
        result = Math.round(result);
      }

      return result;
    ;
    }, -1);
    
    $def(self, '$gcd', function $$gcd(other) {
      var self = this;

      
      if (!$eqeqeq($$$('Integer'), other)) {
        $Kernel.$raise($$$('TypeError'), "not an integer")
      };
      
      var min = Math.abs(self),
          max = Math.abs(other);

      while (min > 0) {
        var tmp = min;

        min = max % min;
        max = tmp;
      }

      return max;
    ;
    }, 1);
    
    $def(self, '$gcdlcm', function $$gcdlcm(other) {
      var self = this;

      return [self.$gcd(other), self.$lcm(other)]
    }, 1);
    
    $def(self, '$integer?', function $Number_integer$ques$27() {
      var self = this;

      return self % 1 === 0;
    }, 0);
    
    $def(self, '$is_a?', function $Number_is_a$ques$28(klass) {
      var $yield = $Number_is_a$ques$28.$$p || nil, self = this;

      $Number_is_a$ques$28.$$p = null;
      
      if (($eqeq(klass, $$$('Integer')) && ($eqeqeq($$$('Integer'), self)))) {
        return true
      };
      if (($eqeq(klass, $$$('Integer')) && ($eqeqeq($$$('Integer'), self)))) {
        return true
      };
      if (($eqeq(klass, $$$('Float')) && ($eqeqeq($$$('Float'), self)))) {
        return true
      };
      return $send2(self, $find_super(self, 'is_a?', $Number_is_a$ques$28, false, true), 'is_a?', [klass], $yield);
    }, 1);
    
    $def(self, '$instance_of?', function $Number_instance_of$ques$29(klass) {
      var $yield = $Number_instance_of$ques$29.$$p || nil, self = this;

      $Number_instance_of$ques$29.$$p = null;
      
      if (($eqeq(klass, $$$('Integer')) && ($eqeqeq($$$('Integer'), self)))) {
        return true
      };
      if (($eqeq(klass, $$$('Integer')) && ($eqeqeq($$$('Integer'), self)))) {
        return true
      };
      if (($eqeq(klass, $$$('Float')) && ($eqeqeq($$$('Float'), self)))) {
        return true
      };
      return $send2(self, $find_super(self, 'instance_of?', $Number_instance_of$ques$29, false, true), 'instance_of?', [klass], $yield);
    }, 1);
    
    $def(self, '$lcm', function $$lcm(other) {
      var self = this;

      
      if (!$eqeqeq($$$('Integer'), other)) {
        $Kernel.$raise($$$('TypeError'), "not an integer")
      };
      
      if (self == 0 || other == 0) {
        return 0;
      }
      else {
        return Math.abs(self * other / self.$gcd(other));
      }
    ;
    }, 1);
    
    $def(self, '$next', function $$next() {
      var self = this;

      return self + 1;
    }, 0);
    
    $def(self, '$nobits?', function $Number_nobits$ques$30(mask) {
      var self = this;

      
      mask = $Opal['$coerce_to!'](mask, $$$('Integer'), "to_int");
      return (self & mask) == 0;;
    }, 1);
    
    $def(self, '$nonzero?', function $Number_nonzero$ques$31() {
      var self = this;

      return self == 0 ? nil : self;
    }, 0);
    
    $def(self, '$numerator', function $$numerator() {
      var $yield = $$numerator.$$p || nil, self = this;

      $$numerator.$$p = null;
      if (($truthy(self['$nan?']()) || ($truthy(self['$infinite?']())))) {
        return self
      } else {
        return $send2(self, $find_super(self, 'numerator', $$numerator, false, true), 'numerator', [], $yield)
      }
    }, 0);
    
    $def(self, '$odd?', function $Number_odd$ques$32() {
      var self = this;

      return self % 2 !== 0;
    }, 0);
    
    $def(self, '$ord', $return_self, 0);
    
    $def(self, '$pow', function $$pow(b, m) {
      var self = this;

      
      ;
      
      if (self == 0) {
        $Kernel.$raise($$$('ZeroDivisionError'), "divided by 0")
      }

      if (m === undefined) {
        return self['$**'](b);
      } else {
        if (!($$$('Integer')['$==='](b))) {
          $Kernel.$raise($$$('TypeError'), "Integer#pow() 2nd argument not allowed unless a 1st argument is integer")
        }

        if (b < 0) {
          $Kernel.$raise($$$('TypeError'), "Integer#pow() 1st argument cannot be negative when 2nd argument specified")
        }

        if (!($$$('Integer')['$==='](m))) {
          $Kernel.$raise($$$('TypeError'), "Integer#pow() 2nd argument not allowed unless all arguments are integers")
        }

        if (m === 0) {
          $Kernel.$raise($$$('ZeroDivisionError'), "divided by 0")
        }

        return self['$**'](b)['$%'](m)
      }
    ;
    }, -2);
    
    $def(self, '$pred', function $$pred() {
      var self = this;

      return self - 1;
    }, 0);
    
    $def(self, '$quo', function $$quo(other) {
      var $yield = $$quo.$$p || nil, self = this;

      $$quo.$$p = null;
      if ($eqeqeq($$$('Integer'), self)) {
        return $send2(self, $find_super(self, 'quo', $$quo, false, true), 'quo', [other], $yield)
      } else {
        return $rb_divide(self, other)
      }
    }, 1);
    
    $def(self, '$rationalize', function $$rationalize(eps) {
      var $a, $b, self = this, f = nil, n = nil;

      
      ;
      
      if (arguments.length > 1) {
        $Kernel.$raise($$$('ArgumentError'), "wrong number of arguments (" + (arguments.length) + " for 0..1)");
      }
    ;
      if ($eqeqeq($$$('Integer'), self)) {
        return $$$('Rational').$new(self, 1)
      } else if ($truthy(self['$infinite?']())) {
        return $Kernel.$raise($$$('FloatDomainError'), "Infinity")
      } else if ($truthy(self['$nan?']())) {
        return $Kernel.$raise($$$('FloatDomainError'), "NaN")
      } else if ($truthy(eps == null)) {
        
        $b = $$$('Math').$frexp(self), $a = $to_ary($b), (f = ($a[0] == null ? nil : $a[0])), (n = ($a[1] == null ? nil : $a[1])), $b;
        f = $$$('Math').$ldexp(f, $$$($$$('Float'), 'MANT_DIG')).$to_i();
        n = $rb_minus(n, $$$($$$('Float'), 'MANT_DIG'));
        return $$$('Rational').$new($rb_times(2, f), (1)['$<<']($rb_minus(1, n))).$rationalize($$$('Rational').$new(1, (1)['$<<']($rb_minus(1, n))));
      } else {
        return self.$to_r().$rationalize(eps)
      };
    }, -1);
    
    $def(self, '$remainder', function $$remainder(y) {
      var self = this;

      return $rb_minus(self, $rb_times(y, $rb_divide(self, y).$truncate()))
    }, 1);
    
    $def(self, '$round', function $$round(ndigits) {
      var $a, $b, self = this, _ = nil, exp = nil;

      
      ;
      if ($eqeqeq($$$('Integer'), self)) {
        
        if ($truthy(ndigits == null)) {
          return self
        };
        if (($eqeqeq($$$('Float'), ndigits) && ($truthy(ndigits['$infinite?']())))) {
          $Kernel.$raise($$$('RangeError'), "Infinity")
        };
        ndigits = $Opal['$coerce_to!'](ndigits, $$$('Integer'), "to_int");
        if ($truthy($rb_lt(ndigits, $$$($$$('Integer'), 'MIN')))) {
          $Kernel.$raise($$$('RangeError'), "out of bounds")
        };
        if ($truthy(ndigits >= 0)) {
          return self
        };
        ndigits = ndigits['$-@']();
        
        if (0.415241 * ndigits - 0.125 > self.$size()) {
          return 0;
        }

        var f = Math.pow(10, ndigits),
            x = Math.floor((Math.abs(self) + f / 2) / f) * f;

        return self < 0 ? -x : x;
      ;
      } else {
        
        if (($truthy(self['$nan?']()) && ($truthy(ndigits == null)))) {
          $Kernel.$raise($$$('FloatDomainError'), "NaN")
        };
        ndigits = $Opal['$coerce_to!'](ndigits || 0, $$$('Integer'), "to_int");
        if ($truthy($rb_le(ndigits, 0))) {
          if ($truthy(self['$nan?']())) {
            $Kernel.$raise($$$('RangeError'), "NaN")
          } else if ($truthy(self['$infinite?']())) {
            $Kernel.$raise($$$('FloatDomainError'), "Infinity")
          }
        } else if ($eqeq(ndigits, 0)) {
          return Math.round(self)
        } else if (($truthy(self['$nan?']()) || ($truthy(self['$infinite?']())))) {
          return self
        };
        $b = $$$('Math').$frexp(self), $a = $to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (exp = ($a[1] == null ? nil : $a[1])), $b;
        if ($truthy($rb_ge(ndigits, $rb_minus($rb_plus($$$($$$('Float'), 'DIG'), 2), ($truthy($rb_gt(exp, 0)) ? ($rb_divide(exp, 4)) : ($rb_minus($rb_divide(exp, 3), 1))))))) {
          return self
        };
        if ($truthy($rb_lt(ndigits, ($truthy($rb_gt(exp, 0)) ? ($rb_plus($rb_divide(exp, 3), 1)) : ($rb_divide(exp, 4)))['$-@']()))) {
          return 0
        };
        return Math.round(self * Math.pow(10, ndigits)) / Math.pow(10, ndigits);;
      };
    }, -1);
    
    $def(self, '$times', function $$times() {
      var block = $$times.$$p || nil, self = this;

      $$times.$$p = null;
      
      ;
      if (!$truthy(block)) {
        return $send(self, 'enum_for', ["times"], function $$33(){var self = $$33.$$s == null ? this : $$33.$$s;

          return self}, {$$arity: 0, $$s: self})
      };
      
      for (var i = 0; i < self; i++) {
        block(i);
      }
    ;
      return self;
    }, 0);
    
    $def(self, '$to_f', $return_self, 0);
    
    $def(self, '$to_i', function $$to_i() {
      var self = this;

      return self < 0 ? Math.ceil(self) : Math.floor(self);
    }, 0);
    
    $def(self, '$to_r', function $$to_r() {
      var $a, $b, self = this, f = nil, e = nil;

      if ($eqeqeq($$$('Integer'), self)) {
        return $$$('Rational').$new(self, 1)
      } else {
        
        $b = $$$('Math').$frexp(self), $a = $to_ary($b), (f = ($a[0] == null ? nil : $a[0])), (e = ($a[1] == null ? nil : $a[1])), $b;
        f = $$$('Math').$ldexp(f, $$$($$$('Float'), 'MANT_DIG')).$to_i();
        e = $rb_minus(e, $$$($$$('Float'), 'MANT_DIG'));
        return $rb_times(f, $$$($$$('Float'), 'RADIX')['$**'](e)).$to_r();
      }
    }, 0);
    
    $def(self, '$to_s', function $$to_s(base) {
      var self = this;

      
      if (base == null) base = 10;
      base = $Opal['$coerce_to!'](base, $$$('Integer'), "to_int");
      if (($truthy($rb_lt(base, 2)) || ($truthy($rb_gt(base, 36))))) {
        $Kernel.$raise($$$('ArgumentError'), "invalid radix " + (base))
      };
      if (($eqeq(self, 0) && ($truthy(1/self === -Infinity)))) {
        return "-0.0"
      };
      return self.toString(base);;
    }, -1);
    
    $def(self, '$truncate', function $$truncate(ndigits) {
      var self = this;

      
      if (ndigits == null) ndigits = 0;
      
      var f = self.$to_f();

      if (f % 1 === 0 && ndigits >= 0) {
        return f;
      }

      var factor = Math.pow(10, ndigits),
          result = parseInt(f * factor, 10) / factor;

      if (f % 1 === 0) {
        result = Math.round(result);
      }

      return result;
    ;
    }, -1);
    
    $def(self, '$digits', function $$digits(base) {
      var self = this;

      
      if (base == null) base = 10;
      if ($rb_lt(self, 0)) {
        $Kernel.$raise($$$($$$('Math'), 'DomainError'), "out of domain")
      };
      base = $Opal['$coerce_to!'](base, $$$('Integer'), "to_int");
      if ($truthy($rb_lt(base, 2))) {
        $Kernel.$raise($$$('ArgumentError'), "invalid radix " + (base))
      };
      
      if (self != parseInt(self)) $Kernel.$raise($$$('NoMethodError'), "undefined method `digits' for " + (self.$inspect()))

      var value = self, result = [];

      if (self == 0) {
        return [0];
      }

      while (value != 0) {
        result.push(value % base);
        value = parseInt(value / base, 10);
      }

      return result;
    ;
    }, -1);
    
    $def(self, '$divmod', function $$divmod(other) {
      var $yield = $$divmod.$$p || nil, self = this;

      $$divmod.$$p = null;
      if (($truthy(self['$nan?']()) || ($truthy(other['$nan?']())))) {
        return $Kernel.$raise($$$('FloatDomainError'), "NaN")
      } else if ($truthy(self['$infinite?']())) {
        return $Kernel.$raise($$$('FloatDomainError'), "Infinity")
      } else {
        return $send2(self, $find_super(self, 'divmod', $$divmod, false, true), 'divmod', [other], $yield)
      }
    }, 1);
    
    $def(self, '$upto', function $$upto(stop) {
      var block = $$upto.$$p || nil, self = this;

      $$upto.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return $send(self, 'enum_for', ["upto", stop], function $$34(){var self = $$34.$$s == null ? this : $$34.$$s;

          
          if (!$eqeqeq($$$('Numeric'), stop)) {
            $Kernel.$raise($$$('ArgumentError'), "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
          };
          if ($truthy($rb_lt(stop, self))) {
            return 0
          } else {
            return $rb_plus($rb_minus(stop, self), 1)
          };}, {$$arity: 0, $$s: self})
      };
      
      if (!stop.$$is_number) {
        $Kernel.$raise($$$('ArgumentError'), "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
      }
      for (var i = self; i <= stop; i++) {
        block(i);
      }
    ;
      return self;
    }, 1);
    
    $def(self, '$zero?', function $Number_zero$ques$35() {
      var self = this;

      return self == 0;
    }, 0);
    
    $def(self, '$size', $return_val(4), 0);
    
    $def(self, '$nan?', function $Number_nan$ques$36() {
      var self = this;

      return isNaN(self);
    }, 0);
    
    $def(self, '$finite?', function $Number_finite$ques$37() {
      var self = this;

      return self != Infinity && self != -Infinity && !isNaN(self);
    }, 0);
    
    $def(self, '$infinite?', function $Number_infinite$ques$38() {
      var self = this;

      
      if (self == Infinity) {
        return +1;
      }
      else if (self == -Infinity) {
        return -1;
      }
      else {
        return nil;
      }
    
    }, 0);
    
    $def(self, '$positive?', function $Number_positive$ques$39() {
      var self = this;

      return self != 0 && (self == Infinity || 1 / self > 0);
    }, 0);
    
    $def(self, '$negative?', function $Number_negative$ques$40() {
      var self = this;

      return self == -Infinity || 1 / self < 0;
    }, 0);
    
    function numberToUint8Array(num) {
      var uint8array = new Uint8Array(8);
      new DataView(uint8array.buffer).setFloat64(0, num, true);
      return uint8array;
    }

    function uint8ArrayToNumber(arr) {
      return new DataView(arr.buffer).getFloat64(0, true);
    }

    function incrementNumberBit(num) {
      var arr = numberToUint8Array(num);
      for (var i = 0; i < arr.length; i++) {
        if (arr[i] === 0xff) {
          arr[i] = 0;
        } else {
          arr[i]++;
          break;
        }
      }
      return uint8ArrayToNumber(arr);
    }

    function decrementNumberBit(num) {
      var arr = numberToUint8Array(num);
      for (var i = 0; i < arr.length; i++) {
        if (arr[i] === 0) {
          arr[i] = 0xff;
        } else {
          arr[i]--;
          break;
        }
      }
      return uint8ArrayToNumber(arr);
    }
  ;
    
    $def(self, '$next_float', function $$next_float() {
      var self = this;

      
      if ($eqeq(self, $$$($$$('Float'), 'INFINITY'))) {
        return $$$($$$('Float'), 'INFINITY')
      };
      if ($truthy(self['$nan?']())) {
        return $$$($$$('Float'), 'NAN')
      };
      if ($rb_ge(self, 0)) {
        return incrementNumberBit(Math.abs(self));
      } else {
        return decrementNumberBit(self);
      };
    }, 0);
    
    $def(self, '$prev_float', function $$prev_float() {
      var self = this;

      
      if ($eqeq(self, $$$($$$('Float'), 'INFINITY')['$-@']())) {
        return $$$($$$('Float'), 'INFINITY')['$-@']()
      };
      if ($truthy(self['$nan?']())) {
        return $$$($$$('Float'), 'NAN')
      };
      if ($rb_gt(self, 0)) {
        return decrementNumberBit(self);
      } else {
        return -incrementNumberBit(Math.abs(self));
      };
    }, 0);
    $alias(self, "arg", "angle");
    $alias(self, "eql?", "==");
    $alias(self, "fdiv", "/");
    $alias(self, "inspect", "to_s");
    $alias(self, "kind_of?", "is_a?");
    $alias(self, "magnitude", "abs");
    $alias(self, "modulo", "%");
    $alias(self, "object_id", "__id__");
    $alias(self, "phase", "angle");
    $alias(self, "succ", "next");
    return $alias(self, "to_int", "to_i");
  })('::', $$$('Numeric'), $nesting);
  $const_set('::', 'Fixnum', $$$('Number'));
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Integer');

    var $nesting = [self].concat($parent_nesting);

    
    self.$$is_number_class = true;
    self.$$is_integer_class = true;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      
      $def(self, '$allocate', function $$allocate() {
        var self = this;

        return $Kernel.$raise($$$('TypeError'), "allocator undefined for " + (self.$name()))
      }, 0);
      
      Opal.udef(self, '$' + "new");;
      
      $def(self, '$sqrt', function $$sqrt(n) {
        
        
        n = $Opal['$coerce_to!'](n, $$$('Integer'), "to_int");
        
        if (n < 0) {
          $Kernel.$raise($$$($$$('Math'), 'DomainError'), "Numerical argument is out of domain - \"isqrt\"")
        }

        return parseInt(Math.sqrt(n), 10);
      ;
      }, 1);
      return $def(self, '$try_convert', function $$try_convert(object) {
        var self = this;

        return $$('Opal')['$coerce_to?'](object, self, "to_int")
      }, 1);
    })(Opal.get_singleton_class(self), $nesting);
    $const_set(self, 'MAX', Math.pow(2, 30) - 1);
    return $const_set(self, 'MIN', -Math.pow(2, 30));
  })('::', $$$('Numeric'), $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Float');

    var $nesting = [self].concat($parent_nesting);

    
    self.$$is_number_class = true;
    (function(self, $parent_nesting) {
      
      
      
      $def(self, '$allocate', function $$allocate() {
        var self = this;

        return $Kernel.$raise($$$('TypeError'), "allocator undefined for " + (self.$name()))
      }, 0);
      
      Opal.udef(self, '$' + "new");;
      return $def(self, '$===', function $eq_eq_eq$41(other) {
        
        return !!other.$$is_number;
      }, 1);
    })(Opal.get_singleton_class(self), $nesting);
    $const_set(self, 'INFINITY', Infinity);
    $const_set(self, 'MAX', Number.MAX_VALUE);
    $const_set(self, 'MIN', Number.MIN_VALUE);
    $const_set(self, 'NAN', NaN);
    $const_set(self, 'DIG', 15);
    $const_set(self, 'MANT_DIG', 53);
    $const_set(self, 'RADIX', 2);
    return $const_set(self, 'EPSILON', Number.EPSILON || 2.2204460492503130808472633361816E-16);
  })('::', $$$('Numeric'), $nesting);
};

Opal.modules["corelib/array"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $truthy = Opal.truthy, $falsy = Opal.falsy, $hash_ids = Opal.hash_ids, $yield1 = Opal.yield1, $hash_get = Opal.hash_get, $hash_put = Opal.hash_put, $hash_delete = Opal.hash_delete, $coerce_to = Opal.coerce_to, $respond_to = Opal.respond_to, $deny_frozen_access = Opal.deny_frozen_access, $freeze = Opal.freeze, $klass = Opal.klass, $slice = Opal.slice, $defs = Opal.defs, $Kernel = Opal.Kernel, $def = Opal.def, $Opal = Opal.Opal, $eqeqeq = Opal.eqeqeq, $hash2 = Opal.hash2, $send2 = Opal.send2, $find_super = Opal.find_super, $send = Opal.send, $rb_gt = Opal.rb_gt, $rb_times = Opal.rb_times, $eqeq = Opal.eqeq, $rb_minus = Opal.rb_minus, $to_a = Opal.to_a, $to_ary = Opal.to_ary, $gvars = Opal.gvars, $rb_ge = Opal.rb_ge, $assign_ivar = Opal.assign_ivar, $rb_lt = Opal.rb_lt, $return_self = Opal.return_self, $neqeq = Opal.neqeq, $alias = Opal.alias, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,include,to_a,warn,raise,replace,respond_to?,to_ary,coerce_to?,===,join,to_str,hash,<=>,==,object_id,inspect,enum_for,class,bsearch_index,to_proc,nil?,coerce_to!,>,*,enumerator_size,empty?,size,map,equal?,dup,each,reduce,-,[],dig,eql?,length,exclude_end?,flatten,frozen?,__id__,&,!,intersection,to_s,new,item,max,min,>=,**,delete_if,reverse,rotate,rand,at,keep_if,shuffle!,<,sort,sort_by,!=,times,[]=,<<,uniq,|,values,is_a?,end,begin,upto,reject,push,select,select!,collect,collect!,unshift,pristine,singleton_class');
  
  self.$require("corelib/enumerable");
  self.$require("corelib/numeric");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Array');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    self.$include($$$('Enumerable'));
    Opal.prop(self.$$prototype, '$$is_array', true);
    
    // Recent versions of V8 (> 7.1) only use an optimized implementation when Array.prototype is unmodified.
    // For instance, "array-splice.tq" has a "fast path" (ExtractFastJSArray, defined in "src/codegen/code-stub-assembler.cc")
    // but it's only enabled when "IsPrototypeInitialArrayPrototype()" is true.
    //
    // Older versions of V8 were using relatively fast JS-with-extensions code even when Array.prototype is modified:
    // https://github.com/v8/v8/blob/7.0.1/src/js/array.js#L599-L642
    //
    // In short, Array operations are slow in recent versions of V8 when the Array.prototype has been tampered.
    // So, when possible, we are using faster open-coded version to boost the performance.

    // As of V8 8.4, depending on the size of the array, this is up to ~25x times faster than Array#shift()
    // Implementation is heavily inspired by: https://github.com/nodejs/node/blob/ba684805b6c0eded76e5cd89ee00328ac7a59365/lib/internal/util.js#L341-L347
    function shiftNoArg(list) {
      var r = list[0];
      var index = 1;
      var length = list.length;
      for (; index < length; index++) {
        list[index - 1] = list[index];
      }
      list.pop();
      return r;
    }

    function toArraySubclass(obj, klass) {
      if (klass.$$name === Opal.Array) {
        return obj;
      } else {
        return klass.$allocate().$replace((obj).$to_a());
      }
    }

    // A helper for keep_if and delete_if, filter is either Opal.truthy
    // or Opal.falsy.
    function filterIf(self, filter, block) {
      var value, raised = null, updated = new Array(self.length);

      for (var i = 0, i2 = 0, length = self.length; i < length; i++) {
        if (!raised) {
          try {
            value = $yield1(block, self[i])
          } catch(error) {
            raised = error;
          }
        }

        if (raised || filter(value)) {
          updated[i2] = self[i]
          i2 += 1;
        }
      }

      if (i2 !== i) {
        self.splice.apply(self, [0, updated.length].concat(updated));
        self.splice(i2, updated.length);
      }

      if (raised) throw raised;
    }
  ;
    $defs(self, '$[]', function $Array_$$$1($a) {
      var $post_args, objects, self = this;

      
      $post_args = $slice.call(arguments);
      objects = $post_args;
      return toArraySubclass(objects, self);;
    }, -1);
    
    $def(self, '$initialize', function $$initialize(size, obj) {
      var block = $$initialize.$$p || nil, self = this;

      $$initialize.$$p = null;
      
      ;
      if (size == null) size = nil;
      if (obj == null) obj = nil;
      
      $deny_frozen_access(self);

      if (obj !== nil && block !== nil) {
        $Kernel.$warn("warning: block supersedes default value argument")
      }

      if (size > $$$($$$('Integer'), 'MAX')) {
        $Kernel.$raise($$$('ArgumentError'), "array size too big")
      }

      if (arguments.length > 2) {
        $Kernel.$raise($$$('ArgumentError'), "wrong number of arguments (" + (arguments.length) + " for 0..2)")
      }

      if (arguments.length === 0) {
        self.splice(0, self.length);
        return self;
      }

      if (arguments.length === 1) {
        if (size.$$is_array) {
          self.$replace(size.$to_a())
          return self;
        } else if (size['$respond_to?']("to_ary")) {
          self.$replace(size.$to_ary())
          return self;
        }
      }

      size = $coerce_to(size, $$$('Integer'), 'to_int');

      if (size < 0) {
        $Kernel.$raise($$$('ArgumentError'), "negative array size")
      }

      self.splice(0, self.length);
      var i, value;

      if (block === nil) {
        for (i = 0; i < size; i++) {
          self.push(obj);
        }
      }
      else {
        for (i = 0, value; i < size; i++) {
          value = block(i);
          self[i] = value;
        }
      }

      return self;
    ;
    }, -1);
    $defs(self, '$try_convert', function $$try_convert(obj) {
      
      return $Opal['$coerce_to?'](obj, $$$('Array'), "to_ary")
    }, 1);
    
    $def(self, '$&', function $Array_$$2(other) {
      var self = this;

      
      other = ($eqeqeq($$$('Array'), other) ? (other.$to_a()) : (($coerce_to(other, $$$('Array'), 'to_ary')).$to_a()));
      
      var result = [], hash = $hash2([], {}), i, length, item;

      for (i = 0, length = other.length; i < length; i++) {
        $hash_put(hash, other[i], true);
      }

      for (i = 0, length = self.length; i < length; i++) {
        item = self[i];
        if ($hash_delete(hash, item) !== undefined) {
          result.push(item);
        }
      }

      return result;
    ;
    }, 1);
    
    $def(self, '$|', function $Array_$$3(other) {
      var self = this;

      
      other = ($eqeqeq($$$('Array'), other) ? (other.$to_a()) : (($coerce_to(other, $$$('Array'), 'to_ary')).$to_a()));
      
      var hash = $hash2([], {}), i, length, item;

      for (i = 0, length = self.length; i < length; i++) {
        $hash_put(hash, self[i], true);
      }

      for (i = 0, length = other.length; i < length; i++) {
        $hash_put(hash, other[i], true);
      }

      return hash.$keys();
    ;
    }, 1);
    
    $def(self, '$*', function $Array_$$4(other) {
      var self = this;

      
      if ($truthy(other['$respond_to?']("to_str"))) {
        return self.$join(other.$to_str())
      };
      other = $coerce_to(other, $$$('Integer'), 'to_int');
      if ($truthy(other < 0)) {
        $Kernel.$raise($$$('ArgumentError'), "negative argument")
      };
      
      var result = [],
          converted = self.$to_a();

      for (var i = 0; i < other; i++) {
        result = result.concat(converted);
      }

      return result;
    ;
    }, 1);
    
    $def(self, '$+', function $Array_$plus$5(other) {
      var self = this;

      
      other = ($eqeqeq($$$('Array'), other) ? (other.$to_a()) : (($coerce_to(other, $$$('Array'), 'to_ary')).$to_a()));
      return self.concat(other);;
    }, 1);
    
    $def(self, '$-', function $Array_$minus$6(other) {
      var self = this;

      
      other = ($eqeqeq($$$('Array'), other) ? (other.$to_a()) : (($coerce_to(other, $$$('Array'), 'to_ary')).$to_a()));
      if ($truthy(self.length === 0)) {
        return []
      };
      if ($truthy(other.length === 0)) {
        return self.slice()
      };
      
      var result = [], hash = $hash2([], {}), i, length, item;

      for (i = 0, length = other.length; i < length; i++) {
        $hash_put(hash, other[i], true);
      }

      for (i = 0, length = self.length; i < length; i++) {
        item = self[i];
        if ($hash_get(hash, item) === undefined) {
          result.push(item);
        }
      }

      return result;
    ;
    }, 1);
    
    $def(self, '$<<', function $Array_$lt$lt$7(object) {
      var self = this;

      
      $deny_frozen_access(self);
      self.push(object);
      return self;
    }, 1);
    
    $def(self, '$<=>', function $Array_$lt_eq_gt$8(other) {
      var self = this;

      
      if ($eqeqeq($$$('Array'), other)) {
        other = other.$to_a()
      } else if ($truthy(other['$respond_to?']("to_ary"))) {
        other = other.$to_ary().$to_a()
      } else {
        return nil
      };
      
      if (self.$hash() === other.$hash()) {
        return 0;
      }

      var count = Math.min(self.length, other.length);

      for (var i = 0; i < count; i++) {
        var tmp = (self[i])['$<=>'](other[i]);

        if (tmp !== 0) {
          return tmp;
        }
      }

      return (self.length)['$<=>'](other.length);
    ;
    }, 1);
    
    $def(self, '$==', function $Array_$eq_eq$9(other) {
      var self = this;

      
      var recursed = {};

      function _eqeq(array, other) {
        var i, length, a, b;

        if (array === other)
          return true;

        if (!other.$$is_array) {
          if ($respond_to(other, '$to_ary')) {
            return (other)['$=='](array);
          } else {
            return false;
          }
        }

        if (array.$$constructor !== Array)
          array = (array).$to_a();
        if (other.$$constructor !== Array)
          other = (other).$to_a();

        if (array.length !== other.length) {
          return false;
        }

        recursed[(array).$object_id()] = true;

        for (i = 0, length = array.length; i < length; i++) {
          a = array[i];
          b = other[i];
          if (a.$$is_array) {
            if (b.$$is_array && b.length !== a.length) {
              return false;
            }
            if (!recursed.hasOwnProperty((a).$object_id())) {
              if (!_eqeq(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$=='](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eqeq(self, other);
    
    }, 1);
    
    function $array_slice_range(self, index) {
      var size = self.length,
          exclude, from, to, result;

      exclude = index.excl;
      from    = index.begin === nil ? 0 : $coerce_to(index.begin, Opal.Integer, 'to_int');
      to      = index.end === nil ? -1 : $coerce_to(index.end, Opal.Integer, 'to_int');

      if (from < 0) {
        from += size;

        if (from < 0) {
          return nil;
        }
      }

      if (index.excl_rev && index.begin !== nil) {
        from += 1;
      }

      if (from > size) {
        return nil;
      }

      if (to < 0) {
        to += size;

        if (to < 0) {
          return [];
        }
      }

      if (!exclude || index.end === nil) {
        to += 1;
      }

      result = self.slice(from, to);
      return result;
    }

    function $array_slice_arithmetic_seq(self, index) {
      var array, out = [], i = 0, pseudorange;

      if (index.step < 0) {
        pseudorange = {
          begin: index.range.end,
          end: index.range.begin,
          excl: false,
          excl_rev: index.range.excl
        };
        array = $array_slice_range(self, pseudorange).$reverse();
      }
      else {
        array = $array_slice_range(self, index.range);
      }

      while (i < array.length) {
        out.push(array[i]);
        i += Math.abs(index.step);
      }

      return out;
    }

    function $array_slice_index_length(self, index, length) {
      var size = self.length,
          exclude, from, to, result;

      index = $coerce_to(index, Opal.Integer, 'to_int');

      if (index < 0) {
        index += size;

        if (index < 0) {
          return nil;
        }
      }

      if (length === undefined) {
        if (index >= size || index < 0) {
          return nil;
        }

        return self[index];
      }
      else {
        length = $coerce_to(length, Opal.Integer, 'to_int');

        if (length < 0 || index > size || index < 0) {
          return nil;
        }

        result = self.slice(index, index + length);
      }
      return result;
    }
  ;
    
    $def(self, '$[]', function $Array_$$$10(index, length) {
      var self = this;

      
      ;
      
      if (index.$$is_range) {
        return $array_slice_range(self, index);
      }
      else if (index.$$is_arithmetic_seq) {
        return $array_slice_arithmetic_seq(self, index);
      }
      else {
        return $array_slice_index_length(self, index, length);
      }
    ;
    }, -2);
    
    $def(self, '$[]=', function $Array_$$$eq$11(index, value, extra) {
      var self = this, data = nil, length = nil;

      
      ;
      $deny_frozen_access(self);
      data = nil;
      
      var i, size = self.length;

      if (index.$$is_range) {
        if (value.$$is_array)
          data = value.$to_a();
        else if (value['$respond_to?']("to_ary"))
          data = value.$to_ary().$to_a();
        else
          data = [value];

        var exclude = index.excl,
            from    = index.begin === nil ? 0 : $coerce_to(index.begin, Opal.Integer, 'to_int'),
            to      = index.end === nil ? -1 : $coerce_to(index.end, Opal.Integer, 'to_int');

        if (from < 0) {
          from += size;

          if (from < 0) {
            $Kernel.$raise($$$('RangeError'), "" + (index.$inspect()) + " out of range");
          }
        }

        if (to < 0) {
          to += size;
        }

        if (!exclude || index.end === nil) {
          to += 1;
        }

        if (from > size) {
          for (i = size; i < from; i++) {
            self[i] = nil;
          }
        }

        if (to < 0) {
          self.splice.apply(self, [from, 0].concat(data));
        }
        else {
          self.splice.apply(self, [from, to - from].concat(data));
        }

        return value;
      } else {
        if (extra === undefined) {
          (length = 1)
        } else {
          length = value;
          value  = extra;

          if (value.$$is_array)
            data = value.$to_a();
          else if (value['$respond_to?']("to_ary"))
            data = value.$to_ary().$to_a();
          else
            data = [value];
        }

        var old;

        index  = $coerce_to(index, $$$('Integer'), 'to_int');
        length = $coerce_to(length, $$$('Integer'), 'to_int');

        if (index < 0) {
          old    = index;
          index += size;

          if (index < 0) {
            $Kernel.$raise($$$('IndexError'), "index " + (old) + " too small for array; minimum " + (-self.length));
          }
        }

        if (length < 0) {
          $Kernel.$raise($$$('IndexError'), "negative length (" + (length) + ")")
        }

        if (index > size) {
          for (i = size; i < index; i++) {
            self[i] = nil;
          }
        }

        if (extra === undefined) {
          self[index] = value;
        }
        else {
          self.splice.apply(self, [index, length].concat(data));
        }

        return value;
      }
    ;
    }, -3);
    
    $def(self, '$any?', function $Array_any$ques$12(pattern) {
      var block = $Array_any$ques$12.$$p || nil, self = this;

      $Array_any$ques$12.$$p = null;
      
      ;
      ;
      if (self.length === 0) return false;
      return $send2(self, $find_super(self, 'any?', $Array_any$ques$12, false, true), 'any?', [pattern], block);
    }, -1);
    
    $def(self, '$assoc', function $$assoc(object) {
      var self = this;

      
      for (var i = 0, length = self.length, item; i < length; i++) {
        if (item = self[i], item.length && (item[0])['$=='](object)) {
          return item;
        }
      }

      return nil;
    
    }, 1);
    
    $def(self, '$at', function $$at(index) {
      var self = this;

      
      index = $coerce_to(index, $$$('Integer'), 'to_int')

      if (index < 0) {
        index += self.length;
      }

      if (index < 0 || index >= self.length) {
        return nil;
      }

      return self[index];
    
    }, 1);
    
    $def(self, '$bsearch_index', function $$bsearch_index() {
      var block = $$bsearch_index.$$p || nil, self = this;

      $$bsearch_index.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return self.$enum_for("bsearch_index")
      };
      
      var min = 0,
          max = self.length,
          mid,
          val,
          ret,
          smaller = false,
          satisfied = nil;

      while (min < max) {
        mid = min + Math.floor((max - min) / 2);
        val = self[mid];
        ret = $yield1(block, val);

        if (ret === true) {
          satisfied = mid;
          smaller = true;
        }
        else if (ret === false || ret === nil) {
          smaller = false;
        }
        else if (ret.$$is_number) {
          if (ret === 0) { return mid; }
          smaller = (ret < 0);
        }
        else {
          $Kernel.$raise($$$('TypeError'), "wrong argument type " + ((ret).$class()) + " (must be numeric, true, false or nil)")
        }

        if (smaller) { max = mid; } else { min = mid + 1; }
      }

      return satisfied;
    ;
    }, 0);
    
    $def(self, '$bsearch', function $$bsearch() {
      var block = $$bsearch.$$p || nil, self = this, index = nil;

      $$bsearch.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return self.$enum_for("bsearch")
      };
      index = $send(self, 'bsearch_index', [], block.$to_proc());
      
      if (index != null && index.$$is_number) {
        return self[index];
      } else {
        return index;
      }
    ;
    }, 0);
    
    $def(self, '$cycle', function $$cycle(n) {
      var block = $$cycle.$$p || nil, self = this;

      $$cycle.$$p = null;
      
      ;
      if (n == null) n = nil;
      if (!(block !== nil)) {
        return $send(self, 'enum_for', ["cycle", n], function $$13(){var self = $$13.$$s == null ? this : $$13.$$s;

          if ($truthy(n['$nil?']())) {
            return $$$($$$('Float'), 'INFINITY')
          } else {
            
            n = $Opal['$coerce_to!'](n, $$$('Integer'), "to_int");
            if ($truthy($rb_gt(n, 0))) {
              return $rb_times(self.$enumerator_size(), n)
            } else {
              return 0
            };
          }}, {$$arity: 0, $$s: self})
      };
      if (($truthy(self['$empty?']()) || ($eqeq(n, 0)))) {
        return nil
      };
      
      var i, length, value;

      if (n === nil) {
        while (true) {
          for (i = 0, length = self.length; i < length; i++) {
            value = $yield1(block, self[i]);
          }
        }
      }
      else {
        n = $Opal['$coerce_to!'](n, $$$('Integer'), "to_int");
        if (n <= 0) {
          return self;
        }

        while (n > 0) {
          for (i = 0, length = self.length; i < length; i++) {
            value = $yield1(block, self[i]);
          }

          n--;
        }
      }
    ;
      return self;
    }, -1);
    
    $def(self, '$clear', function $$clear() {
      var self = this;

      
      $deny_frozen_access(self);
      self.splice(0, self.length);
      return self;
    }, 0);
    
    $def(self, '$count', function $$count(object) {
      var block = $$count.$$p || nil, self = this;

      $$count.$$p = null;
      
      ;
      ;
      if (($truthy(object !== undefined) || ($truthy(block)))) {
        return $send2(self, $find_super(self, 'count', $$count, false, true), 'count', [object], block)
      } else {
        return self.$size()
      };
    }, -1);
    
    $def(self, '$initialize_copy', function $$initialize_copy(other) {
      var self = this;

      return self.$replace(other)
    }, 1);
    
    $def(self, '$collect', function $$collect() {
      var block = $$collect.$$p || nil, self = this;

      $$collect.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return $send(self, 'enum_for', ["collect"], function $$14(){var self = $$14.$$s == null ? this : $$14.$$s;

          return self.$size()}, {$$arity: 0, $$s: self})
      };
      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var value = $yield1(block, self[i]);
        result.push(value);
      }

      return result;
    ;
    }, 0);
    
    $def(self, '$collect!', function $Array_collect$excl$15() {
      var block = $Array_collect$excl$15.$$p || nil, self = this;

      $Array_collect$excl$15.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return $send(self, 'enum_for', ["collect!"], function $$16(){var self = $$16.$$s == null ? this : $$16.$$s;

          return self.$size()}, {$$arity: 0, $$s: self})
      };
      
      $deny_frozen_access(self);

      for (var i = 0, length = self.length; i < length; i++) {
        var value = $yield1(block, self[i]);
        self[i] = value;
      }
    ;
      return self;
    }, 0);
    
    function binomial_coefficient(n, k) {
      if (n === k || k === 0) {
        return 1;
      }

      if (k > 0 && n > k) {
        return binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k);
      }

      return 0;
    }
  ;
    
    $def(self, '$combination', function $$combination(n) {
      var $yield = $$combination.$$p || nil, self = this, num = nil;

      $$combination.$$p = null;
      
      num = $Opal['$coerce_to!'](n, $$$('Integer'), "to_int");
      if (!($yield !== nil)) {
        return $send(self, 'enum_for', ["combination", num], function $$17(){var self = $$17.$$s == null ? this : $$17.$$s;

          return binomial_coefficient(self.length, num)}, {$$arity: 0, $$s: self})
      };
      
      var i, length, stack, chosen, lev, done, next;

      if (num === 0) {
        Opal.yield1($yield, [])
      } else if (num === 1) {
        for (i = 0, length = self.length; i < length; i++) {
          Opal.yield1($yield, [self[i]])
        }
      }
      else if (num === self.length) {
        Opal.yield1($yield, self.slice())
      }
      else if (num >= 0 && num < self.length) {
        stack = [];
        for (i = 0; i <= num + 1; i++) {
          stack.push(0);
        }

        chosen = [];
        lev = 0;
        done = false;
        stack[0] = -1;

        while (!done) {
          chosen[lev] = self[stack[lev+1]];
          while (lev < num - 1) {
            lev++;
            next = stack[lev+1] = stack[lev] + 1;
            chosen[lev] = self[next];
          }
          Opal.yield1($yield, chosen.slice())
          lev++;
          do {
            done = (lev === 0);
            stack[lev]++;
            lev--;
          } while ( stack[lev+1] + num === self.length + lev + 1 );
        }
      }
    ;
      return self;
    }, 1);
    
    $def(self, '$repeated_combination', function $$repeated_combination(n) {
      var $yield = $$repeated_combination.$$p || nil, self = this, num = nil;

      $$repeated_combination.$$p = null;
      
      num = $Opal['$coerce_to!'](n, $$$('Integer'), "to_int");
      if (!($yield !== nil)) {
        return $send(self, 'enum_for', ["repeated_combination", num], function $$18(){var self = $$18.$$s == null ? this : $$18.$$s;

          return binomial_coefficient(self.length + num - 1, num);}, {$$arity: 0, $$s: self})
      };
      
      function iterate(max, from, buffer, self) {
        if (buffer.length == max) {
          var copy = buffer.slice();
          Opal.yield1($yield, copy)
          return;
        }
        for (var i = from; i < self.length; i++) {
          buffer.push(self[i]);
          iterate(max, i, buffer, self);
          buffer.pop();
        }
      }

      if (num >= 0) {
        iterate(num, 0, [], self);
      }
    ;
      return self;
    }, 1);
    
    $def(self, '$compact', function $$compact() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length, item; i < length; i++) {
        if ((item = self[i]) !== nil) {
          result.push(item);
        }
      }

      return result;
    
    }, 0);
    
    $def(self, '$compact!', function $Array_compact$excl$19() {
      var self = this;

      
      $deny_frozen_access(self);

      var original = self.length;

      for (var i = 0, length = self.length; i < length; i++) {
        if (self[i] === nil) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }

      return self.length === original ? nil : self;
    
    }, 0);
    
    $def(self, '$concat', function $$concat($a) {
      var $post_args, others, self = this;

      
      $post_args = $slice.call(arguments);
      others = $post_args;
      $deny_frozen_access(self);
      others = $send(others, 'map', [], function $$20(other){var self = $$20.$$s == null ? this : $$20.$$s;

        
        if (other == null) other = nil;
        other = ($eqeqeq($$$('Array'), other) ? (other.$to_a()) : (($coerce_to(other, $$$('Array'), 'to_ary')).$to_a()));
        if ($truthy(other['$equal?'](self))) {
          other = other.$dup()
        };
        return other;}, {$$arity: 1, $$s: self});
      $send(others, 'each', [], function $$21(other){var self = $$21.$$s == null ? this : $$21.$$s;

        
        if (other == null) other = nil;
        
        for (var i = 0, length = other.length; i < length; i++) {
          self.push(other[i]);
        }
      ;}, {$$arity: 1, $$s: self});
      return self;
    }, -1);
    
    $def(self, '$delete', function $Array_delete$22(object) {
      var $yield = $Array_delete$22.$$p || nil, self = this;

      $Array_delete$22.$$p = null;
      
      var original = self.length;

      for (var i = 0, length = original; i < length; i++) {
        if ((self[i])['$=='](object)) {
          $deny_frozen_access(self);

          self.splice(i, 1);

          length--;
          i--;
        }
      }

      if (self.length === original) {
        if (($yield !== nil)) {
          return Opal.yieldX($yield, []);
        }
        return nil;
      }
      return object;
    
    }, 1);
    
    $def(self, '$delete_at', function $$delete_at(index) {
      var self = this;

      
      $deny_frozen_access(self);

      index = $coerce_to(index, $$$('Integer'), 'to_int');

      if (index < 0) {
        index += self.length;
      }

      if (index < 0 || index >= self.length) {
        return nil;
      }

      var result = self[index];

      self.splice(index, 1);

      return result;
    
    }, 1);
    
    $def(self, '$delete_if', function $$delete_if() {
      var block = $$delete_if.$$p || nil, self = this;

      $$delete_if.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return $send(self, 'enum_for', ["delete_if"], function $$23(){var self = $$23.$$s == null ? this : $$23.$$s;

          return self.$size()}, {$$arity: 0, $$s: self})
      };
      
      $deny_frozen_access(self);

      filterIf(self, $falsy, block)
    ;
      return self;
    }, 0);
    
    $def(self, '$difference', function $$difference($a) {
      var $post_args, arrays, self = this;

      
      $post_args = $slice.call(arguments);
      arrays = $post_args;
      return $send(arrays, 'reduce', [self.$to_a().$dup()], function $$24(a, b){
        
        if (a == null) a = nil;
        if (b == null) b = nil;
        return $rb_minus(a, b);}, 2);
    }, -1);
    
    $def(self, '$dig', function $$dig(idx, $a) {
      var $post_args, idxs, self = this, item = nil;

      
      $post_args = $slice.call(arguments, 1);
      idxs = $post_args;
      item = self['$[]'](idx);
      
      if (item === nil || idxs.length === 0) {
        return item;
      }
    ;
      if (!$truthy(item['$respond_to?']("dig"))) {
        $Kernel.$raise($$$('TypeError'), "" + (item.$class()) + " does not have #dig method")
      };
      return $send(item, 'dig', $to_a(idxs));
    }, -2);
    
    $def(self, '$drop', function $$drop(number) {
      var self = this;

      
      number = $coerce_to(number, $$$('Integer'), 'to_int');

      if (number < 0) {
        $Kernel.$raise($$$('ArgumentError'))
      }

      return self.slice(number);
    
    }, 1);
    
    $def(self, '$dup', function $$dup() {
      var $yield = $$dup.$$p || nil, self = this;

      $$dup.$$p = null;
      
      
      if (self.$$class === Opal.Array &&
          self.$$class.$allocate.$$pristine &&
          self.$copy_instance_variables.$$pristine &&
          self.$initialize_dup.$$pristine) {
        return self.slice(0);
      }
    ;
      return $send2(self, $find_super(self, 'dup', $$dup, false, true), 'dup', [], $yield);
    }, 0);
    
    $def(self, '$each', function $$each() {
      var block = $$each.$$p || nil, self = this;

      $$each.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return $send(self, 'enum_for', ["each"], function $$25(){var self = $$25.$$s == null ? this : $$25.$$s;

          return self.$size()}, {$$arity: 0, $$s: self})
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = $yield1(block, self[i]);
      }
    ;
      return self;
    }, 0);
    
    $def(self, '$each_index', function $$each_index() {
      var block = $$each_index.$$p || nil, self = this;

      $$each_index.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return $send(self, 'enum_for', ["each_index"], function $$26(){var self = $$26.$$s == null ? this : $$26.$$s;

          return self.$size()}, {$$arity: 0, $$s: self})
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = $yield1(block, i);
      }
    ;
      return self;
    }, 0);
    
    $def(self, '$empty?', function $Array_empty$ques$27() {
      var self = this;

      return self.length === 0;
    }, 0);
    
    $def(self, '$eql?', function $Array_eql$ques$28(other) {
      var self = this;

      
      var recursed = {};

      function _eql(array, other) {
        var i, length, a, b;

        if (!other.$$is_array) {
          return false;
        }

        other = other.$to_a();

        if (array.length !== other.length) {
          return false;
        }

        recursed[(array).$object_id()] = true;

        for (i = 0, length = array.length; i < length; i++) {
          a = array[i];
          b = other[i];
          if (a.$$is_array) {
            if (b.$$is_array && b.length !== a.length) {
              return false;
            }
            if (!recursed.hasOwnProperty((a).$object_id())) {
              if (!_eql(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$eql?'](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eql(self, other);
    
    }, 1);
    
    $def(self, '$fetch', function $$fetch(index, defaults) {
      var block = $$fetch.$$p || nil, self = this;

      $$fetch.$$p = null;
      
      ;
      ;
      
      var original = index;

      index = $coerce_to(index, $$$('Integer'), 'to_int');

      if (index < 0) {
        index += self.length;
      }

      if (index >= 0 && index < self.length) {
        return self[index];
      }

      if (block !== nil && defaults != null) {
        self.$warn("warning: block supersedes default value argument")
      }

      if (block !== nil) {
        return block(original);
      }

      if (defaults != null) {
        return defaults;
      }

      if (self.length === 0) {
        $Kernel.$raise($$$('IndexError'), "index " + (original) + " outside of array bounds: 0...0")
      }
      else {
        $Kernel.$raise($$$('IndexError'), "index " + (original) + " outside of array bounds: -" + (self.length) + "..." + (self.length));
      }
    ;
    }, -2);
    
    $def(self, '$fill', function $$fill($a) {
      var block = $$fill.$$p || nil, $post_args, args, $b, $c, self = this, one = nil, two = nil, obj = nil, left = nil, right = nil;

      $$fill.$$p = null;
      
      ;
      $post_args = $slice.call(arguments);
      args = $post_args;
      
      $deny_frozen_access(self);

      var i, length, value;
    ;
      if ($truthy(block)) {
        
        if ($truthy(args.length > 2)) {
          $Kernel.$raise($$$('ArgumentError'), "wrong number of arguments (" + (args.$length()) + " for 0..2)")
        };
        $c = args, $b = $to_ary($c), (one = ($b[0] == null ? nil : $b[0])), (two = ($b[1] == null ? nil : $b[1])), $c;
      } else {
        
        if ($truthy(args.length == 0)) {
          $Kernel.$raise($$$('ArgumentError'), "wrong number of arguments (0 for 1..3)")
        } else if ($truthy(args.length > 3)) {
          $Kernel.$raise($$$('ArgumentError'), "wrong number of arguments (" + (args.$length()) + " for 1..3)")
        };
        $c = args, $b = $to_ary($c), (obj = ($b[0] == null ? nil : $b[0])), (one = ($b[1] == null ? nil : $b[1])), (two = ($b[2] == null ? nil : $b[2])), $c;
      };
      if ($eqeqeq($$$('Range'), one)) {
        
        if ($truthy(two)) {
          $Kernel.$raise($$$('TypeError'), "length invalid with range")
        };
        left = one.begin === nil ? 0 : $coerce_to(one.begin, $$$('Integer'), 'to_int');
        if ($truthy(left < 0)) {
          left += this.length
        };
        if ($truthy(left < 0)) {
          $Kernel.$raise($$$('RangeError'), "" + (one.$inspect()) + " out of range")
        };
        right = one.end === nil ? -1 : $coerce_to(one.end, $$$('Integer'), 'to_int');
        if ($truthy(right < 0)) {
          right += this.length
        };
        if (!$truthy(one['$exclude_end?']())) {
          right += 1
        };
        if ($truthy(right <= left)) {
          return self
        };
      } else if ($truthy(one)) {
        
        left = $coerce_to(one, $$$('Integer'), 'to_int');
        if ($truthy(left < 0)) {
          left += this.length
        };
        if ($truthy(left < 0)) {
          left = 0
        };
        if ($truthy(two)) {
          
          right = $coerce_to(two, $$$('Integer'), 'to_int');
          if ($truthy(right == 0)) {
            return self
          };
          right += left;
        } else {
          right = this.length
        };
      } else {
        
        left = 0;
        right = this.length;
      };
      if ($truthy(left > this.length)) {
        
        for (i = this.length; i < right; i++) {
          self[i] = nil;
        }
      
      };
      if ($truthy(right > this.length)) {
        this.length = right
      };
      if ($truthy(block)) {
        
        for (length = this.length; left < right; left++) {
          value = block(left);
          self[left] = value;
        }
      
      } else {
        
        for (length = this.length; left < right; left++) {
          self[left] = obj;
        }
      
      };
      return self;
    }, -1);
    
    $def(self, '$first', function $$first(count) {
      var self = this;

      
      ;
      
      if (count == null) {
        return self.length === 0 ? nil : self[0];
      }

      count = $coerce_to(count, $$$('Integer'), 'to_int');

      if (count < 0) {
        $Kernel.$raise($$$('ArgumentError'), "negative array size");
      }

      return self.slice(0, count);
    ;
    }, -1);
    
    $def(self, '$flatten', function $$flatten(level) {
      var self = this;

      
      ;
      
      function _flatten(array, level) {
        var result = [],
            i, length,
            item, ary;

        array = (array).$to_a();

        for (i = 0, length = array.length; i < length; i++) {
          item = array[i];

          if (!$respond_to(item, '$to_ary', true)) {
            result.push(item);
            continue;
          }

          ary = (item).$to_ary();

          if (ary === nil) {
            result.push(item);
            continue;
          }

          if (!ary.$$is_array) {
            $Kernel.$raise($$$('TypeError'));
          }

          if (ary === self) {
            $Kernel.$raise($$$('ArgumentError'));
          }

          switch (level) {
          case undefined:
            result = result.concat(_flatten(ary));
            break;
          case 0:
            result.push(ary);
            break;
          default:
            result.push.apply(result, _flatten(ary, level - 1));
          }
        }
        return result;
      }

      if (level !== undefined) {
        level = $coerce_to(level, $$$('Integer'), 'to_int');
      }

      return _flatten(self, level);
    ;
    }, -1);
    
    $def(self, '$flatten!', function $Array_flatten$excl$29(level) {
      var self = this;

      
      ;
      
      $deny_frozen_access(self);

      var flattened = self.$flatten(level);

      if (self.length == flattened.length) {
        for (var i = 0, length = self.length; i < length; i++) {
          if (self[i] !== flattened[i]) {
            break;
          }
        }

        if (i == length) {
          return nil;
        }
      }

      self.$replace(flattened);
    ;
      return self;
    }, -1);
    
    $def(self, '$freeze', function $$freeze() {
      var self = this;

      
      if ($truthy(self['$frozen?']())) {
        return self
      };
      return $freeze(self);;
    }, 0);
    
    $def(self, '$hash', function $$hash() {
      var self = this;

      
      var top = ($hash_ids === undefined),
          result = ['A'],
          hash_id = self.$object_id(),
          item, i, key;

      try {
        if (top) {
          $hash_ids = Object.create(null);
        }

        // return early for recursive structures
        if ($hash_ids[hash_id]) {
          return 'self';
        }

        for (key in $hash_ids) {
          item = $hash_ids[key];
          if (self['$eql?'](item)) {
            return 'self';
          }
        }

        $hash_ids[hash_id] = self;

        for (i = 0; i < self.length; i++) {
          item = self[i];
          result.push(item.$hash());
        }

        return result.join(',');
      } finally {
        if (top) {
          $hash_ids = undefined;
        }
      }
    
    }, 0);
    
    $def(self, '$include?', function $Array_include$ques$30(member) {
      var self = this;

      
      for (var i = 0, length = self.length; i < length; i++) {
        if ((self[i])['$=='](member)) {
          return true;
        }
      }

      return false;
    
    }, 1);
    
    $def(self, '$index', function $$index(object) {
      var block = $$index.$$p || nil, self = this;

      $$index.$$p = null;
      
      ;
      ;
      
      var i, length, value;

      if (object != null && block !== nil) {
        self.$warn("warning: given block not used")
      }

      if (object != null) {
        for (i = 0, length = self.length; i < length; i++) {
          if ((self[i])['$=='](object)) {
            return i;
          }
        }
      }
      else if (block !== nil) {
        for (i = 0, length = self.length; i < length; i++) {
          value = block(self[i]);

          if (value !== false && value !== nil) {
            return i;
          }
        }
      }
      else {
        return self.$enum_for("index");
      }

      return nil;
    ;
    }, -1);
    
    $def(self, '$insert', function $$insert(index, $a) {
      var $post_args, objects, self = this;

      
      $post_args = $slice.call(arguments, 1);
      objects = $post_args;
      
      $deny_frozen_access(self);

      index = $coerce_to(index, $$$('Integer'), 'to_int');

      if (objects.length > 0) {
        if (index < 0) {
          index += self.length + 1;

          if (index < 0) {
            $Kernel.$raise($$$('IndexError'), "" + (index) + " is out of bounds");
          }
        }
        if (index > self.length) {
          for (var i = self.length; i < index; i++) {
            self.push(nil);
          }
        }

        self.splice.apply(self, [index, 0].concat(objects));
      }
    ;
      return self;
    }, -2);
    var inspect_stack = [];
    
    $def(self, '$inspect', function $$inspect() {
      var self = this;

      
      
      var result = [],
      id = self.$__id__(),
      pushed = true;
    ;
      
      return (function() { try {
      
      
        if (inspect_stack.indexOf(id) !== -1) {
          pushed = false;
          return '[...]';
        }
        inspect_stack.push(id)

        for (var i = 0, length = self.length; i < length; i++) {
          var item = self['$[]'](i);

          result.push($$('Opal').$inspect(item));
        }

        return '[' + result.join(', ') + ']';
      ;
      return nil;
      } finally {
        if (pushed) inspect_stack.pop()
      }; })();;
    }, 0);
    
    $def(self, '$intersection', function $$intersection($a) {
      var $post_args, arrays, self = this;

      
      $post_args = $slice.call(arguments);
      arrays = $post_args;
      return $send(arrays, 'reduce', [self.$to_a().$dup()], function $$31(a, b){
        
        if (a == null) a = nil;
        if (b == null) b = nil;
        return a['$&'](b);}, 2);
    }, -1);
    
    $def(self, '$intersect?', function $Array_intersect$ques$32(other) {
      var self = this;

      return self.$intersection(other)['$empty?']()['$!']()
    }, 1);
    
    $def(self, '$join', function $$join(sep) {
      var self = this;
      if ($gvars[","] == null) $gvars[","] = nil;

      
      if (sep == null) sep = nil;
      if ($truthy(self.length === 0)) {
        return ""
      };
      if ($truthy(sep === nil)) {
        sep = $gvars[","]
      };
      
      var result = [];
      var i, length, item, tmp;

      for (i = 0, length = self.length; i < length; i++) {
        item = self[i];

        if ($respond_to(item, '$to_str')) {
          tmp = (item).$to_str();

          if (tmp !== nil) {
            result.push((tmp).$to_s());

            continue;
          }
        }

        if ($respond_to(item, '$to_ary')) {
          tmp = (item).$to_ary();

          if (tmp === self) {
            $Kernel.$raise($$$('ArgumentError'));
          }

          if (tmp !== nil) {
            result.push((tmp).$join(sep));

            continue;
          }
        }

        if ($respond_to(item, '$to_s')) {
          tmp = (item).$to_s();

          if (tmp !== nil) {
            result.push(tmp);

            continue;
          }
        }

        $Kernel.$raise($$$('NoMethodError').$new("" + ($$('Opal').$inspect(self.$item())) + " doesn't respond to #to_str, #to_ary or #to_s", "to_str"));
      }

      if (sep === nil) {
        return result.join('');
      }
      else {
        return result.join($Opal['$coerce_to!'](sep, $$$('String'), "to_str").$to_s());
      }
    ;
    }, -1);
    
    $def(self, '$keep_if', function $$keep_if() {
      var block = $$keep_if.$$p || nil, self = this;

      $$keep_if.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return $send(self, 'enum_for', ["keep_if"], function $$33(){var self = $$33.$$s == null ? this : $$33.$$s;

          return self.$size()}, {$$arity: 0, $$s: self})
      };
      
      $deny_frozen_access(self);

      filterIf(self, $truthy, block)
    ;
      return self;
    }, 0);
    
    $def(self, '$last', function $$last(count) {
      var self = this;

      
      ;
      
      if (count == null) {
        return self.length === 0 ? nil : self[self.length - 1];
      }

      count = $coerce_to(count, $$$('Integer'), 'to_int');

      if (count < 0) {
        $Kernel.$raise($$$('ArgumentError'), "negative array size");
      }

      if (count > self.length) {
        count = self.length;
      }

      return self.slice(self.length - count, self.length);
    ;
    }, -1);
    
    $def(self, '$length', function $$length() {
      var self = this;

      return self.length;
    }, 0);
    
    $def(self, '$max', function $$max(n) {
      var block = $$max.$$p || nil, self = this;

      $$max.$$p = null;
      
      ;
      ;
      return $send(self.$each(), 'max', [n], block.$to_proc());
    }, -1);
    
    $def(self, '$min', function $$min() {
      var block = $$min.$$p || nil, self = this;

      $$min.$$p = null;
      
      ;
      return $send(self.$each(), 'min', [], block.$to_proc());
    }, 0);
    
    // Returns the product of from, from-1, ..., from - how_many + 1.
    function descending_factorial(from, how_many) {
      var count = how_many >= 0 ? 1 : 0;
      while (how_many) {
        count *= from;
        from--;
        how_many--;
      }
      return count;
    }
  ;
    
    $def(self, '$permutation', function $$permutation(num) {
      var block = $$permutation.$$p || nil, self = this, perm = nil, used = nil;

      $$permutation.$$p = null;
      
      ;
      ;
      if (!(block !== nil)) {
        return $send(self, 'enum_for', ["permutation", num], function $$34(){var self = $$34.$$s == null ? this : $$34.$$s;

          return descending_factorial(self.length, num === undefined ? self.length : num);}, {$$arity: 0, $$s: self})
      };
      
      var permute, offensive, output;

      if (num === undefined) {
        num = self.length;
      }
      else {
        num = $coerce_to(num, $$$('Integer'), 'to_int');
      }

      if (num < 0 || self.length < num) {
        // no permutations, yield nothing
      }
      else if (num === 0) {
        // exactly one permutation: the zero-length array
        Opal.yield1(block, [])
      }
      else if (num === 1) {
        // this is a special, easy case
        for (var i = 0; i < self.length; i++) {
          Opal.yield1(block, [self[i]])
        }
      }
      else {
        // this is the general case
        (perm = $$('Array').$new(num));
        (used = $$('Array').$new(self.length, false));

        permute = function(num, perm, index, used, blk) {
          self = this;
          for(var i = 0; i < self.length; i++){
            if(used['$[]'](i)['$!']()) {
              perm[index] = i;
              if(index < num - 1) {
                used[i] = true;
                permute.call(self, num, perm, index + 1, used, blk);
                used[i] = false;
              }
              else {
                output = [];
                for (var j = 0; j < perm.length; j++) {
                  output.push(self[perm[j]]);
                }
                $yield1(blk, output);
              }
            }
          }
        }

        if ((block !== nil)) {
          // offensive (both definitions) copy.
          offensive = self.slice();
          permute.call(offensive, num, perm, 0, used, block);
        }
        else {
          permute.call(self, num, perm, 0, used, block);
        }
      }
    ;
      return self;
    }, -1);
    
    $def(self, '$repeated_permutation', function $$repeated_permutation(n) {
      var $yield = $$repeated_permutation.$$p || nil, self = this, num = nil;

      $$repeated_permutation.$$p = null;
      
      num = $Opal['$coerce_to!'](n, $$$('Integer'), "to_int");
      if (!($yield !== nil)) {
        return $send(self, 'enum_for', ["repeated_permutation", num], function $$35(){var self = $$35.$$s == null ? this : $$35.$$s;

          if ($truthy($rb_ge(num, 0))) {
            return self.$size()['$**'](num)
          } else {
            return 0
          }}, {$$arity: 0, $$s: self})
      };
      
      function iterate(max, buffer, self) {
        if (buffer.length == max) {
          var copy = buffer.slice();
          Opal.yield1($yield, copy)
          return;
        }
        for (var i = 0; i < self.length; i++) {
          buffer.push(self[i]);
          iterate(max, buffer, self);
          buffer.pop();
        }
      }

      iterate(num, [], self.slice());
    ;
      return self;
    }, 1);
    
    $def(self, '$pop', function $$pop(count) {
      var self = this;

      
      ;
      $deny_frozen_access(self);
      if ($truthy(count === undefined)) {
        
        if ($truthy(self.length === 0)) {
          return nil
        };
        return self.pop();
      };
      count = $coerce_to(count, $$$('Integer'), 'to_int');
      if ($truthy(count < 0)) {
        $Kernel.$raise($$$('ArgumentError'), "negative array size")
      };
      if ($truthy(self.length === 0)) {
        return []
      };
      if ($truthy(count === 1)) {
        return [self.pop()];
      } else if ($truthy(count > self.length)) {
        return self.splice(0, self.length);
      } else {
        return self.splice(self.length - count, self.length);
      };
    }, -1);
    
    $def(self, '$product', function $$product($a) {
      var block = $$product.$$p || nil, $post_args, args, self = this;

      $$product.$$p = null;
      
      ;
      $post_args = $slice.call(arguments);
      args = $post_args;
      
      var result = (block !== nil) ? null : [],
          n = args.length + 1,
          counters = new Array(n),
          lengths  = new Array(n),
          arrays   = new Array(n),
          i, m, subarray, len, resultlen = 1;

      arrays[0] = self;
      for (i = 1; i < n; i++) {
        arrays[i] = $coerce_to(args[i - 1], $$$('Array'), 'to_ary');
      }

      for (i = 0; i < n; i++) {
        len = arrays[i].length;
        if (len === 0) {
          return result || self;
        }
        resultlen *= len;
        if (resultlen > 2147483647) {
          $Kernel.$raise($$$('RangeError'), "too big to product")
        }
        lengths[i] = len;
        counters[i] = 0;
      }

      outer_loop: for (;;) {
        subarray = [];
        for (i = 0; i < n; i++) {
          subarray.push(arrays[i][counters[i]]);
        }
        if (result) {
          result.push(subarray);
        } else {
          Opal.yield1(block, subarray)
        }
        m = n - 1;
        counters[m]++;
        while (counters[m] === lengths[m]) {
          counters[m] = 0;
          if (--m < 0) break outer_loop;
          counters[m]++;
        }
      }

      return result || self;
    ;
    }, -1);
    
    $def(self, '$push', function $$push($a) {
      var $post_args, objects, self = this;

      
      $post_args = $slice.call(arguments);
      objects = $post_args;
      
      $deny_frozen_access(self);

      for (var i = 0, length = objects.length; i < length; i++) {
        self.push(objects[i]);
      }
    ;
      return self;
    }, -1);
    
    $def(self, '$rassoc', function $$rassoc(object) {
      var self = this;

      
      for (var i = 0, length = self.length, item; i < length; i++) {
        item = self[i];

        if (item.length && item[1] !== undefined) {
          if ((item[1])['$=='](object)) {
            return item;
          }
        }
      }

      return nil;
    
    }, 1);
    
    $def(self, '$reject', function $$reject() {
      var block = $$reject.$$p || nil, self = this;

      $$reject.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return $send(self, 'enum_for', ["reject"], function $$36(){var self = $$36.$$s == null ? this : $$36.$$s;

          return self.$size()}, {$$arity: 0, $$s: self})
      };
      
      var result = [];

      for (var i = 0, length = self.length, value; i < length; i++) {
        value = block(self[i]);

        if (value === false || value === nil) {
          result.push(self[i]);
        }
      }
      return result;
    ;
    }, 0);
    
    $def(self, '$reject!', function $Array_reject$excl$37() {
      var block = $Array_reject$excl$37.$$p || nil, self = this, original = nil;

      $Array_reject$excl$37.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return $send(self, 'enum_for', ["reject!"], function $$38(){var self = $$38.$$s == null ? this : $$38.$$s;

          return self.$size()}, {$$arity: 0, $$s: self})
      };
      $deny_frozen_access(self);
      original = self.$length();
      $send(self, 'delete_if', [], block.$to_proc());
      if ($eqeq(self.$length(), original)) {
        return nil
      } else {
        return self
      };
    }, 0);
    
    $def(self, '$replace', function $$replace(other) {
      var self = this;

      
      $deny_frozen_access(self);
      other = ($eqeqeq($$$('Array'), other) ? (other.$to_a()) : (($coerce_to(other, $$$('Array'), 'to_ary')).$to_a()));
      
      self.splice(0, self.length);
      self.push.apply(self, other);
    ;
      return self;
    }, 1);
    
    $def(self, '$reverse', function $$reverse() {
      var self = this;

      return self.slice(0).reverse();
    }, 0);
    
    $def(self, '$reverse!', function $Array_reverse$excl$39() {
      var self = this;

      
      $deny_frozen_access(self);
      return self.reverse();;
    }, 0);
    
    $def(self, '$reverse_each', function $$reverse_each() {
      var block = $$reverse_each.$$p || nil, self = this;

      $$reverse_each.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return $send(self, 'enum_for', ["reverse_each"], function $$40(){var self = $$40.$$s == null ? this : $$40.$$s;

          return self.$size()}, {$$arity: 0, $$s: self})
      };
      $send(self.$reverse(), 'each', [], block.$to_proc());
      return self;
    }, 0);
    
    $def(self, '$rindex', function $$rindex(object) {
      var block = $$rindex.$$p || nil, self = this;

      $$rindex.$$p = null;
      
      ;
      ;
      
      var i, value;

      if (object != null && block !== nil) {
        self.$warn("warning: given block not used")
      }

      if (object != null) {
        for (i = self.length - 1; i >= 0; i--) {
          if (i >= self.length) {
            break;
          }
          if ((self[i])['$=='](object)) {
            return i;
          }
        }
      }
      else if (block !== nil) {
        for (i = self.length - 1; i >= 0; i--) {
          if (i >= self.length) {
            break;
          }

          value = block(self[i]);

          if (value !== false && value !== nil) {
            return i;
          }
        }
      }
      else if (object == null) {
        return self.$enum_for("rindex");
      }

      return nil;
    ;
    }, -1);
    
    $def(self, '$rotate', function $$rotate(n) {
      var self = this;

      
      if (n == null) n = 1;
      
      var ary, idx, firstPart, lastPart;

      n = $coerce_to(n, $$$('Integer'), 'to_int')

      if (self.length === 1) {
        return self.slice();
      }
      if (self.length === 0) {
        return [];
      }

      ary = self.slice();
      idx = n % ary.length;

      firstPart = ary.slice(idx);
      lastPart = ary.slice(0, idx);
      return firstPart.concat(lastPart);
    ;
    }, -1);
    
    $def(self, '$rotate!', function $Array_rotate$excl$41(cnt) {
      var self = this, ary = nil;

      
      if (cnt == null) cnt = 1;
      
      $deny_frozen_access(self);

      if (self.length === 0 || self.length === 1) {
        return self;
      }
      cnt = $coerce_to(cnt, $$$('Integer'), 'to_int');
    ;
      ary = self.$rotate(cnt);
      return self.$replace(ary);
    }, -1);
    (function($base, $super) {
      var self = $klass($base, $super, 'SampleRandom');

      var $proto = self.$$prototype;

      $proto.rng = nil;
      
      
      $def(self, '$initialize', $assign_ivar("rng"), 0);
      return $def(self, '$rand', function $$rand(size) {
        var self = this, random = nil;

        
        random = $coerce_to(self.rng.$rand(size), $$$('Integer'), 'to_int');
        if ($truthy(random < 0)) {
          $Kernel.$raise($$$('RangeError'), "random value must be >= 0")
        };
        if (!$truthy(random < size)) {
          $Kernel.$raise($$$('RangeError'), "random value must be less than Array size")
        };
        return random;
      }, 1);
    })(self, null);
    
    $def(self, '$sample', function $$sample(count, options) {
      var self = this, o = nil, rng = nil;

      
      ;
      ;
      if ($truthy(count === undefined)) {
        return self.$at($Kernel.$rand(self.length))
      };
      if ($truthy(options === undefined)) {
        if ($truthy((o = $Opal['$coerce_to?'](count, $$$('Hash'), "to_hash")))) {
          
          options = o;
          count = nil;
        } else {
          
          options = nil;
          count = $coerce_to(count, $$$('Integer'), 'to_int');
        }
      } else {
        
        count = $coerce_to(count, $$$('Integer'), 'to_int');
        options = $coerce_to(options, $$$('Hash'), 'to_hash');
      };
      if (($truthy(count) && ($truthy(count < 0)))) {
        $Kernel.$raise($$$('ArgumentError'), "count must be greater than 0")
      };
      if ($truthy(options)) {
        rng = options['$[]']("random")
      };
      rng = (($truthy(rng) && ($truthy(rng['$respond_to?']("rand")))) ? ($$('SampleRandom').$new(rng)) : ($Kernel));
      if (!$truthy(count)) {
        return self[rng.$rand(self.length)]
      };
      

      var abandon, spin, result, i, j, k, targetIndex, oldValue;

      if (count > self.length) {
        count = self.length;
      }

      switch (count) {
        case 0:
          return [];
          break;
        case 1:
          return [self[rng.$rand(self.length)]];
          break;
        case 2:
          i = rng.$rand(self.length);
          j = rng.$rand(self.length);
          if (i === j) {
            j = i === 0 ? i + 1 : i - 1;
          }
          return [self[i], self[j]];
          break;
        default:
          if (self.length / count > 3) {
            abandon = false;
            spin = 0;

            result = $$('Array').$new(count);
            i = 1;

            result[0] = rng.$rand(self.length);
            while (i < count) {
              k = rng.$rand(self.length);
              j = 0;

              while (j < i) {
                while (k === result[j]) {
                  spin++;
                  if (spin > 100) {
                    abandon = true;
                    break;
                  }
                  k = rng.$rand(self.length);
                }
                if (abandon) { break; }

                j++;
              }

              if (abandon) { break; }

              result[i] = k;

              i++;
            }

            if (!abandon) {
              i = 0;
              while (i < count) {
                result[i] = self[result[i]];
                i++;
              }

              return result;
            }
          }

          result = self.slice();

          for (var c = 0; c < count; c++) {
            targetIndex = rng.$rand(self.length);
            oldValue = result[c];
            result[c] = result[targetIndex];
            result[targetIndex] = oldValue;
          }

          return count === self.length ? result : (result)['$[]'](0, count);
      }
    ;
    }, -1);
    
    $def(self, '$select', function $$select() {
      var block = $$select.$$p || nil, self = this;

      $$select.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return $send(self, 'enum_for', ["select"], function $$42(){var self = $$42.$$s == null ? this : $$42.$$s;

          return self.$size()}, {$$arity: 0, $$s: self})
      };
      
      var result = [];

      for (var i = 0, length = self.length, item, value; i < length; i++) {
        item = self[i];

        value = $yield1(block, item);

        if ($truthy(value)) {
          result.push(item);
        }
      }

      return result;
    ;
    }, 0);
    
    $def(self, '$select!', function $Array_select$excl$43() {
      var block = $Array_select$excl$43.$$p || nil, self = this;

      $Array_select$excl$43.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return $send(self, 'enum_for', ["select!"], function $$44(){var self = $$44.$$s == null ? this : $$44.$$s;

          return self.$size()}, {$$arity: 0, $$s: self})
      };
      
      $deny_frozen_access(self)

      var original = self.length;
      $send(self, 'keep_if', [], block.$to_proc());
      return self.length === original ? nil : self;
    ;
    }, 0);
    
    $def(self, '$shift', function $$shift(count) {
      var self = this;

      
      ;
      $deny_frozen_access(self);
      if ($truthy(count === undefined)) {
        
        if ($truthy(self.length === 0)) {
          return nil
        };
        return shiftNoArg(self);
      };
      count = $coerce_to(count, $$$('Integer'), 'to_int');
      if ($truthy(count < 0)) {
        $Kernel.$raise($$$('ArgumentError'), "negative array size")
      };
      if ($truthy(self.length === 0)) {
        return []
      };
      return self.splice(0, count);;
    }, -1);
    
    $def(self, '$shuffle', function $$shuffle(rng) {
      var self = this;

      
      ;
      return self.$dup().$to_a()['$shuffle!'](rng);
    }, -1);
    
    $def(self, '$shuffle!', function $Array_shuffle$excl$45(rng) {
      var self = this;

      
      ;
      
      $deny_frozen_access(self);

      var randgen, i = self.length, j, tmp;

      if (rng !== undefined) {
        rng = $Opal['$coerce_to?'](rng, $$$('Hash'), "to_hash");

        if (rng !== nil) {
          rng = rng['$[]']("random");

          if (rng !== nil && rng['$respond_to?']("rand")) {
            randgen = rng;
          }
        }
      }

      while (i) {
        if (randgen) {
          j = randgen.$rand(i).$to_int();

          if (j < 0) {
            $Kernel.$raise($$$('RangeError'), "random number too small " + (j))
          }

          if (j >= i) {
            $Kernel.$raise($$$('RangeError'), "random number too big " + (j))
          }
        }
        else {
          j = self.$rand(i);
        }

        tmp = self[--i];
        self[i] = self[j];
        self[j] = tmp;
      }

      return self;
    ;
    }, -1);
    
    $def(self, '$slice!', function $Array_slice$excl$46(index, length) {
      var self = this, result = nil, range = nil, range_start = nil, range_end = nil, start = nil;

      
      ;
      $deny_frozen_access(self);
      result = nil;
      if ($truthy(length === undefined)) {
        if ($eqeqeq($$$('Range'), index)) {
          
          range = index;
          result = self['$[]'](range);
          range_start = range.begin === nil ? 0 : $coerce_to(range.begin, $$$('Integer'), 'to_int');
          range_end = range.end === nil ? -1 : $coerce_to(range.end, $$$('Integer'), 'to_int');
          
          if (range_start < 0) {
            range_start += self.length;
          }

          if (range_end < 0) {
            range_end += self.length;
          } else if (range_end >= self.length) {
            range_end = self.length - 1;
            if (range.excl) {
              range_end += 1;
            }
          }

          var range_length = range_end - range_start;
          if (range.excl && range.end !== nil) {
            range_end -= 1;
          } else {
            range_length += 1;
          }

          if (range_start < self.length && range_start >= 0 && range_end < self.length && range_end >= 0 && range_length > 0) {
            self.splice(range_start, range_length);
          }
        ;
        } else {
          
          start = $coerce_to(index, $$$('Integer'), 'to_int');
          
          if (start < 0) {
            start += self.length;
          }

          if (start < 0 || start >= self.length) {
            return nil;
          }

          result = self[start];

          if (start === 0) {
            self.shift();
          } else {
            self.splice(start, 1);
          }
        ;
        }
      } else {
        
        start = $coerce_to(index, $$$('Integer'), 'to_int');
        length = $coerce_to(length, $$$('Integer'), 'to_int');
        
        if (length < 0) {
          return nil;
        }

        var end = start + length;

        result = self['$[]'](start, length);

        if (start < 0) {
          start += self.length;
        }

        if (start + length > self.length) {
          length = self.length - start;
        }

        if (start < self.length && start >= 0) {
          self.splice(start, length);
        }
      ;
      };
      return result;
    }, -2);
    
    $def(self, '$sort', function $$sort() {
      var block = $$sort.$$p || nil, self = this;

      $$sort.$$p = null;
      
      ;
      if (!$truthy(self.length > 1)) {
        return self
      };
      
      if (block === nil) {
        block = function(a, b) {
          return (a)['$<=>'](b);
        };
      }

      return self.slice().sort(function(x, y) {
        var ret = block(x, y);

        if (ret === nil) {
          $Kernel.$raise($$$('ArgumentError'), "comparison of " + ((x).$inspect()) + " with " + ((y).$inspect()) + " failed");
        }

        return $rb_gt(ret, 0) ? 1 : ($rb_lt(ret, 0) ? -1 : 0);
      });
    ;
    }, 0);
    
    $def(self, '$sort!', function $Array_sort$excl$47() {
      var block = $Array_sort$excl$47.$$p || nil, self = this;

      $Array_sort$excl$47.$$p = null;
      
      ;
      
      $deny_frozen_access(self)

      var result;

      if ((block !== nil)) {
        result = $send((self.slice()), 'sort', [], block.$to_proc());
      }
      else {
        result = (self.slice()).$sort();
      }

      self.length = 0;
      for(var i = 0, length = result.length; i < length; i++) {
        self.push(result[i]);
      }

      return self;
    ;
    }, 0);
    
    $def(self, '$sort_by!', function $Array_sort_by$excl$48() {
      var block = $Array_sort_by$excl$48.$$p || nil, self = this;

      $Array_sort_by$excl$48.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return $send(self, 'enum_for', ["sort_by!"], function $$49(){var self = $$49.$$s == null ? this : $$49.$$s;

          return self.$size()}, {$$arity: 0, $$s: self})
      };
      $deny_frozen_access(self);
      return self.$replace($send(self, 'sort_by', [], block.$to_proc()));
    }, 0);
    
    $def(self, '$take', function $$take(count) {
      var self = this;

      
      if (count < 0) {
        $Kernel.$raise($$$('ArgumentError'));
      }

      return self.slice(0, count);
    
    }, 1);
    
    $def(self, '$take_while', function $$take_while() {
      var block = $$take_while.$$p || nil, self = this;

      $$take_while.$$p = null;
      
      ;
      
      var result = [];

      for (var i = 0, length = self.length, item, value; i < length; i++) {
        item = self[i];

        value = block(item);

        if (value === false || value === nil) {
          return result;
        }

        result.push(item);
      }

      return result;
    ;
    }, 0);
    
    $def(self, '$to_a', function $$to_a() {
      var self = this;

      
      if (self.$$class === Opal.Array) {
        return self;
      }
      else {
        return Opal.Array.$new(self);
      }
    
    }, 0);
    
    $def(self, '$to_ary', $return_self, 0);
    
    $def(self, '$to_h', function $$to_h() {
      var block = $$to_h.$$p || nil, self = this, array = nil;

      $$to_h.$$p = null;
      
      ;
      array = self;
      if ((block !== nil)) {
        array = $send(array, 'map', [], block.$to_proc())
      };
      
      var i, len = array.length, ary, key, val, hash = $hash2([], {});

      for (i = 0; i < len; i++) {
        ary = $Opal['$coerce_to?'](array[i], $$$('Array'), "to_ary");
        if (!ary.$$is_array) {
          $Kernel.$raise($$$('TypeError'), "wrong element type " + ((ary).$class()) + " at " + (i) + " (expected array)")
        }
        if (ary.length !== 2) {
          $Kernel.$raise($$$('ArgumentError'), "wrong array length at " + (i) + " (expected 2, was " + ((ary).$length()) + ")")
        }
        key = ary[0];
        val = ary[1];
        $hash_put(hash, key, val);
      }

      return hash;
    ;
    }, 0);
    
    $def(self, '$transpose', function $$transpose() {
      var self = this, result = nil, max = nil;

      
      if ($truthy(self['$empty?']())) {
        return []
      };
      result = [];
      max = nil;
      $send(self, 'each', [], function $$50(row){var $ret_or_1 = nil;

        
        if (row == null) row = nil;
        row = ($eqeqeq($$$('Array'), row) ? (row.$to_a()) : (($coerce_to(row, $$$('Array'), 'to_ary')).$to_a()));
        max = ($truthy(($ret_or_1 = max)) ? ($ret_or_1) : (row.length));
        if ($neqeq(row.length, max)) {
          $Kernel.$raise($$$('IndexError'), "element size differs (" + (row.length) + " should be " + (max) + ")")
        };
        return $send((row.length), 'times', [], function $$51(i){var $a, entry = nil;

          
          if (i == null) i = nil;
          entry = ($truthy(($ret_or_1 = result['$[]'](i))) ? ($ret_or_1) : (($a = [i, []], $send(result, '[]=', $a), $a[$a.length - 1])));
          return entry['$<<'](row.$at(i));}, 1);}, 1);
      return result;
    }, 0);
    
    $def(self, '$union', function $$union($a) {
      var $post_args, arrays, self = this;

      
      $post_args = $slice.call(arguments);
      arrays = $post_args;
      return $send(arrays, 'reduce', [self.$uniq()], function $$52(a, b){
        
        if (a == null) a = nil;
        if (b == null) b = nil;
        return a['$|'](b);}, 2);
    }, -1);
    
    $def(self, '$uniq', function $$uniq() {
      var block = $$uniq.$$p || nil, self = this;

      $$uniq.$$p = null;
      
      ;
      
      var hash = $hash2([], {}), i, length, item, key;

      if (block === nil) {
        for (i = 0, length = self.length; i < length; i++) {
          item = self[i];
          if ($hash_get(hash, item) === undefined) {
            $hash_put(hash, item, item);
          }
        }
      }
      else {
        for (i = 0, length = self.length; i < length; i++) {
          item = self[i];
          key = $yield1(block, item);
          if ($hash_get(hash, key) === undefined) {
            $hash_put(hash, key, item);
          }
        }
      }

      return (hash).$values();
    ;
    }, 0);
    
    $def(self, '$uniq!', function $Array_uniq$excl$53() {
      var block = $Array_uniq$excl$53.$$p || nil, self = this;

      $Array_uniq$excl$53.$$p = null;
      
      ;
      
      $deny_frozen_access(self);

      var original_length = self.length, hash = $hash2([], {}), i, length, item, key;

      for (i = 0, length = original_length; i < length; i++) {
        item = self[i];
        key = (block === nil ? item : $yield1(block, item));

        if ($hash_get(hash, key) === undefined) {
          $hash_put(hash, key, item);
          continue;
        }

        self.splice(i, 1);
        length--;
        i--;
      }

      return self.length === original_length ? nil : self;
    ;
    }, 0);
    
    $def(self, '$unshift', function $$unshift($a) {
      var $post_args, objects, self = this;

      
      $post_args = $slice.call(arguments);
      objects = $post_args;
      
      $deny_frozen_access(self);

      var selfLength = self.length
      var objectsLength = objects.length
      if (objectsLength == 0) return self;
      var index = selfLength - objectsLength
      for (var i = 0; i < objectsLength; i++) {
        self.push(self[index + i])
      }
      var len = selfLength - 1
      while (len - objectsLength >= 0) {
        self[len] = self[len - objectsLength]
        len--
      }
      for (var j = 0; j < objectsLength; j++) {
        self[j] = objects[j]
      }
      return self;
    ;
    }, -1);
    
    $def(self, '$values_at', function $$values_at($a) {
      var $post_args, args, self = this, out = nil;

      
      $post_args = $slice.call(arguments);
      args = $post_args;
      out = [];
      $send(args, 'each', [], function $$54(elem){var self = $$54.$$s == null ? this : $$54.$$s, finish = nil, start = nil, i = nil;

        
        if (elem == null) elem = nil;
        if ($truthy(elem['$is_a?']($$$('Range')))) {
          
          finish = elem.$end() === nil ? -1 : $coerce_to(elem.$end(), $$$('Integer'), 'to_int');
          start = elem.$begin() === nil ? 0 : $coerce_to(elem.$begin(), $$$('Integer'), 'to_int');
          
          if (start < 0) {
            start = start + self.length;
            return nil;
          }
        ;
          
          if (finish < 0) {
            finish = finish + self.length;
          }
          if (elem['$exclude_end?']() && elem.$end() !== nil) {
            finish--;
          }
          if (finish < start) {
            return nil;
          }
        ;
          return $send(start, 'upto', [finish], function $$55(i){var self = $$55.$$s == null ? this : $$55.$$s;

            
            if (i == null) i = nil;
            return out['$<<'](self.$at(i));}, {$$arity: 1, $$s: self});
        } else {
          
          i = $coerce_to(elem, $$$('Integer'), 'to_int');
          return out['$<<'](self.$at(i));
        };}, {$$arity: 1, $$s: self});
      return out;
    }, -1);
    
    $def(self, '$zip', function $$zip($a) {
      var block = $$zip.$$p || nil, $post_args, others, self = this, $ret_or_1 = nil;

      $$zip.$$p = null;
      
      ;
      $post_args = $slice.call(arguments);
      others = $post_args;
      
      var result = [], size = self.length, part, o, i, j, jj;

      for (j = 0, jj = others.length; j < jj; j++) {
        o = others[j];
        if (o.$$is_array) {
          continue;
        }
        if (o.$$is_range || o.$$is_enumerator) {
          others[j] = o.$take(size);
          continue;
        }
        others[j] = ($truthy(($ret_or_1 = $Opal['$coerce_to?'](o, $$$('Array'), "to_ary"))) ? ($ret_or_1) : ($Opal['$coerce_to!'](o, $$$('Enumerator'), "to_enum", "each"))).$to_a();
      }

      for (i = 0; i < size; i++) {
        part = [self[i]];

        for (j = 0, jj = others.length; j < jj; j++) {
          o = others[j][i];

          if (o == null) {
            o = nil;
          }

          part[j + 1] = o;
        }

        result[i] = part;
      }

      if (block !== nil) {
        for (i = 0; i < size; i++) {
          Opal.yield1(block, result[i]);
        }

        return nil;
      }

      return result;
    ;
    }, -1);
    $defs(self, '$inherited', function $$inherited(klass) {
      
      
      klass.$$prototype.$to_a = function() {
        return this.slice(0, this.length);
      }
    
    }, 1);
    
    $def(self, '$instance_variables', function $$instance_variables() {
      var $yield = $$instance_variables.$$p || nil, self = this;

      $$instance_variables.$$p = null;
      return $send($send2(self, $find_super(self, 'instance_variables', $$instance_variables, false, true), 'instance_variables', [], $yield), 'reject', [], function $$56(ivar){var $ret_or_1 = nil;

        
        if (ivar == null) ivar = nil;
        if ($truthy(($ret_or_1 = /^@\d+$/.test(ivar)))) {
          return $ret_or_1
        } else {
          return ivar['$==']("@length")
        };}, 1)
    }, 0);
    
    $def(self, '$pack', function $$pack($a) {
      var $post_args, args;

      
      $post_args = $slice.call(arguments);
      args = $post_args;
      return $Kernel.$raise("To use Array#pack, you must first require 'corelib/array/pack'.");
    }, -1);
    $alias(self, "append", "push");
    $alias(self, "filter", "select");
    $alias(self, "filter!", "select!");
    $alias(self, "map", "collect");
    $alias(self, "map!", "collect!");
    $alias(self, "prepend", "unshift");
    $alias(self, "size", "length");
    $alias(self, "slice", "[]");
    $alias(self, "to_s", "inspect");
    $Opal.$pristine(self.$singleton_class(), "allocate");
    return $Opal.$pristine(self, "copy_instance_variables", "initialize_dup");
  })('::', Array, $nesting);
};

Opal.modules["corelib/boolean"] = function(Opal) {/* Generated by Opal 1.6.1 */
  "use strict";
  var $klass = Opal.klass, $Kernel = Opal.Kernel, $def = Opal.def, $return_self = Opal.return_self, $ensure_kwargs = Opal.ensure_kwargs, $slice = Opal.slice, $truthy = Opal.truthy, $send2 = Opal.send2, $find_super = Opal.find_super, $to_a = Opal.to_a, $alias = Opal.alias, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('raise,name,==,to_s,__id__');
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Boolean');

    var $nesting = [self].concat($parent_nesting);

    
    Opal.prop(self.$$prototype, '$$is_boolean', true);
    
    var properties = ['$$class', '$$meta'];

    for (var i = 0; i < properties.length; i++) {
      Object.defineProperty(self.$$prototype, properties[i], {
        configurable: true,
        enumerable: false,
        get: function() {
          return this == true  ? Opal.TrueClass :
                 this == false ? Opal.FalseClass :
                                 Opal.Boolean;
        }
      });
    }

    Object.defineProperty(self.$$prototype, "$$id", {
      configurable: true,
      enumerable: false,
      get: function() {
        return this == true  ? 2 :
               this == false ? 0 :
                               nil;
      }
    });
  ;
    (function(self, $parent_nesting) {
      
      
      
      $def(self, '$allocate', function $$allocate() {
        var self = this;

        return $Kernel.$raise($$$('TypeError'), "allocator undefined for " + (self.$name()))
      }, 0);
      
      
      Opal.udef(self, '$' + "new");;
      return nil;;
    })(Opal.get_singleton_class(self), $nesting);
    
    $def(self, '$__id__', function $$__id__() {
      var self = this;

      return self.valueOf() ? 2 : 0;
    }, 0);
    
    $def(self, '$!', function $Boolean_$excl$1() {
      var self = this;

      return self != true;
    }, 0);
    
    $def(self, '$&', function $Boolean_$$2(other) {
      var self = this;

      return (self == true) ? (other !== false && other !== nil) : false;
    }, 1);
    
    $def(self, '$|', function $Boolean_$$3(other) {
      var self = this;

      return (self == true) ? true : (other !== false && other !== nil);
    }, 1);
    
    $def(self, '$^', function $Boolean_$$4(other) {
      var self = this;

      return (self == true) ? (other === false || other === nil) : (other !== false && other !== nil);
    }, 1);
    
    $def(self, '$==', function $Boolean_$eq_eq$5(other) {
      var self = this;

      return (self == true) === other.valueOf();
    }, 1);
    
    $def(self, '$singleton_class', function $$singleton_class() {
      var self = this;

      return self.$$meta;
    }, 0);
    
    $def(self, '$to_s', function $$to_s() {
      var self = this;

      return (self == true) ? 'true' : 'false';
    }, 0);
    
    $def(self, '$dup', $return_self, 0);
    
    $def(self, '$clone', function $$clone($kwargs) {
      var freeze, self = this;

      
      $kwargs = $ensure_kwargs($kwargs);
      
      freeze = $kwargs.$$smap["freeze"];if (freeze == null) freeze = true;
      return self;
    }, -1);
    
    $def(self, '$method_missing', function $$method_missing(method, $a) {
      var block = $$method_missing.$$p || nil, $post_args, args, self = this;

      $$method_missing.$$p = null;
      
      ;
      $post_args = $slice.call(arguments, 1);
      args = $post_args;
      var body = self.$$class.$$prototype['$' + method];
      if (!$truthy(typeof body !== 'undefined' && !body.$$stub)) {
        $send2(self, $find_super(self, 'method_missing', $$method_missing, false, true), 'method_missing', [method].concat($to_a(args)), block)
      };
      return Opal.send(self, body, args, block);
    }, -2);
    
    $def(self, '$respond_to_missing?', function $Boolean_respond_to_missing$ques$6(method, _include_all) {
      var self = this;

      
      if (_include_all == null) _include_all = false;
      var body = self.$$class.$$prototype['$' + method];
      return typeof body !== 'undefined' && !body.$$stub;;
    }, -2);
    $alias(self, "eql?", "==");
    $alias(self, "equal?", "==");
    $alias(self, "inspect", "to_s");
    return $alias(self, "object_id", "__id__");
  })('::', Boolean, $nesting);
  $klass('::', $$$('Boolean'), 'TrueClass');
  return ($klass('::', $$$('Boolean'), 'FalseClass'), nil);
};

Opal.modules["corelib/nil"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $klass = Opal.klass, $Kernel = Opal.Kernel, $def = Opal.def, $return_val = Opal.return_val, $ensure_kwargs = Opal.ensure_kwargs, $NilClass = Opal.NilClass, $slice = Opal.slice, $truthy = Opal.truthy, $rb_gt = Opal.rb_gt, $alias = Opal.alias, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('raise,name,new,>,length,Rational,to_i');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'NilClass');

    var $nesting = [self].concat($parent_nesting);

    
    self.$$prototype.$$meta = self;
    (function(self, $parent_nesting) {
      
      
      
      $def(self, '$allocate', function $$allocate() {
        var self = this;

        return $Kernel.$raise($$$('TypeError'), "allocator undefined for " + (self.$name()))
      }, 0);
      
      
      Opal.udef(self, '$' + "new");;
      return nil;;
    })(Opal.get_singleton_class(self), $nesting);
    
    $def(self, '$!', $return_val(true), 0);
    
    $def(self, '$&', $return_val(false), 0);
    
    $def(self, '$|', function $NilClass_$$1(other) {
      
      return other !== false && other !== nil;
    }, 1);
    
    $def(self, '$^', function $NilClass_$$2(other) {
      
      return other !== false && other !== nil;
    }, 1);
    
    $def(self, '$==', function $NilClass_$eq_eq$3(other) {
      
      return other === nil;
    }, 1);
    
    $def(self, '$dup', $return_val(nil), 0);
    
    $def(self, '$clone', function $$clone($kwargs) {
      var freeze;

      
      $kwargs = $ensure_kwargs($kwargs);
      
      freeze = $kwargs.$$smap["freeze"];if (freeze == null) freeze = true;
      return nil;
    }, -1);
    
    $def(self, '$inspect', $return_val("nil"), 0);
    
    $def(self, '$nil?', $return_val(true), 0);
    
    $def(self, '$singleton_class', function $$singleton_class() {
      
      return $NilClass
    }, 0);
    
    $def(self, '$to_a', function $$to_a() {
      
      return []
    }, 0);
    
    $def(self, '$to_h', function $$to_h() {
      
      return Opal.hash();
    }, 0);
    
    $def(self, '$to_i', $return_val(0), 0);
    
    $def(self, '$to_s', $return_val(""), 0);
    
    $def(self, '$to_c', function $$to_c() {
      
      return $$$('Complex').$new(0, 0)
    }, 0);
    
    $def(self, '$rationalize', function $$rationalize($a) {
      var $post_args, args;

      
      $post_args = $slice.call(arguments);
      args = $post_args;
      if ($truthy($rb_gt(args.$length(), 1))) {
        $Kernel.$raise($$$('ArgumentError'))
      };
      return $Kernel.$Rational(0, 1);
    }, -1);
    
    $def(self, '$to_r', function $$to_r() {
      
      return $Kernel.$Rational(0, 1)
    }, 0);
    
    $def(self, '$instance_variables', function $$instance_variables() {
      
      return []
    }, 0);
    return $alias(self, "to_f", "to_i");
  })('::', null, $nesting)
};

Opal.modules["corelib/enumerator/generator"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $deny_frozen_access = Opal.deny_frozen_access, $klass = Opal.klass, $truthy = Opal.truthy, $Kernel = Opal.Kernel, $def = Opal.def, $slice = Opal.slice, $send = Opal.send, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('include,raise,new,to_proc');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Enumerator');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Generator');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.block = nil;
      
      self.$include($$$('Enumerable'));
      
      $def(self, '$initialize', function $$initialize() {
        var block = $$initialize.$$p || nil, self = this;

        $$initialize.$$p = null;
        
        ;
        $deny_frozen_access(self);
        if (!$truthy(block)) {
          $Kernel.$raise($$$('LocalJumpError'), "no block given")
        };
        return (self.block = block);
      }, 0);
      return $def(self, '$each', function $$each($a) {
        var block = $$each.$$p || nil, $post_args, args, self = this, yielder = nil;

        $$each.$$p = null;
        
        ;
        $post_args = $slice.call(arguments);
        args = $post_args;
        yielder = $send($$('Yielder'), 'new', [], block.$to_proc());
        
        try {
          args.unshift(yielder);

          Opal.yieldX(self.block, args);
        }
        catch (e) {
          if (e && e.$thrower_type == "breaker") {
            return e.$v;
          }
          else {
            throw e;
          }
        }
      ;
        return self;
      }, -1);
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

Opal.modules["corelib/enumerator/chain"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $deny_frozen_access = Opal.deny_frozen_access, $klass = Opal.klass, $slice = Opal.slice, $def = Opal.def, $send = Opal.send, $to_a = Opal.to_a, $truthy = Opal.truthy, $rb_plus = Opal.rb_plus, $thrower = Opal.thrower, nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('to_enum,size,each,<<,to_proc,include?,+,reverse_each,respond_to?,rewind,inspect');
  return (function($base, $super) {
    var self = $klass($base, $super, 'Enumerator');

    
    return (function($base, $super) {
      var self = $klass($base, $super, 'Chain');

      var $proto = self.$$prototype;

      $proto.enums = $proto.iterated = nil;
      
      
      $def(self, '$initialize', function $$initialize($a) {
        var $post_args, enums, self = this;

        
        $post_args = $slice.call(arguments);
        enums = $post_args;
        $deny_frozen_access(self);
        self.enums = enums;
        self.iterated = [];
        return (self.object = self);
      }, -1);
      
      $def(self, '$each', function $$each($a) {
        var block = $$each.$$p || nil, $post_args, args, self = this;

        $$each.$$p = null;
        
        ;
        $post_args = $slice.call(arguments);
        args = $post_args;
        if (!(block !== nil)) {
          return $send(self, 'to_enum', ["each"].concat($to_a(args)), function $$1(){var self = $$1.$$s == null ? this : $$1.$$s;

            return self.$size()}, {$$arity: 0, $$s: self})
        };
        $send(self.enums, 'each', [], function $$2(enum$){var self = $$2.$$s == null ? this : $$2.$$s;
          if (self.iterated == null) self.iterated = nil;

          
          if (enum$ == null) enum$ = nil;
          self.iterated['$<<'](enum$);
          return $send(enum$, 'each', $to_a(args), block.$to_proc());}, {$$arity: 1, $$s: self});
        return self;
      }, -1);
      
      $def(self, '$size', function $$size($a) {try { var $t_return = $thrower('return'); 
        var $post_args, args, self = this, accum = nil;

        
        $post_args = $slice.call(arguments);
        args = $post_args;
        accum = 0;
        $send(self.enums, 'each', [], function $$3(enum$){var size = nil;

          
          if (enum$ == null) enum$ = nil;
          size = $send(enum$, 'size', $to_a(args));
          if ($truthy([nil, $$$($$$('Float'), 'INFINITY')]['$include?'](size))) {
            $t_return.$throw(size)
          };
          return (accum = $rb_plus(accum, size));}, {$$arity: 1, $$ret: $t_return});
        return accum;} catch($e) {
          if ($e === $t_return) return $e.$v;
          throw $e;
        }
      }, -1);
      
      $def(self, '$rewind', function $$rewind() {
        var self = this;

        
        $send(self.iterated, 'reverse_each', [], function $$4(enum$){
          
          if (enum$ == null) enum$ = nil;
          if ($truthy(enum$['$respond_to?']("rewind"))) {
            return enum$.$rewind()
          } else {
            return nil
          };}, 1);
        self.iterated = [];
        return self;
      }, 0);
      return $def(self, '$inspect', function $$inspect() {
        var self = this;

        return "#<Enumerator::Chain: " + (self.enums.$inspect()) + ">"
      }, 0);
    })(self, self)
  })('::', null)
};

Opal.modules["opal"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $Object = Opal.Object, nil = Opal.nil;

  Opal.add_stubs('require,autoload');
  
  $Object.$require("opal/base");
  $Object.$require("opal/mini");
  $Object.$require("corelib/kernel/format");
  $Object.$require("corelib/string/encoding");
  $Object.$autoload("Math", "corelib/math");
  $Object.$require("corelib/complex/base");
  $Object.$autoload("Complex", "corelib/complex");
  $Object.$require("corelib/rational/base");
  $Object.$autoload("Rational", "corelib/rational");
  $Object.$require("corelib/time");
  $Object.$autoload("Struct", "corelib/struct");
  $Object.$autoload("Dir", "corelib/dir");
  $Object.$autoload("File", "corelib/file");
  $Object.$require("corelib/process/base");
  $Object.$autoload("Process", "corelib/process");
  $Object.$autoload("Random", "corelib/random");
  $Object.$require("corelib/unsupported");
  $Object.$require("corelib/binding");
  return $Object.$require("corelib/irb");
};

Opal.load_normalized("opal");

Opal.modules["opal"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $Object = Opal.Object, nil = Opal.nil;

  Opal.add_stubs('require,autoload');
  
  $Object.$require("opal/base");
  $Object.$require("opal/mini");
  $Object.$require("corelib/kernel/format");
  $Object.$require("corelib/string/encoding");
  $Object.$autoload("Math", "corelib/math");
  $Object.$require("corelib/complex/base");
  $Object.$autoload("Complex", "corelib/complex");
  $Object.$require("corelib/rational/base");
  $Object.$autoload("Rational", "corelib/rational");
  $Object.$require("corelib/time");
  $Object.$autoload("Struct", "corelib/struct");
  $Object.$autoload("Dir", "corelib/dir");
  $Object.$autoload("File", "corelib/file");
  $Object.$require("corelib/process/base");
  $Object.$autoload("Process", "corelib/process");
  $Object.$autoload("Random", "corelib/random");
  $Object.$require("corelib/unsupported");
  $Object.$require("corelib/binding");
  return $Object.$require("corelib/irb");
};

Opal.queue(function(Opal) {/* Generated by Opal 1.6.1 */
  var $send = Opal.send, $neqeq = Opal.neqeq, self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('require,ready?,[],attr,find,on,!=,html=');
  
  self.$require("opal");
  return $send($$('Document'), 'ready?', [], function $$1(){var current_url = nil;

    
    current_url = $$('Element').$find(".legislation_website").$attr()['$[]']("href");
    return $send($$('Element').$find(".legislation_website"), 'on', ["click"], function $$2(){var $a, current_page_url = nil;

      
      current_page_url = $$('Element').$find(".legislation_website").$attr()['$[]']("href");
      if ($neqeq(current_page_url, current_url)) {
        return ($a = [current_page_url], $send($$('Element').$find(".current_website"), 'html=', $a), $a[$a.length - 1])
      } else {
        return nil
      };}, 0);}, 0);
});

Opal.queue(function(Opal) {/* Generated by Opal 1.6.1 */
  var $Kernel = Opal.Kernel, nil = Opal.nil;

  Opal.add_stubs('exit');
  return $Kernel.$exit()
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzZWN0aW9ucyI6W3sib2Zmc2V0Ijp7ImxpbmUiOjAsImNvbHVtbiI6MH0sIm1hcCI6eyJ2ZXJzaW9uIjozLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb3JlbGliL3J1bnRpbWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKGdsb2JhbF9vYmplY3QpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgLy8gQG5vdGVcbiAgLy8gICBBIGZldyBjb252ZW50aW9ucyBmb3IgdGhlIGRvY3VtZW50YXRpb24gb2YgdGhpcyBmaWxlOlxuICAvLyAgIDEuIEFsd2F5cyB1c2UgXCIvL1wiIChpbiBjb250cmFzdCB3aXRoIFwiLyoqL1wiKVxuICAvLyAgIDIuIFRoZSBzeW50YXggdXNlZCBpcyBZYXJkb2MgKHlhcmRvYy5vcmcpLCB3aGljaCBpcyBpbnRlbmRlZCBmb3IgUnVieSAoc2UgYmVsb3cpXG4gIC8vICAgMy4gYEBwYXJhbWAgYW5kIGBAcmV0dXJuYCB0eXBlcyBzaG91bGQgYmUgcHJlY2VkZWQgYnkgYEpTLmAgd2hlbiByZWZlcnJpbmcgdG9cbiAgLy8gICAgICBKYXZhU2NyaXB0IGNvbnN0cnVjdG9ycyAoZS5nLiBgSlMuRnVuY3Rpb25gKSBvdGhlcndpc2UgUnVieSBpcyBhc3N1bWVkLlxuICAvLyAgIDQuIGBuaWxgIGFuZCBgbnVsbGAgYmVpbmcgdW5hbWJpZ3VvdXMgcmVmZXIgdG8gdGhlIHJlc3BlY3RpdmVcbiAgLy8gICAgICBvYmplY3RzL3ZhbHVlcyBpbiBSdWJ5IGFuZCBKYXZhU2NyaXB0XG4gIC8vICAgNS4gVGhpcyBpcyBzdGlsbCBXSVAgOikgc28gcGxlYXNlIGdpdmUgZmVlZGJhY2sgYW5kIHN1Z2dlc3Rpb25zIG9uIGhvd1xuICAvLyAgICAgIHRvIGltcHJvdmUgb3IgZm9yIGFsdGVybmF0aXZlIHNvbHV0aW9uc1xuICAvL1xuICAvLyAgIFRoZSB3YXkgdGhlIGNvZGUgaXMgZGlnZXN0ZWQgYmVmb3JlIGdvaW5nIHRocm91Z2ggWWFyZG9jIGlzIGEgc2VjcmV0IGtlcHRcbiAgLy8gICBpbiB0aGUgZG9jcyByZXBvIChodHRwczovL2dpdGh1Yi5jb20vb3BhbC9kb2NzL3RyZWUvbWFzdGVyKS5cblxuICB2YXIgY29uc29sZTtcblxuICAvLyBEZXRlY3QgdGhlIGdsb2JhbCBvYmplY3RcbiAgaWYgKHR5cGVvZihnbG9iYWxUaGlzKSAhPT0gJ3VuZGVmaW5lZCcpIHsgZ2xvYmFsX29iamVjdCA9IGdsb2JhbFRoaXM7IH1cbiAgZWxzZSBpZiAodHlwZW9mKGdsb2JhbCkgIT09ICd1bmRlZmluZWQnKSB7IGdsb2JhbF9vYmplY3QgPSBnbG9iYWw7IH1cbiAgZWxzZSBpZiAodHlwZW9mKHdpbmRvdykgIT09ICd1bmRlZmluZWQnKSB7IGdsb2JhbF9vYmplY3QgPSB3aW5kb3c7IH1cblxuICAvLyBTZXR1cCBhIGR1bW15IGNvbnNvbGUgb2JqZWN0IGlmIG1pc3NpbmdcbiAgaWYgKGdsb2JhbF9vYmplY3QuY29uc29sZSA9PSBudWxsKSB7XG4gICAgZ2xvYmFsX29iamVjdC5jb25zb2xlID0ge307XG4gIH1cblxuICBpZiAodHlwZW9mKGdsb2JhbF9vYmplY3QuY29uc29sZSkgPT09ICdvYmplY3QnKSB7XG4gICAgY29uc29sZSA9IGdsb2JhbF9vYmplY3QuY29uc29sZTtcbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlID0ge307XG4gIH1cblxuICBpZiAoISgnbG9nJyBpbiBjb25zb2xlKSkgeyBjb25zb2xlLmxvZyA9IGZ1bmN0aW9uICgpIHt9OyB9XG4gIGlmICghKCd3YXJuJyBpbiBjb25zb2xlKSkgeyBjb25zb2xlLndhcm4gPSBjb25zb2xlLmxvZzsgfVxuXG4gIGlmICh0eXBlb2YoZ2xvYmFsX29iamVjdC5PcGFsKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zb2xlLndhcm4oJ09wYWwgYWxyZWFkeSBsb2FkZWQuIExvYWRpbmcgdHdpY2UgY2FuIGNhdXNlIHRyb3VibGVzLCBwbGVhc2UgZml4IHlvdXIgc2V0dXAuJyk7XG4gICAgcmV0dXJuIGdsb2JhbF9vYmplY3QuT3BhbDtcbiAgfVxuXG4gIHZhciBuaWw7XG5cbiAgLy8gVGhlIGFjdHVhbCBjbGFzcyBmb3IgQmFzaWNPYmplY3RcbiAgdmFyIEJhc2ljT2JqZWN0O1xuXG4gIC8vIFRoZSBhY3R1YWwgT2JqZWN0IGNsYXNzLlxuICAvLyBUaGUgbGVhZGluZyB1bmRlcnNjb3JlIGlzIHRvIGF2b2lkIGNvbmZ1c2lvbiB3aXRoIHdpbmRvdy5PYmplY3QoKVxuICB2YXIgX09iamVjdDtcblxuICAvLyBUaGUgYWN0dWFsIE1vZHVsZSBjbGFzc1xuICB2YXIgTW9kdWxlO1xuXG4gIC8vIFRoZSBhY3R1YWwgQ2xhc3MgY2xhc3NcbiAgdmFyIENsYXNzO1xuXG4gIC8vIFRoZSBPcGFsLk9wYWwgY2xhc3MgKGhlbHBlcnMgZXRjLilcbiAgdmFyIF9PcGFsO1xuXG4gIC8vIFRoZSBLZXJuZWwgbW9kdWxlXG4gIHZhciBLZXJuZWw7XG5cbiAgLy8gVGhlIE9wYWwgb2JqZWN0IHRoYXQgaXMgZXhwb3NlZCBnbG9iYWxseVxuICB2YXIgT3BhbCA9IGdsb2JhbF9vYmplY3QuT3BhbCA9IHt9O1xuXG4gIC8vIFRoaXMgaXMgYSB1c2VmdWwgcmVmZXJlbmNlIHRvIGdsb2JhbCBvYmplY3QgaW5zaWRlIHJ1YnkgZmlsZXNcbiAgT3BhbC5nbG9iYWwgPSBnbG9iYWxfb2JqZWN0O1xuXG4gIC8vIENvbmZpZ3VyZSBydW50aW1lIGJlaGF2aW9yIHdpdGggcmVnYXJkcyB0byByZXF1aXJlIGFuZCB1bnN1cHBvcnRlZCBmZWF0dXJlc1xuICBPcGFsLmNvbmZpZyA9IHtcbiAgICBtaXNzaW5nX3JlcXVpcmVfc2V2ZXJpdHk6ICdlcnJvcicsICAgICAgICAvLyBlcnJvciwgd2FybmluZywgaWdub3JlXG4gICAgdW5zdXBwb3J0ZWRfZmVhdHVyZXNfc2V2ZXJpdHk6ICd3YXJuaW5nJywgLy8gZXJyb3IsIHdhcm5pbmcsIGlnbm9yZVxuICAgIGV4cGVyaW1lbnRhbF9mZWF0dXJlc19zZXZlcml0eTogJ3dhcm5pbmcnLC8vIHdhcm5pbmcsIGlnbm9yZVxuICAgIGVuYWJsZV9zdGFja190cmFjZTogdHJ1ZSAgICAgICAgICAgICAgICAgIC8vIHRydWUsIGZhbHNlXG4gIH07XG5cbiAgLy8gTWluaWZ5IGNvbW1vbiBmdW5jdGlvbiBjYWxsc1xuICB2YXIgJGhhc19vd24gICA9IE9iamVjdC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyICRiaW5kICAgICAgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZDtcbiAgdmFyICRzZXRfcHJvdG8gPSBPYmplY3Quc2V0UHJvdG90eXBlT2Y7XG4gIHZhciAkc2xpY2UgICAgID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuICB2YXIgJHNwbGljZSAgICA9IEFycmF5LnByb3RvdHlwZS5zcGxpY2U7XG5cbiAgLy8gTmlsIG9iamVjdCBpZCBpcyBhbHdheXMgNFxuICB2YXIgbmlsX2lkID0gNDtcblxuICAvLyBHZW5lcmF0ZXMgZXZlbiBzZXF1ZW50aWFsIG51bWJlcnMgZ3JlYXRlciB0aGFuIDRcbiAgLy8gKG5pbF9pZCkgdG8gc2VydmUgYXMgdW5pcXVlIGlkcyBmb3IgcnVieSBvYmplY3RzXG4gIHZhciB1bmlxdWVfaWQgPSBuaWxfaWQ7XG5cbiAgLy8gUmV0dXJuIG5leHQgdW5pcXVlIGlkXG4gIGZ1bmN0aW9uICR1aWQoKSB7XG4gICAgdW5pcXVlX2lkICs9IDI7XG4gICAgcmV0dXJuIHVuaXF1ZV9pZDtcbiAgfTtcbiAgT3BhbC51aWQgPSAkdWlkO1xuXG4gIC8vIFJldHJpZXZlIG9yIGFzc2lnbiB0aGUgaWQgb2YgYW4gb2JqZWN0XG4gIE9wYWwuaWQgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAob2JqLiQkaXNfbnVtYmVyKSByZXR1cm4gKG9iaiAqIDIpKzE7XG4gICAgaWYgKG9iai4kJGlkID09IG51bGwpIHtcbiAgICAgICRwcm9wKG9iaiwgJyQkaWQnLCAkdWlkKCkpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqLiQkaWQ7XG4gIH07XG5cbiAgLy8gR2xvYmFscyB0YWJsZVxuICB2YXIgJGd2YXJzID0gT3BhbC5ndmFycyA9IHt9O1xuXG4gIC8vIEV4aXQgZnVuY3Rpb24sIHRoaXMgc2hvdWxkIGJlIHJlcGxhY2VkIGJ5IHBsYXRmb3JtIHNwZWNpZmljIGltcGxlbWVudGF0aW9uXG4gIC8vIChTZWUgbm9kZWpzIGFuZCBjaHJvbWUgZm9yIGV4YW1wbGVzKVxuICBPcGFsLmV4aXQgPSBmdW5jdGlvbihzdGF0dXMpIHsgaWYgKCRndmFycy5ERUJVRykgY29uc29sZS5sb2coJ0V4aXRlZCB3aXRoIHN0YXR1cyAnK3N0YXR1cyk7IH07XG5cbiAgLy8ga2VlcHMgdHJhY2sgb2YgZXhjZXB0aW9ucyBmb3IgJCFcbiAgT3BhbC5leGNlcHRpb25zID0gW107XG5cbiAgLy8gQHByaXZhdGVcbiAgLy8gUG9wcyBhbiBleGNlcHRpb24gZnJvbSB0aGUgc3RhY2sgYW5kIHVwZGF0ZXMgYCQhYC5cbiAgT3BhbC5wb3BfZXhjZXB0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGV4Y2VwdGlvbiA9IE9wYWwuZXhjZXB0aW9ucy5wb3AoKTtcbiAgICBpZiAoZXhjZXB0aW9uKSB7XG4gICAgICAkZ3ZhcnNbXCIhXCJdID0gZXhjZXB0aW9uO1xuICAgICAgJGd2YXJzW1wiQFwiXSA9IGV4Y2VwdGlvbi4kYmFja3RyYWNlKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgJGd2YXJzW1wiIVwiXSA9ICRndmFyc1tcIkBcIl0gPSBuaWw7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uICRwcm9wKG9iamVjdCwgbmFtZSwgaW5pdGlhbFZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZihvYmplY3QpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAvLyBTcGVjaWFsIGNhc2UgZm9yOlxuICAgICAgLy8gICBzID0gXCJzdHJpbmdcIlxuICAgICAgLy8gICBkZWYgcy5tOyBlbmRcbiAgICAgIC8vIFN0cmluZyBjbGFzcyBpcyB0aGUgb25seSBjbGFzcyB0aGF0OlxuICAgICAgLy8gKyBjb21waWxlcyB0byBKUyBwcmltaXRpdmVcbiAgICAgIC8vICsgYWxsb3dzIG1ldGhvZCBkZWZpbml0aW9uIGRpcmVjdGx5IG9uIGluc3RhbmNlc1xuICAgICAgLy8gbnVtYmVycywgdHJ1ZSwgZmFsc2UgYW5kIG51bGwgZG8gbm90IHN1cHBvcnQgaXQuXG4gICAgICBvYmplY3RbbmFtZV0gPSBpbml0aWFsVmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIG5hbWUsIHtcbiAgICAgICAgdmFsdWU6IGluaXRpYWxWYWx1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIE9wYWwucHJvcCA9ICRwcm9wO1xuXG4gIC8vIEBkZXByZWNhdGVkXG4gIE9wYWwuZGVmaW5lUHJvcGVydHkgPSBPcGFsLnByb3A7XG5cbiAgT3BhbC5zbGljZSA9ICRzbGljZTtcblxuXG4gIC8vIEhlbHBlcnNcbiAgLy8gLS0tLS1cblxuICB2YXIgJHRydXRoeSA9IE9wYWwudHJ1dGh5ID0gZnVuY3Rpb24odmFsKSB7XG4gICAgcmV0dXJuIGZhbHNlICE9PSB2YWwgJiYgbmlsICE9PSB2YWwgJiYgdW5kZWZpbmVkICE9PSB2YWwgJiYgbnVsbCAhPT0gdmFsICYmICghKHZhbCBpbnN0YW5jZW9mIEJvb2xlYW4pIHx8IHRydWUgPT09IHZhbC52YWx1ZU9mKCkpO1xuICB9O1xuXG4gIE9wYWwuZmFsc3kgPSBmdW5jdGlvbih2YWwpIHtcbiAgICByZXR1cm4gISR0cnV0aHkodmFsKTtcbiAgfTtcblxuICBPcGFsLnR5cGVfZXJyb3IgPSBmdW5jdGlvbihvYmplY3QsIHR5cGUsIG1ldGhvZCwgY29lcmNlZCkge1xuICAgIG9iamVjdCA9IG9iamVjdC4kJGNsYXNzO1xuXG4gICAgaWYgKGNvZXJjZWQgJiYgbWV0aG9kKSB7XG4gICAgICBjb2VyY2VkID0gY29lcmNlZC4kJGNsYXNzO1xuICAgICAgcmV0dXJuIE9wYWwuVHlwZUVycm9yLiRuZXcoXG4gICAgICAgIFwiY2FuJ3QgY29udmVydCBcIiArIG9iamVjdCArIFwiIGludG8gXCIgKyB0eXBlICtcbiAgICAgICAgXCIgKFwiICsgb2JqZWN0ICsgXCIjXCIgKyBtZXRob2QgKyBcIiBnaXZlcyBcIiArIGNvZXJjZWQgKyBcIilcIlxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gT3BhbC5UeXBlRXJyb3IuJG5ldyhcbiAgICAgICAgXCJubyBpbXBsaWNpdCBjb252ZXJzaW9uIG9mIFwiICsgb2JqZWN0ICsgXCIgaW50byBcIiArIHR5cGVcbiAgICAgIClcbiAgICB9XG4gIH07XG5cbiAgT3BhbC5jb2VyY2VfdG8gPSBmdW5jdGlvbihvYmplY3QsIHR5cGUsIG1ldGhvZCwgYXJncykge1xuICAgIHZhciBib2R5O1xuXG4gICAgaWYgKG1ldGhvZCA9PT0gJ3RvX2ludCcgJiYgdHlwZSA9PT0gT3BhbC5JbnRlZ2VyICYmIG9iamVjdC4kJGlzX251bWJlcilcbiAgICAgIHJldHVybiBvYmplY3QgPCAwID8gTWF0aC5jZWlsKG9iamVjdCkgOiBNYXRoLmZsb29yKG9iamVjdCk7XG5cbiAgICBpZiAobWV0aG9kID09PSAndG9fc3RyJyAmJiB0eXBlID09PSBPcGFsLlN0cmluZyAmJiBvYmplY3QuJCRpc19zdHJpbmcpXG4gICAgICByZXR1cm4gb2JqZWN0O1xuXG4gICAgaWYgKE9wYWwuaXNfYShvYmplY3QsIHR5cGUpKSByZXR1cm4gb2JqZWN0O1xuXG4gICAgLy8gRmFzdCBwYXRoIGZvciB0aGUgbW9zdCBjb21tb24gc2l0dWF0aW9uXG4gICAgaWYgKG9iamVjdFsnJHJlc3BvbmRfdG8/J10uJCRwcmlzdGluZSAmJiBvYmplY3QuJG1ldGhvZF9taXNzaW5nLiQkcHJpc3RpbmUpIHtcbiAgICAgIGJvZHkgPSBvYmplY3RbJyQnICsgbWV0aG9kXTtcbiAgICAgIGlmIChib2R5ID09IG51bGwgfHwgYm9keS4kJHN0dWIpIHRocm93IE9wYWwudHlwZV9lcnJvcihvYmplY3QsIHR5cGUpO1xuICAgICAgcmV0dXJuIGJvZHkuYXBwbHkob2JqZWN0LCBhcmdzKTtcbiAgICB9XG5cbiAgICBpZiAoIW9iamVjdFsnJHJlc3BvbmRfdG8/J10obWV0aG9kKSkge1xuICAgICAgdGhyb3cgT3BhbC50eXBlX2Vycm9yKG9iamVjdCwgdHlwZSk7XG4gICAgfVxuXG4gICAgaWYgKGFyZ3MgPT0gbnVsbCkgYXJncyA9IFtdO1xuICAgIHJldHVybiBPcGFsLnNlbmQob2JqZWN0LCBtZXRob2QsIGFyZ3MpO1xuICB9XG5cbiAgT3BhbC5yZXNwb25kX3RvID0gZnVuY3Rpb24ob2JqLCBqc2lkLCBpbmNsdWRlX2FsbCkge1xuICAgIGlmIChvYmogPT0gbnVsbCB8fCAhb2JqLiQkY2xhc3MpIHJldHVybiBmYWxzZTtcbiAgICBpbmNsdWRlX2FsbCA9ICEhaW5jbHVkZV9hbGw7XG4gICAgdmFyIGJvZHkgPSBvYmpbanNpZF07XG5cbiAgICBpZiAob2JqWyckcmVzcG9uZF90bz8nXS4kJHByaXN0aW5lKSB7XG4gICAgICBpZiAodHlwZW9mKGJvZHkpID09PSBcImZ1bmN0aW9uXCIgJiYgIWJvZHkuJCRzdHViKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKCFvYmpbJyRyZXNwb25kX3RvX21pc3Npbmc/J10uJCRwcmlzdGluZSkge1xuICAgICAgICByZXR1cm4gT3BhbC5zZW5kKG9iaiwgb2JqWyckcmVzcG9uZF90b19taXNzaW5nPyddLCBbanNpZC5zdWJzdHIoMSksIGluY2x1ZGVfYWxsXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBPcGFsLnNlbmQob2JqLCBvYmpbJyRyZXNwb25kX3RvPyddLCBbanNpZC5zdWJzdHIoMSksIGluY2x1ZGVfYWxsXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gVHJhY2VQb2ludCBzdXBwb3J0XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLVxuICAvL1xuICAvLyBTdXBwb3J0IGZvciBgVHJhY2VQb2ludC50cmFjZSg6Y2xhc3MpIGRvIC4uLiBlbmRgXG4gIE9wYWwudHJhY2VfY2xhc3MgPSBmYWxzZTtcbiAgT3BhbC50cmFjZXJzX2Zvcl9jbGFzcyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGludm9rZV90cmFjZXJzX2Zvcl9jbGFzcyhrbGFzc19vcl9tb2R1bGUpIHtcbiAgICB2YXIgaSwgaWksIHRyYWNlcjtcblxuICAgIGZvcihpID0gMCwgaWkgPSBPcGFsLnRyYWNlcnNfZm9yX2NsYXNzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIHRyYWNlciA9IE9wYWwudHJhY2Vyc19mb3JfY2xhc3NbaV07XG4gICAgICB0cmFjZXIudHJhY2Vfb2JqZWN0ID0ga2xhc3Nfb3JfbW9kdWxlO1xuICAgICAgdHJhY2VyLmJsb2NrLiRjYWxsKHRyYWNlcik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlX2F1dG9sb2FkKGNyZWYsIG5hbWUpIHtcbiAgICBpZiAoIWNyZWYuJCRhdXRvbG9hZFtuYW1lXS5sb2FkZWQpIHtcbiAgICAgIGNyZWYuJCRhdXRvbG9hZFtuYW1lXS5sb2FkZWQgPSB0cnVlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgT3BhbC5LZXJuZWwuJHJlcXVpcmUoY3JlZi4kJGF1dG9sb2FkW25hbWVdLnBhdGgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjcmVmLiQkYXV0b2xvYWRbbmFtZV0uZXhjZXB0aW9uID0gZTtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICAgIGNyZWYuJCRhdXRvbG9hZFtuYW1lXS5yZXF1aXJlZCA9IHRydWU7XG4gICAgICBpZiAoY3JlZi4kJGNvbnN0W25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgY3JlZi4kJGF1dG9sb2FkW25hbWVdLnN1Y2Nlc3MgPSB0cnVlO1xuICAgICAgICByZXR1cm4gY3JlZi4kJGNvbnN0W25hbWVdO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY3JlZi4kJGF1dG9sb2FkW25hbWVdLmxvYWRlZCAmJiAhY3JlZi4kJGF1dG9sb2FkW25hbWVdLnJlcXVpcmVkKSB7XG4gICAgICBpZiAoY3JlZi4kJGF1dG9sb2FkW25hbWVdLmV4Y2VwdGlvbikgeyB0aHJvdyBjcmVmLiQkYXV0b2xvYWRbbmFtZV0uZXhjZXB0aW9uOyB9XG4gICAgfVxuICB9XG5cbiAgLy8gQ29uc3RhbnRzXG4gIC8vIC0tLS0tLS0tLVxuICAvL1xuICAvLyBGb3IgZnV0dXJlIHJlZmVyZW5jZTpcbiAgLy8gLSBUaGUgUmFpbHMgYXV0b2xvYWRpbmcgZ3VpZGUgKGh0dHA6Ly9ndWlkZXMucnVieW9ucmFpbHMub3JnL3Y1LjAvYXV0b2xvYWRpbmdfYW5kX3JlbG9hZGluZ19jb25zdGFudHMuaHRtbClcbiAgLy8gLSBAQ29ucmFkSXJ3aW4ncyAyMDEyIHBvc3Qgb24g4oCcRXZlcnl0aGluZyB5b3UgZXZlciB3YW50ZWQgdG8ga25vdyBhYm91dCBjb25zdGFudCBsb29rdXAgaW4gUnVieeKAnSAoaHR0cDovL2NpcncuaW4vYmxvZy9jb25zdGFudC1sb29rdXAuaHRtbClcbiAgLy9cbiAgLy8gTGVnZW5kIG9mIE1SSSBjb25jZXB0cy9uYW1lczpcbiAgLy8gLSBjb25zdGFudCByZWZlcmVuY2UgKGNyZWYpOiB0aGUgbW9kdWxlL2NsYXNzIHRoYXQgYWN0cyBhcyBhIG5hbWVzcGFjZVxuICAvLyAtIG5lc3Rpbmc6IHRoZSBuYW1lc3BhY2VzIHdyYXBwaW5nIHRoZSBjdXJyZW50IHNjb3BlLCBlLmcuIG5lc3RpbmcgaW5zaWRlXG4gIC8vICAgICAgICAgICAgYG1vZHVsZSBBOyBtb2R1bGUgQjo6QzsgZW5kOyBlbmRgIGlzIGBbQjo6QywgQV1gXG5cbiAgLy8gR2V0IHRoZSBjb25zdGFudCBpbiB0aGUgc2NvcGUgb2YgdGhlIGN1cnJlbnQgY3JlZlxuICBmdW5jdGlvbiBjb25zdF9nZXRfbmFtZShjcmVmLCBuYW1lKSB7XG4gICAgaWYgKGNyZWYpIHtcbiAgICAgIGlmIChjcmVmLiQkY29uc3RbbmFtZV0gIT0gbnVsbCkgeyByZXR1cm4gY3JlZi4kJGNvbnN0W25hbWVdOyB9XG4gICAgICBpZiAoY3JlZi4kJGF1dG9sb2FkICYmIGNyZWYuJCRhdXRvbG9hZFtuYW1lXSkge1xuICAgICAgICByZXR1cm4gaGFuZGxlX2F1dG9sb2FkKGNyZWYsIG5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIFdhbGsgdXAgdGhlIG5lc3RpbmcgYXJyYXkgbG9va2luZyBmb3IgdGhlIGNvbnN0YW50XG4gIGZ1bmN0aW9uIGNvbnN0X2xvb2t1cF9uZXN0aW5nKG5lc3RpbmcsIG5hbWUpIHtcbiAgICB2YXIgaSwgaWksIGNvbnN0YW50O1xuXG4gICAgaWYgKG5lc3RpbmcubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgICAvLyBJZiB0aGUgbmVzdGluZyBpcyBub3QgZW1wdHkgdGhlIGNvbnN0YW50IGlzIGxvb2tlZCB1cCBpbiBpdHMgZWxlbWVudHNcbiAgICAvLyBhbmQgaW4gb3JkZXIuIFRoZSBhbmNlc3RvcnMgb2YgdGhvc2UgZWxlbWVudHMgYXJlIGlnbm9yZWQuXG4gICAgZm9yIChpID0gMCwgaWkgPSBuZXN0aW5nLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIGNvbnN0YW50ID0gbmVzdGluZ1tpXS4kJGNvbnN0W25hbWVdO1xuICAgICAgaWYgKGNvbnN0YW50ICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGNvbnN0YW50O1xuICAgICAgfSBlbHNlIGlmIChuZXN0aW5nW2ldLiQkYXV0b2xvYWQgJiYgbmVzdGluZ1tpXS4kJGF1dG9sb2FkW25hbWVdKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVfYXV0b2xvYWQobmVzdGluZ1tpXSwgbmFtZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gV2FsayB1cCB0aGUgYW5jZXN0b3JzIGNoYWluIGxvb2tpbmcgZm9yIHRoZSBjb25zdGFudFxuICBmdW5jdGlvbiBjb25zdF9sb29rdXBfYW5jZXN0b3JzKGNyZWYsIG5hbWUpIHtcbiAgICB2YXIgaSwgaWksIGFuY2VzdG9ycztcblxuICAgIGlmIChjcmVmID09IG51bGwpIHJldHVybjtcblxuICAgIGFuY2VzdG9ycyA9ICRhbmNlc3RvcnMoY3JlZik7XG5cbiAgICBmb3IgKGkgPSAwLCBpaSA9IGFuY2VzdG9ycy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICBpZiAoYW5jZXN0b3JzW2ldLiQkY29uc3QgJiYgJGhhc19vd24uY2FsbChhbmNlc3RvcnNbaV0uJCRjb25zdCwgbmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIGFuY2VzdG9yc1tpXS4kJGNvbnN0W25hbWVdO1xuICAgICAgfSBlbHNlIGlmIChhbmNlc3RvcnNbaV0uJCRhdXRvbG9hZCAmJiBhbmNlc3RvcnNbaV0uJCRhdXRvbG9hZFtuYW1lXSkge1xuICAgICAgICByZXR1cm4gaGFuZGxlX2F1dG9sb2FkKGFuY2VzdG9yc1tpXSwgbmFtZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gV2FsayB1cCBPYmplY3QncyBhbmNlc3RvcnMgY2hhaW4gbG9va2luZyBmb3IgdGhlIGNvbnN0YW50LFxuICAvLyBidXQgb25seSBpZiBjcmVmIGlzIG1pc3Npbmcgb3IgYSBtb2R1bGUuXG4gIGZ1bmN0aW9uIGNvbnN0X2xvb2t1cF9PYmplY3QoY3JlZiwgbmFtZSkge1xuICAgIGlmIChjcmVmID09IG51bGwgfHwgY3JlZi4kJGlzX21vZHVsZSkge1xuICAgICAgcmV0dXJuIGNvbnN0X2xvb2t1cF9hbmNlc3RvcnMoX09iamVjdCwgbmFtZSk7XG4gICAgfVxuICB9XG5cbiAgLy8gQ2FsbCBjb25zdF9taXNzaW5nIGlmIG5vdGhpbmcgZWxzZSB3b3JrZWRcbiAgZnVuY3Rpb24gY29uc3RfbWlzc2luZyhjcmVmLCBuYW1lKSB7XG4gICAgcmV0dXJuIChjcmVmIHx8IF9PYmplY3QpLiRjb25zdF9taXNzaW5nKG5hbWUpO1xuICB9XG5cbiAgLy8gTG9vayBmb3IgdGhlIGNvbnN0YW50IGp1c3QgaW4gdGhlIGN1cnJlbnQgY3JlZiBvciBjYWxsIGAjY29uc3RfbWlzc2luZ2BcbiAgT3BhbC5jb25zdF9nZXRfbG9jYWwgPSBmdW5jdGlvbihjcmVmLCBuYW1lLCBza2lwX21pc3NpbmcpIHtcbiAgICB2YXIgcmVzdWx0O1xuXG4gICAgaWYgKGNyZWYgPT0gbnVsbCkgcmV0dXJuO1xuXG4gICAgaWYgKGNyZWYgPT09ICc6OicpIGNyZWYgPSBfT2JqZWN0O1xuXG4gICAgaWYgKCFjcmVmLiQkaXNfbW9kdWxlICYmICFjcmVmLiQkaXNfY2xhc3MpIHtcbiAgICAgIHRocm93IG5ldyBPcGFsLlR5cGVFcnJvcihjcmVmLnRvU3RyaW5nKCkgKyBcIiBpcyBub3QgYSBjbGFzcy9tb2R1bGVcIik7XG4gICAgfVxuXG4gICAgcmVzdWx0ID0gY29uc3RfZ2V0X25hbWUoY3JlZiwgbmFtZSk7XG4gICAgcmV0dXJuIHJlc3VsdCAhPSBudWxsIHx8IHNraXBfbWlzc2luZyA/IHJlc3VsdCA6IGNvbnN0X21pc3NpbmcoY3JlZiwgbmFtZSk7XG4gIH07XG5cbiAgLy8gTG9vayBmb3IgdGhlIGNvbnN0YW50IHJlbGF0aXZlIHRvIGEgY3JlZiBvciBjYWxsIGAjY29uc3RfbWlzc2luZ2AgKHdoZW4gdGhlXG4gIC8vIGNvbnN0YW50IGlzIHByZWZpeGVkIGJ5IGA6OmApLlxuICBPcGFsLmNvbnN0X2dldF9xdWFsaWZpZWQgPSBmdW5jdGlvbihjcmVmLCBuYW1lLCBza2lwX21pc3NpbmcpIHtcbiAgICB2YXIgcmVzdWx0LCBjYWNoZSwgY2FjaGVkLCBjdXJyZW50X3ZlcnNpb24gPSBPcGFsLmNvbnN0X2NhY2hlX3ZlcnNpb247XG5cbiAgICBpZiAobmFtZSA9PSBudWxsKSB7XG4gICAgICAvLyBBIHNob3J0cGF0aCBmb3IgY2FsbHMgbGlrZSA6OlN0cmluZyA9PiAkJCQoXCJTdHJpbmdcIilcbiAgICAgIHJlc3VsdCA9IGNvbnN0X2dldF9uYW1lKF9PYmplY3QsIGNyZWYpO1xuXG4gICAgICBpZiAocmVzdWx0ICE9IG51bGwpIHJldHVybiByZXN1bHQ7XG4gICAgICByZXR1cm4gT3BhbC5jb25zdF9nZXRfcXVhbGlmaWVkKF9PYmplY3QsIGNyZWYsIHNraXBfbWlzc2luZyk7XG4gICAgfVxuXG4gICAgaWYgKGNyZWYgPT0gbnVsbCkgcmV0dXJuO1xuXG4gICAgaWYgKGNyZWYgPT09ICc6OicpIGNyZWYgPSBfT2JqZWN0O1xuXG4gICAgaWYgKCFjcmVmLiQkaXNfbW9kdWxlICYmICFjcmVmLiQkaXNfY2xhc3MpIHtcbiAgICAgIHRocm93IG5ldyBPcGFsLlR5cGVFcnJvcihjcmVmLnRvU3RyaW5nKCkgKyBcIiBpcyBub3QgYSBjbGFzcy9tb2R1bGVcIik7XG4gICAgfVxuXG4gICAgaWYgKChjYWNoZSA9IGNyZWYuJCRjb25zdF9jYWNoZSkgPT0gbnVsbCkge1xuICAgICAgJHByb3AoY3JlZiwgJyQkY29uc3RfY2FjaGUnLCBPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgICAgIGNhY2hlID0gY3JlZi4kJGNvbnN0X2NhY2hlO1xuICAgIH1cbiAgICBjYWNoZWQgPSBjYWNoZVtuYW1lXTtcblxuICAgIGlmIChjYWNoZWQgPT0gbnVsbCB8fCBjYWNoZWRbMF0gIT09IGN1cnJlbnRfdmVyc2lvbikge1xuICAgICAgKChyZXN1bHQgPSBjb25zdF9nZXRfbmFtZShjcmVmLCBuYW1lKSkgICAgICAgICAgICAgICE9IG51bGwpIHx8XG4gICAgICAoKHJlc3VsdCA9IGNvbnN0X2xvb2t1cF9hbmNlc3RvcnMoY3JlZiwgbmFtZSkpICAgICAgIT0gbnVsbCk7XG4gICAgICBjYWNoZVtuYW1lXSA9IFtjdXJyZW50X3ZlcnNpb24sIHJlc3VsdF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IGNhY2hlZFsxXTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0ICE9IG51bGwgfHwgc2tpcF9taXNzaW5nID8gcmVzdWx0IDogY29uc3RfbWlzc2luZyhjcmVmLCBuYW1lKTtcbiAgfTtcblxuICAvLyBJbml0aWFsaXplIHRoZSB0b3AgbGV2ZWwgY29uc3RhbnQgY2FjaGUgZ2VuZXJhdGlvbiBjb3VudGVyXG4gIE9wYWwuY29uc3RfY2FjaGVfdmVyc2lvbiA9IDE7XG5cbiAgLy8gTG9vayBmb3IgdGhlIGNvbnN0YW50IGluIHRoZSBvcGVuIHVzaW5nIHRoZSBjdXJyZW50IG5lc3RpbmcgYW5kIHRoZSBuZWFyZXN0XG4gIC8vIGNyZWYgYW5jZXN0b3JzIG9yIGNhbGwgYCNjb25zdF9taXNzaW5nYCAod2hlbiB0aGUgY29uc3RhbnQgaGFzIG5vIDo6IHByZWZpeCkuXG4gIE9wYWwuY29uc3RfZ2V0X3JlbGF0aXZlID0gZnVuY3Rpb24obmVzdGluZywgbmFtZSwgc2tpcF9taXNzaW5nKSB7XG4gICAgdmFyIGNyZWYgPSBuZXN0aW5nWzBdLCByZXN1bHQsIGN1cnJlbnRfdmVyc2lvbiA9IE9wYWwuY29uc3RfY2FjaGVfdmVyc2lvbiwgY2FjaGUsIGNhY2hlZDtcblxuICAgIGlmICgoY2FjaGUgPSBuZXN0aW5nLiQkY29uc3RfY2FjaGUpID09IG51bGwpIHtcbiAgICAgICRwcm9wKG5lc3RpbmcsICckJGNvbnN0X2NhY2hlJywgT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gICAgICBjYWNoZSA9IG5lc3RpbmcuJCRjb25zdF9jYWNoZTtcbiAgICB9XG4gICAgY2FjaGVkID0gY2FjaGVbbmFtZV07XG5cbiAgICBpZiAoY2FjaGVkID09IG51bGwgfHwgY2FjaGVkWzBdICE9PSBjdXJyZW50X3ZlcnNpb24pIHtcbiAgICAgICgocmVzdWx0ID0gY29uc3RfZ2V0X25hbWUoY3JlZiwgbmFtZSkpICAgICAgICAgICAgICAhPSBudWxsKSB8fFxuICAgICAgKChyZXN1bHQgPSBjb25zdF9sb29rdXBfbmVzdGluZyhuZXN0aW5nLCBuYW1lKSkgICAgICE9IG51bGwpIHx8XG4gICAgICAoKHJlc3VsdCA9IGNvbnN0X2xvb2t1cF9hbmNlc3RvcnMoY3JlZiwgbmFtZSkpICAgICAgIT0gbnVsbCkgfHxcbiAgICAgICgocmVzdWx0ID0gY29uc3RfbG9va3VwX09iamVjdChjcmVmLCBuYW1lKSkgICAgICAgICAhPSBudWxsKTtcblxuICAgICAgY2FjaGVbbmFtZV0gPSBbY3VycmVudF92ZXJzaW9uLCByZXN1bHRdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBjYWNoZWRbMV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdCAhPSBudWxsIHx8IHNraXBfbWlzc2luZyA/IHJlc3VsdCA6IGNvbnN0X21pc3NpbmcoY3JlZiwgbmFtZSk7XG4gIH07XG5cbiAgLy8gUmVnaXN0ZXIgdGhlIGNvbnN0YW50IG9uIGEgY3JlZiBhbmQgb3Bwb3J0dW5pc3RpY2FsbHkgc2V0IHRoZSBuYW1lIG9mXG4gIC8vIHVubmFtZWQgY2xhc3Nlcy9tb2R1bGVzLlxuICBmdW5jdGlvbiAkY29uc3Rfc2V0KGNyZWYsIG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKGNyZWYgPT0gbnVsbCB8fCBjcmVmID09PSAnOjonKSBjcmVmID0gX09iamVjdDtcblxuICAgIGlmICh2YWx1ZS4kJGlzX2FfbW9kdWxlKSB7XG4gICAgICBpZiAodmFsdWUuJCRuYW1lID09IG51bGwgfHwgdmFsdWUuJCRuYW1lID09PSBuaWwpIHZhbHVlLiQkbmFtZSA9IG5hbWU7XG4gICAgICBpZiAodmFsdWUuJCRiYXNlX21vZHVsZSA9PSBudWxsKSB2YWx1ZS4kJGJhc2VfbW9kdWxlID0gY3JlZjtcbiAgICB9XG5cbiAgICBjcmVmLiQkY29uc3QgPSAoY3JlZi4kJGNvbnN0IHx8IE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgIGNyZWYuJCRjb25zdFtuYW1lXSA9IHZhbHVlO1xuXG4gICAgLy8gQWRkIGEgc2hvcnQgaGVscGVyIHRvIG5hdmlnYXRlIGNvbnN0YW50cyBtYW51YWxseS5cbiAgICAvLyBAZXhhbXBsZVxuICAgIC8vICAgT3BhbC4kJC5SZWdleHAuJCQuSUdOT1JFQ0FTRVxuICAgIGNyZWYuJCQgPSBjcmVmLiQkY29uc3Q7XG5cbiAgICBPcGFsLmNvbnN0X2NhY2hlX3ZlcnNpb24rKztcblxuICAgIC8vIEV4cG9zZSB0b3AgbGV2ZWwgY29uc3RhbnRzIG9udG8gdGhlIE9wYWwgb2JqZWN0XG4gICAgaWYgKGNyZWYgPT09IF9PYmplY3QpIE9wYWxbbmFtZV0gPSB2YWx1ZTtcblxuICAgIC8vIE5hbWUgbmV3IGNsYXNzIGRpcmVjdGx5IG9udG8gY3VycmVudCBzY29wZSAoT3BhbC5Gb28uQmF6ID0ga2xhc3MpXG4gICAgJHByb3AoY3JlZiwgbmFtZSwgdmFsdWUpO1xuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xuXG4gIE9wYWwuY29uc3Rfc2V0ID0gJGNvbnN0X3NldDtcblxuICAvLyBHZXQgYWxsIHRoZSBjb25zdGFudHMgcmVhY2hhYmxlIGZyb20gYSBnaXZlbiBjcmVmLCBieSBkZWZhdWx0IHdpbGwgaW5jbHVkZVxuICAvLyBpbmhlcml0ZWQgY29uc3RhbnRzLlxuICBPcGFsLmNvbnN0YW50cyA9IGZ1bmN0aW9uKGNyZWYsIGluaGVyaXQpIHtcbiAgICBpZiAoaW5oZXJpdCA9PSBudWxsKSBpbmhlcml0ID0gdHJ1ZTtcblxuICAgIHZhciBtb2R1bGUsIG1vZHVsZXMgPSBbY3JlZl0sIGksIGlpLCBjb25zdGFudHMgPSB7fSwgY29uc3RhbnQ7XG5cbiAgICBpZiAoaW5oZXJpdCkgbW9kdWxlcyA9IG1vZHVsZXMuY29uY2F0KCRhbmNlc3RvcnMoY3JlZikpO1xuICAgIGlmIChpbmhlcml0ICYmIGNyZWYuJCRpc19tb2R1bGUpIG1vZHVsZXMgPSBtb2R1bGVzLmNvbmNhdChbT3BhbC5PYmplY3RdKS5jb25jYXQoJGFuY2VzdG9ycyhPcGFsLk9iamVjdCkpO1xuXG4gICAgZm9yIChpID0gMCwgaWkgPSBtb2R1bGVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIG1vZHVsZSA9IG1vZHVsZXNbaV07XG5cbiAgICAgIC8vIERvIG5vdCBzaG93IE9iamVjdHMgY29uc3RhbnRzIHVubGVzcyB3ZSdyZSBxdWVyeWluZyBPYmplY3QgaXRzZWxmXG4gICAgICBpZiAoY3JlZiAhPT0gX09iamVjdCAmJiBtb2R1bGUgPT0gX09iamVjdCkgYnJlYWs7XG5cbiAgICAgIGZvciAoY29uc3RhbnQgaW4gbW9kdWxlLiQkY29uc3QpIHtcbiAgICAgICAgY29uc3RhbnRzW2NvbnN0YW50XSA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAobW9kdWxlLiQkYXV0b2xvYWQpIHtcbiAgICAgICAgZm9yIChjb25zdGFudCBpbiBtb2R1bGUuJCRhdXRvbG9hZCkge1xuICAgICAgICAgIGNvbnN0YW50c1tjb25zdGFudF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGNvbnN0YW50cyk7XG4gIH07XG5cbiAgLy8gUmVtb3ZlIGEgY29uc3RhbnQgZnJvbSBhIGNyZWYuXG4gIE9wYWwuY29uc3RfcmVtb3ZlID0gZnVuY3Rpb24oY3JlZiwgbmFtZSkge1xuICAgIE9wYWwuY29uc3RfY2FjaGVfdmVyc2lvbisrO1xuXG4gICAgaWYgKGNyZWYuJCRjb25zdFtuYW1lXSAhPSBudWxsKSB7XG4gICAgICB2YXIgb2xkID0gY3JlZi4kJGNvbnN0W25hbWVdO1xuICAgICAgZGVsZXRlIGNyZWYuJCRjb25zdFtuYW1lXTtcbiAgICAgIHJldHVybiBvbGQ7XG4gICAgfVxuXG4gICAgaWYgKGNyZWYuJCRhdXRvbG9hZCAmJiBjcmVmLiQkYXV0b2xvYWRbbmFtZV0pIHtcbiAgICAgIGRlbGV0ZSBjcmVmLiQkYXV0b2xvYWRbbmFtZV07XG4gICAgICByZXR1cm4gbmlsO1xuICAgIH1cblxuICAgIHRocm93IE9wYWwuTmFtZUVycm9yLiRuZXcoXCJjb25zdGFudCBcIitjcmVmK1wiOjpcIitjcmVmLiRuYW1lKCkrXCIgbm90IGRlZmluZWRcIik7XG4gIH07XG5cbiAgLy8gR2VuZXJhdGVzIGEgZnVuY3Rpb24gdGhhdCBpcyBhIGN1cnJpZWQgY29uc3RfZ2V0X3JlbGF0aXZlLlxuICBPcGFsLmNvbnN0X2dldF9yZWxhdGl2ZV9mYWN0b3J5ID0gZnVuY3Rpb24obmVzdGluZykge1xuICAgIHJldHVybiBmdW5jdGlvbihuYW1lLCBza2lwX21pc3NpbmcpIHtcbiAgICAgIHJldHVybiBPcGFsLiQkKG5lc3RpbmcsIG5hbWUsIHNraXBfbWlzc2luZyk7XG4gICAgfVxuICB9XG5cbiAgLy8gU2V0dXAgc29tZSBzaG9ydGN1dHMgdG8gcmVkdWNlIGNvbXBpbGVkIHNpemVcbiAgT3BhbC4kJCA9IE9wYWwuY29uc3RfZ2V0X3JlbGF0aXZlO1xuICBPcGFsLiQkJCA9IE9wYWwuY29uc3RfZ2V0X3F1YWxpZmllZDtcbiAgT3BhbC4kciA9IE9wYWwuY29uc3RfZ2V0X3JlbGF0aXZlX2ZhY3Rvcnk7XG5cbiAgLy8gTW9kdWxlcyAmIENsYXNzZXNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBBIGBjbGFzcyBGb287IGVuZGAgZXhwcmVzc2lvbiBpbiBydWJ5IGlzIGNvbXBpbGVkIHRvIGNhbGwgdGhpcyBydW50aW1lXG4gIC8vIG1ldGhvZCB3aGljaCBlaXRoZXIgcmV0dXJucyBhbiBleGlzdGluZyBjbGFzcyBvZiB0aGUgZ2l2ZW4gbmFtZSwgb3IgY3JlYXRlc1xuICAvLyBhIG5ldyBjbGFzcyBpbiB0aGUgZ2l2ZW4gYGJhc2VgIHNjb3BlLlxuICAvL1xuICAvLyBJZiBhIGNvbnN0YW50IHdpdGggdGhlIGdpdmVuIG5hbWUgZXhpc3RzLCB0aGVuIHdlIGNoZWNrIHRvIG1ha2Ugc3VyZSB0aGF0XG4gIC8vIGl0IGlzIGEgY2xhc3MgYW5kIGFsc28gdGhhdCB0aGUgc3VwZXJjbGFzc2VzIG1hdGNoLiBJZiBlaXRoZXIgb2YgdGhlc2VcbiAgLy8gZmFpbCwgdGhlbiB3ZSByYWlzZSBhIGBUeXBlRXJyb3JgLiBOb3RlLCBgc3VwZXJjbGFzc2AgbWF5IGJlIG51bGwgaWYgb25lXG4gIC8vIHdhcyBub3Qgc3BlY2lmaWVkIGluIHRoZSBydWJ5IGNvZGUuXG4gIC8vXG4gIC8vIFdlIHBhc3MgYSBjb25zdHJ1Y3RvciB0byB0aGlzIG1ldGhvZCBvZiB0aGUgZm9ybSBgZnVuY3Rpb24gQ2xhc3NOYW1lKCkge31gXG4gIC8vIHNpbXBseSBzbyB0aGF0IGNsYXNzZXMgc2hvdyB1cCB3aXRoIG5pY2VseSBmb3JtYXR0ZWQgbmFtZXMgaW5zaWRlIGRlYnVnZ2Vyc1xuICAvLyBpbiB0aGUgd2ViIGJyb3dzZXIgKG9yIG5vZGUvc3Byb2NrZXRzKS5cbiAgLy9cbiAgLy8gVGhlIGBzY29wZWAgaXMgdGhlIGN1cnJlbnQgYHNlbGZgIHZhbHVlIHdoZXJlIHRoZSBjbGFzcyBpcyBiZWluZyBjcmVhdGVkXG4gIC8vIGZyb20uIFdlIHVzZSB0aGlzIHRvIGdldCB0aGUgc2NvcGUgZm9yIHdoZXJlIHRoZSBjbGFzcyBzaG91bGQgYmUgY3JlYXRlZC5cbiAgLy8gSWYgYHNjb3BlYCBpcyBhbiBvYmplY3QgKG5vdCBhIGNsYXNzL21vZHVsZSksIHdlIHNpbXBsZSBnZXQgaXRzIGNsYXNzIGFuZFxuICAvLyB1c2UgdGhhdCBhcyB0aGUgc2NvcGUgaW5zdGVhZC5cbiAgLy9cbiAgLy8gQHBhcmFtIHNjb3BlICAgICAgICBbT2JqZWN0XSB3aGVyZSB0aGUgY2xhc3MgaXMgYmVpbmcgY3JlYXRlZFxuICAvLyBAcGFyYW0gc3VwZXJjbGFzcyAgIFtDbGFzcyxudWxsXSBzdXBlcmNsYXNzIG9mIHRoZSBuZXcgY2xhc3MgKG1heSBiZSBudWxsKVxuICAvLyBAcGFyYW0gc2luZ2xldG9uICAgIFtCb29sZWFuLG51bGxdIGEgdHJ1ZSB2YWx1ZSBkZW5vdGVzIHdlIHdhbnQgdG8gYWxsb2NhdGVcbiAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhIHNpbmdsZXRvblxuICAvL1xuICAvLyBAcmV0dXJuIG5ldyBbQ2xhc3NdICBvciBleGlzdGluZyBydWJ5IGNsYXNzXG4gIC8vXG4gIGZ1bmN0aW9uICRhbGxvY2F0ZV9jbGFzcyhuYW1lLCBzdXBlcmNsYXNzLCBzaW5nbGV0b24pIHtcbiAgICB2YXIga2xhc3M7XG5cbiAgICBpZiAoc3VwZXJjbGFzcyAhPSBudWxsICYmIHN1cGVyY2xhc3MuJCRicmlkZ2UpIHtcbiAgICAgIC8vIEluaGVyaXRhbmNlIGZyb20gYnJpZGdlZCBjbGFzc2VzIHJlcXVpcmVzXG4gICAgICAvLyBjYWxsaW5nIG9yaWdpbmFsIEpTIGNvbnN0cnVjdG9yc1xuICAgICAga2xhc3MgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSAkc2xpY2UuY2FsbChhcmd1bWVudHMpLFxuICAgICAgICAgICAgc2VsZiA9IG5ldyAoJGJpbmQuYXBwbHkoc3VwZXJjbGFzcy4kJGNvbnN0cnVjdG9yLCBbbnVsbF0uY29uY2F0KGFyZ3MpKSkoKTtcblxuICAgICAgICAvLyBhbmQgcmVwbGFjaW5nIGEgX19wcm90b19fIG1hbnVhbGx5XG4gICAgICAgICRzZXRfcHJvdG8oc2VsZiwga2xhc3MuJCRwcm90b3R5cGUpO1xuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAga2xhc3MgPSBmdW5jdGlvbigpe307XG4gICAgfVxuXG4gICAgaWYgKG5hbWUgJiYgbmFtZSAhPT0gbmlsKSB7XG4gICAgICAkcHJvcChrbGFzcywgJ2Rpc3BsYXlOYW1lJywgJzo6JytuYW1lKTtcbiAgICB9XG5cbiAgICAkcHJvcChrbGFzcywgJyQkbmFtZScsIG5hbWUpO1xuICAgICRwcm9wKGtsYXNzLCAnJCRjb25zdHJ1Y3RvcicsIGtsYXNzKTtcbiAgICAkcHJvcChrbGFzcywgJyQkcHJvdG90eXBlJywga2xhc3MucHJvdG90eXBlKTtcbiAgICAkcHJvcChrbGFzcywgJyQkY29uc3QnLCB7fSk7XG4gICAgJHByb3Aoa2xhc3MsICckJGlzX2NsYXNzJywgdHJ1ZSk7XG4gICAgJHByb3Aoa2xhc3MsICckJGlzX2FfbW9kdWxlJywgdHJ1ZSk7XG4gICAgJHByb3Aoa2xhc3MsICckJHN1cGVyJywgc3VwZXJjbGFzcyk7XG4gICAgJHByb3Aoa2xhc3MsICckJGN2YXJzJywge30pO1xuICAgICRwcm9wKGtsYXNzLCAnJCRvd25faW5jbHVkZWRfbW9kdWxlcycsIFtdKTtcbiAgICAkcHJvcChrbGFzcywgJyQkb3duX3ByZXBlbmRlZF9tb2R1bGVzJywgW10pO1xuICAgICRwcm9wKGtsYXNzLCAnJCRhbmNlc3RvcnMnLCBbXSk7XG4gICAgJHByb3Aoa2xhc3MsICckJGFuY2VzdG9yc19jYWNoZV92ZXJzaW9uJywgbnVsbCk7XG4gICAgJHByb3Aoa2xhc3MsICckJHN1YmNsYXNzZXMnLCBbXSk7XG5cbiAgICAkcHJvcChrbGFzcy4kJHByb3RvdHlwZSwgJyQkY2xhc3MnLCBrbGFzcyk7XG5cbiAgICAvLyBCeSBkZWZhdWx0IGlmIHRoZXJlIGFyZSBubyBzaW5nbGV0b24gY2xhc3MgbWV0aG9kc1xuICAgIC8vIF9fcHJvdG9fXyBpcyBDbGFzcy5wcm90b3R5cGVcbiAgICAvLyBMYXRlciBzaW5nbGV0b24gbWV0aG9kcyBnZW5lcmF0ZSBhIHNpbmdsZXRvbl9jbGFzc1xuICAgIC8vIGFuZCBpbmplY3QgaXQgaW50byBhbmNlc3RvcnMgY2hhaW5cbiAgICBpZiAoT3BhbC5DbGFzcykge1xuICAgICAgJHNldF9wcm90byhrbGFzcywgT3BhbC5DbGFzcy5wcm90b3R5cGUpO1xuICAgIH1cblxuICAgIGlmIChzdXBlcmNsYXNzICE9IG51bGwpIHtcbiAgICAgICRzZXRfcHJvdG8oa2xhc3MuJCRwcm90b3R5cGUsIHN1cGVyY2xhc3MuJCRwcm90b3R5cGUpO1xuXG4gICAgICBpZiAoc2luZ2xldG9uICE9PSB0cnVlKSB7XG4gICAgICAgIC8vIExldCdzIG5vdCBmb3JiaWQgR0MgZnJvbSBjbGVhbmluZyB1cCBvdXJcbiAgICAgICAgLy8gc3ViY2xhc3Nlcy5cbiAgICAgICAgaWYgKHR5cGVvZiBXZWFrUmVmICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIC8vIEZpcnN0LCBsZXQncyBjbGVhbiB1cCBvdXIgYXJyYXkgZnJvbSBlbXB0eSBvYmplY3RzLlxuICAgICAgICAgIHZhciBpLCBzdWJjbGFzcywgcmVidWlsdF9zdWJjbGFzc2VzID0gW107XG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IHN1cGVyY2xhc3MuJCRzdWJjbGFzc2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBzdWJjbGFzcyA9IHN1cGVyY2xhc3MuJCRzdWJjbGFzc2VzW2ldO1xuICAgICAgICAgICAgaWYgKHN1YmNsYXNzLmRlcmVmKCkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICByZWJ1aWx0X3N1YmNsYXNzZXMucHVzaChzdWJjbGFzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIE5vdywgbGV0J3MgYWRkIG91ciBjbGFzcy5cbiAgICAgICAgICByZWJ1aWx0X3N1YmNsYXNzZXMucHVzaChuZXcgV2Vha1JlZihrbGFzcykpO1xuICAgICAgICAgIHN1cGVyY2xhc3MuJCRzdWJjbGFzc2VzID0gcmVidWlsdF9zdWJjbGFzc2VzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHN1cGVyY2xhc3MuJCRzdWJjbGFzc2VzLnB1c2goa2xhc3MpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdXBlcmNsYXNzLiQkbWV0YSkge1xuICAgICAgICAvLyBJZiBzdXBlcmNsYXNzIGhhcyBtZXRhY2xhc3MgdGhlbiB3ZSBoYXZlIGV4cGxpY2l0ZWx5IGluaGVyaXQgaXQuXG4gICAgICAgIE9wYWwuYnVpbGRfY2xhc3Nfc2luZ2xldG9uX2NsYXNzKGtsYXNzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ga2xhc3M7XG4gIH07XG4gIE9wYWwuYWxsb2NhdGVfY2xhc3MgPSAkYWxsb2NhdGVfY2xhc3M7XG5cblxuICBmdW5jdGlvbiBmaW5kX2V4aXN0aW5nX2NsYXNzKHNjb3BlLCBuYW1lKSB7XG4gICAgLy8gVHJ5IHRvIGZpbmQgdGhlIGNsYXNzIGluIHRoZSBjdXJyZW50IHNjb3BlXG4gICAgdmFyIGtsYXNzID0gY29uc3RfZ2V0X25hbWUoc2NvcGUsIG5hbWUpO1xuXG4gICAgLy8gSWYgdGhlIGNsYXNzIGV4aXN0cyBpbiB0aGUgc2NvcGUsIHRoZW4gd2UgbXVzdCB1c2UgdGhhdFxuICAgIGlmIChrbGFzcykge1xuICAgICAgLy8gTWFrZSBzdXJlIHRoZSBleGlzdGluZyBjb25zdGFudCBpcyBhIGNsYXNzLCBvciByYWlzZSBlcnJvclxuICAgICAgaWYgKCFrbGFzcy4kJGlzX2NsYXNzKSB7XG4gICAgICAgIHRocm93IE9wYWwuVHlwZUVycm9yLiRuZXcobmFtZSArIFwiIGlzIG5vdCBhIGNsYXNzXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ga2xhc3M7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZW5zdXJlU3VwZXJjbGFzc01hdGNoKGtsYXNzLCBzdXBlcmNsYXNzKSB7XG4gICAgaWYgKGtsYXNzLiQkc3VwZXIgIT09IHN1cGVyY2xhc3MpIHtcbiAgICAgIHRocm93IE9wYWwuVHlwZUVycm9yLiRuZXcoXCJzdXBlcmNsYXNzIG1pc21hdGNoIGZvciBjbGFzcyBcIiArIGtsYXNzLiQkbmFtZSk7XG4gICAgfVxuICB9XG5cbiAgT3BhbC5rbGFzcyA9IGZ1bmN0aW9uKHNjb3BlLCBzdXBlcmNsYXNzLCBuYW1lKSB7XG4gICAgdmFyIGJyaWRnZWQ7XG5cbiAgICBpZiAoc2NvcGUgPT0gbnVsbCB8fCBzY29wZSA9PSAnOjonKSB7XG4gICAgICAvLyBHbG9iYWwgc2NvcGVcbiAgICAgIHNjb3BlID0gX09iamVjdDtcbiAgICB9IGVsc2UgaWYgKCFzY29wZS4kJGlzX2NsYXNzICYmICFzY29wZS4kJGlzX21vZHVsZSkge1xuICAgICAgLy8gU2NvcGUgaXMgYW4gb2JqZWN0LCB1c2UgaXRzIGNsYXNzXG4gICAgICBzY29wZSA9IHNjb3BlLiQkY2xhc3M7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIHN1cGVyY2xhc3MgaXMgbm90IGFuIE9wYWwtZ2VuZXJhdGVkIGNsYXNzIHRoZW4gd2UncmUgYnJpZGdpbmcgYSBuYXRpdmUgSlMgY2xhc3NcbiAgICBpZiAoXG4gICAgICBzdXBlcmNsYXNzICE9IG51bGwgJiYgKCFzdXBlcmNsYXNzLmhhc093blByb3BlcnR5IHx8IChcbiAgICAgICAgc3VwZXJjbGFzcy5oYXNPd25Qcm9wZXJ0eSAmJiAhc3VwZXJjbGFzcy5oYXNPd25Qcm9wZXJ0eSgnJCRpc19jbGFzcycpXG4gICAgICApKVxuICAgICkge1xuICAgICAgaWYgKHN1cGVyY2xhc3MuY29uc3RydWN0b3IgJiYgc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5uYW1lID09IFwiRnVuY3Rpb25cIikge1xuICAgICAgICBicmlkZ2VkID0gc3VwZXJjbGFzcztcbiAgICAgICAgc3VwZXJjbGFzcyA9IF9PYmplY3Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBPcGFsLlR5cGVFcnJvci4kbmV3KFwic3VwZXJjbGFzcyBtdXN0IGJlIGEgQ2xhc3MgKFwiICsgKFxuICAgICAgICAgIChzdXBlcmNsYXNzLmNvbnN0cnVjdG9yICYmIChzdXBlcmNsYXNzLmNvbnN0cnVjdG9yLm5hbWUgfHwgc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci4kJG5hbWUpKSB8fFxuICAgICAgICAgIHR5cGVvZihzdXBlcmNsYXNzKVxuICAgICAgICApICsgXCIgZ2l2ZW4pXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrbGFzcyA9IGZpbmRfZXhpc3RpbmdfY2xhc3Moc2NvcGUsIG5hbWUpO1xuXG4gICAgaWYgKGtsYXNzICE9IG51bGwpIHtcbiAgICAgIGlmIChzdXBlcmNsYXNzKSB7XG4gICAgICAgIC8vIE1ha2Ugc3VyZSBleGlzdGluZyBjbGFzcyBoYXMgc2FtZSBzdXBlcmNsYXNzXG4gICAgICAgIGVuc3VyZVN1cGVyY2xhc3NNYXRjaChrbGFzcywgc3VwZXJjbGFzcyk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgLy8gQ2xhc3MgZG9lc24ndCBleGlzdCwgY3JlYXRlIGEgbmV3IG9uZSB3aXRoIGdpdmVuIHN1cGVyY2xhc3MuLi5cblxuICAgICAgLy8gTm90IHNwZWNpZnlpbmcgYSBzdXBlcmNsYXNzIG1lYW5zIHdlIGNhbiBhc3N1bWUgaXQgdG8gYmUgT2JqZWN0XG4gICAgICBpZiAoc3VwZXJjbGFzcyA9PSBudWxsKSB7XG4gICAgICAgIHN1cGVyY2xhc3MgPSBfT2JqZWN0O1xuICAgICAgfVxuXG4gICAgICAvLyBDcmVhdGUgdGhlIGNsYXNzIG9iamVjdCAoaW5zdGFuY2Ugb2YgQ2xhc3MpXG4gICAgICBrbGFzcyA9ICRhbGxvY2F0ZV9jbGFzcyhuYW1lLCBzdXBlcmNsYXNzKTtcbiAgICAgICRjb25zdF9zZXQoc2NvcGUsIG5hbWUsIGtsYXNzKTtcblxuICAgICAgLy8gQ2FsbCAuaW5oZXJpdGVkKCkgaG9vayB3aXRoIG5ldyBjbGFzcyBvbiB0aGUgc3VwZXJjbGFzc1xuICAgICAgaWYgKHN1cGVyY2xhc3MuJGluaGVyaXRlZCkge1xuICAgICAgICBzdXBlcmNsYXNzLiRpbmhlcml0ZWQoa2xhc3MpO1xuICAgICAgfVxuXG4gICAgICBpZiAoYnJpZGdlZCkge1xuICAgICAgICBPcGFsLmJyaWRnZShicmlkZ2VkLCBrbGFzcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKE9wYWwudHJhY2VfY2xhc3MpIHsgaW52b2tlX3RyYWNlcnNfZm9yX2NsYXNzKGtsYXNzKTsgfVxuXG4gICAgcmV0dXJuIGtsYXNzO1xuICB9O1xuXG4gIC8vIERlZmluZSBuZXcgbW9kdWxlIChvciByZXR1cm4gZXhpc3RpbmcgbW9kdWxlKS4gVGhlIGdpdmVuIGBzY29wZWAgaXMgYmFzaWNhbGx5XG4gIC8vIHRoZSBjdXJyZW50IGBzZWxmYCB2YWx1ZSB0aGUgYG1vZHVsZWAgc3RhdGVtZW50IHdhcyBkZWZpbmVkIGluLiBJZiB0aGlzIGlzXG4gIC8vIGEgcnVieSBtb2R1bGUgb3IgY2xhc3MsIHRoZW4gaXQgaXMgdXNlZCwgb3RoZXJ3aXNlIGlmIHRoZSBzY29wZSBpcyBhIHJ1YnlcbiAgLy8gb2JqZWN0IHRoZW4gdGhhdCBvYmplY3RzIHJlYWwgcnVieSBjbGFzcyBpcyB1c2VkIChlLmcuIGlmIHRoZSBzY29wZSBpcyB0aGVcbiAgLy8gbWFpbiBvYmplY3QsIHRoZW4gdGhlIHRvcCBsZXZlbCBgT2JqZWN0YCBjbGFzcyBpcyB1c2VkIGFzIHRoZSBzY29wZSkuXG4gIC8vXG4gIC8vIElmIGEgbW9kdWxlIG9mIHRoZSBnaXZlbiBuYW1lIGlzIGFscmVhZHkgZGVmaW5lZCBpbiB0aGUgc2NvcGUsIHRoZW4gdGhhdFxuICAvLyBpbnN0YW5jZSBpcyBqdXN0IHJldHVybmVkLlxuICAvL1xuICAvLyBJZiB0aGVyZSBpcyBhIGNsYXNzIG9mIHRoZSBnaXZlbiBuYW1lIGluIHRoZSBzY29wZSwgdGhlbiBhbiBlcnJvciBpc1xuICAvLyBnZW5lcmF0ZWQgaW5zdGVhZCAoY2Fubm90IGhhdmUgYSBjbGFzcyBhbmQgbW9kdWxlIG9mIHNhbWUgbmFtZSBpbiBzYW1lIHNjb3BlKS5cbiAgLy9cbiAgLy8gT3RoZXJ3aXNlLCBhIG5ldyBtb2R1bGUgaXMgY3JlYXRlZCBpbiB0aGUgc2NvcGUgd2l0aCB0aGUgZ2l2ZW4gbmFtZSwgYW5kIHRoYXRcbiAgLy8gbmV3IGluc3RhbmNlIGlzIHJldHVybmVkIGJhY2sgKHRvIGJlIHJlZmVyZW5jZWQgYXQgcnVudGltZSkuXG4gIC8vXG4gIC8vIEBwYXJhbSAgc2NvcGUgW01vZHVsZSwgQ2xhc3NdIGNsYXNzIG9yIG1vZHVsZSB0aGlzIGRlZmluaXRpb24gaXMgaW5zaWRlXG4gIC8vIEBwYXJhbSAgaWQgICBbU3RyaW5nXSB0aGUgbmFtZSBvZiB0aGUgbmV3IChvciBleGlzdGluZykgbW9kdWxlXG4gIC8vXG4gIC8vIEByZXR1cm4gW01vZHVsZV1cbiAgZnVuY3Rpb24gJGFsbG9jYXRlX21vZHVsZShuYW1lKSB7XG4gICAgdmFyIGNvbnN0cnVjdG9yID0gZnVuY3Rpb24oKXt9O1xuICAgIHZhciBtb2R1bGUgPSBjb25zdHJ1Y3RvcjtcblxuICAgIGlmIChuYW1lKVxuICAgICAgJHByb3AoY29uc3RydWN0b3IsICdkaXNwbGF5TmFtZScsIG5hbWUrJy5jb25zdHJ1Y3RvcicpO1xuXG4gICAgJHByb3AobW9kdWxlLCAnJCRuYW1lJywgbmFtZSk7XG4gICAgJHByb3AobW9kdWxlLCAnJCRwcm90b3R5cGUnLCBjb25zdHJ1Y3Rvci5wcm90b3R5cGUpO1xuICAgICRwcm9wKG1vZHVsZSwgJyQkY29uc3QnLCB7fSk7XG4gICAgJHByb3AobW9kdWxlLCAnJCRpc19tb2R1bGUnLCB0cnVlKTtcbiAgICAkcHJvcChtb2R1bGUsICckJGlzX2FfbW9kdWxlJywgdHJ1ZSk7XG4gICAgJHByb3AobW9kdWxlLCAnJCRjdmFycycsIHt9KTtcbiAgICAkcHJvcChtb2R1bGUsICckJGljbGFzc2VzJywgW10pO1xuICAgICRwcm9wKG1vZHVsZSwgJyQkb3duX2luY2x1ZGVkX21vZHVsZXMnLCBbXSk7XG4gICAgJHByb3AobW9kdWxlLCAnJCRvd25fcHJlcGVuZGVkX21vZHVsZXMnLCBbXSk7XG4gICAgJHByb3AobW9kdWxlLCAnJCRhbmNlc3RvcnMnLCBbbW9kdWxlXSk7XG4gICAgJHByb3AobW9kdWxlLCAnJCRhbmNlc3RvcnNfY2FjaGVfdmVyc2lvbicsIG51bGwpO1xuXG4gICAgJHNldF9wcm90byhtb2R1bGUsIE9wYWwuTW9kdWxlLnByb3RvdHlwZSk7XG5cbiAgICByZXR1cm4gbW9kdWxlO1xuICB9O1xuICBPcGFsLmFsbG9jYXRlX21vZHVsZSA9ICRhbGxvY2F0ZV9tb2R1bGU7XG5cbiAgZnVuY3Rpb24gZmluZF9leGlzdGluZ19tb2R1bGUoc2NvcGUsIG5hbWUpIHtcbiAgICB2YXIgbW9kdWxlID0gY29uc3RfZ2V0X25hbWUoc2NvcGUsIG5hbWUpO1xuICAgIGlmIChtb2R1bGUgPT0gbnVsbCAmJiBzY29wZSA9PT0gX09iamVjdCkgbW9kdWxlID0gY29uc3RfbG9va3VwX2FuY2VzdG9ycyhfT2JqZWN0LCBuYW1lKTtcblxuICAgIGlmIChtb2R1bGUpIHtcbiAgICAgIGlmICghbW9kdWxlLiQkaXNfbW9kdWxlICYmIG1vZHVsZSAhPT0gX09iamVjdCkge1xuICAgICAgICB0aHJvdyBPcGFsLlR5cGVFcnJvci4kbmV3KG5hbWUgKyBcIiBpcyBub3QgYSBtb2R1bGVcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1vZHVsZTtcbiAgfVxuXG4gIE9wYWwubW9kdWxlID0gZnVuY3Rpb24oc2NvcGUsIG5hbWUpIHtcbiAgICB2YXIgbW9kdWxlO1xuXG4gICAgaWYgKHNjb3BlID09IG51bGwgfHwgc2NvcGUgPT0gJzo6Jykge1xuICAgICAgLy8gR2xvYmFsIHNjb3BlXG4gICAgICBzY29wZSA9IF9PYmplY3Q7XG4gICAgfSBlbHNlIGlmICghc2NvcGUuJCRpc19jbGFzcyAmJiAhc2NvcGUuJCRpc19tb2R1bGUpIHtcbiAgICAgIC8vIFNjb3BlIGlzIGFuIG9iamVjdCwgdXNlIGl0cyBjbGFzc1xuICAgICAgc2NvcGUgPSBzY29wZS4kJGNsYXNzO1xuICAgIH1cblxuICAgIG1vZHVsZSA9IGZpbmRfZXhpc3RpbmdfbW9kdWxlKHNjb3BlLCBuYW1lKTtcblxuICAgIGlmIChtb2R1bGUgPT0gbnVsbCkge1xuICAgICAgLy8gTW9kdWxlIGRvZXNudCBleGlzdCwgY3JlYXRlIGEgbmV3IG9uZS4uLlxuICAgICAgbW9kdWxlID0gJGFsbG9jYXRlX21vZHVsZShuYW1lKTtcbiAgICAgICRjb25zdF9zZXQoc2NvcGUsIG5hbWUsIG1vZHVsZSk7XG4gICAgfVxuXG4gICAgaWYgKE9wYWwudHJhY2VfY2xhc3MpIHsgaW52b2tlX3RyYWNlcnNfZm9yX2NsYXNzKG1vZHVsZSk7IH1cblxuICAgIHJldHVybiBtb2R1bGU7XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSBzaW5nbGV0b24gY2xhc3MgZm9yIHRoZSBwYXNzZWQgb2JqZWN0LlxuICAvL1xuICAvLyBJZiB0aGUgZ2l2ZW4gb2JqZWN0IGFscmVkeSBoYXMgYSBzaW5nbGV0b24gY2xhc3MsIHRoZW4gaXQgd2lsbCBiZSBzdG9yZWQgb25cbiAgLy8gdGhlIG9iamVjdCBhcyB0aGUgYCQkbWV0YWAgcHJvcGVydHkuIElmIHRoaXMgZXhpc3RzLCB0aGVuIGl0IGlzIHNpbXBseVxuICAvLyByZXR1cm5lZCBiYWNrLlxuICAvL1xuICAvLyBPdGhlcndpc2UsIGEgbmV3IHNpbmdsZXRvbiBvYmplY3QgZm9yIHRoZSBjbGFzcyBvciBvYmplY3QgaXMgY3JlYXRlZCwgc2V0IG9uXG4gIC8vIHRoZSBvYmplY3QgYXQgYCQkbWV0YWAgZm9yIGZ1dHVyZSB1c2UsIGFuZCB0aGVuIHJldHVybmVkLlxuICAvL1xuICAvLyBAcGFyYW0gb2JqZWN0IFtPYmplY3RdIHRoZSBydWJ5IG9iamVjdFxuICAvLyBAcmV0dXJuIFtDbGFzc10gdGhlIHNpbmdsZXRvbiBjbGFzcyBmb3Igb2JqZWN0XG4gIE9wYWwuZ2V0X3NpbmdsZXRvbl9jbGFzcyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIGlmIChvYmplY3QuJCRtZXRhKSB7XG4gICAgICByZXR1cm4gb2JqZWN0LiQkbWV0YTtcbiAgICB9XG5cbiAgICBpZiAob2JqZWN0Lmhhc093blByb3BlcnR5KCckJGlzX2NsYXNzJykpIHtcbiAgICAgIHJldHVybiBPcGFsLmJ1aWxkX2NsYXNzX3NpbmdsZXRvbl9jbGFzcyhvYmplY3QpO1xuICAgIH0gZWxzZSBpZiAob2JqZWN0Lmhhc093blByb3BlcnR5KCckJGlzX21vZHVsZScpKSB7XG4gICAgICByZXR1cm4gT3BhbC5idWlsZF9tb2R1bGVfc2luZ2xldG9uX2NsYXNzKG9iamVjdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBPcGFsLmJ1aWxkX29iamVjdF9zaW5nbGV0b25fY2xhc3Mob2JqZWN0KTtcbiAgICB9XG4gIH07XG5cbiAgLy8gaGVscGVyIHRvIHNldCAkJG1ldGEgb24ga2xhc3MsIG1vZHVsZSBvciBpbnN0YW5jZVxuICBmdW5jdGlvbiBzZXRfbWV0YShvYmosIG1ldGEpIHtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KCckJG1ldGEnKSkge1xuICAgICAgb2JqLiQkbWV0YSA9IG1ldGE7XG4gICAgfSBlbHNlIHtcbiAgICAgICRwcm9wKG9iaiwgJyQkbWV0YScsIG1ldGEpO1xuICAgIH1cbiAgICBpZiAob2JqLiQkZnJvemVuKSB7XG4gICAgICAvLyBJZiBhIG9iamVjdCBpcyBmcm96ZW4gKHNlYWxlZCksIGZyZWV6ZSAkJG1ldGEgdG9vLlxuICAgICAgLy8gTm8gbmVlZCB0byBpbmplY3QgJCRtZXRhLiQkcHJvdG90eXBlIGluIHRoZSBwcm90b3R5cGUgY2hhaW4sXG4gICAgICAvLyBhcyAkJG1ldGEgY2Fubm90IGJlIG1vZGlmaWVkIGFueXdheS5cbiAgICAgIG9iai4kJG1ldGEuJGZyZWV6ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkc2V0X3Byb3RvKG9iaiwgbWV0YS4kJHByb3RvdHlwZSk7XG4gICAgfVxuICB9O1xuXG4gIC8vIEJ1aWxkIHRoZSBzaW5nbGV0b24gY2xhc3MgZm9yIGFuIGV4aXN0aW5nIGNsYXNzLiBDbGFzcyBvYmplY3QgYXJlIGJ1aWx0XG4gIC8vIHdpdGggdGhlaXIgc2luZ2xldG9uIGNsYXNzIGFscmVhZHkgaW4gdGhlIHByb3RvdHlwZSBjaGFpbiBhbmQgaW5oZXJpdGluZ1xuICAvLyBmcm9tIHRoZWlyIHN1cGVyY2xhc3Mgb2JqZWN0ICh1cCB0byBgQ2xhc3NgIGl0c2VsZikuXG4gIC8vXG4gIC8vIE5PVEU6IEFjdHVhbGx5IGluIE1SSSBhIGNsYXNzJyBzaW5nbGV0b24gY2xhc3MgaW5oZXJpdHMgZnJvbSBpdHNcbiAgLy8gc3VwZXJjbGFzcycgc2luZ2xldG9uIGNsYXNzIHdoaWNoIGluIHR1cm4gaW5oZXJpdHMgZnJvbSBDbGFzcy5cbiAgLy9cbiAgLy8gQHBhcmFtIGtsYXNzIFtDbGFzc11cbiAgLy8gQHJldHVybiBbQ2xhc3NdXG4gIE9wYWwuYnVpbGRfY2xhc3Nfc2luZ2xldG9uX2NsYXNzID0gZnVuY3Rpb24oa2xhc3MpIHtcbiAgICBpZiAoa2xhc3MuJCRtZXRhKSB7XG4gICAgICByZXR1cm4ga2xhc3MuJCRtZXRhO1xuICAgIH1cblxuICAgIC8vIFRoZSBzaW5nbGV0b25fY2xhc3Mgc3VwZXJjbGFzcyBpcyB0aGUgc2luZ2xldG9uX2NsYXNzIG9mIGl0cyBzdXBlcmNsYXNzO1xuICAgIC8vIGJ1dCBCYXNpY09iamVjdCBoYXMgbm8gc3VwZXJjbGFzcyAoaXRzIGAkJHN1cGVyYCBpcyBudWxsKSwgdGh1cyB3ZVxuICAgIC8vIGZhbGxiYWNrIG9uIGBDbGFzc2AuXG4gICAgdmFyIHN1cGVyY2xhc3MgPSBrbGFzcyA9PT0gQmFzaWNPYmplY3QgPyBDbGFzcyA6IE9wYWwuZ2V0X3NpbmdsZXRvbl9jbGFzcyhrbGFzcy4kJHN1cGVyKTtcblxuICAgIHZhciBtZXRhID0gJGFsbG9jYXRlX2NsYXNzKG51bGwsIHN1cGVyY2xhc3MsIHRydWUpO1xuXG4gICAgJHByb3AobWV0YSwgJyQkaXNfc2luZ2xldG9uJywgdHJ1ZSk7XG4gICAgJHByb3AobWV0YSwgJyQkc2luZ2xldG9uX29mJywga2xhc3MpO1xuICAgIHNldF9tZXRhKGtsYXNzLCBtZXRhKTtcbiAgICAvLyBSZXN0b3JpbmcgQ2xhc3NOYW1lLmNsYXNzXG4gICAgJHByb3Aoa2xhc3MsICckJGNsYXNzJywgT3BhbC5DbGFzcyk7XG5cbiAgICByZXR1cm4gbWV0YTtcbiAgfTtcblxuICBPcGFsLmJ1aWxkX21vZHVsZV9zaW5nbGV0b25fY2xhc3MgPSBmdW5jdGlvbihtb2QpIHtcbiAgICBpZiAobW9kLiQkbWV0YSkge1xuICAgICAgcmV0dXJuIG1vZC4kJG1ldGE7XG4gICAgfVxuXG4gICAgdmFyIG1ldGEgPSAkYWxsb2NhdGVfY2xhc3MobnVsbCwgT3BhbC5Nb2R1bGUsIHRydWUpO1xuXG4gICAgJHByb3AobWV0YSwgJyQkaXNfc2luZ2xldG9uJywgdHJ1ZSk7XG4gICAgJHByb3AobWV0YSwgJyQkc2luZ2xldG9uX29mJywgbW9kKTtcbiAgICBzZXRfbWV0YShtb2QsIG1ldGEpO1xuICAgIC8vIFJlc3RvcmluZyBNb2R1bGVOYW1lLmNsYXNzXG4gICAgJHByb3AobW9kLCAnJCRjbGFzcycsIE9wYWwuTW9kdWxlKTtcblxuICAgIHJldHVybiBtZXRhO1xuICB9O1xuXG4gIC8vIEJ1aWxkIHRoZSBzaW5nbGV0b24gY2xhc3MgZm9yIGEgUnVieSAobm9uIGNsYXNzKSBPYmplY3QuXG4gIC8vXG4gIC8vIEBwYXJhbSBvYmplY3QgW09iamVjdF1cbiAgLy8gQHJldHVybiBbQ2xhc3NdXG4gIE9wYWwuYnVpbGRfb2JqZWN0X3NpbmdsZXRvbl9jbGFzcyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBzdXBlcmNsYXNzID0gb2JqZWN0LiQkY2xhc3MsXG4gICAgICAgIGtsYXNzID0gJGFsbG9jYXRlX2NsYXNzKG5pbCwgc3VwZXJjbGFzcywgdHJ1ZSk7XG5cbiAgICAkcHJvcChrbGFzcywgJyQkaXNfc2luZ2xldG9uJywgdHJ1ZSk7XG4gICAgJHByb3Aoa2xhc3MsICckJHNpbmdsZXRvbl9vZicsIG9iamVjdCk7XG5cbiAgICBkZWxldGUga2xhc3MuJCRwcm90b3R5cGUuJCRjbGFzcztcblxuICAgIHNldF9tZXRhKG9iamVjdCwga2xhc3MpO1xuXG4gICAgcmV0dXJuIGtsYXNzO1xuICB9O1xuXG4gIE9wYWwuaXNfbWV0aG9kID0gZnVuY3Rpb24ocHJvcCkge1xuICAgIHJldHVybiAocHJvcFswXSA9PT0gJyQnICYmIHByb3BbMV0gIT09ICckJyk7XG4gIH07XG5cbiAgT3BhbC5pbnN0YW5jZV9tZXRob2RzID0gZnVuY3Rpb24obW9kKSB7XG4gICAgdmFyIGV4Y2x1ZGUgPSBbXSwgcmVzdWx0cyA9IFtdLCBhbmNlc3RvcnMgPSAkYW5jZXN0b3JzKG1vZCk7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGFuY2VzdG9ycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBhbmNlc3RvciA9IGFuY2VzdG9yc1tpXSxcbiAgICAgICAgICBwcm90byA9IGFuY2VzdG9yLiQkcHJvdG90eXBlO1xuXG4gICAgICBpZiAocHJvdG8uaGFzT3duUHJvcGVydHkoJyQkZHVtbXknKSkge1xuICAgICAgICBwcm90byA9IHByb3RvLiQkZGVmaW5lX21ldGhvZHNfb247XG4gICAgICB9XG5cbiAgICAgIHZhciBwcm9wcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHByb3RvKTtcblxuICAgICAgZm9yICh2YXIgaiA9IDAsIGxsID0gcHJvcHMubGVuZ3RoOyBqIDwgbGw7IGorKykge1xuICAgICAgICB2YXIgcHJvcCA9IHByb3BzW2pdO1xuXG4gICAgICAgIGlmIChPcGFsLmlzX21ldGhvZChwcm9wKSkge1xuICAgICAgICAgIHZhciBtZXRob2RfbmFtZSA9IHByb3Auc2xpY2UoMSksXG4gICAgICAgICAgICAgIG1ldGhvZCA9IHByb3RvW3Byb3BdO1xuXG4gICAgICAgICAgaWYgKG1ldGhvZC4kJHN0dWIgJiYgZXhjbHVkZS5pbmRleE9mKG1ldGhvZF9uYW1lKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIGV4Y2x1ZGUucHVzaChtZXRob2RfbmFtZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFtZXRob2QuJCRzdHViICYmIHJlc3VsdHMuaW5kZXhPZihtZXRob2RfbmFtZSkgPT09IC0xICYmIGV4Y2x1ZGUuaW5kZXhPZihtZXRob2RfbmFtZSkgPT09IC0xKSB7XG4gICAgICAgICAgICByZXN1bHRzLnB1c2gobWV0aG9kX25hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIE9wYWwub3duX2luc3RhbmNlX21ldGhvZHMgPSBmdW5jdGlvbihtb2QpIHtcbiAgICB2YXIgcmVzdWx0cyA9IFtdLFxuICAgICAgICBwcm90byA9IG1vZC4kJHByb3RvdHlwZTtcblxuICAgIGlmIChwcm90by5oYXNPd25Qcm9wZXJ0eSgnJCRkdW1teScpKSB7XG4gICAgICBwcm90byA9IHByb3RvLiQkZGVmaW5lX21ldGhvZHNfb247XG4gICAgfVxuXG4gICAgdmFyIHByb3BzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMocHJvdG8pO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHByb3BzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcHJvcCA9IHByb3BzW2ldO1xuXG4gICAgICBpZiAoT3BhbC5pc19tZXRob2QocHJvcCkpIHtcbiAgICAgICAgdmFyIG1ldGhvZCA9IHByb3RvW3Byb3BdO1xuXG4gICAgICAgIGlmICghbWV0aG9kLiQkc3R1Yikge1xuICAgICAgICAgIHZhciBtZXRob2RfbmFtZSA9IHByb3Auc2xpY2UoMSk7XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKG1ldGhvZF9uYW1lKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIE9wYWwubWV0aG9kcyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBPcGFsLmluc3RhbmNlX21ldGhvZHMob2JqLiQkbWV0YSB8fCBvYmouJCRjbGFzcyk7XG4gIH07XG5cbiAgT3BhbC5vd25fbWV0aG9kcyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBvYmouJCRtZXRhID8gT3BhbC5vd25faW5zdGFuY2VfbWV0aG9kcyhvYmouJCRtZXRhKSA6IFtdO1xuICB9O1xuXG4gIE9wYWwucmVjZWl2ZXJfbWV0aG9kcyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBtb2QgPSBPcGFsLmdldF9zaW5nbGV0b25fY2xhc3Mob2JqKTtcbiAgICB2YXIgc2luZ2xldG9uX21ldGhvZHMgPSBPcGFsLm93bl9pbnN0YW5jZV9tZXRob2RzKG1vZCk7XG4gICAgdmFyIGluc3RhbmNlX21ldGhvZHMgPSBPcGFsLm93bl9pbnN0YW5jZV9tZXRob2RzKG1vZC4kJHN1cGVyKTtcbiAgICByZXR1cm4gc2luZ2xldG9uX21ldGhvZHMuY29uY2F0KGluc3RhbmNlX21ldGhvZHMpO1xuICB9O1xuXG4gIC8vIFJldHVybnMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgYWxsIHBhaXJzIG9mIG5hbWVzL3ZhbHVlc1xuICAvLyBmb3IgYWxsIGNsYXNzIHZhcmlhYmxlcyBkZWZpbmVkIGluIHByb3ZpZGVkICttb2R1bGUrXG4gIC8vIGFuZCBpdHMgYW5jZXN0b3JzLlxuICAvL1xuICAvLyBAcGFyYW0gbW9kdWxlIFtNb2R1bGVdXG4gIC8vIEByZXR1cm4gW09iamVjdF1cbiAgT3BhbC5jbGFzc192YXJpYWJsZXMgPSBmdW5jdGlvbihtb2R1bGUpIHtcbiAgICB2YXIgYW5jZXN0b3JzID0gJGFuY2VzdG9ycyhtb2R1bGUpLFxuICAgICAgICBpLCBsZW5ndGggPSBhbmNlc3RvcnMubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgIGZvciAoaSA9IGxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgYW5jZXN0b3IgPSBhbmNlc3RvcnNbaV07XG5cbiAgICAgIGZvciAodmFyIGN2YXIgaW4gYW5jZXN0b3IuJCRjdmFycykge1xuICAgICAgICByZXN1bHRbY3Zhcl0gPSBhbmNlc3Rvci4kJGN2YXJzW2N2YXJdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gU2V0cyBjbGFzcyB2YXJpYWJsZSB3aXRoIHNwZWNpZmllZCArbmFtZSsgdG8gK3ZhbHVlK1xuICAvLyBpbiBwcm92aWRlZCArbW9kdWxlK1xuICAvL1xuICAvLyBAcGFyYW0gbW9kdWxlIFtNb2R1bGVdXG4gIC8vIEBwYXJhbSBuYW1lIFtTdHJpbmddXG4gIC8vIEBwYXJhbSB2YWx1ZSBbT2JqZWN0XVxuICBPcGFsLmNsYXNzX3ZhcmlhYmxlX3NldCA9IGZ1bmN0aW9uKG1vZHVsZSwgbmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgYW5jZXN0b3JzID0gJGFuY2VzdG9ycyhtb2R1bGUpLFxuICAgICAgICBpLCBsZW5ndGggPSBhbmNlc3RvcnMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gbGVuZ3RoIC0gMjsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBhbmNlc3RvciA9IGFuY2VzdG9yc1tpXTtcblxuICAgICAgaWYgKCRoYXNfb3duLmNhbGwoYW5jZXN0b3IuJCRjdmFycywgbmFtZSkpIHtcbiAgICAgICAgYW5jZXN0b3IuJCRjdmFyc1tuYW1lXSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbW9kdWxlLiQkY3ZhcnNbbmFtZV0gPSB2YWx1ZTtcblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcblxuICAvLyBHZXRzIGNsYXNzIHZhcmlhYmxlIHdpdGggc3BlY2lmaWVkICtuYW1lKyBmcm9tIHByb3ZpZGVkICttb2R1bGUrXG4gIC8vXG4gIC8vIEBwYXJhbSBtb2R1bGUgW01vZHVsZV1cbiAgLy8gQHBhcmFtIG5hbWUgW1N0cmluZ11cbiAgT3BhbC5jbGFzc192YXJpYWJsZV9nZXQgPSBmdW5jdGlvbihtb2R1bGUsIG5hbWUsIHRvbGVyYW50KSB7XG4gICAgaWYgKCRoYXNfb3duLmNhbGwobW9kdWxlLiQkY3ZhcnMsIG5hbWUpKVxuICAgICAgcmV0dXJuIG1vZHVsZS4kJGN2YXJzW25hbWVdO1xuXG4gICAgdmFyIGFuY2VzdG9ycyA9ICRhbmNlc3RvcnMobW9kdWxlKSxcbiAgICAgIGksIGxlbmd0aCA9IGFuY2VzdG9ycy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBhbmNlc3RvciA9IGFuY2VzdG9yc1tpXTtcblxuICAgICAgaWYgKCRoYXNfb3duLmNhbGwoYW5jZXN0b3IuJCRjdmFycywgbmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIGFuY2VzdG9yLiQkY3ZhcnNbbmFtZV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF0b2xlcmFudClcbiAgICAgIHRocm93IE9wYWwuTmFtZUVycm9yLiRuZXcoJ3VuaW5pdGlhbGl6ZWQgY2xhc3MgdmFyaWFibGUgJytuYW1lKycgaW4gJyttb2R1bGUuJG5hbWUoKSk7XG5cbiAgICByZXR1cm4gbmlsO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNSb290KHByb3RvKSB7XG4gICAgcmV0dXJuIHByb3RvLmhhc093blByb3BlcnR5KCckJGljbGFzcycpICYmIHByb3RvLmhhc093blByb3BlcnR5KCckJHJvb3QnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG93bl9pbmNsdWRlZF9tb2R1bGVzKG1vZHVsZSkge1xuICAgIHZhciByZXN1bHQgPSBbXSwgbW9kLCBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihtb2R1bGUuJCRwcm90b3R5cGUpO1xuXG4gICAgd2hpbGUgKHByb3RvKSB7XG4gICAgICBpZiAocHJvdG8uaGFzT3duUHJvcGVydHkoJyQkY2xhc3MnKSkge1xuICAgICAgICAvLyBzdXBlcmNsYXNzXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgbW9kID0gcHJvdG9Ub01vZHVsZShwcm90byk7XG4gICAgICBpZiAobW9kKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKG1vZCk7XG4gICAgICB9XG4gICAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIG93bl9wcmVwZW5kZWRfbW9kdWxlcyhtb2R1bGUpIHtcbiAgICB2YXIgcmVzdWx0ID0gW10sIG1vZCwgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YobW9kdWxlLiQkcHJvdG90eXBlKTtcblxuICAgIGlmIChtb2R1bGUuJCRwcm90b3R5cGUuaGFzT3duUHJvcGVydHkoJyQkZHVtbXknKSkge1xuICAgICAgd2hpbGUgKHByb3RvKSB7XG4gICAgICAgIGlmIChwcm90byA9PT0gbW9kdWxlLiQkcHJvdG90eXBlLiQkZGVmaW5lX21ldGhvZHNfb24pIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIG1vZCA9IHByb3RvVG9Nb2R1bGUocHJvdG8pO1xuICAgICAgICBpZiAobW9kKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2gobW9kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cblxuICAvLyBUaGUgYWN0dWFsIGluY2x1c2lvbiBvZiBhIG1vZHVsZSBpbnRvIGEgY2xhc3MuXG4gIC8vXG4gIC8vICMjIENsYXNzIGAkJHBhcmVudGAgYW5kIGBpY2xhc3NgXG4gIC8vXG4gIC8vIFRvIGhhbmRsZSBgc3VwZXJgIGNhbGxzLCBldmVyeSBjbGFzcyBoYXMgYSBgJCRwYXJlbnRgLiBUaGlzIHBhcmVudCBpc1xuICAvLyB1c2VkIHRvIHJlc29sdmUgdGhlIG5leHQgY2xhc3MgZm9yIGEgc3VwZXIgY2FsbC4gQSBub3JtYWwgY2xhc3Mgd291bGRcbiAgLy8gaGF2ZSB0aGlzIHBvaW50IHRvIGl0cyBzdXBlcmNsYXNzLiBIb3dldmVyLCBpZiBhIGNsYXNzIGluY2x1ZGVzIGEgbW9kdWxlXG4gIC8vIHRoZW4gdGhpcyB3b3VsZCBuZWVkIHRvIHRha2UgaW50byBhY2NvdW50IHRoZSBtb2R1bGUuIFRoZSBtb2R1bGUgd291bGRcbiAgLy8gYWxzbyBoYXZlIHRvIHRoZW4gcG9pbnQgaXRzIGAkJHBhcmVudGAgdG8gdGhlIGFjdHVhbCBzdXBlcmNsYXNzLiBXZVxuICAvLyBjYW5ub3QgbW9kaWZ5IG1vZHVsZXMgbGlrZSB0aGlzLCBiZWNhdXNlIGl0IG1pZ2h0IGJlIGluY2x1ZGVkIGluIG1vcmVcbiAgLy8gdGhlbiBvbmUgY2xhc3MuIFRvIGZpeCB0aGlzLCB3ZSBhY3R1YWxseSBpbnNlcnQgYW4gYGljbGFzc2AgYXMgdGhlIGNsYXNzJ1xuICAvLyBgJCRwYXJlbnRgIHdoaWNoIGNhbiB0aGVuIHBvaW50IHRvIHRoZSBzdXBlcmNsYXNzLiBUaGUgYGljbGFzc2AgYWN0cyBhc1xuICAvLyBhIHByb3h5IHRvIHRoZSBhY3R1YWwgbW9kdWxlLCBzbyB0aGUgYHN1cGVyYCBjaGFpbiBjYW4gdGhlbiBzZWFyY2ggaXQgZm9yXG4gIC8vIHRoZSByZXF1aXJlZCBtZXRob2QuXG4gIC8vXG4gIC8vIEBwYXJhbSBtb2R1bGUgW01vZHVsZV0gdGhlIG1vZHVsZSB0byBpbmNsdWRlXG4gIC8vIEBwYXJhbSBpbmNsdWRlciBbTW9kdWxlXSB0aGUgdGFyZ2V0IGNsYXNzIHRvIGluY2x1ZGUgbW9kdWxlIGludG9cbiAgLy8gQHJldHVybiBbbnVsbF1cbiAgT3BhbC5hcHBlbmRfZmVhdHVyZXMgPSBmdW5jdGlvbihtb2R1bGUsIGluY2x1ZGVyKSB7XG4gICAgdmFyIG1vZHVsZV9hbmNlc3RvcnMgPSAkYW5jZXN0b3JzKG1vZHVsZSk7XG4gICAgdmFyIGljbGFzc2VzID0gW107XG5cbiAgICBpZiAobW9kdWxlX2FuY2VzdG9ycy5pbmRleE9mKGluY2x1ZGVyKSAhPT0gLTEpIHtcbiAgICAgIHRocm93IE9wYWwuQXJndW1lbnRFcnJvci4kbmV3KCdjeWNsaWMgaW5jbHVkZSBkZXRlY3RlZCcpO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBtb2R1bGVfYW5jZXN0b3JzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYW5jZXN0b3IgPSBtb2R1bGVfYW5jZXN0b3JzW2ldLCBpY2xhc3MgPSBjcmVhdGVfaWNsYXNzKGFuY2VzdG9yKTtcbiAgICAgICRwcm9wKGljbGFzcywgJyQkaW5jbHVkZWQnLCB0cnVlKTtcbiAgICAgIGljbGFzc2VzLnB1c2goaWNsYXNzKTtcbiAgICB9XG4gICAgdmFyIGluY2x1ZGVyX2FuY2VzdG9ycyA9ICRhbmNlc3RvcnMoaW5jbHVkZXIpLFxuICAgICAgICBjaGFpbiA9IGNoYWluX2ljbGFzc2VzKGljbGFzc2VzKSxcbiAgICAgICAgc3RhcnRfY2hhaW5fYWZ0ZXIsXG4gICAgICAgIGVuZF9jaGFpbl9vbjtcblxuICAgIGlmIChpbmNsdWRlcl9hbmNlc3RvcnMuaW5kZXhPZihtb2R1bGUpID09PSAtMSkge1xuICAgICAgLy8gZmlyc3QgdGltZSBpbmNsdWRlXG5cbiAgICAgIC8vIGluY2x1ZGVyIC0+IGNoYWluLmZpcnN0IC0+IC4uLmNoYWluLi4uIC0+IGNoYWluLmxhc3QgLT4gaW5jbHVkZXIucGFyZW50XG4gICAgICBzdGFydF9jaGFpbl9hZnRlciA9IGluY2x1ZGVyLiQkcHJvdG90eXBlO1xuICAgICAgZW5kX2NoYWluX29uID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGluY2x1ZGVyLiQkcHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGhlIG1vZHVsZSBoYXMgYmVlbiBhbHJlYWR5IGluY2x1ZGVkLFxuICAgICAgLy8gd2UgZG9uJ3QgbmVlZCB0byBwdXQgaXQgaW50byB0aGUgYW5jZXN0b3JzIGNoYWluIGFnYWluLFxuICAgICAgLy8gYnV0IHRoaXMgbW9kdWxlIG1heSBoYXZlIG5ldyBpbmNsdWRlZCBtb2R1bGVzLlxuICAgICAgLy8gSWYgaXQncyB0cnVlIHdlIG5lZWQgdG8gY29weSB0aGVtLlxuICAgICAgLy9cbiAgICAgIC8vIFRoZSBzaW1wbGVzdCB3YXkgaXMgdG8gcmVwbGFjZSBhbmNlc3RvcnMgY2hhaW4gZnJvbVxuICAgICAgLy8gICAgICAgICAgcGFyZW50XG4gICAgICAvLyAgICAgICAgICAgIHxcbiAgICAgIC8vICAgYG1vZHVsZWAgaWNsYXNzIChoYXMgYSAkJHJvb3QgZmxhZylcbiAgICAgIC8vICAgICAgICAgICAgfFxuICAgICAgLy8gICAuLi5wcmV2aW9zIGNoYWluIG9mIG1vZHVsZS5pbmNsdWRlZF9tb2R1bGVzIC4uLlxuICAgICAgLy8gICAgICAgICAgICB8XG4gICAgICAvLyAgXCJuZXh0IGFuY2VzdG9yXCIgKGhhcyBhICQkcm9vdCBmbGFnIG9yIGlzIGEgcmVhbCBjbGFzcylcbiAgICAgIC8vXG4gICAgICAvLyB0b1xuICAgICAgLy8gICAgICAgICAgcGFyZW50XG4gICAgICAvLyAgICAgICAgICAgIHxcbiAgICAgIC8vICAgIGBtb2R1bGVgIGljbGFzcyAoaGFzIGEgJCRyb290IGZsYWcpXG4gICAgICAvLyAgICAgICAgICAgIHxcbiAgICAgIC8vICAgLi4ucmVnZW5lcmF0ZWQgY2hhaW4gb2YgbW9kdWxlLmluY2x1ZGVkX21vZHVsZXNcbiAgICAgIC8vICAgICAgICAgICAgfFxuICAgICAgLy8gICBcIm5leHQgYW5jZXN0b3JcIiAoaGFzIGEgJCRyb290IGZsYWcgb3IgaXMgYSByZWFsIGNsYXNzKVxuICAgICAgLy9cbiAgICAgIC8vIGJlY2F1c2UgdGhlcmUgYXJlIG5vIGludGVybWVkaWF0ZSBjbGFzc2VzIGJldHdlZW4gYHBhcmVudGAgYW5kIGBuZXh0IGFuY2VzdG9yYC5cbiAgICAgIC8vIEl0IGRvZXNuJ3QgYnJlYWsgYW55IHByb3RvdHlwZXMgb2Ygb3RoZXIgb2JqZWN0cyBhcyB3ZSBkb24ndCBjaGFuZ2UgY2xhc3MgcmVmZXJlbmNlcy5cblxuICAgICAgdmFyIHBhcmVudCA9IGluY2x1ZGVyLiQkcHJvdG90eXBlLCBtb2R1bGVfaWNsYXNzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHBhcmVudCk7XG5cbiAgICAgIHdoaWxlIChtb2R1bGVfaWNsYXNzICE9IG51bGwpIHtcbiAgICAgICAgaWYgKG1vZHVsZV9pY2xhc3MuJCRtb2R1bGUgPT09IG1vZHVsZSAmJiBpc1Jvb3QobW9kdWxlX2ljbGFzcykpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcmVudCA9IG1vZHVsZV9pY2xhc3M7XG4gICAgICAgIG1vZHVsZV9pY2xhc3MgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YobW9kdWxlX2ljbGFzcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2R1bGVfaWNsYXNzKSB7XG4gICAgICAgIC8vIG1vZHVsZSBoYXMgYmVlbiBkaXJlY3RseSBpbmNsdWRlZFxuICAgICAgICB2YXIgbmV4dF9hbmNlc3RvciA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihtb2R1bGVfaWNsYXNzKTtcblxuICAgICAgICAvLyBza2lwIG5vbi1yb290IGljbGFzc2VzICh0aGF0IHdlcmUgcmVjdXJzaXZlbHkgaW5jbHVkZWQpXG4gICAgICAgIHdoaWxlIChuZXh0X2FuY2VzdG9yLmhhc093blByb3BlcnR5KCckJGljbGFzcycpICYmICFpc1Jvb3QobmV4dF9hbmNlc3RvcikpIHtcbiAgICAgICAgICBuZXh0X2FuY2VzdG9yID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG5leHRfYW5jZXN0b3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhcnRfY2hhaW5fYWZ0ZXIgPSBwYXJlbnQ7XG4gICAgICAgIGVuZF9jaGFpbl9vbiA9IG5leHRfYW5jZXN0b3I7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBtb2R1bGUgaGFzIG5vdCBiZWVuIGRpcmVjdGx5IGluY2x1ZGVkIGJ1dCB3YXMgaW4gYW5jZXN0b3IgY2hhaW4gYmVjYXVzZSBpdCB3YXMgaW5jbHVkZWQgYnkgYW5vdGhlciBtb2R1bGVcbiAgICAgICAgLy8gaW5jbHVkZSBpdCBkaXJlY3RseVxuICAgICAgICBzdGFydF9jaGFpbl9hZnRlciA9IGluY2x1ZGVyLiQkcHJvdG90eXBlO1xuICAgICAgICBlbmRfY2hhaW5fb24gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoaW5jbHVkZXIuJCRwcm90b3R5cGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgICRzZXRfcHJvdG8oc3RhcnRfY2hhaW5fYWZ0ZXIsIGNoYWluLmZpcnN0KTtcbiAgICAkc2V0X3Byb3RvKGNoYWluLmxhc3QsIGVuZF9jaGFpbl9vbik7XG5cbiAgICAvLyByZWNhbGN1bGF0ZSBvd25faW5jbHVkZWRfbW9kdWxlcyBjYWNoZVxuICAgIGluY2x1ZGVyLiQkb3duX2luY2x1ZGVkX21vZHVsZXMgPSBvd25faW5jbHVkZWRfbW9kdWxlcyhpbmNsdWRlcik7XG5cbiAgICBPcGFsLmNvbnN0X2NhY2hlX3ZlcnNpb24rKztcbiAgfTtcblxuICBPcGFsLnByZXBlbmRfZmVhdHVyZXMgPSBmdW5jdGlvbihtb2R1bGUsIHByZXBlbmRlcikge1xuICAgIC8vIEhlcmUgd2UgY2hhbmdlIHRoZSBhbmNlc3RvcnMgY2hhaW4gZnJvbVxuICAgIC8vXG4gICAgLy8gICBwcmVwZW5kZXJcbiAgICAvLyAgICAgIHxcbiAgICAvLyAgICBwYXJlbnRcbiAgICAvL1xuICAgIC8vIHRvOlxuICAgIC8vXG4gICAgLy8gZHVtbXkocHJlcGVuZGVyKVxuICAgIC8vICAgICAgfFxuICAgIC8vICBpY2xhc3MobW9kdWxlKVxuICAgIC8vICAgICAgfFxuICAgIC8vIGljbGFzcyhwcmVwZW5kZXIpXG4gICAgLy8gICAgICB8XG4gICAgLy8gICAgcGFyZW50XG4gICAgdmFyIG1vZHVsZV9hbmNlc3RvcnMgPSAkYW5jZXN0b3JzKG1vZHVsZSk7XG4gICAgdmFyIGljbGFzc2VzID0gW107XG5cbiAgICBpZiAobW9kdWxlX2FuY2VzdG9ycy5pbmRleE9mKHByZXBlbmRlcikgIT09IC0xKSB7XG4gICAgICB0aHJvdyBPcGFsLkFyZ3VtZW50RXJyb3IuJG5ldygnY3ljbGljIHByZXBlbmQgZGV0ZWN0ZWQnKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gbW9kdWxlX2FuY2VzdG9ycy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGFuY2VzdG9yID0gbW9kdWxlX2FuY2VzdG9yc1tpXSwgaWNsYXNzID0gY3JlYXRlX2ljbGFzcyhhbmNlc3Rvcik7XG4gICAgICAkcHJvcChpY2xhc3MsICckJHByZXBlbmRlZCcsIHRydWUpO1xuICAgICAgaWNsYXNzZXMucHVzaChpY2xhc3MpO1xuICAgIH1cblxuICAgIHZhciBjaGFpbiA9IGNoYWluX2ljbGFzc2VzKGljbGFzc2VzKSxcbiAgICAgICAgZHVtbXlfcHJlcGVuZGVyID0gcHJlcGVuZGVyLiQkcHJvdG90eXBlLFxuICAgICAgICBwcmV2aW91c19wYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZHVtbXlfcHJlcGVuZGVyKSxcbiAgICAgICAgcHJlcGVuZGVyX2ljbGFzcyxcbiAgICAgICAgc3RhcnRfY2hhaW5fYWZ0ZXIsXG4gICAgICAgIGVuZF9jaGFpbl9vbjtcblxuICAgIGlmIChkdW1teV9wcmVwZW5kZXIuaGFzT3duUHJvcGVydHkoJyQkZHVtbXknKSkge1xuICAgICAgLy8gVGhlIG1vZHVsZSBhbHJlYWR5IGhhcyBzb21lIHByZXBlbmRlZCBtb2R1bGVzXG4gICAgICAvLyB3aGljaCBtZWFucyB0aGF0IHdlIGRvbid0IG5lZWQgdG8gbWFrZSBpdCBcImR1bW15XCJcbiAgICAgIHByZXBlbmRlcl9pY2xhc3MgPSBkdW1teV9wcmVwZW5kZXIuJCRkZWZpbmVfbWV0aG9kc19vbjtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTWFraW5nIHRoZSBtb2R1bGUgXCJkdW1teVwiXG4gICAgICBwcmVwZW5kZXJfaWNsYXNzID0gY3JlYXRlX2R1bW15X2ljbGFzcyhwcmVwZW5kZXIpO1xuICAgICAgZmx1c2hfbWV0aG9kc19pbihwcmVwZW5kZXIpO1xuICAgICAgJHByb3AoZHVtbXlfcHJlcGVuZGVyLCAnJCRkdW1teScsIHRydWUpO1xuICAgICAgJHByb3AoZHVtbXlfcHJlcGVuZGVyLCAnJCRkZWZpbmVfbWV0aG9kc19vbicsIHByZXBlbmRlcl9pY2xhc3MpO1xuXG4gICAgICAvLyBDb252ZXJ0aW5nXG4gICAgICAvLyAgIGR1bW15KHByZXBlbmRlcikgLT4gcHJldmlvdXNfcGFyZW50XG4gICAgICAvLyB0b1xuICAgICAgLy8gICBkdW1teShwcmVwZW5kZXIpIC0+IGljbGFzcyhwcmVwZW5kZXIpIC0+IHByZXZpb3VzX3BhcmVudFxuICAgICAgJHNldF9wcm90byhkdW1teV9wcmVwZW5kZXIsIHByZXBlbmRlcl9pY2xhc3MpO1xuICAgICAgJHNldF9wcm90byhwcmVwZW5kZXJfaWNsYXNzLCBwcmV2aW91c19wYXJlbnQpO1xuICAgIH1cblxuICAgIHZhciBwcmVwZW5kZXJfYW5jZXN0b3JzID0gJGFuY2VzdG9ycyhwcmVwZW5kZXIpO1xuXG4gICAgaWYgKHByZXBlbmRlcl9hbmNlc3RvcnMuaW5kZXhPZihtb2R1bGUpID09PSAtMSkge1xuICAgICAgLy8gZmlyc3QgdGltZSBwcmVwZW5kXG5cbiAgICAgIHN0YXJ0X2NoYWluX2FmdGVyID0gZHVtbXlfcHJlcGVuZGVyO1xuXG4gICAgICAvLyBuZXh0ICQkcm9vdCBvciBwcmVwZW5kZXJfaWNsYXNzIG9yIG5vbi0kJGljbGFzc1xuICAgICAgZW5kX2NoYWluX29uID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGR1bW15X3ByZXBlbmRlcik7XG4gICAgICB3aGlsZSAoZW5kX2NoYWluX29uICE9IG51bGwpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGVuZF9jaGFpbl9vbi5oYXNPd25Qcm9wZXJ0eSgnJCRyb290JykgfHxcbiAgICAgICAgICBlbmRfY2hhaW5fb24gPT09IHByZXBlbmRlcl9pY2xhc3MgfHxcbiAgICAgICAgICAhZW5kX2NoYWluX29uLmhhc093blByb3BlcnR5KCckJGljbGFzcycpXG4gICAgICAgICkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgZW5kX2NoYWluX29uID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGVuZF9jaGFpbl9vbik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IE9wYWwuUnVudGltZUVycm9yLiRuZXcoXCJQcmVwZW5kaW5nIGEgbW9kdWxlIG11bHRpcGxlIHRpbWVzIGlzIG5vdCBzdXBwb3J0ZWRcIik7XG4gICAgfVxuXG4gICAgJHNldF9wcm90byhzdGFydF9jaGFpbl9hZnRlciwgY2hhaW4uZmlyc3QpO1xuICAgICRzZXRfcHJvdG8oY2hhaW4ubGFzdCwgZW5kX2NoYWluX29uKTtcblxuICAgIC8vIHJlY2FsY3VsYXRlIG93bl9wcmVwZW5kZWRfbW9kdWxlcyBjYWNoZVxuICAgIHByZXBlbmRlci4kJG93bl9wcmVwZW5kZWRfbW9kdWxlcyA9IG93bl9wcmVwZW5kZWRfbW9kdWxlcyhwcmVwZW5kZXIpO1xuXG4gICAgT3BhbC5jb25zdF9jYWNoZV92ZXJzaW9uKys7XG4gIH07XG5cbiAgZnVuY3Rpb24gZmx1c2hfbWV0aG9kc19pbihtb2R1bGUpIHtcbiAgICB2YXIgcHJvdG8gPSBtb2R1bGUuJCRwcm90b3R5cGUsXG4gICAgICAgIHByb3BzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMocHJvdG8pO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHByb3AgPSBwcm9wc1tpXTtcbiAgICAgIGlmIChPcGFsLmlzX21ldGhvZChwcm9wKSkge1xuICAgICAgICBkZWxldGUgcHJvdG9bcHJvcF07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlX2ljbGFzcyhtb2R1bGUpIHtcbiAgICB2YXIgaWNsYXNzID0gY3JlYXRlX2R1bW15X2ljbGFzcyhtb2R1bGUpO1xuXG4gICAgaWYgKG1vZHVsZS4kJGlzX21vZHVsZSkge1xuICAgICAgbW9kdWxlLiQkaWNsYXNzZXMucHVzaChpY2xhc3MpO1xuICAgIH1cblxuICAgIHJldHVybiBpY2xhc3M7XG4gIH1cblxuICAvLyBEdW1teSBpY2xhc3MgZG9lc24ndCByZWNlaXZlIHVwZGF0ZXMgd2hlbiB0aGUgbW9kdWxlIGdldHMgYSBuZXcgbWV0aG9kLlxuICBmdW5jdGlvbiBjcmVhdGVfZHVtbXlfaWNsYXNzKG1vZHVsZSkge1xuICAgIHZhciBpY2xhc3MgPSB7fSxcbiAgICAgICAgcHJvdG8gPSBtb2R1bGUuJCRwcm90b3R5cGU7XG5cbiAgICBpZiAocHJvdG8uaGFzT3duUHJvcGVydHkoJyQkZHVtbXknKSkge1xuICAgICAgcHJvdG8gPSBwcm90by4kJGRlZmluZV9tZXRob2RzX29uO1xuICAgIH1cblxuICAgIHZhciBwcm9wcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHByb3RvKSxcbiAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoLCBpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcHJvcCA9IHByb3BzW2ldO1xuICAgICAgJHByb3AoaWNsYXNzLCBwcm9wLCBwcm90b1twcm9wXSk7XG4gICAgfVxuXG4gICAgJHByb3AoaWNsYXNzLCAnJCRpY2xhc3MnLCB0cnVlKTtcbiAgICAkcHJvcChpY2xhc3MsICckJG1vZHVsZScsIG1vZHVsZSk7XG5cbiAgICByZXR1cm4gaWNsYXNzO1xuICB9XG5cbiAgZnVuY3Rpb24gY2hhaW5faWNsYXNzZXMoaWNsYXNzZXMpIHtcbiAgICB2YXIgbGVuZ3RoID0gaWNsYXNzZXMubGVuZ3RoLCBmaXJzdCA9IGljbGFzc2VzWzBdO1xuXG4gICAgJHByb3AoZmlyc3QsICckJHJvb3QnLCB0cnVlKTtcblxuICAgIGlmIChsZW5ndGggPT09IDEpIHtcbiAgICAgIHJldHVybiB7IGZpcnN0OiBmaXJzdCwgbGFzdDogZmlyc3QgfTtcbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXMgPSBmaXJzdDtcblxuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjdXJyZW50ID0gaWNsYXNzZXNbaV07XG4gICAgICAkc2V0X3Byb3RvKHByZXZpb3VzLCBjdXJyZW50KTtcbiAgICAgIHByZXZpb3VzID0gY3VycmVudDtcbiAgICB9XG5cblxuICAgIHJldHVybiB7IGZpcnN0OiBpY2xhc3Nlc1swXSwgbGFzdDogaWNsYXNzZXNbbGVuZ3RoIC0gMV0gfTtcbiAgfVxuXG4gIC8vIEZvciBwZXJmb3JtYW5jZSwgc29tZSBjb3JlIFJ1YnkgY2xhc3NlcyBhcmUgdG9sbC1mcmVlIGJyaWRnZWQgdG8gdGhlaXJcbiAgLy8gbmF0aXZlIEphdmFTY3JpcHQgY291bnRlcnBhcnRzIChlLmcuIGEgUnVieSBBcnJheSBpcyBhIEphdmFTY3JpcHQgQXJyYXkpLlxuICAvL1xuICAvLyBUaGlzIG1ldGhvZCBpcyB1c2VkIHRvIHNldHVwIGEgbmF0aXZlIGNvbnN0cnVjdG9yIChlLmcuIEFycmF5KSwgdG8gaGF2ZVxuICAvLyBpdHMgcHJvdG90eXBlIGFjdCBsaWtlIGEgbm9ybWFsIFJ1YnkgY2xhc3MuIEZpcnN0bHksIGEgbmV3IFJ1YnkgY2xhc3MgaXNcbiAgLy8gY3JlYXRlZCB1c2luZyB0aGUgbmF0aXZlIGNvbnN0cnVjdG9yIHNvIHRoYXQgaXRzIHByb3RvdHlwZSBpcyBzZXQgYXMgdGhlXG4gIC8vIHRhcmdldCBmb3IgdGhlIG5ldyBjbGFzcy4gTm90ZTogYWxsIGJyaWRnZWQgY2xhc3NlcyBhcmUgc2V0IHRvIGluaGVyaXRcbiAgLy8gZnJvbSBPYmplY3QuXG4gIC8vXG4gIC8vIEV4YW1wbGU6XG4gIC8vXG4gIC8vICAgIE9wYWwuYnJpZGdlKHNlbGYsIEZ1bmN0aW9uKTtcbiAgLy9cbiAgLy8gQHBhcmFtIGtsYXNzICAgICAgIFtDbGFzc10gdGhlIFJ1YnkgY2xhc3MgdG8gYnJpZGdlXG4gIC8vIEBwYXJhbSBjb25zdHJ1Y3RvciBbSlMuRnVuY3Rpb25dIG5hdGl2ZSBKYXZhU2NyaXB0IGNvbnN0cnVjdG9yIHRvIHVzZVxuICAvLyBAcmV0dXJuIFtDbGFzc10gcmV0dXJucyB0aGUgcGFzc2VkIFJ1YnkgY2xhc3NcbiAgLy9cbiAgT3BhbC5icmlkZ2UgPSBmdW5jdGlvbihuYXRpdmVfa2xhc3MsIGtsYXNzKSB7XG4gICAgaWYgKG5hdGl2ZV9rbGFzcy5oYXNPd25Qcm9wZXJ0eSgnJCRicmlkZ2UnKSkge1xuICAgICAgdGhyb3cgT3BhbC5Bcmd1bWVudEVycm9yLiRuZXcoXCJhbHJlYWR5IGJyaWRnZWRcIik7XG4gICAgfVxuXG4gICAgLy8gY29uc3RydWN0b3IgaXMgYSBKUyBmdW5jdGlvbiB3aXRoIGEgcHJvdG90eXBlIGNoYWluIGxpa2U6XG4gICAgLy8gLSBjb25zdHJ1Y3RvclxuICAgIC8vICAgLSBzdXBlclxuICAgIC8vXG4gICAgLy8gV2hhdCB3ZSBuZWVkIHRvIGRvIGlzIHRvIGluamVjdCBvdXIgY2xhc3MgKHdpdGggaXRzIHByb3RvdHlwZSBjaGFpbilcbiAgICAvLyBiZXR3ZWVuIGNvbnN0cnVjdG9yIGFuZCBzdXBlci4gRm9yIGV4YW1wbGUsIGFmdGVyIGluamVjdGluZyA6Ok9iamVjdFxuICAgIC8vIGludG8gSlMgU3RyaW5nIHdlIGdldDpcbiAgICAvL1xuICAgIC8vIC0gY29uc3RydWN0b3IgKHdpbmRvdy5TdHJpbmcpXG4gICAgLy8gICAtIE9wYWwuT2JqZWN0XG4gICAgLy8gICAgIC0gT3BhbC5LZXJuZWxcbiAgICAvLyAgICAgICAtIE9wYWwuQmFzaWNPYmplY3RcbiAgICAvLyAgICAgICAgIC0gc3VwZXIgKHdpbmRvdy5PYmplY3QpXG4gICAgLy8gICAgICAgICAgIC0gbnVsbFxuICAgIC8vXG4gICAgJHByb3AobmF0aXZlX2tsYXNzLCAnJCRicmlkZ2UnLCBrbGFzcyk7XG4gICAgJHNldF9wcm90byhuYXRpdmVfa2xhc3MucHJvdG90eXBlLCAoa2xhc3MuJCRzdXBlciB8fCBPcGFsLk9iamVjdCkuJCRwcm90b3R5cGUpO1xuICAgICRwcm9wKGtsYXNzLCAnJCRwcm90b3R5cGUnLCBuYXRpdmVfa2xhc3MucHJvdG90eXBlKTtcblxuICAgICRwcm9wKGtsYXNzLiQkcHJvdG90eXBlLCAnJCRjbGFzcycsIGtsYXNzKTtcbiAgICAkcHJvcChrbGFzcywgJyQkY29uc3RydWN0b3InLCBuYXRpdmVfa2xhc3MpO1xuICAgICRwcm9wKGtsYXNzLCAnJCRicmlkZ2UnLCB0cnVlKTtcbiAgfTtcblxuICBmdW5jdGlvbiBwcm90b1RvTW9kdWxlKHByb3RvKSB7XG4gICAgaWYgKHByb3RvLmhhc093blByb3BlcnR5KCckJGR1bW15JykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKHByb3RvLmhhc093blByb3BlcnR5KCckJGljbGFzcycpKSB7XG4gICAgICByZXR1cm4gcHJvdG8uJCRtb2R1bGU7XG4gICAgfSBlbHNlIGlmIChwcm90by5oYXNPd25Qcm9wZXJ0eSgnJCRjbGFzcycpKSB7XG4gICAgICByZXR1cm4gcHJvdG8uJCRjbGFzcztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvd25fYW5jZXN0b3JzKG1vZHVsZSkge1xuICAgIHJldHVybiBtb2R1bGUuJCRvd25fcHJlcGVuZGVkX21vZHVsZXMuY29uY2F0KFttb2R1bGVdKS5jb25jYXQobW9kdWxlLiQkb3duX2luY2x1ZGVkX21vZHVsZXMpO1xuICB9XG5cbiAgLy8gVGhlIEFycmF5IG9mIGFuY2VzdG9ycyBmb3IgYSBnaXZlbiBtb2R1bGUvY2xhc3NcbiAgZnVuY3Rpb24gJGFuY2VzdG9ycyhtb2R1bGUpIHtcbiAgICBpZiAoIW1vZHVsZSkgeyByZXR1cm4gW107IH1cblxuICAgIGlmIChtb2R1bGUuJCRhbmNlc3RvcnNfY2FjaGVfdmVyc2lvbiA9PT0gT3BhbC5jb25zdF9jYWNoZV92ZXJzaW9uKSB7XG4gICAgICByZXR1cm4gbW9kdWxlLiQkYW5jZXN0b3JzO1xuICAgIH1cblxuICAgIHZhciByZXN1bHQgPSBbXSwgaSwgbW9kcywgbGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMCwgbW9kcyA9IG93bl9hbmNlc3RvcnMobW9kdWxlKSwgbGVuZ3RoID0gbW9kcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgcmVzdWx0LnB1c2gobW9kc1tpXSk7XG4gICAgfVxuXG4gICAgaWYgKG1vZHVsZS4kJHN1cGVyKSB7XG4gICAgICBmb3IgKGkgPSAwLCBtb2RzID0gJGFuY2VzdG9ycyhtb2R1bGUuJCRzdXBlciksIGxlbmd0aCA9IG1vZHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0LnB1c2gobW9kc1tpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbW9kdWxlLiQkYW5jZXN0b3JzX2NhY2hlX3ZlcnNpb24gPSBPcGFsLmNvbnN0X2NhY2hlX3ZlcnNpb247XG4gICAgbW9kdWxlLiQkYW5jZXN0b3JzID0gcmVzdWx0O1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgT3BhbC5hbmNlc3RvcnMgPSAkYW5jZXN0b3JzO1xuXG4gIE9wYWwuaW5jbHVkZWRfbW9kdWxlcyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuICAgIHZhciByZXN1bHQgPSBbXSwgbW9kID0gbnVsbCwgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YobW9kdWxlLiQkcHJvdG90eXBlKTtcblxuICAgIGZvciAoOyBwcm90byAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pOyBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykpIHtcbiAgICAgIG1vZCA9IHByb3RvVG9Nb2R1bGUocHJvdG8pO1xuICAgICAgaWYgKG1vZCAmJiBtb2QuJCRpc19tb2R1bGUgJiYgcHJvdG8uJCRpY2xhc3MgJiYgcHJvdG8uJCRpbmNsdWRlZCkge1xuICAgICAgICByZXN1bHQucHVzaChtb2QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cblxuICAvLyBNZXRob2QgTWlzc2luZ1xuICAvLyAtLS0tLS0tLS0tLS0tLVxuXG4gIC8vIE1ldGhvZHMgc3R1YnMgYXJlIHVzZWQgdG8gZmFjaWxpdGF0ZSBtZXRob2RfbWlzc2luZyBpbiBvcGFsLiBBIHN0dWIgaXMgYVxuICAvLyBwbGFjZWhvbGRlciBmdW5jdGlvbiB3aGljaCBqdXN0IGNhbGxzIGBtZXRob2RfbWlzc2luZ2Agb24gdGhlIHJlY2VpdmVyLlxuICAvLyBJZiBubyBtZXRob2Qgd2l0aCB0aGUgZ2l2ZW4gbmFtZSBpcyBhY3R1YWxseSBkZWZpbmVkIG9uIGFuIG9iamVjdCwgdGhlbiBpdFxuICAvLyBpcyBvYnZpb3VzIHRvIHNheSB0aGF0IHRoZSBzdHViIHdpbGwgYmUgY2FsbGVkIGluc3RlYWQsIGFuZCB0aGVuIGluIHR1cm5cbiAgLy8gbWV0aG9kX21pc3Npbmcgd2lsbCBiZSBjYWxsZWQuXG4gIC8vXG4gIC8vIFdoZW4gYSBmaWxlIGluIHJ1YnkgZ2V0cyBjb21waWxlZCB0byBqYXZhc2NyaXB0LCBpdCBpbmNsdWRlcyBhIGNhbGwgdG9cbiAgLy8gdGhpcyBmdW5jdGlvbiB3aGljaCBhZGRzIHN0dWJzIGZvciBldmVyeSBtZXRob2QgbmFtZSBpbiB0aGUgY29tcGlsZWQgZmlsZS5cbiAgLy8gSXQgc2hvdWxkIHRoZW4gYmUgc2FmZSB0byBhc3N1bWUgdGhhdCBtZXRob2RfbWlzc2luZyB3aWxsIHdvcmsgZm9yIGFueVxuICAvLyBtZXRob2QgY2FsbCBkZXRlY3RlZC5cbiAgLy9cbiAgLy8gTWV0aG9kIHN0dWJzIGFyZSBhZGRlZCB0byB0aGUgQmFzaWNPYmplY3QgcHJvdG90eXBlLCB3aGljaCBldmVyeSBvdGhlclxuICAvLyBydWJ5IG9iamVjdCBpbmhlcml0cywgc28gYWxsIG9iamVjdHMgc2hvdWxkIGhhbmRsZSBtZXRob2QgbWlzc2luZy4gQSBzdHViXG4gIC8vIGlzIG9ubHkgYWRkZWQgaWYgdGhlIGdpdmVuIHByb3BlcnR5IG5hbWUgKG1ldGhvZCBuYW1lKSBpcyBub3QgYWxyZWFkeVxuICAvLyBkZWZpbmVkLlxuICAvL1xuICAvLyBOb3RlOiBhbGwgcnVieSBtZXRob2RzIGhhdmUgYSBgJGAgcHJlZml4IGluIGphdmFzY3JpcHQsIHNvIGFsbCBzdHVicyB3aWxsXG4gIC8vIGhhdmUgdGhpcyBwcmVmaXggYXMgd2VsbCAodG8gbWFrZSB0aGlzIG1ldGhvZCBtb3JlIHBlcmZvcm1hbnQpLlxuICAvL1xuICAvLyAgICBPcGFsLmFkZF9zdHVicyhcImZvbyxiYXIsYmF6PVwiKTtcbiAgLy9cbiAgLy8gQWxsIHN0dWIgZnVuY3Rpb25zIHdpbGwgaGF2ZSBhIHByaXZhdGUgYCQkc3R1YmAgcHJvcGVydHkgc2V0IHRvIHRydWUgc29cbiAgLy8gdGhhdCBvdGhlciBpbnRlcm5hbCBtZXRob2RzIGNhbiBkZXRlY3QgaWYgYSBtZXRob2QgaXMganVzdCBhIHN0dWIgb3Igbm90LlxuICAvLyBgS2VybmVsI3Jlc3BvbmRfdG8/YCB1c2VzIHRoaXMgcHJvcGVydHkgdG8gZGV0ZWN0IGEgbWV0aG9kcyBwcmVzZW5jZS5cbiAgLy9cbiAgLy8gQHBhcmFtIHN0dWJzIFtBcnJheV0gYW4gYXJyYXkgb2YgbWV0aG9kIHN0dWJzIHRvIGFkZFxuICAvLyBAcmV0dXJuIFt1bmRlZmluZWRdXG4gIE9wYWwuYWRkX3N0dWJzID0gZnVuY3Rpb24oc3R1YnMpIHtcbiAgICB2YXIgcHJvdG8gPSBPcGFsLkJhc2ljT2JqZWN0LiQkcHJvdG90eXBlO1xuICAgIHZhciBzdHViLCBleGlzdGluZ19tZXRob2Q7XG4gICAgc3R1YnMgPSBzdHVicy5zcGxpdCgnLCcpO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHN0dWJzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBzdHViID0gJyQnK3N0dWJzW2ldLCBleGlzdGluZ19tZXRob2QgPSBwcm90b1tzdHViXTtcblxuICAgICAgaWYgKGV4aXN0aW5nX21ldGhvZCA9PSBudWxsIHx8IGV4aXN0aW5nX21ldGhvZC4kJHN0dWIpIHtcbiAgICAgICAgT3BhbC5hZGRfc3R1Yl9mb3IocHJvdG8sIHN0dWIpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvLyBBZGQgYSBtZXRob2RfbWlzc2luZyBzdHViIGZ1bmN0aW9uIHRvIHRoZSBnaXZlbiBwcm90b3R5cGUgZm9yIHRoZVxuICAvLyBnaXZlbiBuYW1lLlxuICAvL1xuICAvLyBAcGFyYW0gcHJvdG90eXBlIFtQcm90b3R5cGVdIHRoZSB0YXJnZXQgcHJvdG90eXBlXG4gIC8vIEBwYXJhbSBzdHViIFtTdHJpbmddIHN0dWIgbmFtZSB0byBhZGQgKGUuZy4gXCIkZm9vXCIpXG4gIC8vIEByZXR1cm4gW3VuZGVmaW5lZF1cbiAgT3BhbC5hZGRfc3R1Yl9mb3IgPSBmdW5jdGlvbihwcm90b3R5cGUsIHN0dWIpIHtcbiAgICAvLyBPcGFsLnN0dWJfZm9yKHN0dWIpIGlzIHRoZSBtZXRob2RfbWlzc2luZ19zdHViXG4gICAgJHByb3AocHJvdG90eXBlLCBzdHViLCBPcGFsLnN0dWJfZm9yKHN0dWIpKTtcbiAgfTtcblxuICAvLyBHZW5lcmF0ZSB0aGUgbWV0aG9kX21pc3Npbmcgc3R1YiBmb3IgYSBnaXZlbiBtZXRob2QgbmFtZS5cbiAgLy9cbiAgLy8gQHBhcmFtIG1ldGhvZF9uYW1lIFtTdHJpbmddIFRoZSBqcy1uYW1lIG9mIHRoZSBtZXRob2QgdG8gc3R1YiAoZS5nLiBcIiRmb29cIilcbiAgLy8gQHJldHVybiBbdW5kZWZpbmVkXVxuICBPcGFsLnN0dWJfZm9yID0gZnVuY3Rpb24obWV0aG9kX25hbWUpIHtcblxuICAgIGZ1bmN0aW9uIG1ldGhvZF9taXNzaW5nX3N0dWIoKSB7XG4gICAgICAvLyBDb3B5IGFueSBnaXZlbiBibG9jayBvbnRvIHRoZSBtZXRob2RfbWlzc2luZyBkaXNwYXRjaGVyXG4gICAgICB0aGlzLiRtZXRob2RfbWlzc2luZy4kJHAgPSBtZXRob2RfbWlzc2luZ19zdHViLiQkcDtcblxuICAgICAgLy8gU2V0IGJsb2NrIHByb3BlcnR5IHRvIG51bGwgcmVhZHkgZm9yIHRoZSBuZXh0IGNhbGwgKHN0b3AgZmFsc2UtcG9zaXRpdmVzKVxuICAgICAgbWV0aG9kX21pc3Npbmdfc3R1Yi4kJHAgPSBudWxsO1xuXG4gICAgICAvLyBjYWxsIG1ldGhvZCBtaXNzaW5nIHdpdGggY29ycmVjdCBhcmdzIChyZW1vdmUgJyQnIHByZWZpeCBvbiBtZXRob2QgbmFtZSlcbiAgICAgIHZhciBhcmdzX2FyeSA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICAgIGZvcih2YXIgaSA9IDAsIGwgPSBhcmdzX2FyeS5sZW5ndGg7IGkgPCBsOyBpKyspIHsgYXJnc19hcnlbaV0gPSBhcmd1bWVudHNbaV07IH1cblxuICAgICAgcmV0dXJuIHRoaXMuJG1ldGhvZF9taXNzaW5nLmFwcGx5KHRoaXMsIFttZXRob2RfbmFtZS5zbGljZSgxKV0uY29uY2F0KGFyZ3NfYXJ5KSk7XG4gICAgfVxuXG4gICAgbWV0aG9kX21pc3Npbmdfc3R1Yi4kJHN0dWIgPSB0cnVlO1xuXG4gICAgcmV0dXJuIG1ldGhvZF9taXNzaW5nX3N0dWI7XG4gIH07XG5cblxuICAvLyBNZXRob2RzXG4gIC8vIC0tLS0tLS1cblxuICAvLyBBcml0eSBjb3VudCBlcnJvciBkaXNwYXRjaGVyIGZvciBtZXRob2RzXG4gIC8vXG4gIC8vIEBwYXJhbSBhY3R1YWwgW0ZpeG51bV0gbnVtYmVyIG9mIGFyZ3VtZW50cyBnaXZlbiB0byBtZXRob2RcbiAgLy8gQHBhcmFtIGV4cGVjdGVkIFtGaXhudW1dIGV4cGVjdGVkIG51bWJlciBvZiBhcmd1bWVudHNcbiAgLy8gQHBhcmFtIG9iamVjdCBbT2JqZWN0XSBvd25lciBvZiB0aGUgbWV0aG9kICttZXRoK1xuICAvLyBAcGFyYW0gbWV0aCBbU3RyaW5nXSBtZXRob2QgbmFtZSB0aGF0IGdvdCB3cm9uZyBudW1iZXIgb2YgYXJndW1lbnRzXG4gIC8vIEByYWlzZSBbQXJndW1lbnRFcnJvcl1cbiAgT3BhbC5hYyA9IGZ1bmN0aW9uKGFjdHVhbCwgZXhwZWN0ZWQsIG9iamVjdCwgbWV0aCkge1xuICAgIHZhciBpbnNwZWN0ID0gJyc7XG4gICAgaWYgKG9iamVjdC4kJGlzX2FfbW9kdWxlKSB7XG4gICAgICBpbnNwZWN0ICs9IG9iamVjdC4kJG5hbWUgKyAnLic7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaW5zcGVjdCArPSBvYmplY3QuJCRjbGFzcy4kJG5hbWUgKyAnIyc7XG4gICAgfVxuICAgIGluc3BlY3QgKz0gbWV0aDtcblxuICAgIHRocm93IE9wYWwuQXJndW1lbnRFcnJvci4kbmV3KCdbJyArIGluc3BlY3QgKyAnXSB3cm9uZyBudW1iZXIgb2YgYXJndW1lbnRzIChnaXZlbiAnICsgYWN0dWFsICsgJywgZXhwZWN0ZWQgJyArIGV4cGVjdGVkICsgJyknKTtcbiAgfTtcblxuICAvLyBBcml0eSBjb3VudCBlcnJvciBkaXNwYXRjaGVyIGZvciBibG9ja3NcbiAgLy9cbiAgLy8gQHBhcmFtIGFjdHVhbCBbRml4bnVtXSBudW1iZXIgb2YgYXJndW1lbnRzIGdpdmVuIHRvIGJsb2NrXG4gIC8vIEBwYXJhbSBleHBlY3RlZCBbRml4bnVtXSBleHBlY3RlZCBudW1iZXIgb2YgYXJndW1lbnRzXG4gIC8vIEBwYXJhbSBjb250ZXh0IFtPYmplY3RdIGNvbnRleHQgb2YgdGhlIGJsb2NrIGRlZmluaXRpb25cbiAgLy8gQHJhaXNlIFtBcmd1bWVudEVycm9yXVxuICBPcGFsLmJsb2NrX2FjID0gZnVuY3Rpb24oYWN0dWFsLCBleHBlY3RlZCwgY29udGV4dCkge1xuICAgIHZhciBpbnNwZWN0ID0gXCJgYmxvY2sgaW4gXCIgKyBjb250ZXh0ICsgXCInXCI7XG5cbiAgICB0aHJvdyBPcGFsLkFyZ3VtZW50RXJyb3IuJG5ldyhpbnNwZWN0ICsgJzogd3JvbmcgbnVtYmVyIG9mIGFyZ3VtZW50cyAoZ2l2ZW4gJyArIGFjdHVhbCArICcsIGV4cGVjdGVkICcgKyBleHBlY3RlZCArICcpJyk7XG4gIH07XG5cbiAgZnVuY3Rpb24gZ2V0X2FuY2VzdG9ycyhvYmopIHtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KCckJG1ldGEnKSAmJiBvYmouJCRtZXRhICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4gJGFuY2VzdG9ycyhvYmouJCRtZXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICRhbmNlc3RvcnMob2JqLiQkY2xhc3MpO1xuICAgIH1cbiAgfTtcblxuICAvLyBTdXBlciBkaXNwYXRjaGVyXG4gIE9wYWwuZmluZF9zdXBlciA9IGZ1bmN0aW9uKG9iaiwgbWlkLCBjdXJyZW50X2Z1bmMsIGRlZmNoZWNrLCBhbGxvd19zdHVicykge1xuICAgIHZhciBqc2lkID0gJyQnICsgbWlkLCBhbmNlc3RvcnMsIHN1cGVyX21ldGhvZDtcblxuICAgIGFuY2VzdG9ycyA9IGdldF9hbmNlc3RvcnMob2JqKTtcblxuICAgIHZhciBjdXJyZW50X2luZGV4ID0gYW5jZXN0b3JzLmluZGV4T2YoY3VycmVudF9mdW5jLiQkb3duZXIpO1xuXG4gICAgZm9yICh2YXIgaSA9IGN1cnJlbnRfaW5kZXggKyAxOyBpIDwgYW5jZXN0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYW5jZXN0b3IgPSBhbmNlc3RvcnNbaV0sXG4gICAgICAgICAgcHJvdG8gPSBhbmNlc3Rvci4kJHByb3RvdHlwZTtcblxuICAgICAgaWYgKHByb3RvLmhhc093blByb3BlcnR5KCckJGR1bW15JykpIHtcbiAgICAgICAgcHJvdG8gPSBwcm90by4kJGRlZmluZV9tZXRob2RzX29uO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvdG8uaGFzT3duUHJvcGVydHkoanNpZCkpIHtcbiAgICAgICAgc3VwZXJfbWV0aG9kID0gcHJvdG9banNpZF07XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghZGVmY2hlY2sgJiYgc3VwZXJfbWV0aG9kICYmIHN1cGVyX21ldGhvZC4kJHN0dWIgJiYgb2JqLiRtZXRob2RfbWlzc2luZy4kJHByaXN0aW5lKSB7XG4gICAgICAvLyBtZXRob2RfbWlzc2luZyBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IGRlZmluZWRcbiAgICAgIHRocm93IE9wYWwuTm9NZXRob2RFcnJvci4kbmV3KCdzdXBlcjogbm8gc3VwZXJjbGFzcyBtZXRob2QgYCcrbWlkK1wiJyBmb3IgXCIrb2JqLCBtaWQpO1xuICAgIH1cblxuICAgIHJldHVybiAoc3VwZXJfbWV0aG9kLiQkc3R1YiAmJiAhYWxsb3dfc3R1YnMpID8gbnVsbCA6IHN1cGVyX21ldGhvZDtcbiAgfTtcblxuICAvLyBJdGVyIGRpc3BhdGNoZXIgZm9yIHN1cGVyIGluIGEgYmxvY2tcbiAgT3BhbC5maW5kX2Jsb2NrX3N1cGVyID0gZnVuY3Rpb24ob2JqLCBqc2lkLCBjdXJyZW50X2Z1bmMsIGRlZmNoZWNrLCBpbXBsaWNpdCkge1xuICAgIHZhciBjYWxsX2pzaWQgPSBqc2lkO1xuXG4gICAgaWYgKCFjdXJyZW50X2Z1bmMpIHtcbiAgICAgIHRocm93IE9wYWwuUnVudGltZUVycm9yLiRuZXcoXCJzdXBlciBjYWxsZWQgb3V0c2lkZSBvZiBtZXRob2RcIik7XG4gICAgfVxuXG4gICAgaWYgKGltcGxpY2l0ICYmIGN1cnJlbnRfZnVuYy4kJGRlZmluZV9tZXRoKSB7XG4gICAgICB0aHJvdyBPcGFsLlJ1bnRpbWVFcnJvci4kbmV3KFxuICAgICAgICBcImltcGxpY2l0IGFyZ3VtZW50IHBhc3Npbmcgb2Ygc3VwZXIgZnJvbSBtZXRob2QgZGVmaW5lZCBieSBkZWZpbmVfbWV0aG9kKCkgaXMgbm90IHN1cHBvcnRlZC4gXCIgK1xuICAgICAgICBcIlNwZWNpZnkgYWxsIGFyZ3VtZW50cyBleHBsaWNpdGx5XCJcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGN1cnJlbnRfZnVuYy4kJGRlZikge1xuICAgICAgY2FsbF9qc2lkID0gY3VycmVudF9mdW5jLiQkanNpZDtcbiAgICB9XG5cbiAgICByZXR1cm4gT3BhbC5maW5kX3N1cGVyKG9iaiwgY2FsbF9qc2lkLCBjdXJyZW50X2Z1bmMsIGRlZmNoZWNrKTtcbiAgfTtcblxuICAvLyBAZGVwcmVjYXRlZFxuICBPcGFsLmZpbmRfc3VwZXJfZGlzcGF0Y2hlciA9IE9wYWwuZmluZF9zdXBlcjtcblxuICAvLyBAZGVwcmVjYXRlZFxuICBPcGFsLmZpbmRfaXRlcl9zdXBlcl9kaXNwYXRjaGVyID0gT3BhbC5maW5kX2Jsb2NrX3N1cGVyO1xuXG4gIC8vIGhhbmRsZXMgeWllbGQgY2FsbHMgZm9yIDEgeWllbGRlZCBhcmdcbiAgT3BhbC55aWVsZDEgPSBmdW5jdGlvbihibG9jaywgYXJnKSB7XG4gICAgaWYgKHR5cGVvZihibG9jaykgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgdGhyb3cgT3BhbC5Mb2NhbEp1bXBFcnJvci4kbmV3KFwibm8gYmxvY2sgZ2l2ZW5cIik7XG4gICAgfVxuXG4gICAgdmFyIGhhc19tbGhzID0gYmxvY2suJCRoYXNfdG9wX2xldmVsX21saHNfYXJnLFxuICAgICAgICBoYXNfdHJhaWxpbmdfY29tbWEgPSBibG9jay4kJGhhc190cmFpbGluZ19jb21tYV9pbl9hcmdzO1xuXG4gICAgaWYgKGJsb2NrLmxlbmd0aCA+IDEgfHwgKChoYXNfbWxocyB8fCBoYXNfdHJhaWxpbmdfY29tbWEpICYmIGJsb2NrLmxlbmd0aCA9PT0gMSkpIHtcbiAgICAgIGFyZyA9IE9wYWwudG9fYXJ5KGFyZyk7XG4gICAgfVxuXG4gICAgaWYgKChibG9jay5sZW5ndGggPiAxIHx8IChoYXNfdHJhaWxpbmdfY29tbWEgJiYgYmxvY2subGVuZ3RoID09PSAxKSkgJiYgYXJnLiQkaXNfYXJyYXkpIHtcbiAgICAgIHJldHVybiBibG9jay5hcHBseShudWxsLCBhcmcpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJldHVybiBibG9jayhhcmcpO1xuICAgIH1cbiAgfTtcblxuICAvLyBoYW5kbGVzIHlpZWxkIGZvciA+IDEgeWllbGRlZCBhcmdcbiAgT3BhbC55aWVsZFggPSBmdW5jdGlvbihibG9jaywgYXJncykge1xuICAgIGlmICh0eXBlb2YoYmxvY2spICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRocm93IE9wYWwuTG9jYWxKdW1wRXJyb3IuJG5ldyhcIm5vIGJsb2NrIGdpdmVuXCIpO1xuICAgIH1cblxuICAgIGlmIChibG9jay5sZW5ndGggPiAxICYmIGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICBpZiAoYXJnc1swXS4kJGlzX2FycmF5KSB7XG4gICAgICAgIHJldHVybiBibG9jay5hcHBseShudWxsLCBhcmdzWzBdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWFyZ3MuJCRpc19hcnJheSkge1xuICAgICAgdmFyIGFyZ3NfYXJ5ID0gbmV3IEFycmF5KGFyZ3MubGVuZ3RoKTtcbiAgICAgIGZvcih2YXIgaSA9IDAsIGwgPSBhcmdzX2FyeS5sZW5ndGg7IGkgPCBsOyBpKyspIHsgYXJnc19hcnlbaV0gPSBhcmdzW2ldOyB9XG5cbiAgICAgIHJldHVybiBibG9jay5hcHBseShudWxsLCBhcmdzX2FyeSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJsb2NrLmFwcGx5KG51bGwsIGFyZ3MpO1xuICB9O1xuXG4gIC8vIEZpbmRzIHRoZSBjb3JyZXNwb25kaW5nIGV4Y2VwdGlvbiBtYXRjaCBpbiBjYW5kaWRhdGVzLiAgRWFjaCBjYW5kaWRhdGUgY2FuXG4gIC8vIGJlIGEgdmFsdWUsIG9yIGFuIGFycmF5IG9mIHZhbHVlcy4gIFJldHVybnMgbnVsbCBpZiBub3QgZm91bmQuXG4gIE9wYWwucmVzY3VlID0gZnVuY3Rpb24oZXhjZXB0aW9uLCBjYW5kaWRhdGVzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYW5kaWRhdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2FuZGlkYXRlID0gY2FuZGlkYXRlc1tpXTtcblxuICAgICAgaWYgKGNhbmRpZGF0ZS4kJGlzX2FycmF5KSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBPcGFsLnJlc2N1ZShleGNlcHRpb24sIGNhbmRpZGF0ZSk7XG5cbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGNhbmRpZGF0ZSA9PT0gT3BhbC5KUy5FcnJvciB8fCBjYW5kaWRhdGVbJyQ9PT0nXShleGNlcHRpb24pKSB7XG4gICAgICAgIHJldHVybiBjYW5kaWRhdGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgT3BhbC5pc19hID0gZnVuY3Rpb24ob2JqZWN0LCBrbGFzcykge1xuICAgIGlmIChrbGFzcyAhPSBudWxsICYmIG9iamVjdC4kJG1ldGEgPT09IGtsYXNzIHx8IG9iamVjdC4kJGNsYXNzID09PSBrbGFzcykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKG9iamVjdC4kJGlzX251bWJlciAmJiBrbGFzcy4kJGlzX251bWJlcl9jbGFzcykge1xuICAgICAgcmV0dXJuIChrbGFzcy4kJGlzX2ludGVnZXJfY2xhc3MpID8gKG9iamVjdCAlIDEpID09PSAwIDogdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgYW5jZXN0b3JzID0gJGFuY2VzdG9ycyhvYmplY3QuJCRpc19jbGFzcyA/IE9wYWwuZ2V0X3NpbmdsZXRvbl9jbGFzcyhvYmplY3QpIDogKG9iamVjdC4kJG1ldGEgfHwgb2JqZWN0LiQkY2xhc3MpKTtcblxuICAgIHJldHVybiBhbmNlc3RvcnMuaW5kZXhPZihrbGFzcykgIT09IC0xO1xuICB9O1xuXG4gIC8vIEhlbHBlcnMgZm9yIGV4dHJhY3Rpbmcga3dzcGxhdHNcbiAgLy8gVXNlZCBmb3I6IHsgKipoIH1cbiAgT3BhbC50b19oYXNoID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAodmFsdWUuJCRpc19oYXNoKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKHZhbHVlWyckcmVzcG9uZF90bz8nXSgndG9faGFzaCcsIHRydWUpKSB7XG4gICAgICB2YXIgaGFzaCA9IHZhbHVlLiR0b19oYXNoKCk7XG4gICAgICBpZiAoaGFzaC4kJGlzX2hhc2gpIHtcbiAgICAgICAgcmV0dXJuIGhhc2g7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgT3BhbC5UeXBlRXJyb3IuJG5ldyhcIkNhbid0IGNvbnZlcnQgXCIgKyB2YWx1ZS4kJGNsYXNzICtcbiAgICAgICAgICBcIiB0byBIYXNoIChcIiArIHZhbHVlLiQkY2xhc3MgKyBcIiN0b19oYXNoIGdpdmVzIFwiICsgaGFzaC4kJGNsYXNzICsgXCIpXCIpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRocm93IE9wYWwuVHlwZUVycm9yLiRuZXcoXCJubyBpbXBsaWNpdCBjb252ZXJzaW9uIG9mIFwiICsgdmFsdWUuJCRjbGFzcyArIFwiIGludG8gSGFzaFwiKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gSGVscGVycyBmb3IgaW1wbGVtZW50aW5nIG11bHRpcGxlIGFzc2lnbm1lbnRcbiAgLy8gT3VyIGNvZGUgZm9yIGV4dHJhY3RpbmcgdGhlIHZhbHVlcyBhbmQgYXNzaWduaW5nIHRoZW0gb25seSB3b3JrcyBpZiB0aGVcbiAgLy8gcmV0dXJuIHZhbHVlIGlzIGEgSlMgYXJyYXkuXG4gIC8vIFNvIGlmIHdlIGdldCBhbiBBcnJheSBzdWJjbGFzcywgZXh0cmFjdCB0aGUgd3JhcHBlZCBKUyBhcnJheSBmcm9tIGl0XG5cbiAgLy8gVXNlZCBmb3I6IGEsIGIgPSBzb21ldGhpbmcgKG5vIHNwbGF0KVxuICBPcGFsLnRvX2FyeSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlLiQkaXNfYXJyYXkpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAodmFsdWVbJyRyZXNwb25kX3RvPyddKCd0b19hcnknLCB0cnVlKSkge1xuICAgICAgdmFyIGFyeSA9IHZhbHVlLiR0b19hcnkoKTtcbiAgICAgIGlmIChhcnkgPT09IG5pbCkge1xuICAgICAgICByZXR1cm4gW3ZhbHVlXTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGFyeS4kJGlzX2FycmF5KSB7XG4gICAgICAgIHJldHVybiBhcnk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgT3BhbC5UeXBlRXJyb3IuJG5ldyhcIkNhbid0IGNvbnZlcnQgXCIgKyB2YWx1ZS4kJGNsYXNzICtcbiAgICAgICAgICBcIiB0byBBcnJheSAoXCIgKyB2YWx1ZS4kJGNsYXNzICsgXCIjdG9fYXJ5IGdpdmVzIFwiICsgYXJ5LiQkY2xhc3MgKyBcIilcIik7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIFt2YWx1ZV07XG4gICAgfVxuICB9O1xuXG4gIC8vIFVzZWQgZm9yOiBhLCBiID0gKnNvbWV0aGluZyAod2l0aCBzcGxhdClcbiAgT3BhbC50b19hID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAodmFsdWUuJCRpc19hcnJheSkge1xuICAgICAgLy8gQSBzcGxhdHRlZCBhcnJheSBtdXN0IGJlIGNvcGllZFxuICAgICAgcmV0dXJuIHZhbHVlLnNsaWNlKCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHZhbHVlWyckcmVzcG9uZF90bz8nXSgndG9fYScsIHRydWUpKSB7XG4gICAgICB2YXIgYXJ5ID0gdmFsdWUuJHRvX2EoKTtcbiAgICAgIGlmIChhcnkgPT09IG5pbCkge1xuICAgICAgICByZXR1cm4gW3ZhbHVlXTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGFyeS4kJGlzX2FycmF5KSB7XG4gICAgICAgIHJldHVybiBhcnk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgT3BhbC5UeXBlRXJyb3IuJG5ldyhcIkNhbid0IGNvbnZlcnQgXCIgKyB2YWx1ZS4kJGNsYXNzICtcbiAgICAgICAgICBcIiB0byBBcnJheSAoXCIgKyB2YWx1ZS4kJGNsYXNzICsgXCIjdG9fYSBnaXZlcyBcIiArIGFyeS4kJGNsYXNzICsgXCIpXCIpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJldHVybiBbdmFsdWVdO1xuICAgIH1cbiAgfTtcblxuICAvLyBVc2VkIGZvciBleHRyYWN0aW5nIGtleXdvcmQgYXJndW1lbnRzIGZyb20gYXJndW1lbnRzIHBhc3NlZCB0b1xuICAvLyBKUyBmdW5jdGlvbi4gSWYgcHJvdmlkZWQgK2FyZ3VtZW50cysgbGlzdCBkb2Vzbid0IGhhdmUgYSBIYXNoXG4gIC8vIGFzIGEgbGFzdCBpdGVtLCByZXR1cm5zIGEgYmxhbmsgSGFzaC5cbiAgLy9cbiAgLy8gQHBhcmFtIHBhcmFtZXRlcnMgW0FycmF5XVxuICAvLyBAcmV0dXJuIFtIYXNoXVxuICAvL1xuICBPcGFsLmV4dHJhY3Rfa3dhcmdzID0gZnVuY3Rpb24ocGFyYW1ldGVycykge1xuICAgIHZhciBrd2FyZ3MgPSBwYXJhbWV0ZXJzW3BhcmFtZXRlcnMubGVuZ3RoIC0gMV07XG4gICAgaWYgKGt3YXJncyAhPSBudWxsICYmIE9wYWwucmVzcG9uZF90byhrd2FyZ3MsICckdG9faGFzaCcsIHRydWUpKSB7XG4gICAgICAkc3BsaWNlLmNhbGwocGFyYW1ldGVycywgcGFyYW1ldGVycy5sZW5ndGggLSAxKTtcbiAgICAgIHJldHVybiBrd2FyZ3M7XG4gICAgfVxuICB9O1xuXG4gIC8vIFVzZWQgdG8gZ2V0IGEgbGlzdCBvZiByZXN0IGtleXdvcmQgYXJndW1lbnRzLiBNZXRob2QgdGFrZXMgdGhlIGdpdmVuXG4gIC8vIGtleXdvcmQgYXJncywgaS5lLiB0aGUgaGFzaCBsaXRlcmFsIHBhc3NlZCB0byB0aGUgbWV0aG9kIGNvbnRhaW5pbmcgYWxsXG4gIC8vIGtleXdvcmQgYXJndWVtbnRzIHBhc3NlZCB0byBtZXRob2QsIGFzIHdlbGwgYXMgdGhlIHVzZWQgYXJncyB3aGljaCBhcmVcbiAgLy8gdGhlIG5hbWVzIG9mIHJlcXVpcmVkIGFuZCBvcHRpb25hbCBhcmd1bWVudHMgZGVmaW5lZC4gVGhpcyBtZXRob2QgdGhlblxuICAvLyBqdXN0IHJldHVybnMgYWxsIGtleS92YWx1ZSBwYWlycyB3aGljaCBoYXZlIG5vdCBiZWVuIHVzZWQsIGluIGEgbmV3XG4gIC8vIGhhc2ggbGl0ZXJhbC5cbiAgLy9cbiAgLy8gQHBhcmFtIGdpdmVuX2FyZ3MgW0hhc2hdIGFsbCBrd2FyZ3MgZ2l2ZW4gdG8gbWV0aG9kXG4gIC8vIEBwYXJhbSB1c2VkX2FyZ3MgW09iamVjdDxTdHJpbmc6IHRydWU+XSBhbGwga2V5cyB1c2VkIGFzIG5hbWVkIGt3YXJnc1xuICAvLyBAcmV0dXJuIFtIYXNoXVxuICAvL1xuICBPcGFsLmt3cmVzdGFyZ3MgPSBmdW5jdGlvbihnaXZlbl9hcmdzLCB1c2VkX2FyZ3MpIHtcbiAgICB2YXIga2V5cyAgICAgID0gW10sXG4gICAgICAgIG1hcCAgICAgICA9IHt9LFxuICAgICAgICBrZXkgICAgICAgICAgICxcbiAgICAgICAgZ2l2ZW5fbWFwID0gZ2l2ZW5fYXJncy4kJHNtYXA7XG5cbiAgICBmb3IgKGtleSBpbiBnaXZlbl9tYXApIHtcbiAgICAgIGlmICghdXNlZF9hcmdzW2tleV0pIHtcbiAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgIG1hcFtrZXldID0gZ2l2ZW5fbWFwW2tleV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIE9wYWwuaGFzaDIoa2V5cywgbWFwKTtcbiAgfTtcblxuICBmdW5jdGlvbiBhcHBseV9ibG9ja29wdHMoYmxvY2ssIGJsb2Nrb3B0cykge1xuICAgIGlmICh0eXBlb2YoYmxvY2tvcHRzKSA9PT0gJ251bWJlcicpIHtcbiAgICAgIGJsb2NrLiQkYXJpdHkgPSBibG9ja29wdHM7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZihibG9ja29wdHMpID09PSAnb2JqZWN0Jykge1xuICAgICAgT2JqZWN0LmFzc2lnbihibG9jaywgYmxvY2tvcHRzKTtcbiAgICB9XG4gIH1cblxuICAvLyBDYWxscyBwYXNzZWQgbWV0aG9kIG9uIGEgcnVieSBvYmplY3Qgd2l0aCBhcmd1bWVudHMgYW5kIGJsb2NrOlxuICAvL1xuICAvLyBDYW4gdGFrZSBhIG1ldGhvZCBvciBhIG1ldGhvZCBuYW1lLlxuICAvL1xuICAvLyAxLiBXaGVuIG1ldGhvZCBuYW1lIGdldHMgcGFzc2VkIGl0IGludm9rZXMgaXQgYnkgaXRzIG5hbWVcbiAgLy8gICAgYW5kIGNhbGxzICdtZXRob2RfbWlzc2luZycgd2hlbiBvYmplY3QgZG9lc24ndCBoYXZlIHRoaXMgbWV0aG9kLlxuICAvLyAgICBVc2VkIGludGVybmFsbHkgYnkgT3BhbCB0byBpbnZva2UgbWV0aG9kIHRoYXQgdGFrZXMgYSBibG9jayBvciBhIHNwbGF0LlxuICAvLyAyLiBXaGVuIG1ldGhvZCAoaS5lLiBtZXRob2QgYm9keSkgZ2V0cyBwYXNzZWQsIGl0IGRvZXNuJ3QgdHJpZ2dlciAnbWV0aG9kX21pc3NpbmcnXG4gIC8vICAgIGJlY2F1c2UgaXQgZG9lc24ndCBrbm93IHRoZSBuYW1lIG9mIHRoZSBhY3R1YWwgbWV0aG9kLlxuICAvLyAgICBVc2VkIGludGVybmFsbHkgYnkgT3BhbCB0byBpbnZva2UgJ3N1cGVyJy5cbiAgLy9cbiAgLy8gQGV4YW1wbGVcbiAgLy8gICB2YXIgbXlfYXJyYXkgPSBbMSwgMiwgMywgNF1cbiAgLy8gICBPcGFsLnNlbmQobXlfYXJyYXksICdsZW5ndGgnKSAgICAgICAgICAgICAgICAgICAgIyA9PiA0XG4gIC8vICAgT3BhbC5zZW5kKG15X2FycmF5LCBteV9hcnJheS4kbGVuZ3RoKSAgICAgICAgICAgICMgPT4gNFxuICAvL1xuICAvLyAgIE9wYWwuc2VuZChteV9hcnJheSwgJ3JldmVyc2UhJykgICAgICAgICAgICAgICAgICAjID0+IFs0LCAzLCAyLCAxXVxuICAvLyAgIE9wYWwuc2VuZChteV9hcnJheSwgbXlfYXJyYXlbJyRyZXZlcnNlISddJykgICAgICAjID0+IFs0LCAzLCAyLCAxXVxuICAvL1xuICAvLyBAcGFyYW0gcmVjdiBbT2JqZWN0XSBydWJ5IG9iamVjdFxuICAvLyBAcGFyYW0gbWV0aG9kIFtGdW5jdGlvbiwgU3RyaW5nXSBtZXRob2QgYm9keSBvciBuYW1lIG9mIHRoZSBtZXRob2RcbiAgLy8gQHBhcmFtIGFyZ3MgW0FycmF5XSBhcmd1bWVudHMgdGhhdCB3aWxsIGJlIHBhc3NlZCB0byB0aGUgbWV0aG9kIGNhbGxcbiAgLy8gQHBhcmFtIGJsb2NrIFtGdW5jdGlvbl0gcnVieSBibG9ja1xuICAvLyBAcGFyYW0gYmxvY2tvcHRzIFtPYmplY3QsIE51bWJlcl0gb3B0aW9uYWwgcHJvcGVydGllcyB0byBzZXQgb24gdGhlIGJsb2NrXG4gIC8vIEByZXR1cm4gW09iamVjdF0gcmV0dXJuaW5nIHZhbHVlIG9mIHRoZSBtZXRob2QgY2FsbFxuICBPcGFsLnNlbmQgPSBmdW5jdGlvbihyZWN2LCBtZXRob2QsIGFyZ3MsIGJsb2NrLCBibG9ja29wdHMpIHtcbiAgICB2YXIgYm9keTtcblxuICAgIGlmICh0eXBlb2YobWV0aG9kKSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm9keSA9IG1ldGhvZDtcbiAgICAgIG1ldGhvZCA9IG51bGw7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YobWV0aG9kKSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGJvZHkgPSByZWN2WyckJyttZXRob2RdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBPcGFsLk5hbWVFcnJvci4kbmV3KFwiUGFzc2VkIG1ldGhvZCBzaG91bGQgYmUgYSBzdHJpbmcgb3IgYSBmdW5jdGlvblwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gT3BhbC5zZW5kMihyZWN2LCBib2R5LCBtZXRob2QsIGFyZ3MsIGJsb2NrLCBibG9ja29wdHMpO1xuICB9O1xuXG4gIE9wYWwuc2VuZDIgPSBmdW5jdGlvbihyZWN2LCBib2R5LCBtZXRob2QsIGFyZ3MsIGJsb2NrLCBibG9ja29wdHMpIHtcbiAgICBpZiAoYm9keSA9PSBudWxsICYmIG1ldGhvZCAhPSBudWxsICYmIHJlY3YuJG1ldGhvZF9taXNzaW5nKSB7XG4gICAgICBib2R5ID0gcmVjdi4kbWV0aG9kX21pc3Npbmc7XG4gICAgICBhcmdzID0gW21ldGhvZF0uY29uY2F0KGFyZ3MpO1xuICAgIH1cblxuICAgIGFwcGx5X2Jsb2Nrb3B0cyhibG9jaywgYmxvY2tvcHRzKTtcblxuICAgIGlmICh0eXBlb2YgYmxvY2sgPT09ICdmdW5jdGlvbicpIGJvZHkuJCRwID0gYmxvY2s7XG4gICAgcmV0dXJuIGJvZHkuYXBwbHkocmVjdiwgYXJncyk7XG4gIH07XG5cbiAgT3BhbC5yZWZpbmVkX3NlbmQgPSBmdW5jdGlvbihyZWZpbmVtZW50X2dyb3VwcywgcmVjdiwgbWV0aG9kLCBhcmdzLCBibG9jaywgYmxvY2tvcHRzKSB7XG4gICAgdmFyIGksIGosIGssIGFuY2VzdG9ycywgYW5jZXN0b3IsIHJlZmluZW1lbnRzLCByZWZpbmVtZW50LCByZWZpbmVfbW9kdWxlcywgcmVmaW5lX21vZHVsZSwgYm9keTtcblxuICAgIGFuY2VzdG9ycyA9IGdldF9hbmNlc3RvcnMocmVjdik7XG5cbiAgICAvLyBGb3IgYWxsIGFuY2VzdG9ycyB0aGF0IHRoZXJlIGFyZSwgc3RhcnRpbmcgZnJvbSB0aGUgY2xvc2VzdCB0byB0aGUgZnVydGhlc3QuLi5cbiAgICBmb3IgKGkgPSAwOyBpIDwgYW5jZXN0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhbmNlc3RvciA9IE9wYWwuaWQoYW5jZXN0b3JzW2ldKTtcblxuICAgICAgLy8gRm9yIGFsbCByZWZpbmVtZW50IGdyb3VwcyB0aGVyZSBhcmUsIHN0YXJ0aW5nIGZyb20gdGhlIGNsb3Nlc3Qgc2NvcGUgdG8gdGhlIGZ1cnRoZXN0Li4uXG4gICAgICBmb3IgKGogPSAwOyBqIDwgcmVmaW5lbWVudF9ncm91cHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgcmVmaW5lbWVudHMgPSByZWZpbmVtZW50X2dyb3Vwc1tqXTtcblxuICAgICAgICAvLyBGb3IgYWxsIHJlZmluZW1lbnRzIHRoZXJlIGFyZSwgc3RhcnRpbmcgZnJvbSB0aGUgbGFzdCBgdXNpbmdgIGNhbGwgdG8gdGhlIGZ1cnRoZXN0Li4uXG4gICAgICAgIGZvciAoayA9IHJlZmluZW1lbnRzLmxlbmd0aCAtIDE7IGsgPj0gMDsgay0tKSB7XG4gICAgICAgICAgcmVmaW5lbWVudCA9IHJlZmluZW1lbnRzW2tdO1xuICAgICAgICAgIGlmICh0eXBlb2YgcmVmaW5lbWVudC4kJHJlZmluZV9tb2R1bGVzID09PSAndW5kZWZpbmVkJykgY29udGludWU7XG5cbiAgICAgICAgICAvLyBBIHNpbmdsZSBtb2R1bGUgYmVpbmcgZ2l2ZW4gYXMgYW4gYXJndW1lbnQgb2YgdGhlIGB1c2luZ2AgY2FsbCBjb250YWlucyBtdWx0aXBsZVxuICAgICAgICAgIC8vIHJlZmluZW1lbnQgbW9kdWxlc1xuICAgICAgICAgIHJlZmluZV9tb2R1bGVzID0gcmVmaW5lbWVudC4kJHJlZmluZV9tb2R1bGVzO1xuXG4gICAgICAgICAgLy8gRG9lcyB0aGlzIG1vZHVsZSByZWZpbmUgYSBnaXZlbiBjYWxsIGZvciBhIGdpdmVuIGFuY2VzdG9yIG1vZHVsZT9cbiAgICAgICAgICBpZiAodHlwZW9mIHJlZmluZV9tb2R1bGVzW2FuY2VzdG9yXSA9PT0gJ3VuZGVmaW5lZCcpIGNvbnRpbnVlO1xuICAgICAgICAgIHJlZmluZV9tb2R1bGUgPSByZWZpbmVfbW9kdWxlc1thbmNlc3Rvcl07XG5cbiAgICAgICAgICAvLyBEb2VzIHRoaXMgbW9kdWxlIGRlZmluZSBhIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGw/XG4gICAgICAgICAgaWYgKHR5cGVvZiByZWZpbmVfbW9kdWxlLiQkcHJvdG90eXBlWyckJyttZXRob2RdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgYm9keSA9IHJlZmluZV9tb2R1bGUuJCRwcm90b3R5cGVbJyQnK21ldGhvZF07XG4gICAgICAgICAgICByZXR1cm4gT3BhbC5zZW5kMihyZWN2LCBib2R5LCBtZXRob2QsIGFyZ3MsIGJsb2NrLCBibG9ja29wdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBPcGFsLnNlbmQocmVjdiwgbWV0aG9kLCBhcmdzLCBibG9jaywgYmxvY2tvcHRzKTtcbiAgfTtcblxuICBPcGFsLmxhbWJkYSA9IGZ1bmN0aW9uKGJsb2NrLCBibG9ja29wdHMpIHtcbiAgICBibG9jay4kJGlzX2xhbWJkYSA9IHRydWU7XG5cbiAgICBhcHBseV9ibG9ja29wdHMoYmxvY2ssIGJsb2Nrb3B0cyk7XG5cbiAgICByZXR1cm4gYmxvY2s7XG4gIH07XG5cbiAgLy8gVXNlZCB0byBkZWZpbmUgbWV0aG9kcyBvbiBhbiBvYmplY3QuIFRoaXMgaXMgYSBoZWxwZXIgbWV0aG9kLCB1c2VkIGJ5IHRoZVxuICAvLyBjb21waWxlZCBzb3VyY2UgdG8gZGVmaW5lIG1ldGhvZHMgb24gc3BlY2lhbCBjYXNlIG9iamVjdHMgd2hlbiB0aGUgY29tcGlsZXJcbiAgLy8gY2FuIG5vdCBkZXRlcm1pbmUgdGhlIGRlc3RpbmF0aW9uIG9iamVjdCwgb3IgdGhlIG9iamVjdCBpcyBhIE1vZHVsZVxuICAvLyBpbnN0YW5jZS4gVGhpcyBjYW4gZ2V0IGNhbGxlZCBieSBgTW9kdWxlI2RlZmluZV9tZXRob2RgIGFzIHdlbGwuXG4gIC8vXG4gIC8vICMjIE1vZHVsZXNcbiAgLy9cbiAgLy8gQW55IG1ldGhvZCBkZWZpbmVkIG9uIGEgbW9kdWxlIHdpbGwgY29tZSB0aHJvdWdoIHRoaXMgcnVudGltZSBoZWxwZXIuXG4gIC8vIFRoZSBtZXRob2QgaXMgYWRkZWQgdG8gdGhlIG1vZHVsZSBib2R5LCBhbmQgdGhlIG93bmVyIG9mIHRoZSBtZXRob2QgaXNcbiAgLy8gc2V0IHRvIGJlIHRoZSBtb2R1bGUgaXRzZWxmLiBUaGlzIGlzIHVzZWQgbGF0ZXIgd2hlbiBjaG9vc2luZyB3aGljaFxuICAvLyBtZXRob2Qgc2hvdWxkIHNob3cgb24gYSBjbGFzcyBpZiBtb3JlIHRoYW4gMSBpbmNsdWRlZCBtb2R1bGVzIGRlZmluZVxuICAvLyB0aGUgc2FtZSBtZXRob2QuIEZpbmFsbHksIGlmIHRoZSBtb2R1bGUgaXMgaW4gYG1vZHVsZV9mdW5jdGlvbmAgbW9kZSxcbiAgLy8gdGhlbiB0aGUgbWV0aG9kIGlzIGFsc28gZGVmaW5lZCBvbnRvIHRoZSBtb2R1bGUgaXRzZWxmLlxuICAvL1xuICAvLyAjIyBDbGFzc2VzXG4gIC8vXG4gIC8vIFRoaXMgaGVscGVyIHdpbGwgb25seSBiZSBjYWxsZWQgZm9yIGNsYXNzZXMgd2hlbiBhIG1ldGhvZCBpcyBiZWluZ1xuICAvLyBkZWZpbmVkIGluZGlyZWN0bHk7IGVpdGhlciB0aHJvdWdoIGBNb2R1bGUjZGVmaW5lX21ldGhvZGAsIG9yIGJ5IGFcbiAgLy8gbGl0ZXJhbCBgZGVmYCBtZXRob2QgaW5zaWRlIGFuIGBpbnN0YW5jZV9ldmFsYCBvciBgY2xhc3NfZXZhbGAgYm9keS4gSW5cbiAgLy8gZWl0aGVyIGNhc2UsIHRoZSBtZXRob2QgaXMgc2ltcGx5IGFkZGVkIHRvIHRoZSBjbGFzcycgcHJvdG90eXBlLiBBIHNwZWNpYWxcbiAgLy8gZXhjZXB0aW9uIGV4aXN0cyBmb3IgYEJhc2ljT2JqZWN0YCBhbmQgYE9iamVjdGAuIFRoZXNlIHR3byBjbGFzc2VzIGFyZVxuICAvLyBzcGVjaWFsIGJlY2F1c2UgdGhleSBhcmUgdXNlZCBpbiB0b2xsLWZyZWUgYnJpZGdlZCBjbGFzc2VzLiBJbiBlYWNoIG9mXG4gIC8vIHRoZXNlIHR3byBjYXNlcywgZXh0cmEgd29yayBpcyByZXF1aXJlZCB0byBkZWZpbmUgdGhlIG1ldGhvZHMgb24gdG9sbC1mcmVlXG4gIC8vIGJyaWRnZWQgY2xhc3MnIHByb3RvdHlwZXMgYXMgd2VsbC5cbiAgLy9cbiAgLy8gIyMgT2JqZWN0c1xuICAvL1xuICAvLyBJZiBhIHNpbXBsZSBydWJ5IG9iamVjdCBpcyB0aGUgb2JqZWN0LCB0aGVuIHRoZSBtZXRob2QgaXMgc2ltcGx5IGp1c3RcbiAgLy8gZGVmaW5lZCBvbiB0aGUgb2JqZWN0IGFzIGEgc2luZ2xldG9uIG1ldGhvZC4gVGhpcyB3b3VsZCBiZSB0aGUgY2FzZSB3aGVuXG4gIC8vIGEgbWV0aG9kIGlzIGRlZmluZWQgaW5zaWRlIGFuIGBpbnN0YW5jZV9ldmFsYCBibG9jay5cbiAgLy9cbiAgLy8gQHBhcmFtIG9iaiAgW09iamVjdCwgQ2xhc3NdIHRoZSBhY3R1YWwgb2JqIHRvIGRlZmluZSBtZXRob2QgZm9yXG4gIC8vIEBwYXJhbSBqc2lkIFtTdHJpbmddIHRoZSBKYXZhU2NyaXB0IGZyaWVuZGx5IG1ldGhvZCBuYW1lIChlLmcuICckZm9vJylcbiAgLy8gQHBhcmFtIGJvZHkgW0pTLkZ1bmN0aW9uXSB0aGUgbGl0ZXJhbCBKYXZhU2NyaXB0IGZ1bmN0aW9uIHVzZWQgYXMgbWV0aG9kXG4gIC8vIEBwYXJhbSBibG9ja29wdHMgW09iamVjdCwgTnVtYmVyXSBvcHRpb25hbCBwcm9wZXJ0aWVzIHRvIHNldCBvbiB0aGUgYm9keVxuICAvLyBAcmV0dXJuIFtudWxsXVxuICAvL1xuICBPcGFsLmRlZiA9IGZ1bmN0aW9uKG9iaiwganNpZCwgYm9keSwgYmxvY2tvcHRzKSB7XG4gICAgYXBwbHlfYmxvY2tvcHRzKGJvZHksIGJsb2Nrb3B0cyk7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgZm9yIGEgbWV0aG9kIGRlZmluaXRpb24gaW4gdGhlXG4gICAgLy8gdG9wLWxldmVsIG5hbWVzcGFjZVxuICAgIGlmIChvYmogPT09IE9wYWwudG9wKSB7XG4gICAgICByZXR1cm4gT3BhbC5kZWZuKE9wYWwuT2JqZWN0LCBqc2lkLCBib2R5KTtcbiAgICB9XG4gICAgLy8gaWYgaW5zdGFuY2VfZXZhbCBpcyBpbnZva2VkIG9uIGEgbW9kdWxlL2NsYXNzLCBpdCBzZXRzIGluc3RfZXZhbF9tb2RcbiAgICBlbHNlIGlmICghb2JqLiQkZXZhbCAmJiBvYmouJCRpc19hX21vZHVsZSkge1xuICAgICAgcmV0dXJuIE9wYWwuZGVmbihvYmosIGpzaWQsIGJvZHkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJldHVybiBPcGFsLmRlZnMob2JqLCBqc2lkLCBib2R5KTtcbiAgICB9XG4gIH07XG5cbiAgLy8gRGVmaW5lIG1ldGhvZCBvbiBhIG1vZHVsZSBvciBjbGFzcyAoc2VlIE9wYWwuZGVmKS5cbiAgT3BhbC5kZWZuID0gZnVuY3Rpb24obW9kdWxlLCBqc2lkLCBib2R5KSB7XG4gICAgJGRlbnlfZnJvemVuX2FjY2Vzcyhtb2R1bGUpO1xuXG4gICAgYm9keS5kaXNwbGF5TmFtZSA9IGpzaWQ7XG4gICAgYm9keS4kJG93bmVyID0gbW9kdWxlO1xuXG4gICAgdmFyIG5hbWUgPSBqc2lkLnN1YnN0cigxKTtcblxuICAgIHZhciBwcm90byA9IG1vZHVsZS4kJHByb3RvdHlwZTtcbiAgICBpZiAocHJvdG8uaGFzT3duUHJvcGVydHkoJyQkZHVtbXknKSkge1xuICAgICAgcHJvdG8gPSBwcm90by4kJGRlZmluZV9tZXRob2RzX29uO1xuICAgIH1cbiAgICAkcHJvcChwcm90bywganNpZCwgYm9keSk7XG5cbiAgICBpZiAobW9kdWxlLiQkaXNfbW9kdWxlKSB7XG4gICAgICBpZiAobW9kdWxlLiQkbW9kdWxlX2Z1bmN0aW9uKSB7XG4gICAgICAgIE9wYWwuZGVmcyhtb2R1bGUsIGpzaWQsIGJvZHkpXG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBpY2xhc3NlcyA9IG1vZHVsZS4kJGljbGFzc2VzLCBsZW5ndGggPSBpY2xhc3Nlcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgaWNsYXNzID0gaWNsYXNzZXNbaV07XG4gICAgICAgICRwcm9wKGljbGFzcywganNpZCwgYm9keSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHNpbmdsZXRvbl9vZiA9IG1vZHVsZS4kJHNpbmdsZXRvbl9vZjtcbiAgICBpZiAobW9kdWxlLiRtZXRob2RfYWRkZWQgJiYgIW1vZHVsZS4kbWV0aG9kX2FkZGVkLiQkc3R1YiAmJiAhc2luZ2xldG9uX29mKSB7XG4gICAgICBtb2R1bGUuJG1ldGhvZF9hZGRlZChuYW1lKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc2luZ2xldG9uX29mICYmIHNpbmdsZXRvbl9vZi4kc2luZ2xldG9uX21ldGhvZF9hZGRlZCAmJiAhc2luZ2xldG9uX29mLiRzaW5nbGV0b25fbWV0aG9kX2FkZGVkLiQkc3R1Yikge1xuICAgICAgc2luZ2xldG9uX29mLiRzaW5nbGV0b25fbWV0aG9kX2FkZGVkKG5hbWUpO1xuICAgIH1cblxuICAgIHJldHVybiBuYW1lO1xuICB9O1xuXG4gIC8vIERlZmluZSBhIHNpbmdsZXRvbiBtZXRob2Qgb24gdGhlIGdpdmVuIG9iamVjdCAoc2VlIE9wYWwuZGVmKS5cbiAgT3BhbC5kZWZzID0gZnVuY3Rpb24ob2JqLCBqc2lkLCBib2R5LCBibG9ja29wdHMpIHtcbiAgICBhcHBseV9ibG9ja29wdHMoYm9keSwgYmxvY2tvcHRzKTtcblxuICAgIGlmIChvYmouJCRpc19zdHJpbmcgfHwgb2JqLiQkaXNfbnVtYmVyKSB7XG4gICAgICB0aHJvdyBPcGFsLlR5cGVFcnJvci4kbmV3KFwiY2FuJ3QgZGVmaW5lIHNpbmdsZXRvblwiKTtcbiAgICB9XG4gICAgcmV0dXJuIE9wYWwuZGVmbihPcGFsLmdldF9zaW5nbGV0b25fY2xhc3Mob2JqKSwganNpZCwgYm9keSk7XG4gIH07XG5cbiAgLy8gQ2FsbGVkIGZyb20gI3JlbW92ZV9tZXRob2QuXG4gIE9wYWwucmRlZiA9IGZ1bmN0aW9uKG9iaiwganNpZCkge1xuICAgIGlmICghJGhhc19vd24uY2FsbChvYmouJCRwcm90b3R5cGUsIGpzaWQpKSB7XG4gICAgICB0aHJvdyBPcGFsLk5hbWVFcnJvci4kbmV3KFwibWV0aG9kICdcIiArIGpzaWQuc3Vic3RyKDEpICsgXCInIG5vdCBkZWZpbmVkIGluIFwiICsgb2JqLiRuYW1lKCkpO1xuICAgIH1cblxuICAgIGRlbGV0ZSBvYmouJCRwcm90b3R5cGVbanNpZF07XG5cbiAgICBpZiAob2JqLiQkaXNfc2luZ2xldG9uKSB7XG4gICAgICBpZiAob2JqLiQkcHJvdG90eXBlLiRzaW5nbGV0b25fbWV0aG9kX3JlbW92ZWQgJiYgIW9iai4kJHByb3RvdHlwZS4kc2luZ2xldG9uX21ldGhvZF9yZW1vdmVkLiQkc3R1Yikge1xuICAgICAgICBvYmouJCRwcm90b3R5cGUuJHNpbmdsZXRvbl9tZXRob2RfcmVtb3ZlZChqc2lkLnN1YnN0cigxKSk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaWYgKG9iai4kbWV0aG9kX3JlbW92ZWQgJiYgIW9iai4kbWV0aG9kX3JlbW92ZWQuJCRzdHViKSB7XG4gICAgICAgIG9iai4kbWV0aG9kX3JlbW92ZWQoanNpZC5zdWJzdHIoMSkpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvLyBDYWxsZWQgZnJvbSAjdW5kZWZfbWV0aG9kLlxuICBPcGFsLnVkZWYgPSBmdW5jdGlvbihvYmosIGpzaWQpIHtcbiAgICBpZiAoIW9iai4kJHByb3RvdHlwZVtqc2lkXSB8fCBvYmouJCRwcm90b3R5cGVbanNpZF0uJCRzdHViKSB7XG4gICAgICB0aHJvdyBPcGFsLk5hbWVFcnJvci4kbmV3KFwibWV0aG9kICdcIiArIGpzaWQuc3Vic3RyKDEpICsgXCInIG5vdCBkZWZpbmVkIGluIFwiICsgb2JqLiRuYW1lKCkpO1xuICAgIH1cblxuICAgIE9wYWwuYWRkX3N0dWJfZm9yKG9iai4kJHByb3RvdHlwZSwganNpZCk7XG5cbiAgICBpZiAob2JqLiQkaXNfc2luZ2xldG9uKSB7XG4gICAgICBpZiAob2JqLiQkcHJvdG90eXBlLiRzaW5nbGV0b25fbWV0aG9kX3VuZGVmaW5lZCAmJiAhb2JqLiQkcHJvdG90eXBlLiRzaW5nbGV0b25fbWV0aG9kX3VuZGVmaW5lZC4kJHN0dWIpIHtcbiAgICAgICAgb2JqLiQkcHJvdG90eXBlLiRzaW5nbGV0b25fbWV0aG9kX3VuZGVmaW5lZChqc2lkLnN1YnN0cigxKSk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaWYgKG9iai4kbWV0aG9kX3VuZGVmaW5lZCAmJiAhb2JqLiRtZXRob2RfdW5kZWZpbmVkLiQkc3R1Yikge1xuICAgICAgICBvYmouJG1ldGhvZF91bmRlZmluZWQoanNpZC5zdWJzdHIoMSkpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBpc19tZXRob2RfYm9keShib2R5KSB7XG4gICAgcmV0dXJuICh0eXBlb2YoYm9keSkgPT09IFwiZnVuY3Rpb25cIiAmJiAhYm9keS4kJHN0dWIpO1xuICB9XG5cbiAgT3BhbC5hbGlhcyA9IGZ1bmN0aW9uKG9iaiwgbmFtZSwgb2xkKSB7XG4gICAgdmFyIGlkICAgICA9ICckJyArIG5hbWUsXG4gICAgICAgIG9sZF9pZCA9ICckJyArIG9sZCxcbiAgICAgICAgYm9keSxcbiAgICAgICAgYWxpYXM7XG5cbiAgICAvLyBBbGlhc2luZyBvbiBtYWluIG1lYW5zIGFsaWFzaW5nIG9uIE9iamVjdC4uLlxuICAgIGlmICh0eXBlb2Ygb2JqLiQkcHJvdG90eXBlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgb2JqID0gT3BhbC5PYmplY3Q7XG4gICAgfVxuXG4gICAgYm9keSA9IG9iai4kJHByb3RvdHlwZVsnJCcgKyBvbGRdO1xuXG4gICAgLy8gV2hlbiBydW5uaW5nIGluc2lkZSAjaW5zdGFuY2VfZXZhbCB0aGUgYWxpYXMgcmVmZXJzIHRvIGNsYXNzIG1ldGhvZHMuXG4gICAgaWYgKG9iai4kJGV2YWwpIHtcbiAgICAgIHJldHVybiBPcGFsLmFsaWFzKE9wYWwuZ2V0X3NpbmdsZXRvbl9jbGFzcyhvYmopLCBuYW1lLCBvbGQpO1xuICAgIH1cblxuICAgIGlmICghaXNfbWV0aG9kX2JvZHkoYm9keSkpIHtcbiAgICAgIHZhciBhbmNlc3RvciA9IG9iai4kJHN1cGVyO1xuXG4gICAgICB3aGlsZSAodHlwZW9mKGJvZHkpICE9PSBcImZ1bmN0aW9uXCIgJiYgYW5jZXN0b3IpIHtcbiAgICAgICAgYm9keSAgICAgPSBhbmNlc3RvcltvbGRfaWRdO1xuICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLiQkc3VwZXI7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNfbWV0aG9kX2JvZHkoYm9keSkgJiYgb2JqLiQkaXNfbW9kdWxlKSB7XG4gICAgICAgIC8vIHRyeSB0byBsb29rIGludG8gT2JqZWN0XG4gICAgICAgIGJvZHkgPSBPcGFsLk9iamVjdC4kJHByb3RvdHlwZVtvbGRfaWRdXG4gICAgICB9XG5cbiAgICAgIGlmICghaXNfbWV0aG9kX2JvZHkoYm9keSkpIHtcbiAgICAgICAgdGhyb3cgT3BhbC5OYW1lRXJyb3IuJG5ldyhcInVuZGVmaW5lZCBtZXRob2QgYFwiICsgb2xkICsgXCInIGZvciBjbGFzcyBgXCIgKyBvYmouJG5hbWUoKSArIFwiJ1wiKVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIElmIHRoZSBib2R5IGlzIGl0c2VsZiBhbiBhbGlhcyB1c2UgdGhlIG9yaWdpbmFsIGJvZHlcbiAgICAvLyB0byBrZWVwIHRoZSBtYXggZGVwdGggYXQgMS5cbiAgICBpZiAoYm9keS4kJGFsaWFzX29mKSBib2R5ID0gYm9keS4kJGFsaWFzX29mO1xuXG4gICAgLy8gV2UgbmVlZCBhIHdyYXBwZXIgYmVjYXVzZSBvdGhlcndpc2UgcHJvcGVydGllc1xuICAgIC8vIHdvdWxkIGJlIG92ZXJ3cml0dGVuIG9uIHRoZSBvcmlnaW5hbCBib2R5LlxuICAgIGFsaWFzID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYmxvY2sgPSBhbGlhcy4kJHAsIGFyZ3MsIGksIGlpO1xuXG4gICAgICBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgICAgZm9yKGkgPSAwLCBpaSA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgICB9XG5cbiAgICAgIGFsaWFzLiQkcCA9IG51bGw7XG5cbiAgICAgIHJldHVybiBPcGFsLnNlbmQodGhpcywgYm9keSwgYXJncywgYmxvY2spO1xuICAgIH07XG5cbiAgICAvLyBBc3NpZ24gdGhlICdsZW5ndGgnIHZhbHVlIHdpdGggZGVmaW5lUHJvcGVydHkgYmVjYXVzZVxuICAgIC8vIGluIHN0cmljdCBtb2RlIHRoZSBwcm9wZXJ0eSBpcyBub3Qgd3JpdGFibGUuXG4gICAgLy8gSXQgZG9lc24ndCB3b3JrIGluIG9sZGVyIGJyb3dzZXJzIChsaWtlIENocm9tZSAzOCksIHdoZXJlXG4gICAgLy8gYW4gZXhjZXB0aW9uIGlzIHRocm93biBicmVha2luZyBPcGFsIGFsdG9nZXRoZXIuXG4gICAgdHJ5IHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhbGlhcywgJ2xlbmd0aCcsIHsgdmFsdWU6IGJvZHkubGVuZ3RoIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICAvLyBUcnkgdG8gbWFrZSB0aGUgYnJvd3NlciBwaWNrIHRoZSByaWdodCBuYW1lXG4gICAgYWxpYXMuZGlzcGxheU5hbWUgICAgICAgPSBuYW1lO1xuXG4gICAgYWxpYXMuJCRhcml0eSAgICAgICAgICAgPSBib2R5LiQkYXJpdHk7XG4gICAgYWxpYXMuJCRwYXJhbWV0ZXJzICAgICAgPSBib2R5LiQkcGFyYW1ldGVycztcbiAgICBhbGlhcy4kJHNvdXJjZV9sb2NhdGlvbiA9IGJvZHkuJCRzb3VyY2VfbG9jYXRpb247XG4gICAgYWxpYXMuJCRhbGlhc19vZiAgICAgICAgPSBib2R5O1xuICAgIGFsaWFzLiQkYWxpYXNfbmFtZSAgICAgID0gbmFtZTtcblxuICAgIE9wYWwuZGVmbihvYmosIGlkLCBhbGlhcyk7XG5cbiAgICByZXR1cm4gb2JqO1xuICB9O1xuXG4gIE9wYWwuYWxpYXNfZ3ZhciA9IGZ1bmN0aW9uKG5ld19uYW1lLCBvbGRfbmFtZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSgkZ3ZhcnMsIG5ld19uYW1lLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICRndmFyc1tvbGRfbmFtZV07XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbihuZXdfdmFsdWUpIHtcbiAgICAgICAgJGd2YXJzW29sZF9uYW1lXSA9IG5ld192YWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbmlsO1xuICB9XG5cbiAgT3BhbC5hbGlhc19uYXRpdmUgPSBmdW5jdGlvbihvYmosIG5hbWUsIG5hdGl2ZV9uYW1lKSB7XG4gICAgdmFyIGlkICAgPSAnJCcgKyBuYW1lLFxuICAgICAgICBib2R5ID0gb2JqLiQkcHJvdG90eXBlW25hdGl2ZV9uYW1lXTtcblxuICAgIGlmICh0eXBlb2YoYm9keSkgIT09IFwiZnVuY3Rpb25cIiB8fCBib2R5LiQkc3R1Yikge1xuICAgICAgdGhyb3cgT3BhbC5OYW1lRXJyb3IuJG5ldyhcInVuZGVmaW5lZCBuYXRpdmUgbWV0aG9kIGBcIiArIG5hdGl2ZV9uYW1lICsgXCInIGZvciBjbGFzcyBgXCIgKyBvYmouJG5hbWUoKSArIFwiJ1wiKVxuICAgIH1cblxuICAgIE9wYWwuZGVmbihvYmosIGlkLCBib2R5KTtcblxuICAgIHJldHVybiBvYmo7XG4gIH07XG5cblxuICAvLyBIYXNoZXNcbiAgLy8gLS0tLS0tXG5cbiAgT3BhbC5oYXNoX2luaXQgPSBmdW5jdGlvbihoYXNoKSB7XG4gICAgaGFzaC4kJHNtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGhhc2guJCRtYXAgID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBoYXNoLiQka2V5cyA9IFtdO1xuICB9O1xuXG4gIE9wYWwuaGFzaF9jbG9uZSA9IGZ1bmN0aW9uKGZyb21faGFzaCwgdG9faGFzaCkge1xuICAgIHRvX2hhc2guJCRub25lID0gZnJvbV9oYXNoLiQkbm9uZTtcbiAgICB0b19oYXNoLiQkcHJvYyA9IGZyb21faGFzaC4kJHByb2M7XG5cbiAgICBmb3IgKHZhciBpID0gMCwga2V5cyA9IGZyb21faGFzaC4kJGtleXMsIHNtYXAgPSBmcm9tX2hhc2guJCRzbWFwLCBsZW4gPSBrZXlzLmxlbmd0aCwga2V5LCB2YWx1ZTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoa2V5LiQkaXNfc3RyaW5nKSB7XG4gICAgICAgIHZhbHVlID0gc21hcFtrZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSBrZXkudmFsdWU7XG4gICAgICAgIGtleSA9IGtleS5rZXk7XG4gICAgICB9XG5cbiAgICAgIE9wYWwuaGFzaF9wdXQodG9faGFzaCwga2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9O1xuXG4gIE9wYWwuaGFzaF9wdXQgPSBmdW5jdGlvbihoYXNoLCBrZXksIHZhbHVlKSB7XG4gICAgaWYgKGtleS4kJGlzX3N0cmluZykge1xuICAgICAgaWYgKCEkaGFzX293bi5jYWxsKGhhc2guJCRzbWFwLCBrZXkpKSB7XG4gICAgICAgIGhhc2guJCRrZXlzLnB1c2goa2V5KTtcbiAgICAgIH1cbiAgICAgIGhhc2guJCRzbWFwW2tleV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIga2V5X2hhc2gsIGJ1Y2tldCwgbGFzdF9idWNrZXQ7XG4gICAga2V5X2hhc2ggPSBoYXNoLiQkYnlfaWRlbnRpdHkgPyBPcGFsLmlkKGtleSkgOiBrZXkuJGhhc2goKTtcblxuICAgIGlmICghJGhhc19vd24uY2FsbChoYXNoLiQkbWFwLCBrZXlfaGFzaCkpIHtcbiAgICAgIGJ1Y2tldCA9IHtrZXk6IGtleSwga2V5X2hhc2g6IGtleV9oYXNoLCB2YWx1ZTogdmFsdWV9O1xuICAgICAgaGFzaC4kJGtleXMucHVzaChidWNrZXQpO1xuICAgICAgaGFzaC4kJG1hcFtrZXlfaGFzaF0gPSBidWNrZXQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYnVja2V0ID0gaGFzaC4kJG1hcFtrZXlfaGFzaF07XG5cbiAgICB3aGlsZSAoYnVja2V0KSB7XG4gICAgICBpZiAoa2V5ID09PSBidWNrZXQua2V5IHx8IGtleVsnJGVxbD8nXShidWNrZXQua2V5KSkge1xuICAgICAgICBsYXN0X2J1Y2tldCA9IHVuZGVmaW5lZDtcbiAgICAgICAgYnVja2V0LnZhbHVlID0gdmFsdWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgbGFzdF9idWNrZXQgPSBidWNrZXQ7XG4gICAgICBidWNrZXQgPSBidWNrZXQubmV4dDtcbiAgICB9XG5cbiAgICBpZiAobGFzdF9idWNrZXQpIHtcbiAgICAgIGJ1Y2tldCA9IHtrZXk6IGtleSwga2V5X2hhc2g6IGtleV9oYXNoLCB2YWx1ZTogdmFsdWV9O1xuICAgICAgaGFzaC4kJGtleXMucHVzaChidWNrZXQpO1xuICAgICAgbGFzdF9idWNrZXQubmV4dCA9IGJ1Y2tldDtcbiAgICB9XG4gIH07XG5cbiAgT3BhbC5oYXNoX2dldCA9IGZ1bmN0aW9uKGhhc2gsIGtleSkge1xuICAgIGlmIChrZXkuJCRpc19zdHJpbmcpIHtcbiAgICAgIGlmICgkaGFzX293bi5jYWxsKGhhc2guJCRzbWFwLCBrZXkpKSB7XG4gICAgICAgIHJldHVybiBoYXNoLiQkc21hcFtrZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBrZXlfaGFzaCwgYnVja2V0O1xuICAgIGtleV9oYXNoID0gaGFzaC4kJGJ5X2lkZW50aXR5ID8gT3BhbC5pZChrZXkpIDoga2V5LiRoYXNoKCk7XG5cbiAgICBpZiAoJGhhc19vd24uY2FsbChoYXNoLiQkbWFwLCBrZXlfaGFzaCkpIHtcbiAgICAgIGJ1Y2tldCA9IGhhc2guJCRtYXBba2V5X2hhc2hdO1xuXG4gICAgICB3aGlsZSAoYnVja2V0KSB7XG4gICAgICAgIGlmIChrZXkgPT09IGJ1Y2tldC5rZXkgfHwga2V5WyckZXFsPyddKGJ1Y2tldC5rZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGJ1Y2tldC52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBidWNrZXQgPSBidWNrZXQubmV4dDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgT3BhbC5oYXNoX2RlbGV0ZSA9IGZ1bmN0aW9uKGhhc2gsIGtleSkge1xuICAgIHZhciBpLCBrZXlzID0gaGFzaC4kJGtleXMsIGxlbmd0aCA9IGtleXMubGVuZ3RoLCB2YWx1ZSwga2V5X3RtcDtcblxuICAgIGlmIChrZXkuJCRpc19zdHJpbmcpIHtcbiAgICAgIGlmICh0eXBlb2Yga2V5ICE9PSBcInN0cmluZ1wiKSBrZXkgPSBrZXkudmFsdWVPZigpO1xuXG4gICAgICBpZiAoISRoYXNfb3duLmNhbGwoaGFzaC4kJHNtYXAsIGtleSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAga2V5X3RtcCA9IGtleXNbaV07XG5cbiAgICAgICAgaWYgKGtleV90bXAuJCRpc19zdHJpbmcgJiYgdHlwZW9mIGtleV90bXAgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICBrZXlfdG1wID0ga2V5X3RtcC52YWx1ZU9mKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoa2V5X3RtcCA9PT0ga2V5KSB7XG4gICAgICAgICAga2V5cy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFsdWUgPSBoYXNoLiQkc21hcFtrZXldO1xuICAgICAgZGVsZXRlIGhhc2guJCRzbWFwW2tleV07XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgdmFyIGtleV9oYXNoID0ga2V5LiRoYXNoKCk7XG5cbiAgICBpZiAoISRoYXNfb3duLmNhbGwoaGFzaC4kJG1hcCwga2V5X2hhc2gpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGJ1Y2tldCA9IGhhc2guJCRtYXBba2V5X2hhc2hdLCBsYXN0X2J1Y2tldDtcblxuICAgIHdoaWxlIChidWNrZXQpIHtcbiAgICAgIGlmIChrZXkgPT09IGJ1Y2tldC5rZXkgfHwga2V5WyckZXFsPyddKGJ1Y2tldC5rZXkpKSB7XG4gICAgICAgIHZhbHVlID0gYnVja2V0LnZhbHVlO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChrZXlzW2ldID09PSBidWNrZXQpIHtcbiAgICAgICAgICAgIGtleXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxhc3RfYnVja2V0ICYmIGJ1Y2tldC5uZXh0KSB7XG4gICAgICAgICAgbGFzdF9idWNrZXQubmV4dCA9IGJ1Y2tldC5uZXh0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGxhc3RfYnVja2V0KSB7XG4gICAgICAgICAgZGVsZXRlIGxhc3RfYnVja2V0Lm5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYnVja2V0Lm5leHQpIHtcbiAgICAgICAgICBoYXNoLiQkbWFwW2tleV9oYXNoXSA9IGJ1Y2tldC5uZXh0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSBoYXNoLiQkbWFwW2tleV9oYXNoXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGxhc3RfYnVja2V0ID0gYnVja2V0O1xuICAgICAgYnVja2V0ID0gYnVja2V0Lm5leHQ7XG4gICAgfVxuICB9O1xuXG4gIE9wYWwuaGFzaF9yZWhhc2ggPSBmdW5jdGlvbihoYXNoKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGhhc2guJCRrZXlzLmxlbmd0aCwga2V5X2hhc2gsIGJ1Y2tldCwgbGFzdF9idWNrZXQ7IGkgPCBsZW5ndGg7IGkrKykge1xuXG4gICAgICBpZiAoaGFzaC4kJGtleXNbaV0uJCRpc19zdHJpbmcpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGtleV9oYXNoID0gaGFzaC4kJGtleXNbaV0ua2V5LiRoYXNoKCk7XG5cbiAgICAgIGlmIChrZXlfaGFzaCA9PT0gaGFzaC4kJGtleXNbaV0ua2V5X2hhc2gpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGJ1Y2tldCA9IGhhc2guJCRtYXBbaGFzaC4kJGtleXNbaV0ua2V5X2hhc2hdO1xuICAgICAgbGFzdF9idWNrZXQgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHdoaWxlIChidWNrZXQpIHtcbiAgICAgICAgaWYgKGJ1Y2tldCA9PT0gaGFzaC4kJGtleXNbaV0pIHtcbiAgICAgICAgICBpZiAobGFzdF9idWNrZXQgJiYgYnVja2V0Lm5leHQpIHtcbiAgICAgICAgICAgIGxhc3RfYnVja2V0Lm5leHQgPSBidWNrZXQubmV4dDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAobGFzdF9idWNrZXQpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBsYXN0X2J1Y2tldC5uZXh0O1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChidWNrZXQubmV4dCkge1xuICAgICAgICAgICAgaGFzaC4kJG1hcFtoYXNoLiQka2V5c1tpXS5rZXlfaGFzaF0gPSBidWNrZXQubmV4dDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkZWxldGUgaGFzaC4kJG1hcFtoYXNoLiQka2V5c1tpXS5rZXlfaGFzaF07XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RfYnVja2V0ID0gYnVja2V0O1xuICAgICAgICBidWNrZXQgPSBidWNrZXQubmV4dDtcbiAgICAgIH1cblxuICAgICAgaGFzaC4kJGtleXNbaV0ua2V5X2hhc2ggPSBrZXlfaGFzaDtcblxuICAgICAgaWYgKCEkaGFzX293bi5jYWxsKGhhc2guJCRtYXAsIGtleV9oYXNoKSkge1xuICAgICAgICBoYXNoLiQkbWFwW2tleV9oYXNoXSA9IGhhc2guJCRrZXlzW2ldO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgYnVja2V0ID0gaGFzaC4kJG1hcFtrZXlfaGFzaF07XG4gICAgICBsYXN0X2J1Y2tldCA9IHVuZGVmaW5lZDtcblxuICAgICAgd2hpbGUgKGJ1Y2tldCkge1xuICAgICAgICBpZiAoYnVja2V0ID09PSBoYXNoLiQka2V5c1tpXSkge1xuICAgICAgICAgIGxhc3RfYnVja2V0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RfYnVja2V0ID0gYnVja2V0O1xuICAgICAgICBidWNrZXQgPSBidWNrZXQubmV4dDtcbiAgICAgIH1cblxuICAgICAgaWYgKGxhc3RfYnVja2V0KSB7XG4gICAgICAgIGxhc3RfYnVja2V0Lm5leHQgPSBoYXNoLiQka2V5c1tpXTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgT3BhbC5oYXNoID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3VtZW50c19sZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzLCBoYXNoLCBpLCBsZW5ndGgsIGtleSwgdmFsdWU7XG5cbiAgICBpZiAoYXJndW1lbnRzX2xlbmd0aCA9PT0gMSAmJiBhcmd1bWVudHNbMF0uJCRpc19oYXNoKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzWzBdO1xuICAgIH1cblxuICAgIGhhc2ggPSBuZXcgT3BhbC5IYXNoKCk7XG4gICAgT3BhbC5oYXNoX2luaXQoaGFzaCk7XG5cbiAgICBpZiAoYXJndW1lbnRzX2xlbmd0aCA9PT0gMSkge1xuICAgICAgYXJncyA9IGFyZ3VtZW50c1swXTtcblxuICAgICAgaWYgKGFyZ3VtZW50c1swXS4kJGlzX2FycmF5KSB7XG4gICAgICAgIGxlbmd0aCA9IGFyZ3MubGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChhcmdzW2ldLmxlbmd0aCAhPT0gMikge1xuICAgICAgICAgICAgdGhyb3cgT3BhbC5Bcmd1bWVudEVycm9yLiRuZXcoXCJ2YWx1ZSBub3Qgb2YgbGVuZ3RoIDI6IFwiICsgYXJnc1tpXS4kaW5zcGVjdCgpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBrZXkgPSBhcmdzW2ldWzBdO1xuICAgICAgICAgIHZhbHVlID0gYXJnc1tpXVsxXTtcblxuICAgICAgICAgIE9wYWwuaGFzaF9wdXQoaGFzaCwga2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaGFzaDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBhcmdzID0gYXJndW1lbnRzWzBdO1xuICAgICAgICBmb3IgKGtleSBpbiBhcmdzKSB7XG4gICAgICAgICAgaWYgKCRoYXNfb3duLmNhbGwoYXJncywga2V5KSkge1xuICAgICAgICAgICAgdmFsdWUgPSBhcmdzW2tleV07XG5cbiAgICAgICAgICAgIE9wYWwuaGFzaF9wdXQoaGFzaCwga2V5LCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGhhc2g7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGFyZ3VtZW50c19sZW5ndGggJSAyICE9PSAwKSB7XG4gICAgICB0aHJvdyBPcGFsLkFyZ3VtZW50RXJyb3IuJG5ldyhcIm9kZCBudW1iZXIgb2YgYXJndW1lbnRzIGZvciBIYXNoXCIpO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBhcmd1bWVudHNfbGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgIGtleSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIHZhbHVlID0gYXJndW1lbnRzW2kgKyAxXTtcblxuICAgICAgT3BhbC5oYXNoX3B1dChoYXNoLCBrZXksIHZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGFzaDtcbiAgfTtcblxuICAvLyBBIGZhc3RlciBIYXNoIGNyZWF0b3IgZm9yIGhhc2hlcyB0aGF0IGp1c3QgdXNlIHN5bWJvbHMgYW5kXG4gIC8vIHN0cmluZ3MgYXMga2V5cy4gVGhlIG1hcCBhbmQga2V5cyBhcnJheSBjYW4gYmUgY29uc3RydWN0ZWQgYXRcbiAgLy8gY29tcGlsZSB0aW1lLCBzbyB0aGV5IGFyZSBqdXN0IGFkZGVkIGhlcmUgYnkgdGhlIGNvbnN0cnVjdG9yXG4gIC8vIGZ1bmN0aW9uLlxuICAvL1xuICBPcGFsLmhhc2gyID0gZnVuY3Rpb24oa2V5cywgc21hcCkge1xuICAgIHZhciBoYXNoID0gbmV3IE9wYWwuSGFzaCgpO1xuXG4gICAgaGFzaC4kJHNtYXAgPSBzbWFwO1xuICAgIGhhc2guJCRtYXAgID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBoYXNoLiQka2V5cyA9IGtleXM7XG5cbiAgICByZXR1cm4gaGFzaDtcbiAgfTtcblxuICAvLyBDcmVhdGUgYSBuZXcgcmFuZ2UgaW5zdGFuY2Ugd2l0aCBmaXJzdCBhbmQgbGFzdCB2YWx1ZXMsIGFuZCB3aGV0aGVyIHRoZVxuICAvLyByYW5nZSBleGNsdWRlcyB0aGUgbGFzdCB2YWx1ZS5cbiAgLy9cbiAgT3BhbC5yYW5nZSA9IGZ1bmN0aW9uKGZpcnN0LCBsYXN0LCBleGMpIHtcbiAgICB2YXIgcmFuZ2UgICAgICAgICA9IG5ldyBPcGFsLlJhbmdlKCk7XG4gICAgICAgIHJhbmdlLmJlZ2luICAgPSBmaXJzdDtcbiAgICAgICAgcmFuZ2UuZW5kICAgICA9IGxhc3Q7XG4gICAgICAgIHJhbmdlLmV4Y2wgICAgPSBleGM7XG5cbiAgICByZXR1cm4gcmFuZ2U7XG4gIH07XG5cbiAgdmFyIHJlc2VydmVkX2l2YXJfbmFtZXMgPSBbXG4gICAgLy8gcHJvcGVydGllc1xuICAgIFwiY29uc3RydWN0b3JcIiwgXCJkaXNwbGF5TmFtZVwiLCBcIl9fY291bnRfX1wiLCBcIl9fbm9TdWNoTWV0aG9kX19cIixcbiAgICBcIl9fcGFyZW50X19cIiwgXCJfX3Byb3RvX19cIixcbiAgICAvLyBtZXRob2RzXG4gICAgXCJoYXNPd25Qcm9wZXJ0eVwiLCBcInZhbHVlT2ZcIlxuICBdO1xuXG4gIC8vIEdldCB0aGUgaXZhciBuYW1lIGZvciBhIGdpdmVuIG5hbWUuXG4gIC8vIE1vc3RseSBhZGRzIGEgdHJhaWxpbmcgJCB0byByZXNlcnZlZCBuYW1lcy5cbiAgLy9cbiAgT3BhbC5pdmFyID0gZnVuY3Rpb24obmFtZSkge1xuICAgIGlmIChyZXNlcnZlZF9pdmFyX25hbWVzLmluZGV4T2YobmFtZSkgIT09IC0xKSB7XG4gICAgICBuYW1lICs9IFwiJFwiO1xuICAgIH1cblxuICAgIHJldHVybiBuYW1lO1xuICB9O1xuXG4gIC8vIFN1cHBvcnQgZm9yICNmcmVlemVcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIGhlbHBlciB0aGF0IGNhbiBiZSB1c2VkIGZyb20gbWV0aG9kc1xuICBmdW5jdGlvbiAkZGVueV9mcm96ZW5fYWNjZXNzKG9iaikge1xuICAgIGlmIChvYmouJCRmcm96ZW4pIHtcbiAgICAgIHRocm93IE9wYWwuRnJvemVuRXJyb3IuJG5ldyhcImNhbid0IG1vZGlmeSBmcm96ZW4gXCIgKyAob2JqLiRjbGFzcygpKSArIFwiOiBcIiArIChvYmopLCBPcGFsLmhhc2gyKFtcInJlY2VpdmVyXCJdLCB7XCJyZWNlaXZlclwiOiBvYmp9KSk7XG4gICAgfVxuICB9O1xuICBPcGFsLmRlbnlfZnJvemVuX2FjY2VzcyA9ICRkZW55X2Zyb3plbl9hY2Nlc3M7XG5cbiAgLy8gY29tbW9uICNmcmVlemUgcnVudGltZSBzdXBwb3J0XG4gIE9wYWwuZnJlZXplID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgJHByb3Aob2JqLCBcIiQkZnJvemVuXCIsIHRydWUpO1xuXG4gICAgLy8gc2V0ICQkaWRcbiAgICBpZiAoIW9iai5oYXNPd25Qcm9wZXJ0eSgnJCRpZCcpKSB7ICRwcm9wKG9iaiwgJyQkaWQnLCAkdWlkKCkpOyB9XG5cbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KCckJG1ldGEnKSkge1xuICAgICAgLy8gZnJlZXplICQkbWV0YSBpZiBpdCBoYXMgYWxyZWFkeSBiZWVuIHNldFxuICAgICAgb2JqLiQkbWV0YS4kZnJlZXplKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVuc3VyZSAkJG1ldGEgY2FuIGJlIHNldCBsYXppbHksICQkbWV0YSBpcyBmcm96ZW4gd2hlbiBzZXQgaW4gcnVudGltZS5qc1xuICAgICAgJHByb3Aob2JqLCAnJCRtZXRhJywgbnVsbCk7XG4gICAgfVxuXG4gICAgLy8gJCRjb21wYXJhYmxlIGlzIHVzZWQgaW50ZXJuYWxseSBhbmQgc2V0IG11bHRpcGxlIHRpbWVzXG4gICAgLy8gZGVmaW5pbmcgaXQgYmVmb3JlIHNlYWxpbmcgZW5zdXJlcyBpdCBjYW4gYmUgbW9kaWZpZWQgbGF0ZXIgb25cbiAgICBpZiAoIW9iai5oYXNPd25Qcm9wZXJ0eSgnJCRjb21wYXJhYmxlJykpIHsgJHByb3Aob2JqLCAnJCRjb21wYXJhYmxlJywgbnVsbCk7IH1cblxuICAgIC8vIHNlYWwgdGhlIE9iamVjdFxuICAgIE9iamVjdC5zZWFsKG9iaik7XG5cbiAgICByZXR1cm4gb2JqO1xuICB9O1xuXG4gIC8vIGZyZXplIHByb3BzLCBtYWtlIHNldHRlcnMgb2YgaW5zdGFuY2UgdmFyaWFibGVzIHRocm93IEZyb3plbkVycm9yXG4gIE9wYWwuZnJlZXplX3Byb3BzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIHByb3AsIHByb3BfdHlwZSwgZGVzYztcblxuICAgIGZvcihwcm9wIGluIG9iaikge1xuICAgICAgcHJvcF90eXBlID0gdHlwZW9mKHByb3ApO1xuXG4gICAgICAvLyBwcm9wX3R5cGUgXCJvYmplY3RcIiBoZXJlIGlzIGEgU3RyaW5nKCksIHNraXAgJCBwcm9wc1xuICAgICAgaWYgKChwcm9wX3R5cGUgPT09IFwic3RyaW5nXCIgfHwgcHJvcF90eXBlID09PSBcIm9iamVjdFwiKSAmJiBwcm9wWzBdID09PSAnJCcpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwgcHJvcCk7XG4gICAgICBpZiAoZGVzYyAmJiBkZXNjLmVudW1lcmFibGUgJiYgZGVzYy53cml0YWJsZSkge1xuICAgICAgICAvLyBjcmVhdGUgY2xvc3VyZSB0byByZXRhaW4gY3VycmVudCB2YWx1ZSBhcyBjdlxuICAgICAgICAvLyBmb3IgT3BhbCAyLjAgbGV0IGZvciBjdiBzaG91bGQgZG8gdGhlIHRyaWNrLCBpbnN0ZWFkIG9mIGEgZnVuY3Rpb25cbiAgICAgICAgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIC8vIHNldCB2IHRvIHVuZGVmaW5lZCwgYXMgaWYgdGhlIHByb3BlcnR5IGlzIG5vdCBzZXRcbiAgICAgICAgICB2YXIgY3YgPSBvYmpbcHJvcF07XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgcHJvcCwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIGN2OyB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbihfdmFsKSB7ICRkZW55X2Zyb3plbl9hY2Nlc3Mob2JqKTsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSkoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLy8gUmVnZXhwc1xuICAvLyAtLS0tLS0tXG5cbiAgLy8gRXNjYXBlIFJlZ2V4cCBzcGVjaWFsIGNoYXJzIGxldHRpbmcgdGhlIHJlc3VsdGluZyBzdHJpbmcgYmUgdXNlZCB0byBidWlsZFxuICAvLyBhIG5ldyBSZWdleHAuXG4gIC8vXG4gIE9wYWwuZXNjYXBlX3JlZ2V4cCA9IGZ1bmN0aW9uKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvKFstW1xcXVxcL3t9KCkqKz8uXiRcXFxcfCBdKS9nLCAnXFxcXCQxJylcbiAgICAgICAgICAgICAgLnJlcGxhY2UoL1tcXG5dL2csICdcXFxcbicpXG4gICAgICAgICAgICAgIC5yZXBsYWNlKC9bXFxyXS9nLCAnXFxcXHInKVxuICAgICAgICAgICAgICAucmVwbGFjZSgvW1xcZl0vZywgJ1xcXFxmJylcbiAgICAgICAgICAgICAgLnJlcGxhY2UoL1tcXHRdL2csICdcXFxcdCcpO1xuICB9O1xuXG4gIC8vIENyZWF0ZSBhIGdsb2JhbCBSZWdleHAgZnJvbSBhIFJlZ0V4cCBvYmplY3QgYW5kIGNhY2hlIHRoZSByZXN1bHRcbiAgLy8gb24gdGhlIG9iamVjdCBpdHNlbGYgKCQkZyBhdHRyaWJ1dGUpLlxuICAvL1xuICBPcGFsLmdsb2JhbF9yZWdleHAgPSBmdW5jdGlvbihwYXR0ZXJuKSB7XG4gICAgaWYgKHBhdHRlcm4uZ2xvYmFsKSB7XG4gICAgICByZXR1cm4gcGF0dGVybjsgLy8gUmVnRXhwIGFscmVhZHkgaGFzIHRoZSBnbG9iYWwgZmxhZ1xuICAgIH1cbiAgICBpZiAocGF0dGVybi4kJGcgPT0gbnVsbCkge1xuICAgICAgcGF0dGVybi4kJGcgPSBuZXcgUmVnRXhwKHBhdHRlcm4uc291cmNlLCAocGF0dGVybi5tdWx0aWxpbmUgPyAnZ20nIDogJ2cnKSArIChwYXR0ZXJuLmlnbm9yZUNhc2UgPyAnaScgOiAnJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXR0ZXJuLiQkZy5sYXN0SW5kZXggPSBudWxsOyAvLyByZXNldCBsYXN0SW5kZXggcHJvcGVydHlcbiAgICB9XG4gICAgcmV0dXJuIHBhdHRlcm4uJCRnO1xuICB9O1xuXG4gIC8vIENyZWF0ZSBhIGdsb2JhbCBtdWx0aWxpbmUgUmVnZXhwIGZyb20gYSBSZWdFeHAgb2JqZWN0IGFuZCBjYWNoZSB0aGUgcmVzdWx0XG4gIC8vIG9uIHRoZSBvYmplY3QgaXRzZWxmICgkJGdtIG9yICQkZyBhdHRyaWJ1dGUpLlxuICAvL1xuICBPcGFsLmdsb2JhbF9tdWx0aWxpbmVfcmVnZXhwID0gZnVuY3Rpb24ocGF0dGVybikge1xuICAgIHZhciByZXN1bHQsIGZsYWdzO1xuXG4gICAgLy8gUmVnRXhwIGFscmVhZHkgaGFzIHRoZSBnbG9iYWwgYW5kIG11bHRpbGluZSBmbGFnXG4gICAgaWYgKHBhdHRlcm4uZ2xvYmFsICYmIHBhdHRlcm4ubXVsdGlsaW5lKSByZXR1cm4gcGF0dGVybjtcblxuICAgIGZsYWdzID0gJ2dtJyArIChwYXR0ZXJuLmlnbm9yZUNhc2UgPyAnaScgOiAnJyk7XG4gICAgaWYgKHBhdHRlcm4ubXVsdGlsaW5lKSB7XG4gICAgICAvLyB3ZSBhcmUgdXNpbmcgdGhlICQkZyBhdHRyaWJ1dGUgYmVjYXVzZSB0aGUgUmVnZXhwIGlzIGFscmVhZHkgbXVsdGlsaW5lXG4gICAgICBpZiAocGF0dGVybi4kJGcgPT0gbnVsbCkge1xuICAgICAgICBwYXR0ZXJuLiQkZyA9IG5ldyBSZWdFeHAocGF0dGVybi5zb3VyY2UsIGZsYWdzKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IHBhdHRlcm4uJCRnO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocGF0dGVybi4kJGdtID09IG51bGwpIHtcbiAgICAgICAgcGF0dGVybi4kJGdtID0gbmV3IFJlZ0V4cChwYXR0ZXJuLnNvdXJjZSwgZmxhZ3MpO1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gcGF0dGVybi4kJGdtO1xuICAgIH1cbiAgICByZXN1bHQubGFzdEluZGV4ID0gbnVsbDsgLy8gcmVzZXQgbGFzdEluZGV4IHByb3BlcnR5XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBDb21iaW5lIG11bHRpcGxlIHJlZ2V4cCBwYXJ0cyB0b2dldGhlclxuICBPcGFsLnJlZ2V4cCA9IGZ1bmN0aW9uKHBhcnRzLCBmbGFncykge1xuICAgIHZhciBwYXJ0O1xuICAgIHZhciBpZ25vcmVDYXNlID0gdHlwZW9mIGZsYWdzICE9PSAndW5kZWZpbmVkJyAmJiBmbGFncyAmJiBmbGFncy5pbmRleE9mKCdpJykgPj0gMDtcblxuICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHBhcnRzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIHBhcnQgPSBwYXJ0c1tpXTtcbiAgICAgIGlmIChwYXJ0IGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAgIGlmIChwYXJ0Lmlnbm9yZUNhc2UgIT09IGlnbm9yZUNhc2UpXG4gICAgICAgICAgT3BhbC5LZXJuZWwuJHdhcm4oXG4gICAgICAgICAgICBcImlnbm9yZSBjYXNlIGRvZXNuJ3QgbWF0Y2ggZm9yIFwiICsgcGFydC5zb3VyY2UuJGluc3BlY3QoKSxcbiAgICAgICAgICAgIE9wYWwuaGFzaCh7dXBsZXZlbDogMX0pXG4gICAgICAgICAgKVxuXG4gICAgICAgIHBhcnQgPSBwYXJ0LnNvdXJjZTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJ0ID09PSAnJykgcGFydCA9ICcoPzonICsgcGFydCArICcpJztcbiAgICAgIHBhcnRzW2ldID0gcGFydDtcbiAgICB9XG5cbiAgICBpZiAoZmxhZ3MpIHtcbiAgICAgIHJldHVybiBuZXcgUmVnRXhwKHBhcnRzLmpvaW4oJycpLCBmbGFncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgUmVnRXhwKHBhcnRzLmpvaW4oJycpKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVxdWlyZSBzeXN0ZW1cbiAgLy8gLS0tLS0tLS0tLS0tLS1cblxuICBPcGFsLm1vZHVsZXMgICAgICAgICA9IHt9O1xuICBPcGFsLmxvYWRlZF9mZWF0dXJlcyA9IFsnY29yZWxpYi9ydW50aW1lJ107XG4gIE9wYWwuY3VycmVudF9kaXIgICAgID0gJy4nO1xuICBPcGFsLnJlcXVpcmVfdGFibGUgICA9IHsnY29yZWxpYi9ydW50aW1lJzogdHJ1ZX07XG5cbiAgT3BhbC5ub3JtYWxpemUgPSBmdW5jdGlvbihwYXRoKSB7XG4gICAgdmFyIHBhcnRzLCBwYXJ0LCBuZXdfcGFydHMgPSBbXSwgU0VQQVJBVE9SID0gJy8nO1xuXG4gICAgaWYgKE9wYWwuY3VycmVudF9kaXIgIT09ICcuJykge1xuICAgICAgcGF0aCA9IE9wYWwuY3VycmVudF9kaXIucmVwbGFjZSgvXFwvKiQvLCAnLycpICsgcGF0aDtcbiAgICB9XG5cbiAgICBwYXRoID0gcGF0aC5yZXBsYWNlKC9eXFwuXFwvLywgJycpO1xuICAgIHBhdGggPSBwYXRoLnJlcGxhY2UoL1xcLihyYnxvcGFsfGpzKSQvLCAnJyk7XG4gICAgcGFydHMgPSBwYXRoLnNwbGl0KFNFUEFSQVRPUik7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBwYXJ0cy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICBwYXJ0ID0gcGFydHNbaV07XG4gICAgICBpZiAocGFydCA9PT0gJycpIGNvbnRpbnVlO1xuICAgICAgKHBhcnQgPT09ICcuLicpID8gbmV3X3BhcnRzLnBvcCgpIDogbmV3X3BhcnRzLnB1c2gocGFydClcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3X3BhcnRzLmpvaW4oU0VQQVJBVE9SKTtcbiAgfTtcblxuICBPcGFsLmxvYWRlZCA9IGZ1bmN0aW9uKHBhdGhzKSB7XG4gICAgdmFyIGksIGwsIHBhdGg7XG5cbiAgICBmb3IgKGkgPSAwLCBsID0gcGF0aHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBwYXRoID0gT3BhbC5ub3JtYWxpemUocGF0aHNbaV0pO1xuXG4gICAgICBpZiAoT3BhbC5yZXF1aXJlX3RhYmxlW3BhdGhdKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBPcGFsLmxvYWRlZF9mZWF0dXJlcy5wdXNoKHBhdGgpO1xuICAgICAgT3BhbC5yZXF1aXJlX3RhYmxlW3BhdGhdID0gdHJ1ZTtcbiAgICB9XG4gIH07XG5cbiAgT3BhbC5sb2FkX25vcm1hbGl6ZWQgPSBmdW5jdGlvbihwYXRoKSB7XG4gICAgT3BhbC5sb2FkZWQoW3BhdGhdKTtcblxuICAgIHZhciBtb2R1bGUgPSBPcGFsLm1vZHVsZXNbcGF0aF07XG5cbiAgICBpZiAobW9kdWxlKSB7XG4gICAgICB2YXIgcmV0dmFsID0gbW9kdWxlKE9wYWwpO1xuICAgICAgaWYgKHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJyAmJiByZXR2YWwgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgIC8vIEEgc3BlY2lhbCBjYXNlIG9mIHJlcXVpcmUgaGF2aW5nIGFuIGFzeW5jIHRvcDpcbiAgICAgICAgLy8gV2Ugd2lsbCBuZWVkIHRvIGF3YWl0IGl0LlxuICAgICAgICByZXR1cm4gcmV0dmFsLnRoZW4oJHJldHVybl92YWwodHJ1ZSkpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHZhciBzZXZlcml0eSA9IE9wYWwuY29uZmlnLm1pc3NpbmdfcmVxdWlyZV9zZXZlcml0eTtcbiAgICAgIHZhciBtZXNzYWdlICA9ICdjYW5ub3QgbG9hZCBzdWNoIGZpbGUgLS0gJyArIHBhdGg7XG5cbiAgICAgIGlmIChzZXZlcml0eSA9PT0gXCJlcnJvclwiKSB7XG4gICAgICAgIGlmIChPcGFsLkxvYWRFcnJvcikge1xuICAgICAgICAgIHRocm93IE9wYWwuTG9hZEVycm9yLiRuZXcobWVzc2FnZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBtZXNzYWdlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHNldmVyaXR5ID09PSBcIndhcm5pbmdcIikge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1dBUk5JTkc6IExvYWRFcnJvcjogJyArIG1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIE9wYWwubG9hZCA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICBwYXRoID0gT3BhbC5ub3JtYWxpemUocGF0aCk7XG5cbiAgICByZXR1cm4gT3BhbC5sb2FkX25vcm1hbGl6ZWQocGF0aCk7XG4gIH07XG5cbiAgT3BhbC5yZXF1aXJlID0gZnVuY3Rpb24ocGF0aCkge1xuICAgIHBhdGggPSBPcGFsLm5vcm1hbGl6ZShwYXRoKTtcblxuICAgIGlmIChPcGFsLnJlcXVpcmVfdGFibGVbcGF0aF0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gT3BhbC5sb2FkX25vcm1hbGl6ZWQocGF0aCk7XG4gIH07XG5cblxuICAvLyBTdHJpbmdzXG4gIC8vIC0tLS0tLS1cblxuICBPcGFsLmVuY29kaW5ncyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgLy8gU2V0cyB0aGUgZW5jb2Rpbmcgb24gYSBzdHJpbmcsIHdpbGwgdHJlYXQgc3RyaW5nIGxpdGVyYWxzIGFzIGZyb3plbiBzdHJpbmdzXG4gIC8vIHJhaXNpbmcgYSBGcm96ZW5FcnJvci5cbiAgLy9cbiAgLy8gQHBhcmFtIHN0ciBbU3RyaW5nXSB0aGUgc3RyaW5nIG9uIHdoaWNoIHRoZSBlbmNvZGluZyBzaG91bGQgYmUgc2V0XG4gIC8vIEBwYXJhbSBuYW1lIFtTdHJpbmddIHRoZSBjYW5vbmljYWwgbmFtZSBvZiB0aGUgZW5jb2RpbmdcbiAgLy8gQHBhcmFtIHR5cGUgW1N0cmluZ10gcG9zc2libGUgdmFsdWVzIGFyZSBlaXRoZXIgYFwiZW5jb2RpbmdcImAsIGBcImludGVybmFsX2VuY29kaW5nXCJgLCBvciBgdW5kZWZpbmVkXG4gIE9wYWwuc2V0X2VuY29kaW5nID0gZnVuY3Rpb24oc3RyLCBuYW1lLCB0eXBlKSB7XG4gICAgaWYgKHR5cGVvZiB0eXBlID09PSBcInVuZGVmaW5lZFwiKSB0eXBlID0gXCJlbmNvZGluZ1wiO1xuICAgIGlmICh0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyB8fCBzdHIuJCRmcm96ZW4gPT09IHRydWUpXG4gICAgICB0aHJvdyBPcGFsLkZyb3plbkVycm9yLiRuZXcoXCJjYW4ndCBtb2RpZnkgZnJvemVuIFN0cmluZ1wiKTtcblxuICAgIHZhciBlbmNvZGluZyA9IE9wYWwuZmluZF9lbmNvZGluZyhuYW1lKTtcblxuICAgIGlmIChlbmNvZGluZyA9PT0gc3RyW3R5cGVdKSB7IHJldHVybiBzdHI7IH1cblxuICAgIHN0clt0eXBlXSA9IGVuY29kaW5nO1xuXG4gICAgcmV0dXJuIHN0cjtcbiAgfTtcblxuICAvLyBGZXRjaGVzIHRoZSBlbmNvZGluZyBmb3IgdGhlIGdpdmVuIG5hbWUgb3IgcmFpc2VzIEFyZ3VtZW50RXJyb3IuXG4gIE9wYWwuZmluZF9lbmNvZGluZyA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgcmVnaXN0ZXIgPSBPcGFsLmVuY29kaW5ncztcbiAgICB2YXIgZW5jb2RpbmcgPSByZWdpc3RlcltuYW1lXSB8fCByZWdpc3RlcltuYW1lLnRvVXBwZXJDYXNlKCldO1xuICAgIGlmICghZW5jb2RpbmcpIHRocm93IE9wYWwuQXJndW1lbnRFcnJvci4kbmV3KFwidW5rbm93biBlbmNvZGluZyBuYW1lIC0gXCIgKyBuYW1lKTtcbiAgICByZXR1cm4gZW5jb2Rpbmc7XG4gIH1cblxuICAvLyBAcmV0dXJucyBhIFN0cmluZyBvYmplY3Qgd2l0aCB0aGUgZW5jb2Rpbmcgc2V0IGZyb20gYSBzdHJpbmcgbGl0ZXJhbFxuICBPcGFsLmVuYyA9IGZ1bmN0aW9uKHN0ciwgbmFtZSkge1xuICAgIHZhciBkdXAgPSBuZXcgU3RyaW5nKHN0cik7XG4gICAgZHVwID0gT3BhbC5zZXRfZW5jb2RpbmcoZHVwLCBuYW1lKTtcbiAgICBkdXAuaW50ZXJuYWxfZW5jb2RpbmcgPSBkdXAuZW5jb2Rpbmc7XG4gICAgcmV0dXJuIGR1cFxuICB9XG5cbiAgLy8gQHJldHVybnMgYSBTdHJpbmcgb2JqZWN0IHdpdGggdGhlIGludGVybmFsIGVuY29kaW5nIHNldCB0byBCaW5hcnlcbiAgT3BhbC5iaW5hcnkgPSBmdW5jdGlvbihzdHIpIHtcbiAgICB2YXIgZHVwID0gbmV3IFN0cmluZyhzdHIpO1xuICAgIHJldHVybiBPcGFsLnNldF9lbmNvZGluZyhkdXAsIFwiYmluYXJ5XCIsIFwiaW50ZXJuYWxfZW5jb2RpbmdcIik7XG4gIH1cblxuICBPcGFsLmxhc3RfcHJvbWlzZSA9IG51bGw7XG4gIE9wYWwucHJvbWlzZV91bmhhbmRsZWRfZXhjZXB0aW9uID0gZmFsc2U7XG5cbiAgLy8gUnVuIGEgYmxvY2sgb2YgY29kZSwgYnV0IGlmIGl0IHJldHVybnMgYSBQcm9taXNlLCBkb24ndCBydW4gdGhlIG5leHRcbiAgLy8gb25lLCBidXQgcXVldWUgaXQuXG4gIE9wYWwucXVldWUgPSBmdW5jdGlvbihwcm9jKSB7XG4gICAgaWYgKE9wYWwubGFzdF9wcm9taXNlKSB7XG4gICAgICAvLyBUaGUgYXN5bmMgcGF0aCBpcyB0YWtlbiBvbmx5IGlmIGFueXRoaW5nIGJlZm9yZSByZXR1cm5lZCBhXG4gICAgICAvLyBQcm9taXNlKFYyKS5cbiAgICAgIE9wYWwubGFzdF9wcm9taXNlID0gT3BhbC5sYXN0X3Byb21pc2UudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCFPcGFsLnByb21pc2VfdW5oYW5kbGVkX2V4Y2VwdGlvbikgcmV0dXJuIHByb2MoT3BhbCk7XG4gICAgICB9KVsnY2F0Y2gnXShmdW5jdGlvbihlcnJvcikge1xuICAgICAgICBpZiAoT3BhbC5yZXNwb25kX3RvKGVycm9yLCAnJGZ1bGxfbWVzc2FnZScpKSB7XG4gICAgICAgICAgZXJyb3IgPSBlcnJvci4kZnVsbF9tZXNzYWdlKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgIC8vIEFib3J0IGZ1cnRoZXIgZXhlY3V0aW9uXG4gICAgICAgIE9wYWwucHJvbWlzZV91bmhhbmRsZWRfZXhjZXB0aW9uID0gdHJ1ZTtcbiAgICAgICAgT3BhbC5leGl0KDEpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gT3BhbC5sYXN0X3Byb21pc2U7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdmFyIHJldCA9IHByb2MoT3BhbCk7XG4gICAgICBpZiAodHlwZW9mIFByb21pc2UgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHJldCA9PT0gJ29iamVjdCcgJiYgcmV0IGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICBPcGFsLmxhc3RfcHJvbWlzZSA9IHJldDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICB9XG5cbiAgLy8gT3BlcmF0b3IgaGVscGVyc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tXG5cbiAgZnVuY3Rpb24gYXJlX2JvdGhfbnVtYmVycyhsLHIpIHsgcmV0dXJuIHR5cGVvZihsKSA9PT0gJ251bWJlcicgJiYgdHlwZW9mKHIpID09PSAnbnVtYmVyJyB9XG5cbiAgT3BhbC5yYl9wbHVzICAgPSBmdW5jdGlvbihsLHIpIHsgcmV0dXJuIGFyZV9ib3RoX251bWJlcnMobCxyKSA/IGwgKyByIDogbFsnJCsnXShyKTsgfVxuICBPcGFsLnJiX21pbnVzICA9IGZ1bmN0aW9uKGwscikgeyByZXR1cm4gYXJlX2JvdGhfbnVtYmVycyhsLHIpID8gbCAtIHIgOiBsWyckLSddKHIpOyB9XG4gIE9wYWwucmJfdGltZXMgID0gZnVuY3Rpb24obCxyKSB7IHJldHVybiBhcmVfYm90aF9udW1iZXJzKGwscikgPyBsICogciA6IGxbJyQqJ10ocik7IH1cbiAgT3BhbC5yYl9kaXZpZGUgPSBmdW5jdGlvbihsLHIpIHsgcmV0dXJuIGFyZV9ib3RoX251bWJlcnMobCxyKSA/IGwgLyByIDogbFsnJC8nXShyKTsgfVxuICBPcGFsLnJiX2x0ICAgICA9IGZ1bmN0aW9uKGwscikgeyByZXR1cm4gYXJlX2JvdGhfbnVtYmVycyhsLHIpID8gbCA8IHIgOiBsWyckPCddKHIpOyB9XG4gIE9wYWwucmJfZ3QgICAgID0gZnVuY3Rpb24obCxyKSB7IHJldHVybiBhcmVfYm90aF9udW1iZXJzKGwscikgPyBsID4gciA6IGxbJyQ+J10ocik7IH1cbiAgT3BhbC5yYl9sZSAgICAgPSBmdW5jdGlvbihsLHIpIHsgcmV0dXJuIGFyZV9ib3RoX251bWJlcnMobCxyKSA/IGwgPD0gciA6IGxbJyQ8PSddKHIpOyB9XG4gIE9wYWwucmJfZ2UgICAgID0gZnVuY3Rpb24obCxyKSB7IHJldHVybiBhcmVfYm90aF9udW1iZXJzKGwscikgPyBsID49IHIgOiBsWyckPj0nXShyKTsgfVxuXG4gIC8vIE9wdGltaXplZCBoZWxwZXJzIGZvciBjYWxscyBsaWtlICR0cnV0aHkoKGEpWyckPT09J10oYikpIC0+ICRlcWVxZXEoYSwgYilcbiAgZnVuY3Rpb24gYXJlX2JvdGhfbnVtYmVyc19vcl9zdHJpbmdzKGxocywgcmhzKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgbGhzID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgcmhzID09PSAnbnVtYmVyJykgfHxcbiAgICAgICAgICAgKHR5cGVvZiBsaHMgPT09ICdzdHJpbmcnICYmIHR5cGVvZiByaHMgPT09ICdzdHJpbmcnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uICRlcWVxKGxocywgcmhzKSB7XG4gICAgcmV0dXJuIGFyZV9ib3RoX251bWJlcnNfb3Jfc3RyaW5ncyhsaHMscmhzKSA/IGxocyA9PT0gcmhzIDogJHRydXRoeSgobGhzKVsnJD09J10ocmhzKSk7XG4gIH07XG4gIE9wYWwuZXFlcSA9ICRlcWVxO1xuICBPcGFsLmVxZXFlcSA9IGZ1bmN0aW9uKGxocywgcmhzKSB7XG4gICAgcmV0dXJuIGFyZV9ib3RoX251bWJlcnNfb3Jfc3RyaW5ncyhsaHMscmhzKSA/IGxocyA9PT0gcmhzIDogJHRydXRoeSgobGhzKVsnJD09PSddKHJocykpO1xuICB9O1xuICBPcGFsLm5lcWVxID0gZnVuY3Rpb24obGhzLCByaHMpIHtcbiAgICByZXR1cm4gYXJlX2JvdGhfbnVtYmVyc19vcl9zdHJpbmdzKGxocyxyaHMpID8gbGhzICE9PSByaHMgOiAkdHJ1dGh5KChsaHMpWyckIT0nXShyaHMpKTtcbiAgfTtcbiAgT3BhbC5ub3QgPSBmdW5jdGlvbihhcmcpIHtcbiAgICBpZiAodW5kZWZpbmVkID09PSBhcmcgfHwgbnVsbCA9PT0gYXJnIHx8IGZhbHNlID09PSBhcmcgfHwgbmlsID09PSBhcmcpIHJldHVybiB0cnVlO1xuICAgIGlmICh0cnVlID09PSBhcmcgfHwgYXJnWyckISddLiQkcHJpc3RpbmUpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gJHRydXRoeShhcmdbJyQhJ10oKSk7XG4gIH1cblxuICAvLyBTaG9ydGN1dHMgLSBvcHRpbWl6ZWQgZnVuY3Rpb24gZ2VuZXJhdG9ycyBmb3Igc2ltcGxlIGtpbmRzIG9mIGZ1bmN0aW9uc1xuICBmdW5jdGlvbiAkcmV0dXJuX3ZhbChhcmcpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYXJnO1xuICAgIH1cbiAgfVxuICBPcGFsLnJldHVybl92YWwgPSAkcmV0dXJuX3ZhbDtcblxuICBPcGFsLnJldHVybl9zZWxmID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgT3BhbC5yZXR1cm5faXZhciA9IGZ1bmN0aW9uKGl2YXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpc1tpdmFyXSA9PSBudWxsKSB7IHJldHVybiBuaWw7IH1cbiAgICAgIHJldHVybiB0aGlzW2l2YXJdO1xuICAgIH1cbiAgfVxuICBPcGFsLmFzc2lnbl9pdmFyID0gZnVuY3Rpb24oaXZhcikge1xuICAgIHJldHVybiBmdW5jdGlvbih2YWwpIHtcbiAgICAgICRkZW55X2Zyb3plbl9hY2Nlc3ModGhpcyk7XG4gICAgICByZXR1cm4gdGhpc1tpdmFyXSA9IHZhbDtcbiAgICB9XG4gIH1cbiAgT3BhbC5hc3NpZ25faXZhcl92YWwgPSBmdW5jdGlvbihpdmFyLCBzdGF0aWNfdmFsKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgJGRlbnlfZnJvemVuX2FjY2Vzcyh0aGlzKTtcbiAgICAgIHJldHVybiB0aGlzW2l2YXJdID0gc3RhdGljX3ZhbDtcbiAgICB9XG4gIH1cblxuICAvLyBQcmltaXRpdmVzIGZvciBoYW5kbGluZyBwYXJhbWV0ZXJzXG4gIE9wYWwuZW5zdXJlX2t3YXJncyA9IGZ1bmN0aW9uKGt3YXJncykge1xuICAgIGlmIChrd2FyZ3MgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIE9wYWwuaGFzaDIoW10sIHt9KTtcbiAgICB9IGVsc2UgaWYgKGt3YXJncy4kJGlzX2hhc2gpIHtcbiAgICAgIHJldHVybiBrd2FyZ3M7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IE9wYWwuQXJndW1lbnRFcnJvci4kbmV3KCdleHBlY3RlZCBrd2FyZ3MnKTtcbiAgICB9XG4gIH1cblxuICBPcGFsLmdldF9rd2FyZyA9IGZ1bmN0aW9uKGt3YXJncywga2V5KSB7XG4gICAgaWYgKCEkaGFzX293bi5jYWxsKGt3YXJncy4kJHNtYXAsIGtleSkpIHtcbiAgICAgIHRocm93IE9wYWwuQXJndW1lbnRFcnJvci4kbmV3KCdtaXNzaW5nIGtleXdvcmQ6ICcra2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIGt3YXJncy4kJHNtYXBba2V5XTtcbiAgfVxuXG4gIC8vIEluaXRpYWxpemF0aW9uXG4gIC8vIC0tLS0tLS0tLS0tLS0tXG4gIE9wYWwuQmFzaWNPYmplY3QgPSBCYXNpY09iamVjdCA9ICRhbGxvY2F0ZV9jbGFzcygnQmFzaWNPYmplY3QnLCBudWxsKTtcbiAgT3BhbC5PYmplY3QgICAgICA9IF9PYmplY3QgICAgID0gJGFsbG9jYXRlX2NsYXNzKCdPYmplY3QnLCBPcGFsLkJhc2ljT2JqZWN0KTtcbiAgT3BhbC5Nb2R1bGUgICAgICA9IE1vZHVsZSAgICAgID0gJGFsbG9jYXRlX2NsYXNzKCdNb2R1bGUnLCBPcGFsLk9iamVjdCk7XG4gIE9wYWwuQ2xhc3MgICAgICAgPSBDbGFzcyAgICAgICA9ICRhbGxvY2F0ZV9jbGFzcygnQ2xhc3MnLCBPcGFsLk1vZHVsZSk7XG4gIE9wYWwuT3BhbCAgICAgICAgPSBfT3BhbCAgICAgICA9ICRhbGxvY2F0ZV9tb2R1bGUoJ09wYWwnKTtcbiAgT3BhbC5LZXJuZWwgICAgICA9IEtlcm5lbCAgICAgID0gJGFsbG9jYXRlX21vZHVsZSgnS2VybmVsJyk7XG5cbiAgJHNldF9wcm90byhPcGFsLkJhc2ljT2JqZWN0LCBPcGFsLkNsYXNzLiQkcHJvdG90eXBlKTtcbiAgJHNldF9wcm90byhPcGFsLk9iamVjdCwgT3BhbC5DbGFzcy4kJHByb3RvdHlwZSk7XG4gICRzZXRfcHJvdG8oT3BhbC5Nb2R1bGUsIE9wYWwuQ2xhc3MuJCRwcm90b3R5cGUpO1xuICAkc2V0X3Byb3RvKE9wYWwuQ2xhc3MsIE9wYWwuQ2xhc3MuJCRwcm90b3R5cGUpO1xuXG4gIC8vIEJhc2ljT2JqZWN0IGNhbiByZWFjaCBpdHNlbGYsIGF2b2lkIGNvbnN0X3NldCB0byBza2lwIHRoZSAkJGJhc2VfbW9kdWxlIGxvZ2ljXG4gIEJhc2ljT2JqZWN0LiQkY29uc3QuQmFzaWNPYmplY3QgPSBCYXNpY09iamVjdDtcblxuICAvLyBBc3NpZ24gYmFzaWMgY29uc3RhbnRzXG4gICRjb25zdF9zZXQoX09iamVjdCwgXCJCYXNpY09iamVjdFwiLCAgQmFzaWNPYmplY3QpO1xuICAkY29uc3Rfc2V0KF9PYmplY3QsIFwiT2JqZWN0XCIsICAgICAgIF9PYmplY3QpO1xuICAkY29uc3Rfc2V0KF9PYmplY3QsIFwiTW9kdWxlXCIsICAgICAgIE1vZHVsZSk7XG4gICRjb25zdF9zZXQoX09iamVjdCwgXCJDbGFzc1wiLCAgICAgICAgQ2xhc3MpO1xuICAkY29uc3Rfc2V0KF9PYmplY3QsIFwiT3BhbFwiLCAgICAgICAgIF9PcGFsKTtcbiAgJGNvbnN0X3NldChfT2JqZWN0LCBcIktlcm5lbFwiLCAgICAgICBLZXJuZWwpO1xuXG4gIC8vIEZpeCBib290ZWQgY2xhc3NlcyB0byBoYXZlIGNvcnJlY3QgLmNsYXNzIHZhbHVlXG4gIEJhc2ljT2JqZWN0LiQkY2xhc3MgPSBDbGFzcztcbiAgX09iamVjdC4kJGNsYXNzICAgICA9IENsYXNzO1xuICBNb2R1bGUuJCRjbGFzcyAgICAgID0gQ2xhc3M7XG4gIENsYXNzLiQkY2xhc3MgICAgICAgPSBDbGFzcztcbiAgX09wYWwuJCRjbGFzcyAgICAgICA9IE1vZHVsZTtcbiAgS2VybmVsLiQkY2xhc3MgICAgICA9IE1vZHVsZTtcblxuICAvLyBGb3J3YXJkIC50b1N0cmluZygpIHRvICN0b19zXG4gICRwcm9wKF9PYmplY3QuJCRwcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uKCkge1xuICAgIHZhciB0b19zID0gdGhpcy4kdG9fcygpO1xuICAgIGlmICh0b19zLiQkaXNfc3RyaW5nICYmIHR5cGVvZih0b19zKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIC8vIGEgc3RyaW5nIGNyZWF0ZWQgdXNpbmcgbmV3IFN0cmluZygnc3RyaW5nJylcbiAgICAgIHJldHVybiB0b19zLnZhbHVlT2YoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRvX3M7XG4gICAgfVxuICB9KTtcblxuICAvLyBNYWtlIEtlcm5lbCNyZXF1aXJlIGltbWVkaWF0ZWx5IGF2YWlsYWJsZSBhcyBpdCdzIG5lZWRlZCB0byByZXF1aXJlIGFsbCB0aGVcbiAgLy8gb3RoZXIgY29yZWxpYiBmaWxlcy5cbiAgJHByb3AoX09iamVjdC4kJHByb3RvdHlwZSwgJyRyZXF1aXJlJywgT3BhbC5yZXF1aXJlKTtcblxuICAvLyBJbnN0YW50aWF0ZSB0aGUgbWFpbiBvYmplY3RcbiAgT3BhbC50b3AgPSBuZXcgX09iamVjdCgpO1xuICBPcGFsLnRvcC4kdG9fcyA9IE9wYWwudG9wLiRpbnNwZWN0ID0gJHJldHVybl92YWwoJ21haW4nKTtcbiAgT3BhbC50b3AuJGRlZmluZV9tZXRob2QgPSB0b3BfZGVmaW5lX21ldGhvZDtcblxuICAvLyBGb3dhcmQgY2FsbHMgdG8gZGVmaW5lX21ldGhvZCBvbiB0aGUgdG9wIG9iamVjdCB0byBPYmplY3RcbiAgZnVuY3Rpb24gdG9wX2RlZmluZV9tZXRob2QoKSB7XG4gICAgdmFyIGFyZ3MgPSBPcGFsLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICB2YXIgYmxvY2sgPSB0b3BfZGVmaW5lX21ldGhvZC4kJHA7XG4gICAgdG9wX2RlZmluZV9tZXRob2QuJCRwID0gbnVsbDtcbiAgICByZXR1cm4gT3BhbC5zZW5kKF9PYmplY3QsICdkZWZpbmVfbWV0aG9kJywgYXJncywgYmxvY2spXG4gIH07XG5cbiAgLy8gTmlsXG4gIE9wYWwuTmlsQ2xhc3MgPSAkYWxsb2NhdGVfY2xhc3MoJ05pbENsYXNzJywgT3BhbC5PYmplY3QpO1xuICAkY29uc3Rfc2V0KF9PYmplY3QsICdOaWxDbGFzcycsIE9wYWwuTmlsQ2xhc3MpO1xuICBuaWwgPSBPcGFsLm5pbCA9IG5ldyBPcGFsLk5pbENsYXNzKCk7XG4gIG5pbC4kJGlkID0gbmlsX2lkO1xuICBuaWwuY2FsbCA9IG5pbC5hcHBseSA9IGZ1bmN0aW9uKCkgeyB0aHJvdyBPcGFsLkxvY2FsSnVtcEVycm9yLiRuZXcoJ25vIGJsb2NrIGdpdmVuJyk7IH07XG4gIG5pbC4kJGZyb3plbiA9IHRydWU7XG4gIG5pbC4kJGNvbXBhcmFibGUgPSBmYWxzZTtcbiAgT2JqZWN0LnNlYWwobmlsKTtcblxuICBPcGFsLnRocm93ZXIgPSBmdW5jdGlvbih0eXBlKSB7XG4gICAgdmFyIHRocm93ZXIgPSBuZXcgRXJyb3IoJ3VuZXhwZWN0ZWQgJyt0eXBlKTtcbiAgICB0aHJvd2VyLiR0aHJvd2VyX3R5cGUgPSB0eXBlO1xuICAgIHRocm93ZXIuJHRocm93ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB2YWx1ZSA9IG5pbDtcbiAgICAgIHRocm93ZXIuJHYgPSB2YWx1ZTtcbiAgICAgIHRocm93IHRocm93ZXI7XG4gICAgfTtcbiAgICByZXR1cm4gdGhyb3dlcjtcbiAgfTtcblxuICBPcGFsLnRfZXZhbF9yZXR1cm4gPSBPcGFsLnRocm93ZXIoXCJyZXR1cm5cIik7XG5cbiAgVHlwZUVycm9yLiQkc3VwZXIgPSBFcnJvcjtcblxuICAvLyBJZiBlbmFibGUtZmlsZS1zb3VyY2UtZW1iZWQgY29tcGlsZXIgb3B0aW9uIGlzIGVuYWJsZWQsIGVhY2ggbW9kdWxlIGxvYWRlZCB3aWxsIGFkZCBpdHNcbiAgLy8gc291cmNlcyB0byB0aGlzIG9iamVjdFxuICBPcGFsLmZpbGVfc291cmNlcyA9IHt9O1xufSkuY2FsbCh0aGlzKTtcbk9wYWwubG9hZGVkKFtcImNvcmVsaWIvcnVudGltZS5qc1wiXSk7Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0U7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNFO0FBQ0Y7O0FBRUE7QUFDRTtBQUNGO0FBQ0U7QUFDRjs7QUFFQTtBQUNBOztBQUVBO0FBQ0U7QUFDQTtBQUNGOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDRTtBQUNBO0FBQ0E7QUFDQTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0U7QUFDQTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTtBQUNFO0FBQ0E7QUFDRTtBQUNGO0FBQ0E7QUFDRjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNFO0FBQ0E7QUFDRTtBQUNBO0FBQ0Y7QUFDQTtBQUNFO0FBQ0Y7QUFDRjs7QUFFQTtBQUNFO0FBQ0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNGO0FBQ0U7QUFDRTtBQUNBO0FBQ0E7QUFDQTtBQUNGO0FBQ0Y7QUFDRjs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0U7QUFDRjs7QUFFQTtBQUNFO0FBQ0Y7O0FBRUE7QUFDRTs7QUFFQTtBQUNFO0FBQ0E7QUFDRTtBQUNBO0FBQ0Y7QUFDRjtBQUNFO0FBQ0U7QUFDRjtBQUNGO0FBQ0Y7O0FBRUE7QUFDRTs7QUFFQTtBQUNFOztBQUVGO0FBQ0U7O0FBRUY7O0FBRUE7QUFDQTtBQUNFO0FBQ0E7QUFDQTtBQUNGOztBQUVBO0FBQ0U7QUFDRjs7QUFFQTtBQUNBO0FBQ0Y7O0FBRUE7QUFDRTtBQUNBO0FBQ0E7O0FBRUE7QUFDRTtBQUNFO0FBQ0Y7QUFDQTtBQUNFO0FBQ0Y7QUFDRjtBQUNFO0FBQ0Y7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDRTs7QUFFQTtBQUNFO0FBQ0E7QUFDQTtBQUNGO0FBQ0Y7O0FBRUE7QUFDRTtBQUNFO0FBQ0E7QUFDRTtBQUNGO0FBQ0U7QUFDQTtBQUNGO0FBQ0E7QUFDQTtBQUNFO0FBQ0E7QUFDRjtBQUNGO0FBQ0U7QUFDRjtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNFO0FBQ0U7QUFDQTtBQUNFO0FBQ0Y7QUFDRjtBQUNGOztBQUVBO0FBQ0E7QUFDRTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDRTtBQUNBO0FBQ0U7QUFDRjtBQUNFO0FBQ0Y7QUFDRjtBQUNGOztBQUVBO0FBQ0E7QUFDRTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNFO0FBQ0U7QUFDRjtBQUNFO0FBQ0Y7QUFDRjtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNFO0FBQ0U7QUFDRjtBQUNGOztBQUVBO0FBQ0E7QUFDRTtBQUNGOztBQUVBO0FBQ0E7QUFDRTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNFOztBQUVBO0FBQ0U7QUFDQTs7QUFFQTtBQUNBO0FBQ0Y7O0FBRUE7O0FBRUE7O0FBRUE7QUFDRTtBQUNGOztBQUVBO0FBQ0U7QUFDQTtBQUNGO0FBQ0E7O0FBRUE7QUFDRTtBQUNBO0FBQ0E7QUFDRjtBQUNFO0FBQ0Y7O0FBRUE7QUFDRjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNFOztBQUVBO0FBQ0U7QUFDQTtBQUNGO0FBQ0E7O0FBRUE7QUFDRTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNGO0FBQ0U7QUFDRjs7QUFFQTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNFOztBQUVBO0FBQ0U7QUFDQTtBQUNGOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0Y7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0U7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNFOztBQUVBO0FBQ0E7O0FBRUE7QUFDRTtBQUNGO0FBQ0E7QUFDRTtBQUNFO0FBQ0Y7QUFDRjtBQUNGOztBQUVBO0FBQ0Y7O0FBRUE7QUFDQTtBQUNFOztBQUVBO0FBQ0U7QUFDQTtBQUNBO0FBQ0Y7O0FBRUE7QUFDRTtBQUNBO0FBQ0Y7O0FBRUE7QUFDRjs7QUFFQTtBQUNBO0FBQ0U7QUFDRTtBQUNGO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7O0FBRUE7QUFDRTtBQUNBO0FBQ0E7QUFDRTtBQUNJOztBQUVKO0FBQ0E7QUFDQTtBQUNGO0FBQ0Y7QUFDRTtBQUNGOztBQUVBO0FBQ0U7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFDRjs7QUFFQTtBQUNFOztBQUVBO0FBQ0U7QUFDQTtBQUNBO0FBQ0U7QUFDQTtBQUNBO0FBQ0U7QUFDQTtBQUNFO0FBQ0Y7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNGO0FBQ0E7QUFDRTtBQUNGO0FBQ0Y7O0FBRUE7QUFDRTtBQUNBO0FBQ0Y7QUFDRjs7QUFFQTtBQUNGO0FBQ0E7OztBQUdBO0FBQ0U7QUFDQTs7QUFFQTtBQUNBO0FBQ0U7QUFDQTtBQUNFO0FBQ0Y7O0FBRUE7QUFDRjtBQUNGOztBQUVBO0FBQ0U7QUFDRTtBQUNGO0FBQ0Y7O0FBRUE7QUFDRTs7QUFFQTtBQUNFO0FBQ0E7QUFDRjtBQUNFO0FBQ0E7QUFDRjs7QUFFQTtBQUNBO0FBQ0U7QUFDRTtBQUNGO0FBQ0Y7QUFDRTtBQUNFO0FBQ0E7QUFDRjtBQUNFO0FBQ0U7QUFDQTtBQUNGO0FBQ0Y7QUFDRjs7QUFFQTs7QUFFQTtBQUNFO0FBQ0U7QUFDQTtBQUNGO0FBQ0Y7QUFDQTtBQUNFOztBQUVBO0FBQ0E7QUFDRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0U7QUFDRjs7QUFFQTtBQUNFO0FBQ0Y7QUFDRjs7QUFFQTs7QUFFQTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRTtBQUNBOztBQUVBO0FBQ0U7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNGO0FBQ0E7O0FBRUE7QUFDRTtBQUNBOztBQUVBO0FBQ0U7QUFDRTtBQUNGO0FBQ0Y7O0FBRUE7QUFDRjs7QUFFQTtBQUNFOztBQUVBO0FBQ0U7QUFDQTtBQUNGO0FBQ0U7QUFDQTtBQUNGOztBQUVBOztBQUVBO0FBQ0U7QUFDQTtBQUNBO0FBQ0Y7O0FBRUE7O0FBRUE7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRTtBQUNFO0FBQ0Y7O0FBRUE7QUFDRTtBQUNGO0FBQ0U7QUFDRjtBQUNFO0FBQ0Y7QUFDRjs7QUFFQTtBQUNBO0FBQ0U7QUFDRTtBQUNGO0FBQ0U7QUFDRjtBQUNBO0FBQ0U7QUFDQTtBQUNBO0FBQ0E7QUFDRjtBQUNFO0FBQ0Y7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNFO0FBQ0U7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Y7O0FBRUE7QUFDRTtBQUNFO0FBQ0Y7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRTtBQUNJOztBQUVKO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDRjs7QUFFQTtBQUNFO0FBQ0Y7O0FBRUE7QUFDRTs7QUFFQTtBQUNFO0FBQ0k7O0FBRUo7QUFDRTtBQUNGOztBQUVBOztBQUVBO0FBQ0U7O0FBRUE7QUFDRTtBQUNJOztBQUVKO0FBQ0U7QUFDRjs7QUFFQTtBQUNFO0FBQ0Y7QUFDRjtBQUNGO0FBQ0Y7O0FBRUE7QUFDRjs7QUFFQTtBQUNFO0FBQ0k7O0FBRUo7QUFDRTtBQUNGOztBQUVBOztBQUVBO0FBQ0U7O0FBRUE7QUFDRTs7QUFFQTtBQUNFO0FBQ0E7QUFDRjtBQUNGO0FBQ0Y7O0FBRUE7QUFDRjs7QUFFQTtBQUNFO0FBQ0Y7O0FBRUE7QUFDRTtBQUNGOztBQUVBO0FBQ0U7QUFDQTtBQUNBO0FBQ0E7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNFO0FBQ0k7QUFDQTs7QUFFSjtBQUNFOztBQUVBO0FBQ0U7QUFDRjtBQUNGOztBQUVBO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRTtBQUNJOztBQUVKO0FBQ0U7O0FBRUE7QUFDRTtBQUNBO0FBQ0Y7QUFDRjs7QUFFQTs7QUFFQTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRTtBQUNFOztBQUVGO0FBQ0U7O0FBRUY7QUFDRTs7QUFFQTtBQUNFO0FBQ0Y7QUFDRjs7QUFFQTtBQUNFOztBQUVGO0FBQ0Y7O0FBRUE7QUFDRTtBQUNGOztBQUVBO0FBQ0U7O0FBRUE7QUFDRTtBQUNFO0FBQ0E7QUFDRjtBQUNBO0FBQ0E7QUFDRTtBQUNGO0FBQ0E7QUFDRjs7QUFFQTtBQUNGOztBQUVBO0FBQ0U7O0FBRUE7QUFDRTtBQUNFO0FBQ0U7QUFDRjs7QUFFQTtBQUNBO0FBQ0U7QUFDRjs7QUFFQTtBQUNGO0FBQ0Y7O0FBRUE7QUFDRjs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRTtBQUNBOztBQUVBO0FBQ0U7QUFDRjs7QUFFQTtBQUNFO0FBQ0E7QUFDQTtBQUNGO0FBQ0E7QUFDSTtBQUNBO0FBQ0E7O0FBRUo7QUFDRTs7QUFFQTtBQUNBO0FBQ0E7QUFDRjtBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0U7QUFDRTtBQUNGOztBQUVBO0FBQ0E7QUFDRjs7QUFFQTtBQUNFO0FBQ0E7O0FBRUE7QUFDQTtBQUNFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNGO0FBQ0U7QUFDQTtBQUNBO0FBQ0E7QUFDRjtBQUNGOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNGOztBQUVBO0FBQ0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNFO0FBQ0Y7O0FBRUE7QUFDRTtBQUNBO0FBQ0E7QUFDRjs7QUFFQTtBQUNJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUo7QUFDRTtBQUNBO0FBQ0E7QUFDRjtBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Y7O0FBRUE7O0FBRUE7QUFDRTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDRTtBQUNFO0FBQ0E7QUFDQTtBQUNGO0FBQ0U7QUFDRjs7QUFFQTtBQUNGO0FBQ0Y7QUFDRTtBQUNGOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNGOztBQUVBO0FBQ0U7QUFDSTs7QUFFSjtBQUNFO0FBQ0E7QUFDRTtBQUNGO0FBQ0Y7QUFDRjs7QUFFQTtBQUNFOztBQUVBO0FBQ0U7QUFDRjs7QUFFQTtBQUNGOztBQUVBO0FBQ0E7QUFDRTtBQUNJOztBQUVKO0FBQ0U7QUFDRjs7QUFFQTtBQUNJOztBQUVKO0FBQ0U7QUFDQTtBQUNGOztBQUVBO0FBQ0E7O0FBRUE7QUFDRjs7QUFFQTtBQUNFOztBQUVBOztBQUVBO0FBQ0U7QUFDRjs7QUFFQTs7QUFFQTtBQUNFO0FBQ0E7QUFDQTtBQUNGOzs7QUFHQTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNFO0FBQ0U7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Y7O0FBRUE7QUFDRTtBQUNFO0FBQ0Y7QUFDRTtBQUNGO0FBQ0U7QUFDRjtBQUNGOztBQUVBO0FBQ0U7QUFDRjs7QUFFQTtBQUNBO0FBQ0U7O0FBRUE7QUFDRTtBQUNGOztBQUVBOztBQUVBO0FBQ0U7QUFDRjs7QUFFQTtBQUNFO0FBQ0U7QUFDRjtBQUNGOztBQUVBO0FBQ0E7O0FBRUE7QUFDRjtBQUNBOztBQUVBO0FBQ0U7O0FBRUE7QUFDRTtBQUNBO0FBQ0U7QUFDRjtBQUNGOztBQUVBO0FBQ0Y7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRTtBQUNBO0FBQ0E7O0FBRUE7QUFDRTs7QUFFQTtBQUNFO0FBQ0Y7QUFDRjtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFDQTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUU7QUFDRTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Y7O0FBRUE7O0FBRUE7QUFDRjs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFDQTtBQUNFO0FBQ0Y7QUFDQTtBQUNFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7O0FBRUE7QUFDRjs7QUFFQTtBQUNFO0FBQ0U7QUFDRjtBQUNFO0FBQ0Y7QUFDRjs7QUFFQTtBQUNBO0FBQ0U7O0FBRUE7O0FBRUE7O0FBRUE7QUFDRTtBQUNJOztBQUVKO0FBQ0U7QUFDRjs7QUFFQTtBQUNFO0FBQ0E7QUFDRjtBQUNGOztBQUVBO0FBQ0U7QUFDQTtBQUNGOztBQUVBO0FBQ0Y7O0FBRUE7QUFDQTtBQUNFOztBQUVBO0FBQ0U7QUFDRjs7QUFFQTtBQUNFO0FBQ0U7QUFDQTtBQUNGO0FBQ0Y7O0FBRUE7QUFDRTtBQUNGOztBQUVBO0FBQ0Y7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDRTtBQUNFO0FBQ0Y7O0FBRUE7QUFDSTs7QUFFSjtBQUNFO0FBQ0Y7O0FBRUE7QUFDRTtBQUNGO0FBQ0E7QUFDRTtBQUNGO0FBQ0Y7O0FBRUE7QUFDQTtBQUNFO0FBQ0U7QUFDRjs7QUFFQTtBQUNFO0FBQ0U7QUFDRjtBQUNGOztBQUVBO0FBQ0U7QUFDQTs7QUFFQTtBQUNGOztBQUVBO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0U7QUFDRTs7QUFFQTtBQUNFOztBQUVBO0FBQ0U7QUFDRjtBQUNGO0FBQ0E7QUFDRTtBQUNGO0FBQ0Y7O0FBRUE7QUFDRjs7QUFFQTtBQUNFO0FBQ0U7QUFDRjs7QUFFQTtBQUNFO0FBQ0Y7O0FBRUE7O0FBRUE7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDRTtBQUNFO0FBQ0Y7QUFDQTtBQUNFO0FBQ0E7QUFDRTtBQUNGO0FBQ0E7QUFDRTtBQUNFO0FBQ0o7QUFDRjtBQUNBO0FBQ0U7QUFDRjtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDRTtBQUNFO0FBQ0Y7QUFDQTtBQUNFO0FBQ0E7QUFDRTtBQUNGO0FBQ0E7QUFDRTtBQUNGO0FBQ0E7QUFDRTtBQUNFO0FBQ0o7QUFDRjtBQUNBO0FBQ0U7QUFDRjtBQUNGOztBQUVBO0FBQ0E7QUFDRTtBQUNFO0FBQ0E7QUFDRjtBQUNBO0FBQ0U7QUFDQTtBQUNFO0FBQ0Y7QUFDQTtBQUNFO0FBQ0Y7QUFDQTtBQUNFO0FBQ0U7QUFDSjtBQUNGO0FBQ0E7QUFDRTtBQUNGO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNFO0FBQ0E7QUFDRTtBQUNBO0FBQ0Y7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRTtBQUNJO0FBQ0E7QUFDQTs7QUFFSjtBQUNFO0FBQ0U7QUFDQTtBQUNGO0FBQ0Y7O0FBRUE7QUFDRjs7QUFFQTtBQUNFO0FBQ0U7QUFDRjtBQUNBO0FBQ0U7QUFDRjtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRTs7QUFFQTtBQUNFO0FBQ0E7QUFDRjtBQUNFO0FBQ0Y7QUFDRTtBQUNGOztBQUVBO0FBQ0Y7O0FBRUE7QUFDRTtBQUNFO0FBQ0E7QUFDRjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0Y7O0FBRUE7QUFDRTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0U7O0FBRUE7QUFDQTtBQUNFOztBQUVBO0FBQ0E7QUFDRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNFO0FBQ0E7QUFDRjtBQUNGO0FBQ0Y7QUFDRjs7QUFFQTtBQUNGOztBQUVBO0FBQ0U7O0FBRUE7O0FBRUE7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7O0FBRUE7QUFDQTtBQUNBO0FBQ0U7QUFDRjtBQUNBO0FBQ0E7QUFDRTtBQUNGO0FBQ0E7QUFDRTtBQUNGO0FBQ0Y7O0FBRUE7QUFDQTtBQUNFOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNFO0FBQ0U7QUFDRjs7QUFFQTtBQUNFO0FBQ0E7QUFDRjtBQUNGOztBQUVBO0FBQ0E7QUFDRTtBQUNGO0FBQ0E7QUFDRTtBQUNGOztBQUVBO0FBQ0Y7O0FBRUE7QUFDQTtBQUNFOztBQUVBO0FBQ0U7QUFDRjtBQUNBO0FBQ0Y7O0FBRUE7QUFDQTtBQUNFO0FBQ0U7QUFDRjs7QUFFQTs7QUFFQTtBQUNFO0FBQ0U7QUFDRjtBQUNGO0FBQ0E7QUFDRTtBQUNFO0FBQ0Y7QUFDRjtBQUNGOztBQUVBO0FBQ0E7QUFDRTtBQUNFO0FBQ0Y7O0FBRUE7O0FBRUE7QUFDRTtBQUNFO0FBQ0Y7QUFDRjtBQUNBO0FBQ0U7QUFDRTtBQUNGO0FBQ0Y7QUFDRjs7QUFFQTtBQUNFO0FBQ0Y7O0FBRUE7QUFDRTtBQUNJO0FBQ0E7QUFDQTs7QUFFSjtBQUNBO0FBQ0U7QUFDRjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0U7QUFDRjs7QUFFQTtBQUNFOztBQUVBO0FBQ0U7QUFDQTtBQUNGOztBQUVBO0FBQ0U7QUFDQTtBQUNGOztBQUVBO0FBQ0U7QUFDRjtBQUNGOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDRTs7QUFFQTtBQUNBO0FBQ0U7QUFDRjs7QUFFQTs7QUFFQTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRTtBQUNGOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNGOztBQUVBO0FBQ0U7QUFDRTtBQUNBO0FBQ0E7QUFDRTtBQUNGO0FBQ0E7QUFDRTtBQUNGO0FBQ0Y7QUFDQTtBQUNGOztBQUVBO0FBQ0U7QUFDSTs7QUFFSjtBQUNFO0FBQ0Y7O0FBRUE7O0FBRUE7QUFDRjs7O0FBR0E7QUFDQTs7QUFFQTtBQUNFO0FBQ0E7QUFDQTtBQUNGOztBQUVBO0FBQ0U7QUFDQTs7QUFFQTtBQUNFOztBQUVBO0FBQ0U7QUFDRjtBQUNFO0FBQ0E7QUFDRjs7QUFFQTtBQUNGO0FBQ0Y7O0FBRUE7QUFDRTtBQUNFO0FBQ0U7QUFDRjtBQUNBO0FBQ0E7QUFDRjs7QUFFQTtBQUNBOztBQUVBO0FBQ0U7QUFDQTtBQUNBO0FBQ0E7QUFDRjs7QUFFQTs7QUFFQTtBQUNFO0FBQ0U7QUFDQTtBQUNBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0Y7O0FBRUE7QUFDRTtBQUNBO0FBQ0E7QUFDRjtBQUNGOztBQUVBO0FBQ0U7QUFDRTtBQUNFO0FBQ0Y7QUFDQTtBQUNGOztBQUVBO0FBQ0E7O0FBRUE7QUFDRTs7QUFFQTtBQUNFO0FBQ0U7QUFDRjtBQUNBO0FBQ0Y7QUFDRjtBQUNGOztBQUVBO0FBQ0U7O0FBRUE7QUFDRTs7QUFFQTtBQUNFO0FBQ0Y7O0FBRUE7QUFDRTs7QUFFQTtBQUNFO0FBQ0Y7O0FBRUE7QUFDRTtBQUNBO0FBQ0Y7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDRjs7QUFFQTs7QUFFQTtBQUNFO0FBQ0Y7O0FBRUE7O0FBRUE7QUFDRTtBQUNFOztBQUVBO0FBQ0U7QUFDRTtBQUNBO0FBQ0Y7QUFDRjs7QUFFQTtBQUNFO0FBQ0Y7QUFDQTtBQUNFO0FBQ0Y7QUFDQTtBQUNFO0FBQ0Y7QUFDQTtBQUNFO0FBQ0Y7O0FBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDRjtBQUNGOztBQUVBO0FBQ0U7O0FBRUU7QUFDRTtBQUNGOztBQUVBOztBQUVBO0FBQ0U7QUFDRjs7QUFFQTtBQUNBOztBQUVBO0FBQ0U7QUFDRTtBQUNFO0FBQ0Y7QUFDQTtBQUNFO0FBQ0Y7QUFDQTtBQUNFO0FBQ0Y7QUFDQTtBQUNFO0FBQ0Y7QUFDQTtBQUNGO0FBQ0E7QUFDQTtBQUNGOztBQUVBOztBQUVBO0FBQ0U7QUFDQTtBQUNGOztBQUVBO0FBQ0E7O0FBRUE7QUFDRTtBQUNFO0FBQ0E7QUFDRjtBQUNBO0FBQ0E7QUFDRjs7QUFFQTtBQUNFO0FBQ0Y7QUFDRjtBQUNGOztBQUVBO0FBQ0U7O0FBRUE7QUFDRTtBQUNGOztBQUVBO0FBQ0E7O0FBRUE7QUFDRTs7QUFFQTtBQUNFOztBQUVBO0FBQ0U7QUFDRTtBQUNGOztBQUVBO0FBQ0E7O0FBRUE7QUFDRjs7QUFFQTtBQUNGO0FBQ0E7QUFDRTtBQUNBO0FBQ0U7QUFDRTs7QUFFQTtBQUNGO0FBQ0Y7O0FBRUE7QUFDRjtBQUNGOztBQUVBO0FBQ0U7QUFDRjs7QUFFQTtBQUNFO0FBQ0E7O0FBRUE7QUFDRjs7QUFFQTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNFOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFDSTtBQUNBO0FBQ0E7O0FBRUo7QUFDRjs7QUFFQTtBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNFO0FBQ0U7QUFDRjs7QUFFQTtBQUNGOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNFO0FBQ0U7QUFDRjtBQUNGO0FBQ0E7O0FBRUE7QUFDQTtBQUNFOztBQUVBO0FBQ0E7O0FBRUE7QUFDRTtBQUNBO0FBQ0Y7QUFDRTtBQUNBO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDRjs7QUFFQTtBQUNBO0FBQ0U7O0FBRUE7QUFDRTs7QUFFQTtBQUNBO0FBQ0U7QUFDRjs7QUFFQTtBQUNBO0FBQ0U7QUFDQTtBQUNBO0FBQ0U7QUFDQTtBQUNBO0FBQ0U7QUFDQTtBQUNBO0FBQ0Y7QUFDRjtBQUNGO0FBQ0Y7QUFDRjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFDVTtBQUNBO0FBQ0E7QUFDQTtBQUNaOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFDRTtBQUNGO0FBQ0E7QUFDRTtBQUNGO0FBQ0U7QUFDRjtBQUNBO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDRTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDRTtBQUNBO0FBQ0U7QUFDRjtBQUNBO0FBQ0Y7QUFDRTtBQUNFO0FBQ0Y7QUFDQTtBQUNGO0FBQ0E7QUFDQTtBQUNGOztBQUVBO0FBQ0E7QUFDRTtBQUNBOztBQUVBO0FBQ0U7QUFDQTtBQUNFO0FBQ0U7QUFDRTtBQUNBO0FBQ0Y7O0FBRUY7QUFDRjtBQUNBO0FBQ0E7QUFDRjs7QUFFQTtBQUNFO0FBQ0Y7QUFDRTtBQUNGO0FBQ0Y7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNFOztBQUVBO0FBQ0U7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDRTtBQUNBO0FBQ0E7QUFDRjs7QUFFQTtBQUNGOztBQUVBO0FBQ0U7O0FBRUE7QUFDRTs7QUFFQTtBQUNFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNGO0FBQ0Y7O0FBRUE7QUFDRTs7QUFFQTs7QUFFQTtBQUNFO0FBQ0E7QUFDRTtBQUNBO0FBQ0E7QUFDRjtBQUNGO0FBQ0E7QUFDRTtBQUNBOztBQUVBO0FBQ0U7QUFDRTtBQUNGO0FBQ0U7QUFDRjtBQUNGO0FBQ0E7QUFDRTtBQUNGO0FBQ0Y7O0FBRUE7QUFDRjs7QUFFQTtBQUNFOztBQUVBO0FBQ0Y7O0FBRUE7QUFDRTs7QUFFQTtBQUNFO0FBQ0Y7O0FBRUE7QUFDRjs7O0FBR0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNFO0FBQ0E7QUFDRTs7QUFFRjs7QUFFQTs7QUFFQTs7QUFFQTtBQUNGOztBQUVBO0FBQ0E7QUFDRTtBQUNBO0FBQ0E7QUFDQTtBQUNGOztBQUVBO0FBQ0E7QUFDRTtBQUNBO0FBQ0E7QUFDQTtBQUNGOztBQUVBO0FBQ0E7QUFDRTtBQUNBO0FBQ0Y7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDRTtBQUNFO0FBQ0E7QUFDQTtBQUNFO0FBQ0Y7QUFDRTtBQUNFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNGO0FBQ0E7QUFDRjtBQUNBO0FBQ0U7QUFDQTtBQUNFO0FBQ0Y7QUFDQTtBQUNGO0FBQ0Y7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDRTtBQUNPO0FBQ1Q7O0FBRUE7QUFDRTtBQUNGO0FBQ0E7QUFDQTtBQUNFO0FBQ0Y7QUFDQTtBQUNFO0FBQ0Y7QUFDQTtBQUNFO0FBQ0E7QUFDQTtBQUNGOztBQUVBO0FBQ0E7QUFDRTtBQUNFO0FBQ0Y7QUFDRjtBQUNBOztBQUVBO0FBQ0U7QUFDRjtBQUNBO0FBQ0U7QUFDRTtBQUNBO0FBQ0Y7QUFDRjtBQUNBO0FBQ0U7QUFDRTtBQUNBO0FBQ0Y7QUFDRjtBQUNBO0FBQ0U7QUFDRTtBQUNBO0FBQ0Y7QUFDRjs7QUFFQTtBQUNBO0FBQ0U7QUFDRTtBQUNGO0FBQ0U7QUFDRjtBQUNFO0FBQ0Y7QUFDRjs7QUFFQTtBQUNFO0FBQ0U7QUFDRjtBQUNBO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDRTtBQUNBO0FBQ0U7QUFDQTtBQUNGO0FBQ0U7QUFDRjtBQUNGOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0U7QUFDQTtBQUNBO0FBQ0E7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDRTtBQUNBO0FBQ0E7QUFDRTtBQUNBO0FBQ0E7QUFDRjtBQUNBO0FBQ0Y7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0Y7QUFDQSJ9fSx7Im9mZnNldCI6eyJsaW5lIjoyOTg3LCJjb2x1bW4iOjB9LCJtYXAiOnsidmVyc2lvbiI6Mywic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29yZWxpYi9jb21wbGV4L2Jhc2UucmIiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlIDo6S2VybmVsXG4gIGRlZiBDb21wbGV4KHJlYWwsIGltYWcgPSBuaWwpXG4gICAgaWYgaW1hZ1xuICAgICAgQ29tcGxleC5uZXcocmVhbCwgaW1hZylcbiAgICBlbHNlXG4gICAgICBDb21wbGV4Lm5ldyhyZWFsLCAwKVxuICAgIGVuZFxuICBlbmRcbmVuZFxuXG5jbGFzcyA6OlN0cmluZ1xuICBkZWYgdG9fY1xuICAgIENvbXBsZXguZnJvbV9zdHJpbmcoc2VsZilcbiAgZW5kXG5lbmRcbiJdLCJuYW1lcyI6WyI8dG9wIChyZXF1aXJlZCk+IiwiPG1vZHVsZTpLZXJuZWw+IiwiQ29tcGxleCIsInJlYWwiLCJpbWFnIiwibmV3IiwiMCIsIjxjbGFzczpTdHJpbmc+IiwidG9fYyIsImZyb21fc3RyaW5nIiwic2VsZiJdLCJtYXBwaW5ncyI6IkFBQUFBLHVDQUFBQSxnQkFBQUE7RUFBQUE7O0VBQUFBOztFQUFBQztFQUFBQTs7SUFBQUE7O0lBQ0VBLE9BQUFDLHVCQUFBQSxtQkFBWUMsSUFBRCxFQUFPQyxJQUFsQkY7QUFBQUE7O01BQWtCLHlCQUFPO01BQ3ZCLElBQUEsUUFBR0UsSUFBSCxDQUFBO1FBQ0VGLE9BQUFBLGFBQU9HLEtBQUFBLENBQUtGLElBQVosRUFBa0JDLElBQVhDO01BRFQ7UUFHRUgsT0FBQUEsYUFBT0csS0FBQUEsQ0FBS0YsSUFBWixFQUFrQkcsQ0FBWEQ7TUFIVDtJQURGSCxDQUFBQSxJQUFBQTtFQURGRCxHQUFPLElBQVBBO0VBVUFELE9BQUFPO0VBQUFBOztJQUFBQTs7SUFDRUEsT0FBQUMsb0JBQUFBLGdCQUFBQTtBQUFBQSxNQUFBQTs7TUFDRUEsT0FBQU4sYUFBT08sYUFBQUEsQ0FBYUMsSUFBYkQ7SUFEVEQsQ0FBQUEsR0FBQUE7RUFERkQsR0FBTSxJQUFOQSxFQUFBQSxJQUFBQTtBQVZBUDsifX0seyJvZmZzZXQiOnsibGluZSI6MzAyMSwiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvcmVsaWIvaXJiLnJiIl0sInNvdXJjZXNDb250ZW50IjpbIiMgRGVidWcgaXMgYSBoZWxwZXIgbW9kdWxlIHRoYXQgYWxsb3dzIHVzIHRvIGNvbmR1Y3Qgc29tZSBkZWJ1Z2dpbmcgb25cbiMgYSBsaXZlIGNvZGViYXNlLiBJdCBnb2VzIHdpdGggYW4gYXNzdW1wdGlvbiwgdGhhdCBvcGFsLXBhcnNlciBvclxuIyBvcGFsLXJlcGx1dGlscyB3aWxsIG5vdCBiZSBsb2FkZWQsIGluIHdoaWNoIGNhc2Ugd2Ugd2lsbCBkbyB3aGF0IHdlIGNhblxuIyB0byBwcm92aXNpb24gaXQuXG5cbm1vZHVsZSBPcGFsXG4gIG1vZHVsZSBJUkJcbiAgICBkZWYgc2VsZi5lbnN1cmVfbG9hZGVkKGxpYnJhcnkpXG4gICAgICByZXR1cm4gaWYgYE9wYWwubG9hZGVkX2ZlYXR1cmVzYC5pbmNsdWRlPyBsaWJyYXJ5XG5cbiAgICAgIHZlcnNpb24gPSBpZiBSVUJZX0VOR0lORV9WRVJTSU9OLmluY2x1ZGU/ICdkZXYnXG4gICAgICAgICAgICAgICAgICAnbWFzdGVyJ1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgIFJVQllfRU5HSU5FX1ZFUlNJT05cbiAgICAgICAgICAgICAgICBlbmRcblxuICAgICAgdXJsID0gXCJodHRwczovL2Nkbi5vcGFscmIuY29tL29wYWwvI3t2ZXJzaW9ufS8je2xpYnJhcnl9LmpzXCJcblxuICAgICAgJXh7XG4gICAgICAgIHZhciBsaWJjb2RlO1xuXG4gICAgICAgIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7IC8vIEJyb3dzZXJcbiAgICAgICAgICB2YXIgciA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICAgIHIub3BlbihcIkdFVFwiLCB1cmwsIGZhbHNlKTtcbiAgICAgICAgICByLnNlbmQoJycpO1xuICAgICAgICAgIGxpYmNvZGUgPSByLnJlc3BvbnNlVGV4dDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAjezo6S2VybmVsLnJhaXNlIFwiWW91IG5lZWQgdG8gcHJvdmlzaW9uICN7bGlicmFyeX0geW91cnNlbGYgaW4gdGhpcyBlbnZpcm9ubWVudFwifVxuICAgICAgICB9XG5cbiAgICAgICAgKG5ldyBGdW5jdGlvbignT3BhbCcsIGxpYmNvZGUpKShPcGFsKTtcblxuICAgICAgICBPcGFsLnJlcXVpcmUobGlicmFyeSk7XG4gICAgICB9XG5cbiAgICAgIDo6S2VybmVsLnJhaXNlIFwiQ291bGQgbm90IGxvYWQgI3tsaWJyYXJ5fSBmb3Igc29tZSByZWFzb25cIiB1bmxlc3MgYE9wYWwubG9hZGVkX2ZlYXR1cmVzYC5pbmNsdWRlPyBsaWJyYXJ5XG4gICAgZW5kXG5cbiAgICBzaW5nbGV0b25fY2xhc3MuYXR0cl9hY2Nlc3NvciA6b3V0cHV0XG5cbiAgICBkZWYgc2VsZi5wcmVwYXJlX2NvbnNvbGUoJmJsb2NrKVxuICAgICAgc2VsZi5vdXRwdXQgPSAnJ1xuXG4gICAgICBvcmlnaW5hbCA9IHtcbiAgICAgICAgJHN0ZG91dCA9PiAtPihpKSB7ICRzdGRvdXQgPSBpIH0sXG4gICAgICAgICRzdGRlcnIgPT4gLT4oaSkgeyAkc3RkZXJyID0gaSB9LFxuICAgICAgfVxuXG4gICAgICAjIFByZXBhcmUgYSBiZXR0ZXIgcHJvbXB0IGV4cGVyaWVuY2UgZm9yIGEgYnJvd3NlclxuICAgICAgaWYgYnJvd3Nlcj9cbiAgICAgICAgb3JpZ2luYWwuZWFjaCBkbyB8cGlwZSwgcGlwZV9zZXR0ZXJ8XG4gICAgICAgICAgbmV3X3BpcGUgPSBwaXBlLmR1cFxuICAgICAgICAgIG5ld19waXBlLndyaXRlX3Byb2MgPSBwcm9jIGRvIHxzdHJ8XG4gICAgICAgICAgICBzZWxmLm91dHB1dCArPSBzdHJcbiAgICAgICAgICAgIHNlbGYub3V0cHV0ID0gb3V0cHV0LnNwbGl0KFwiXFxuXCIpLmxhc3QoMzApLmpvaW4oXCJcXG5cIilcbiAgICAgICAgICAgIHNlbGYub3V0cHV0ICs9IFwiXFxuXCIgaWYgc3RyLmVuZF93aXRoPyBcIlxcblwiXG5cbiAgICAgICAgICAgIHBpcGUud3JpdGVfcHJvYy5jYWxsKHN0cilcbiAgICAgICAgICBlbmRcbiAgICAgICAgICBuZXdfcGlwZS50dHkgPSBmYWxzZVxuICAgICAgICAgIHBpcGVfc2V0dGVyLmNhbGwobmV3X3BpcGUpXG4gICAgICAgIGVuZFxuXG4gICAgICAgIG9yaWdpbmFsX3JlYWRfcHJvYyA9ICRzdGRpbi5yZWFkX3Byb2NcbiAgICAgICAgJHN0ZGluLnJlYWRfcHJvYyA9IGBmdW5jdGlvbihzKSB7IHZhciBwID0gcHJvbXB0KCN7b3V0cHV0fSk7IGlmIChwICE9PSBudWxsKSByZXR1cm4gcCArIFwiXFxuXCI7IHJldHVybiBuaWw7IH1gXG4gICAgICBlbmRcblxuICAgICAgeWllbGRcbiAgICBlbnN1cmVcbiAgICAgIG9yaWdpbmFsLmVhY2ggZG8gfHBpcGUsIHBpcGVfc2V0dGVyfFxuICAgICAgICBwaXBlX3NldHRlci5jYWxsKHBpcGUpXG4gICAgICBlbmRcbiAgICAgICRzdGRpbi5yZWFkX3Byb2MgPSBvcmlnaW5hbF9yZWFkX3Byb2NcbiAgICAgIHNlbGYub3V0cHV0ID0gJydcbiAgICBlbmRcblxuICAgIGRlZiBzZWxmLmJyb3dzZXI/XG4gICAgICBgdHlwZW9mKGRvY3VtZW50KSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mKHByb21wdCkgIT09ICd1bmRlZmluZWQnYFxuICAgIGVuZFxuXG4gICAgTElORUJSRUFLUyA9IFtcbiAgICAgICd1bmV4cGVjdGVkIHRva2VuICRlbmQnLFxuICAgICAgJ3VudGVybWluYXRlZCBzdHJpbmcgbWVldHMgZW5kIG9mIGZpbGUnXG4gICAgXS5mcmVlemVcblxuICAgIGNsYXNzIFNpbGVuY2VyXG4gICAgICBkZWYgaW5pdGlhbGl6ZVxuICAgICAgICBAc3RkZXJyID0gJHN0ZGVyclxuICAgICAgZW5kXG5cbiAgICAgIGRlZiBzaWxlbmNlXG4gICAgICAgIEBjb2xsZWN0b3IgPSA6OlN0cmluZ0lPLm5ld1xuICAgICAgICAkc3RkZXJyID0gQGNvbGxlY3RvclxuICAgICAgICB5aWVsZFxuICAgICAgZW5zdXJlXG4gICAgICAgICRzdGRlcnIgPSBAc3RkZXJyXG4gICAgICBlbmRcblxuICAgICAgZGVmIHdhcm5pbmdzXG4gICAgICAgIEBjb2xsZWN0b3Iuc3RyaW5nXG4gICAgICBlbmRcbiAgICBlbmRcbiAgZW5kXG5lbmRcblxuY2xhc3MgOjpCaW5kaW5nXG4gIGRlZiBpcmJcbiAgICA6Ok9wYWw6OklSQi5lbnN1cmVfbG9hZGVkKCdvcGFsLXJlcGx1dGlscycpXG5cbiAgICBzaWxlbmNlciA9IDo6T3BhbDo6SVJCOjpTaWxlbmNlci5uZXdcblxuICAgIDo6T3BhbDo6SVJCLnByZXBhcmVfY29uc29sZSBkb1xuICAgICAgbG9vcCBkb1xuICAgICAgICBwcmludCAnPj4gJ1xuICAgICAgICBsaW5lID0gZ2V0c1xuICAgICAgICBicmVhayB1bmxlc3MgbGluZVxuICAgICAgICBjb2RlID0gJydcblxuICAgICAgICBwdXRzIGxpbmUgaWYgOjpPcGFsOjpJUkIuYnJvd3Nlcj9cblxuICAgICAgICBpZiBsaW5lLnN0YXJ0X3dpdGg/ICdscyAnXG4gICAgICAgICAgY29kZSA9IGxpbmVbMy4uLTFdXG4gICAgICAgICAgbW9kZSA9IDpsc1xuICAgICAgICBlbHNpZiBsaW5lID09IFwibHNcXG5cIlxuICAgICAgICAgIGNvZGUgPSAnc2VsZidcbiAgICAgICAgICBtb2RlID0gOmxzXG4gICAgICAgIGVsc2lmIGxpbmUuc3RhcnRfd2l0aD8gJ3Nob3cgJ1xuICAgICAgICAgIGNvZGUgPSBsaW5lWzUuLi0xXVxuICAgICAgICAgIG1vZGUgPSA6c2hvd1xuICAgICAgICBlbHNlXG4gICAgICAgICAgY29kZSA9IGxpbmVcbiAgICAgICAgICBtb2RlID0gOmluc3BlY3RcbiAgICAgICAgZW5kXG5cbiAgICAgICAganNfY29kZSA9IG5pbFxuXG4gICAgICAgIGJlZ2luXG4gICAgICAgICAgc2lsZW5jZXIuc2lsZW5jZSBkb1xuICAgICAgICAgICAganNfY29kZSA9IGBPcGFsLmNvbXBpbGUoY29kZSwge2lyYjogdHJ1ZX0pYFxuICAgICAgICAgIGVuZFxuICAgICAgICByZXNjdWUgU3ludGF4RXJyb3IgPT4gZVxuICAgICAgICAgIGlmIDo6T3BhbDo6SVJCOjpMSU5FQlJFQUtTLmluY2x1ZGU/KGUubWVzc2FnZSlcbiAgICAgICAgICAgIHByaW50ICcuLiAnXG4gICAgICAgICAgICBsaW5lID0gZ2V0c1xuICAgICAgICAgICAgcmV0dXJuIHVubGVzcyBsaW5lXG4gICAgICAgICAgICBwdXRzIGxpbmUgaWYgOjpPcGFsOjpJUkIuYnJvd3Nlcj9cbiAgICAgICAgICAgIGNvZGUgKz0gbGluZVxuICAgICAgICAgICAgcmV0cnlcbiAgICAgICAgICBlbHNpZiBzaWxlbmNlci53YXJuaW5ncy5lbXB0eT9cbiAgICAgICAgICAgIHdhcm4gZS5mdWxsX21lc3NhZ2VcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAjIE1vc3QgbGlrZWx5IGEgcGFyc2VyIGVycm9yXG4gICAgICAgICAgICB3YXJuIHNpbGVuY2VyLndhcm5pbmdzXG4gICAgICAgICAgZW5kXG4gICAgICAgIGVuZFxuXG4gICAgICAgIGlmIG1vZGUgPT0gOnNob3dcbiAgICAgICAgICBwdXRzIGpzX2NvZGVcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgZW5kXG5cbiAgICAgICAgcHV0cyA6OlJFUExVdGlscy5ldmFsX2FuZF9wcmludChqc19jb2RlLCBtb2RlLCBmYWxzZSwgc2VsZilcbiAgICAgIGVuZFxuICAgIGVuZFxuICBlbmRcbmVuZFxuXG4leHtcbiAgLy8gUnVuIGluIFdlYlRvb2xzIGNvbnNvbGUgd2l0aDogT3BhbC5pcmIoYyA9PiBldmFsKGMpKVxuICBPcGFsLmlyYiA9IGZ1bmN0aW9uKGZ1bikge1xuICAgICN7OjpCaW5kaW5nLm5ldyhgZnVuYCkuaXJifVxuICB9XG5cbiAgT3BhbC5sb2FkX3BhcnNlciA9IGZ1bmN0aW9uKCkge1xuICAgIE9wYWwuT3BhbC5JUkIuJGVuc3VyZV9sb2FkZWQoJ29wYWwtcGFyc2VyJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIE9wYWwuZXZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBPcGFsLmV2YWwgPSBmdW5jdGlvbihzdHIpIHtcbiAgICAgIE9wYWwubG9hZF9wYXJzZXIoKTtcbiAgICAgIHJldHVybiBPcGFsLmV2YWwoc3RyKTtcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZW9mIE9wYWwuY29tcGlsZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBPcGFsLmNvbXBpbGUgPSBmdW5jdGlvbihzdHIsIG9wdGlvbnMpIHtcbiAgICAgIE9wYWwubG9hZF9wYXJzZXIoKTtcbiAgICAgIHJldHVybiBPcGFsLmNvbXBpbGUoc3RyLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyI8dG9wIChyZXF1aXJlZCk+IiwiPG1vZHVsZTpPcGFsPiIsIjxtb2R1bGU6SVJCPiIsImVuc3VyZV9sb2FkZWQiLCJzZWxmIiwibGlicmFyeSIsImluY2x1ZGU/IiwidmVyc2lvbiIsIlJVQllfRU5HSU5FX1ZFUlNJT04iLCJ1cmwiLCJLZXJuZWwiLCJyYWlzZSIsInNpbmdsZXRvbl9jbGFzcyIsImF0dHJfYWNjZXNzb3IiLCJwcmVwYXJlX2NvbnNvbGUiLCJvdXRwdXQ9Iiwib3JpZ2luYWwiLCIkc3Rkb3V0IiwiYmxvY2sgaW4gcHJlcGFyZV9jb25zb2xlIiwiaSIsImJsb2NrICgyIGxldmVscykgaW4gcHJlcGFyZV9jb25zb2xlIiwiJHN0ZGVyciIsImJyb3dzZXI/IiwiZWFjaCIsInBpcGUiLCJwaXBlX3NldHRlciIsIm5ld19waXBlIiwiZHVwIiwid3JpdGVfcHJvYz0iLCJwcm9jIiwic3RyIiwiYmxvY2sgKDMgbGV2ZWxzKSBpbiBwcmVwYXJlX2NvbnNvbGUiLCIrIiwib3V0cHV0Iiwic3BsaXQiLCJsYXN0IiwiMzAiLCJqb2luIiwiZW5kX3dpdGg/Iiwid3JpdGVfcHJvYyIsImNhbGwiLCJ0dHk9Iiwib3JpZ2luYWxfcmVhZF9wcm9jIiwiJHN0ZGluIiwicmVhZF9wcm9jIiwicmVhZF9wcm9jPSIsImZyZWV6ZSIsIjxjbGFzczpTaWxlbmNlcj4iLCJpbml0aWFsaXplIiwiQHN0ZGVyciIsInNpbGVuY2UiLCJAY29sbGVjdG9yIiwiU3RyaW5nSU8iLCJuZXciLCJ3YXJuaW5ncyIsInN0cmluZyIsIjxjbGFzczpCaW5kaW5nPiIsImlyYiIsIk9wYWw6OklSQiIsIk9wYWwiLCJzaWxlbmNlciIsIk9wYWw6OklSQjo6U2lsZW5jZXIiLCJibG9jayBpbiBpcmIiLCJibG9jayAoMiBsZXZlbHMpIGluIGlyYiIsImxvb3AiLCJibG9jayAoMyBsZXZlbHMpIGluIGlyYiIsInByaW50IiwibGluZSIsImdldHMiLCJjb2RlIiwicHV0cyIsInN0YXJ0X3dpdGg/IiwiW10iLCIzIiwiLTEiLCJtb2RlIiwiNSIsImpzX2NvZGUiLCJibG9jayAoNCBsZXZlbHMpIGluIGlyYiIsIlN5bnRheEVycm9yIiwiZSIsIk9wYWw6OklSQjo6TElORUJSRUFLUyIsIm1lc3NhZ2UiLCJlbXB0eT8iLCJ3YXJuIiwiZnVsbF9tZXNzYWdlIiwiUkVQTFV0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QSxRQUFNNEIsUUFBUU4sVUFBQUEsQ0FBQUEsQ0FBUzZCLFdBQUFBLENBQUFBLENBQXZCLENBQUE7a0JBQ0UvRSxJQUFBZ0YsTUFBQUEsQ0FBS0osQ0FBQ0ssY0FBQUEsQ0FBQUEsQ0FBTkQ7Z0JBREY7a0JBSUVoRixJQUFBZ0YsTUFBQUEsQ0FBS3hCLFFBQVFOLFVBQUFBLENBQUFBLENBQWI4QjtnQkFKRjtjQVJGO1lBQUEsQ0FIRTtVQUFBLENBQUE7VUFtQkYsSUFBQSxNQUFHVCxJQUFILEVBQVcsTUFBWCxDQUFBOztZQUNFdkUsSUFBQWtFLE1BQUFBLENBQUtPLE9BQUxQO1lBQ0EsU0FBQSxRQUFBO1VBRkY7VUFLQUwsT0FBQTdELElBQUFrRSxNQUFBQSxDQUFLZ0IsZ0JBQVdDLGdCQUFBQSxDQUFnQlYsT0FBM0IsRUFBb0NGLElBQXBDLEVBQTBDLEtBQTFDLEVBQWlEdkUsSUFBdENtRixDQUFoQmpCLEVBakRGUCxDQUFBQSxHQUFBQSx1Q0FBQUEsQ0FBQUMsQ0FBQUE7VUFBQUE7VUFBQUE7UUFBQUEsQ0FBQUEsSUFERkYsQ0FBQUEsR0FBQUEscUJBQUFBLENBQVdoRCxFQUxiMkM7UUFBQUE7UUFBQUE7TUFBQUE7SUFBQUEsQ0FBQUEsR0FBQUE7RUFERkQsR0FBTSxJQUFOQSxFQUFBQSxJQUFBQTs7QUErREF4RDtBQUNBQTtBQUNBQSxJQUFNd0YsY0FBU25DLEtBQUFBLENBQU1yRCxHQUFOcUQsQ0FBV0ksS0FBQUEsQ0FBQUE7QUFDMUJ6RDs7QUFFQUE7QUFDQUE7QUFDQUE7O0FBRUFBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBOztBQUVBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTs7QUE5TEFBOyJ9fSx7Im9mZnNldCI6eyJsaW5lIjozMjcyLCJjb2x1bW4iOjB9LCJtYXAiOnsidmVyc2lvbiI6Mywic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29yZWxpYi9iaW5kaW5nLnJiIl0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIDo6QmluZGluZ1xuICAjIEBwcml2YXRlXG4gIGRlZiBpbml0aWFsaXplKGpzZXZhbCwgc2NvcGVfdmFyaWFibGVzID0gW10sIHJlY2VpdmVyID0gdW5kZWZpbmVkLCBzb3VyY2VfbG9jYXRpb24gPSBuaWwpXG4gICAgQGpzZXZhbCwgQHNjb3BlX3ZhcmlhYmxlcywgQHJlY2VpdmVyLCBAc291cmNlX2xvY2F0aW9uID0gXFxcbiAgICAgIGpzZXZhbCwgc2NvcGVfdmFyaWFibGVzLCByZWNlaXZlciwgc291cmNlX2xvY2F0aW9uXG4gICAgcmVjZWl2ZXIgPSBqc19ldmFsKCdzZWxmJykgdW5sZXNzIGB0eXBlb2YgcmVjZWl2ZXIgIT09IHVuZGVmaW5lZGBcbiAgZW5kXG5cbiAgZGVmIGpzX2V2YWwoKmFyZ3MpXG4gICAgaWYgQGpzZXZhbFxuICAgICAgQGpzZXZhbC5jYWxsKCphcmdzKVxuICAgIGVsc2VcbiAgICAgIDo6S2VybmVsLnJhaXNlICdFdmFsdWF0aW9uIG9uIGEgUHJvYyNiaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnXG4gICAgZW5kXG4gIGVuZFxuXG4gIGRlZiBsb2NhbF92YXJpYWJsZV9nZXQoc3ltYm9sKVxuICAgIGpzX2V2YWwoc3ltYm9sKVxuICByZXNjdWUgOjpFeGNlcHRpb25cbiAgICA6Oktlcm5lbC5yYWlzZSA6Ok5hbWVFcnJvciwgXCJsb2NhbCB2YXJpYWJsZSBgI3tzeW1ib2x9JyBpcyBub3QgZGVmaW5lZCBmb3IgI3tpbnNwZWN0fVwiXG4gIGVuZFxuXG4gIGRlZiBsb2NhbF92YXJpYWJsZV9zZXQoc3ltYm9sLCB2YWx1ZSlcbiAgICBgT3BhbC5CaW5kaW5nLnRtcF92YWx1ZSA9IHZhbHVlYFxuICAgIGpzX2V2YWwoXCIje3N5bWJvbH0gPSBPcGFsLkJpbmRpbmcudG1wX3ZhbHVlXCIpXG4gICAgYGRlbGV0ZSBPcGFsLkJpbmRpbmcudG1wX3ZhbHVlYFxuICAgIHZhbHVlXG4gIGVuZFxuXG4gIGRlZiBsb2NhbF92YXJpYWJsZXNcbiAgICBAc2NvcGVfdmFyaWFibGVzXG4gIGVuZFxuXG4gIGRlZiBsb2NhbF92YXJpYWJsZV9kZWZpbmVkPyh2YWx1ZSlcbiAgICBAc2NvcGVfdmFyaWFibGVzLmluY2x1ZGU/KHZhbHVlKVxuICBlbmRcblxuICBkZWYgZXZhbChzdHIsIGZpbGUgPSBuaWwsIGxpbmUgPSBuaWwpXG4gICAgcmV0dXJuIHJlY2VpdmVyIGlmIHN0ciA9PSAnc2VsZidcblxuICAgIDo6S2VybmVsLmV2YWwoc3RyLCBzZWxmLCBmaWxlLCBsaW5lKVxuICBlbmRcblxuICBhdHRyX3JlYWRlciA6cmVjZWl2ZXIsIDpzb3VyY2VfbG9jYXRpb25cbmVuZFxuXG5tb2R1bGUgOjpLZXJuZWxcbiAgZGVmIGJpbmRpbmdcbiAgICA6Oktlcm5lbC5yYWlzZSBcIk9wYWwgZG9lc24ndCBzdXBwb3J0IGR5bmFtaWMgY2FsbHMgdG8gYmluZGluZ1wiXG4gIGVuZFxuZW5kXG5cblRPUExFVkVMX0JJTkRJTkcgPSA6OkJpbmRpbmcubmV3KFxuICAleHtcbiAgICBmdW5jdGlvbihqcykge1xuICAgICAgcmV0dXJuIChuZXcgRnVuY3Rpb24oXCJzZWxmXCIsIFwicmV0dXJuIFwiICsganMpKShzZWxmKTtcbiAgICB9XG4gIH0sXG4gIFtdLCBzZWxmLCBbJzxtYWluPicsIDBdXG4pXG4iXSwibmFtZXMiOlsiPHRvcCAocmVxdWlyZWQpPiIsIjxjbGFzczpCaW5kaW5nPiIsImluaXRpYWxpemUiLCJqc2V2YWwiLCJzY29wZV92YXJpYWJsZXMiLCJyZWNlaXZlciIsInNvdXJjZV9sb2NhdGlvbiIsIkBqc2V2YWwiLCJAc2NvcGVfdmFyaWFibGVzIiwiQHJlY2VpdmVyIiwiQHNvdXJjZV9sb2NhdGlvbiIsInNlbGYiLCJqc19ldmFsIiwiY2FsbCIsImFyZ3MiLCJLZXJuZWwiLCJyYWlzZSIsImxvY2FsX3ZhcmlhYmxlX2dldCIsInN5bWJvbCIsIkV4Y2VwdGlvbiIsIk5hbWVFcnJvciIsImluc3BlY3QiLCJsb2NhbF92YXJpYWJsZV9zZXQiLCJ2YWx1ZSIsImxvY2FsX3ZhcmlhYmxlcyIsImxvY2FsX3ZhcmlhYmxlX2RlZmluZWQ/IiwiaW5jbHVkZT8iLCJldmFsIiwic3RyIiwiZmlsZSIsImxpbmUiLCJhdHRyX3JlYWRlciIsIjxtb2R1bGU6S2VybmVsPiIsImJpbmRpbmciLCJCaW5kaW5nIiwibmV3IiwiMCJdLCJtYXBwaW5ncyI6IkFBQUFBLGtDQUFBQSxnQkFBQUE7RUFBQUE7O0VBQUFBOztFQUFBQztFQUFBQTs7SUFBQUE7O0FBQUFBOzs7QUFFRUMsSUFBQUEsMEJBQUFBLHNCQUFlQyxNQUFELEVBQVNDLGVBQVQsRUFBK0JDLFFBQS9CLEVBQXFEQyxlQUFuRUo7QUFBQUEsTUFBQUE7OztNQUF1QiwrQ0FBa0I7O01BQTBCLCtDQUFrQjtNQUNuRixLQUNFLENBQUFDLE1BQUEsRUFBUUMsZUFBUixFQUF5QkMsUUFBekIsRUFBbUNDLGVBQW5DLENBREYsRUFBQUMsQ0FBQUEsY0FBQSxLQUFBQSxDQUFBLEVBQVNDLENBQUFBLHVCQUFULEtBQVNBLENBQVQsRUFBMkJDLENBQUFBLGdCQUEzQixLQUEyQkEsQ0FBM0IsRUFBc0NDLENBQUFBLHVCQUF0QyxLQUFzQ0EsQ0FBdEM7TUFFQSxJQUFBLFFBQW1DUiw2QkFBbkMsQ0FBQTtRQUxKQSxPQUFBO01BS0k7UUFBQUEsT0FBQUcsQ0FBQUEsV0FBV00sSUFBQUMsU0FBQUEsQ0FBUVYsTUFBUlUsQ0FBWFA7TUFBQTtJQUhGSCxDQUFBQSxJQUFBQTs7QUFNQVUsSUFBQUEsdUJBQUFBLG1CQVJGLEVBUUVBO0FBQUFBLE1BQUFBOzs7TUFSRjtNQVFjO01BQ1YsSUFBQSxRQUFHTCxXQUFILENBQUE7UUFDRUssT0FBT0MsTUFBUE4sV0FBT00sUUFBQUEsRUFBTSxNQUFDQyxJQUFELENBQU5EO01BRFQ7UUFHRUQsT0FBQUcsT0FBUUMsT0FBQUEsQ0FBT0osK0NBQVBJO01BSFY7SUFERkosQ0FBQUEsSUFBQUE7O0FBUUFLLElBQUFBLGtDQUFBQSw4QkFBdUJDLE1BQXZCRDtBQUFBQSxNQUFBQTs7TUFDRTtRQUFBQSxPQUFBTixJQUFBQyxTQUFBQSxDQUFRTSxNQUFSTjtNQUFBO1FBQ0Ysc0JBQU8sQ0FBQU8sZ0JBQUEsQ0FBUDtVQUFBO1lBQ0VGLE9BQUFGLE9BQVFDLE9BQUFBLENBQU9JLGdCQUFmLEVBQTZCSCxrQkFBRCxHQUFBLENBQW1CQyxNQUFuQixDQUFBLEdBQTBCRCx1QkFBMUIsR0FBQSxDQUFpRE4sSUFBQVUsU0FBQUEsQ0FBQUEsQ0FBakQsQ0FBcEJMO1VBRFY7UUFBQSxDQURFO01BQUE7SUFERkMsQ0FBQUEsR0FBQUE7O0FBTUFLLElBQUFBLGtDQUFBQSw4QkFBdUJKLE1BQUQsRUFBU0ssS0FBL0JEO0FBQUFBLE1BQUFBOzs7TUFDR0E7TUFDRFgsSUFBQUMsU0FBQUEsQ0FBUSxFQUFBLEdBQUEsQ0FBR00sTUFBSCxDQUFBLEdBQVVJLDJCQUFsQlY7TUFDQ1U7TUFDREEsT0FBQUM7SUFKRkQsQ0FBQUEsR0FBQUE7O0FBT0FFLElBQUFBLCtCQUFBQSxhQUNFLGlCQURGQSxDQUFBQSxHQUFBQTs7QUFJQUMsSUFBQUEsdUNBQUFBLGdEQUE0QkYsS0FBNUJFO0FBQUFBLE1BQUFBOztNQUNFQSxPQUFBakIsb0JBQWdCa0IsYUFBQUEsQ0FBVUgsS0FBVkc7SUFEbEJELENBQUFBLEdBQUFBOztBQUlBRSxJQUFBQSxvQkFBQUEseUJBQVNDLEdBQUQsRUFBTUMsSUFBTixFQUFrQkMsSUFBMUJILEdBQUFBLE1BQUFBLElBQUFBLHdDQUFBQTtBQUFBQSxNQUFBQTs7O01BQWMseUJBQU87TUFBSyx5QkFBTztNQUMvQixJQUFBLE1BQW1CQyxHQUFuQixFQUEwQkQsTUFBMUIsQ0FBQTtRQUFBLE9BQU9oQixJQUFBTixVQUFBQSxDQUFBQTtNQUFQO01BRUFzQixPQUFBWixPQUFRWSxNQUFBQSxDQUFNQyxHQUFkLEVBQW1CakIsSUFBbkIsRUFBeUJrQixJQUF6QixFQUErQkMsSUFBdkJILEVBSFZBO1FBQUFBO1FBQUFBO01BQUFBO0lBQUFBLENBQUFBLElBQUFBO0lBTUExQixPQUFBVSxJQUFBb0IsYUFBQUEsQ0FBWSxVQUFaLEVBQXVCLGlCQUF2QkE7RUEzQ0Y5QixHQUFNLElBQU5BLEVBQUFBLElBQUFBO0VBOENBK0I7RUFBQUE7OztJQUNFQSxPQUFBQyx1QkFBQUEsbUJBQUFBO0FBQUFBO01BQ0VBLE9BQUFsQixPQUFRQyxPQUFBQSxDQUFPaUIsK0NBQVBqQjtJQURWaUIsQ0FBQUEsR0FBQUE7RUFERkQsR0FBTyxJQUFQQTtFQU1BaEMsT0FBQSw0Q0FBbUJrQyxjQUFTQyxLQUFBQTtBQUU1Qm5DO0FBQ0FBO0FBQ0FBO0FBQ0FBLEVBTG1CLEVBTWpCLEVBTmlCLEVBTWJXLElBTmEsRUFNUCxDQUFDWCxRQUFELEVBQVdvQyxDQUFYLENBTmdCRCxDQUE1QjtBQXBEQW5DOyJ9fSx7Im9mZnNldCI6eyJsaW5lIjozMzc3LCJjb2x1bW4iOjB9LCJtYXAiOnsidmVyc2lvbiI6Mywic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29yZWxpYi90aW1lLnJiIl0sInNvdXJjZXNDb250ZW50IjpbIiMgaGVscGVyczogc2xpY2UsIGRlbnlfZnJvemVuX2FjY2Vzc1xuXG5yZXF1aXJlICdjb3JlbGliL2NvbXBhcmFibGUnXG5cbmNsYXNzIDo6VGltZSA8IGBEYXRlYFxuICBpbmNsdWRlIDo6Q29tcGFyYWJsZVxuXG4gICV4e1xuICAgIHZhciBkYXlzX29mX3dlZWsgPSAjeyV3W1N1bmRheSBNb25kYXkgVHVlc2RheSBXZWRuZXNkYXkgVGh1cnNkYXkgRnJpZGF5IFNhdHVyZGF5IFN1bmRheV19LFxuICAgICAgICBzaG9ydF9kYXlzICAgPSAjeyV3W1N1biBNb24gVHVlIFdlZCBUaHUgRnJpIFNhdF19LFxuICAgICAgICBzaG9ydF9tb250aHMgPSAjeyV3W0phbiBGZWIgTWFyIEFwciBNYXkgSnVuIEp1bCBBdWcgU2VwIE9jdCBOb3YgRGVjXX0sXG4gICAgICAgIGxvbmdfbW9udGhzICA9ICN7JXdbSmFudWFyeSBGZWJydWFyeSBNYXJjaCBBcHJpbCBNYXkgSnVuZSBKdWx5IEF1Z3VzdCBTZXB0ZW1iZXIgT2N0b2JlciBOb3ZlbWJlciBEZWNlbWJlcl19O1xuICB9XG5cbiAgZGVmIHNlbGYuYXQoc2Vjb25kcywgZnJhYyA9IHVuZGVmaW5lZClcbiAgICAleHtcbiAgICAgIHZhciByZXN1bHQ7XG5cbiAgICAgIGlmICgjezo6VGltZSA9PT0gc2Vjb25kc30pIHtcbiAgICAgICAgaWYgKGZyYWMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpUeXBlRXJyb3IsIFwiY2FuJ3QgY29udmVydCBUaW1lIGludG8gYW4gZXhhY3QgbnVtYmVyXCJ9XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gbmV3IERhdGUoc2Vjb25kcy5nZXRUaW1lKCkpO1xuICAgICAgICByZXN1bHQudGltZXpvbmUgPSBzZWNvbmRzLnRpbWV6b25lO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBpZiAoIXNlY29uZHMuJCRpc19udW1iZXIpIHtcbiAgICAgICAgc2Vjb25kcyA9ICN7OjpPcGFsLmNvZXJjZV90byEoc2Vjb25kcywgOjpJbnRlZ2VyLCA6dG9faW50KX07XG4gICAgICB9XG5cbiAgICAgIGlmIChmcmFjID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHNlY29uZHMgKiAxMDAwKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFmcmFjLiQkaXNfbnVtYmVyKSB7XG4gICAgICAgIGZyYWMgPSAjezo6T3BhbC5jb2VyY2VfdG8hKGZyYWMsIDo6SW50ZWdlciwgOnRvX2ludCl9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IERhdGUoc2Vjb25kcyAqIDEwMDAgKyAoZnJhYyAvIDEwMDApKTtcbiAgICB9XG4gIGVuZFxuXG4gICV4e1xuICAgIGZ1bmN0aW9uIHRpbWVfcGFyYW1zKHllYXIsIG1vbnRoLCBkYXksIGhvdXIsIG1pbiwgc2VjKSB7XG4gICAgICBpZiAoeWVhci4kJGlzX3N0cmluZykge1xuICAgICAgICB5ZWFyID0gcGFyc2VJbnQoeWVhciwgMTApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeWVhciA9ICN7OjpPcGFsLmNvZXJjZV90byEoYHllYXJgLCA6OkludGVnZXIsIDp0b19pbnQpfTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vbnRoID09PSBuaWwpIHtcbiAgICAgICAgbW9udGggPSAxO1xuICAgICAgfSBlbHNlIGlmICghbW9udGguJCRpc19udW1iZXIpIHtcbiAgICAgICAgaWYgKCN7YG1vbnRoYC5yZXNwb25kX3RvPyg6dG9fc3RyKX0pIHtcbiAgICAgICAgICBtb250aCA9ICN7YG1vbnRoYC50b19zdHJ9O1xuICAgICAgICAgIHN3aXRjaCAobW9udGgudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgIGNhc2UgJ2phbic6IG1vbnRoID0gIDE7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2ZlYic6IG1vbnRoID0gIDI7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ21hcic6IG1vbnRoID0gIDM7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2Fwcic6IG1vbnRoID0gIDQ7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ21heSc6IG1vbnRoID0gIDU7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2p1bic6IG1vbnRoID0gIDY7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2p1bCc6IG1vbnRoID0gIDc7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2F1Zyc6IG1vbnRoID0gIDg7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3NlcCc6IG1vbnRoID0gIDk7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ29jdCc6IG1vbnRoID0gMTA7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ25vdic6IG1vbnRoID0gMTE7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2RlYyc6IG1vbnRoID0gMTI7IGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6IG1vbnRoID0gI3tgbW9udGhgLnRvX2l9O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtb250aCA9ICN7OjpPcGFsLmNvZXJjZV90byEoYG1vbnRoYCwgOjpJbnRlZ2VyLCA6dG9faW50KX07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1vbnRoIDwgMSB8fCBtb250aCA+IDEyKSB7XG4gICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCBcIm1vbnRoIG91dCBvZiByYW5nZTogI3tgbW9udGhgfVwifVxuICAgICAgfVxuICAgICAgbW9udGggPSBtb250aCAtIDE7XG5cbiAgICAgIGlmIChkYXkgPT09IG5pbCkge1xuICAgICAgICBkYXkgPSAxO1xuICAgICAgfSBlbHNlIGlmIChkYXkuJCRpc19zdHJpbmcpIHtcbiAgICAgICAgZGF5ID0gcGFyc2VJbnQoZGF5LCAxMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXkgPSAjezo6T3BhbC5jb2VyY2VfdG8hKGBkYXlgLCA6OkludGVnZXIsIDp0b19pbnQpfTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRheSA8IDEgfHwgZGF5ID4gMzEpIHtcbiAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsIFwiZGF5IG91dCBvZiByYW5nZTogI3tgZGF5YH1cIn1cbiAgICAgIH1cblxuICAgICAgaWYgKGhvdXIgPT09IG5pbCkge1xuICAgICAgICBob3VyID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoaG91ci4kJGlzX3N0cmluZykge1xuICAgICAgICBob3VyID0gcGFyc2VJbnQoaG91ciwgMTApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaG91ciA9ICN7OjpPcGFsLmNvZXJjZV90byEoYGhvdXJgLCA6OkludGVnZXIsIDp0b19pbnQpfTtcbiAgICAgIH1cblxuICAgICAgaWYgKGhvdXIgPCAwIHx8IGhvdXIgPiAyNCkge1xuICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgXCJob3VyIG91dCBvZiByYW5nZTogI3tgaG91cmB9XCJ9XG4gICAgICB9XG5cbiAgICAgIGlmIChtaW4gPT09IG5pbCkge1xuICAgICAgICBtaW4gPSAwO1xuICAgICAgfSBlbHNlIGlmIChtaW4uJCRpc19zdHJpbmcpIHtcbiAgICAgICAgbWluID0gcGFyc2VJbnQobWluLCAxMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtaW4gPSAjezo6T3BhbC5jb2VyY2VfdG8hKGBtaW5gLCA6OkludGVnZXIsIDp0b19pbnQpfTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1pbiA8IDAgfHwgbWluID4gNTkpIHtcbiAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsIFwibWluIG91dCBvZiByYW5nZTogI3tgbWluYH1cIn1cbiAgICAgIH1cblxuICAgICAgaWYgKHNlYyA9PT0gbmlsKSB7XG4gICAgICAgIHNlYyA9IDA7XG4gICAgICB9IGVsc2UgaWYgKCFzZWMuJCRpc19udW1iZXIpIHtcbiAgICAgICAgaWYgKHNlYy4kJGlzX3N0cmluZykge1xuICAgICAgICAgIHNlYyA9IHBhcnNlSW50KHNlYywgMTApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlYyA9ICN7OjpPcGFsLmNvZXJjZV90byEoYHNlY2AsIDo6SW50ZWdlciwgOnRvX2ludCl9O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWMgPCAwIHx8IHNlYyA+IDYwKSB7XG4gICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCBcInNlYyBvdXQgb2YgcmFuZ2U6ICN7YHNlY2B9XCJ9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBbeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWluLCBzZWNdO1xuICAgIH1cbiAgfVxuXG4gIGRlZiBzZWxmLm5ldyh5ZWFyID0gdW5kZWZpbmVkLCBtb250aCA9IG5pbCwgZGF5ID0gbmlsLCBob3VyID0gbmlsLCBtaW4gPSBuaWwsIHNlYyA9IG5pbCwgdXRjX29mZnNldCA9IG5pbClcbiAgICAleHtcbiAgICAgIHZhciBhcmdzLCByZXN1bHQsIHRpbWV6b25lLCB1dGNfZGF0ZTtcblxuICAgICAgaWYgKHllYXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUoKTtcbiAgICAgIH1cblxuICAgICAgYXJncyAgPSB0aW1lX3BhcmFtcyh5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW4sIHNlYyk7XG4gICAgICB5ZWFyICA9IGFyZ3NbMF07XG4gICAgICBtb250aCA9IGFyZ3NbMV07XG4gICAgICBkYXkgICA9IGFyZ3NbMl07XG4gICAgICBob3VyICA9IGFyZ3NbM107XG4gICAgICBtaW4gICA9IGFyZ3NbNF07XG4gICAgICBzZWMgICA9IGFyZ3NbNV07XG5cbiAgICAgIGlmICh1dGNfb2Zmc2V0ID09PSBuaWwpIHtcbiAgICAgICAgcmVzdWx0ID0gbmV3IERhdGUoeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWluLCAwLCBzZWMgKiAxMDAwKTtcbiAgICAgICAgaWYgKHllYXIgPCAxMDApIHtcbiAgICAgICAgICByZXN1bHQuc2V0RnVsbFllYXIoeWVhcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgdGltZXpvbmUgPSAje19wYXJzZV9vZmZzZXQodXRjX29mZnNldCl9O1xuICAgICAgdXRjX2RhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQyh5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW4sIDAsIHNlYyAqIDEwMDApKTtcbiAgICAgIGlmICh5ZWFyIDwgMTAwKSB7XG4gICAgICAgIHV0Y19kYXRlLnNldFVUQ0Z1bGxZZWFyKHllYXIpO1xuICAgICAgfVxuXG4gICAgICByZXN1bHQgPSBuZXcgRGF0ZSh1dGNfZGF0ZS5nZXRUaW1lKCkgLSB0aW1lem9uZSAqIDM2MDAwMDApO1xuICAgICAgcmVzdWx0LnRpbWV6b25lID0gdGltZXpvbmU7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICBlbmRcblxuICAjIEBwcml2YXRlXG4gIGRlZiBzZWxmLl9wYXJzZV9vZmZzZXQodXRjX29mZnNldClcbiAgICAleHtcbiAgICAgIHZhciB0aW1lem9uZTtcbiAgICAgIGlmICh1dGNfb2Zmc2V0LiQkaXNfc3RyaW5nKSB7XG4gICAgICAgIGlmICh1dGNfb2Zmc2V0ID09ICdVVEMnKSB7XG4gICAgICAgICAgdGltZXpvbmUgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYoL15bKy1dXFxkXFxkOlswLTVdXFxkJC8udGVzdCh1dGNfb2Zmc2V0KSkge1xuICAgICAgICAgIHZhciBzaWduLCBob3VycywgbWludXRlcztcbiAgICAgICAgICBzaWduID0gdXRjX29mZnNldFswXTtcbiAgICAgICAgICBob3VycyA9ICsodXRjX29mZnNldFsxXSArIHV0Y19vZmZzZXRbMl0pO1xuICAgICAgICAgIG1pbnV0ZXMgPSArKHV0Y19vZmZzZXRbNF0gKyB1dGNfb2Zmc2V0WzVdKTtcblxuICAgICAgICAgIHRpbWV6b25lID0gKHNpZ24gPT0gJy0nID8gLTEgOiAxKSAqIChob3VycyArIG1pbnV0ZXMgLyA2MCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgLy8gVW5zdXBwb3J0ZWQ6IFwiQVwiLi5cIklcIixcIktcIi4uXCJaXCJcbiAgICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgJSdcIitISDpNTVwiLCBcIi1ISDpNTVwiLCBcIlVUQ1wiIGV4cGVjdGVkIGZvciB1dGNfb2Zmc2V0OiAje3V0Y19vZmZzZXR9J31cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAodXRjX29mZnNldC4kJGlzX251bWJlcikge1xuICAgICAgICB0aW1lem9uZSA9IHV0Y19vZmZzZXQgLyAzNjAwO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCBcIk9wYWwgZG9lc24ndCBzdXBwb3J0IG90aGVyIHR5cGVzIGZvciBhIHRpbWV6b25lIGFyZ3VtZW50IHRoYW4gSW50ZWdlciBhbmQgU3RyaW5nXCJ9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGltZXpvbmU7XG4gICAgfVxuICBlbmRcblxuICBkZWYgc2VsZi5sb2NhbCh5ZWFyLCBtb250aCA9IG5pbCwgZGF5ID0gbmlsLCBob3VyID0gbmlsLCBtaW4gPSBuaWwsIHNlYyA9IG5pbCwgbWlsbGlzZWNvbmQgPSBuaWwsIF9kdW1teTEgPSBuaWwsIF9kdW1teTIgPSBuaWwsIF9kdW1teTMgPSBuaWwpXG4gICAgIyBUaGUgX2R1bW15IGFyZ3MgYXJlIHRoZXJlIG9ubHkgYmVjYXVzZSB0aGUgTVJJIHZlcnNpb24gYWNjZXB0cyB1cCB0byAxMCBhcmd1bWVudHNcbiAgICAleHtcbiAgICAgIHZhciBhcmdzLCByZXN1bHQ7XG5cbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxMCkge1xuICAgICAgICBhcmdzICA9ICRzbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICAgIHllYXIgID0gYXJnc1s1XTtcbiAgICAgICAgbW9udGggPSBhcmdzWzRdO1xuICAgICAgICBkYXkgICA9IGFyZ3NbM107XG4gICAgICAgIGhvdXIgID0gYXJnc1syXTtcbiAgICAgICAgbWluICAgPSBhcmdzWzFdO1xuICAgICAgICBzZWMgICA9IGFyZ3NbMF07XG4gICAgICB9XG5cbiAgICAgIGFyZ3MgID0gdGltZV9wYXJhbXMoeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWluLCBzZWMpO1xuICAgICAgeWVhciAgPSBhcmdzWzBdO1xuICAgICAgbW9udGggPSBhcmdzWzFdO1xuICAgICAgZGF5ICAgPSBhcmdzWzJdO1xuICAgICAgaG91ciAgPSBhcmdzWzNdO1xuICAgICAgbWluICAgPSBhcmdzWzRdO1xuICAgICAgc2VjICAgPSBhcmdzWzVdO1xuXG4gICAgICByZXN1bHQgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW4sIDAsIHNlYyAqIDEwMDApO1xuICAgICAgaWYgKHllYXIgPCAxMDApIHtcbiAgICAgICAgcmVzdWx0LnNldEZ1bGxZZWFyKHllYXIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBzZWxmLmdtKHllYXIsIG1vbnRoID0gbmlsLCBkYXkgPSBuaWwsIGhvdXIgPSBuaWwsIG1pbiA9IG5pbCwgc2VjID0gbmlsLCBtaWxsaXNlY29uZCA9IG5pbCwgX2R1bW15MSA9IG5pbCwgX2R1bW15MiA9IG5pbCwgX2R1bW15MyA9IG5pbClcbiAgICAjIFRoZSBfZHVtbXkgYXJncyBhcmUgdGhlcmUgb25seSBiZWNhdXNlIHRoZSBNUkkgdmVyc2lvbiBhY2NlcHRzIHVwIHRvIDEwIGFyZ3VtZW50c1xuICAgICV4e1xuICAgICAgdmFyIGFyZ3MsIHJlc3VsdDtcblxuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEwKSB7XG4gICAgICAgIGFyZ3MgID0gJHNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgICAgeWVhciAgPSBhcmdzWzVdO1xuICAgICAgICBtb250aCA9IGFyZ3NbNF07XG4gICAgICAgIGRheSAgID0gYXJnc1szXTtcbiAgICAgICAgaG91ciAgPSBhcmdzWzJdO1xuICAgICAgICBtaW4gICA9IGFyZ3NbMV07XG4gICAgICAgIHNlYyAgID0gYXJnc1swXTtcbiAgICAgIH1cblxuICAgICAgYXJncyAgPSB0aW1lX3BhcmFtcyh5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW4sIHNlYyk7XG4gICAgICB5ZWFyICA9IGFyZ3NbMF07XG4gICAgICBtb250aCA9IGFyZ3NbMV07XG4gICAgICBkYXkgICA9IGFyZ3NbMl07XG4gICAgICBob3VyICA9IGFyZ3NbM107XG4gICAgICBtaW4gICA9IGFyZ3NbNF07XG4gICAgICBzZWMgICA9IGFyZ3NbNV07XG5cbiAgICAgIHJlc3VsdCA9IG5ldyBEYXRlKERhdGUuVVRDKHllYXIsIG1vbnRoLCBkYXksIGhvdXIsIG1pbiwgMCwgc2VjICogMTAwMCkpO1xuICAgICAgaWYgKHllYXIgPCAxMDApIHtcbiAgICAgICAgcmVzdWx0LnNldFVUQ0Z1bGxZZWFyKHllYXIpO1xuICAgICAgfVxuICAgICAgcmVzdWx0LnRpbWV6b25lID0gMDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICBlbmRcblxuICBkZWYgc2VsZi5ub3dcbiAgICBuZXdcbiAgZW5kXG5cbiAgZGVmICsob3RoZXIpXG4gICAgaWYgOjpUaW1lID09PSBvdGhlclxuICAgICAgOjpLZXJuZWwucmFpc2UgOjpUeXBlRXJyb3IsICd0aW1lICsgdGltZT8nXG4gICAgZW5kXG5cbiAgICAleHtcbiAgICAgIGlmICghb3RoZXIuJCRpc19udW1iZXIpIHtcbiAgICAgICAgb3RoZXIgPSAjezo6T3BhbC5jb2VyY2VfdG8hKG90aGVyLCA6OkludGVnZXIsIDp0b19pbnQpfTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBuZXcgRGF0ZShzZWxmLmdldFRpbWUoKSArIChvdGhlciAqIDEwMDApKTtcbiAgICAgIHJlc3VsdC50aW1lem9uZSA9IHNlbGYudGltZXpvbmU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIC0ob3RoZXIpXG4gICAgaWYgOjpUaW1lID09PSBvdGhlclxuICAgICAgcmV0dXJuIGAoc2VsZi5nZXRUaW1lKCkgLSBvdGhlci5nZXRUaW1lKCkpIC8gMTAwMGBcbiAgICBlbmRcblxuICAgICV4e1xuICAgICAgaWYgKCFvdGhlci4kJGlzX251bWJlcikge1xuICAgICAgICBvdGhlciA9ICN7OjpPcGFsLmNvZXJjZV90byEob3RoZXIsIDo6SW50ZWdlciwgOnRvX2ludCl9O1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBEYXRlKHNlbGYuZ2V0VGltZSgpIC0gKG90aGVyICogMTAwMCkpO1xuICAgICAgcmVzdWx0LnRpbWV6b25lID0gc2VsZi50aW1lem9uZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICBlbmRcblxuICBkZWYgPD0+KG90aGVyKVxuICAgIGlmIDo6VGltZSA9PT0gb3RoZXJcbiAgICAgIHRvX2YgPD0+IG90aGVyLnRvX2ZcbiAgICBlbHNlXG4gICAgICByID0gb3RoZXIgPD0+IHNlbGZcbiAgICAgIGlmIHIubmlsP1xuICAgICAgICBuaWxcbiAgICAgIGVsc2lmIHIgPiAwXG4gICAgICAgIC0xXG4gICAgICBlbHNpZiByIDwgMFxuICAgICAgICAxXG4gICAgICBlbHNlXG4gICAgICAgIDBcbiAgICAgIGVuZFxuICAgIGVuZFxuICBlbmRcblxuICBkZWYgPT0ob3RoZXIpXG4gICAgOjpUaW1lID09PSBvdGhlciAmJiBgI3t0b19mfSA9PT0gI3tvdGhlci50b19mfWBcbiAgZW5kXG5cbiAgZGVmIGFzY3RpbWVcbiAgICBzdHJmdGltZSAnJWEgJWIgJWUgJUg6JU06JVMgJVknXG4gIGVuZFxuXG4gIFtcbiAgICBbOnllYXIsICdnZXRGdWxsWWVhcicsICdnZXRVVENGdWxsWWVhciddLFxuICAgIFs6bW9uLCAnZ2V0TW9udGgnLCAnZ2V0VVRDTW9udGgnLCAxXSxcbiAgICBbOndkYXksICdnZXREYXknLCAnZ2V0VVRDRGF5J10sXG4gICAgWzpkYXksICdnZXREYXRlJywgJ2dldFVUQ0RhdGUnXSxcbiAgICBbOmhvdXIsICdnZXRIb3VycycsICdnZXRVVENIb3VycyddLFxuICAgIFs6bWluLCAnZ2V0TWludXRlcycsICdnZXRVVENNaW51dGVzJ10sXG4gICAgWzpzZWMsICdnZXRTZWNvbmRzJywgJ2dldFVUQ1NlY29uZHMnXSxcbiAgXS5lYWNoIGRvIHxtZXRob2QsIGdldHRlciwgdXRjZ2V0dGVyLCBkaWZmZXJlbmNlID0gMHxcbiAgICBkZWZpbmVfbWV0aG9kIG1ldGhvZCBkb1xuICAgICAgJXh7XG4gICAgICAgIHJldHVybiBkaWZmZXJlbmNlICsgKChzZWxmLnRpbWV6b25lICE9IG51bGwpID9cbiAgICAgICAgICAobmV3IERhdGUoc2VsZi5nZXRUaW1lKCkgKyBzZWxmLnRpbWV6b25lICogMzYwMDAwMCkpW3V0Y2dldHRlcl0oKSA6XG4gICAgICAgICAgc2VsZltnZXR0ZXJdKCkpXG4gICAgICB9XG4gICAgZW5kXG4gIGVuZFxuXG4gIGRlZiB5ZGF5XG4gICAgIyBodHRwOi8vamF2YXNjcmlwdC5hYm91dC5jb20vbGlicmFyeS9ibGRheXllYXIuaHRtXG4gICAgIyBhbHNvIHNlZSBtb21lbnQuanMgaW1wbGVtZW50YXRpb246IGh0dHA6Ly9naXQuaW8vdkNLTkVcblxuICAgIHN0YXJ0X29mX3llYXIgPSBUaW1lLm5ldyh5ZWFyKS50b19pXG4gICAgc3RhcnRfb2ZfZGF5ICA9IFRpbWUubmV3KHllYXIsIG1vbnRoLCBkYXkpLnRvX2lcbiAgICBvbmVfZGF5ICAgICAgID0gODZfNDAwXG5cbiAgICAoKHN0YXJ0X29mX2RheSAtIHN0YXJ0X29mX3llYXIpIC8gb25lX2RheSkucm91bmQgKyAxXG4gIGVuZFxuXG4gIGRlZiBpc2RzdFxuICAgICV4e1xuICAgICAgdmFyIGphbiA9IG5ldyBEYXRlKHNlbGYuZ2V0RnVsbFllYXIoKSwgMCwgMSksXG4gICAgICAgICAganVsID0gbmV3IERhdGUoc2VsZi5nZXRGdWxsWWVhcigpLCA2LCAxKTtcbiAgICAgIHJldHVybiBzZWxmLmdldFRpbWV6b25lT2Zmc2V0KCkgPCBNYXRoLm1heChqYW4uZ2V0VGltZXpvbmVPZmZzZXQoKSwganVsLmdldFRpbWV6b25lT2Zmc2V0KCkpO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGR1cFxuICAgIGNvcHkgPSBgbmV3IERhdGUoc2VsZi5nZXRUaW1lKCkpYFxuXG4gICAgY29weS5jb3B5X2luc3RhbmNlX3ZhcmlhYmxlcyhzZWxmKVxuICAgIGNvcHkuaW5pdGlhbGl6ZV9kdXAoc2VsZilcblxuICAgIGNvcHlcbiAgZW5kXG5cbiAgZGVmIGVxbD8ob3RoZXIpXG4gICAgb3RoZXIuaXNfYT8oOjpUaW1lKSAmJiAoc2VsZiA8PT4gb3RoZXIpLnplcm8/XG4gIGVuZFxuXG4gIFtcbiAgICBbOnN1bmRheT8sIDBdLFxuICAgIFs6bW9uZGF5PywgMV0sXG4gICAgWzp0dWVzZGF5PywgMl0sXG4gICAgWzp3ZWRuZXNkYXk/LCAzXSxcbiAgICBbOnRodXJzZGF5PywgNF0sXG4gICAgWzpmcmlkYXk/LCA1XSxcbiAgICBbOnNhdHVyZGF5PywgNl1cbiAgXS5lYWNoIGRvIHxtZXRob2QsIHdlZWtkYXl8XG4gICAgZGVmaW5lX21ldGhvZCBtZXRob2QgZG9cbiAgICAgIGAje3dkYXl9ID09PSB3ZWVrZGF5YFxuICAgIGVuZFxuICBlbmRcblxuICBkZWYgaGFzaFxuICAgIGAnVGltZTonICsgc2VsZi5nZXRUaW1lKClgXG4gIGVuZFxuXG4gIGRlZiBpbnNwZWN0XG4gICAgaWYgdXRjP1xuICAgICAgc3RyZnRpbWUgJyVZLSVtLSVkICVIOiVNOiVTIFVUQydcbiAgICBlbHNlXG4gICAgICBzdHJmdGltZSAnJVktJW0tJWQgJUg6JU06JVMgJXonXG4gICAgZW5kXG4gIGVuZFxuXG4gIGRlZiBzdWNjXG4gICAgJXh7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IERhdGUoc2VsZi5nZXRUaW1lKCkgKyAxMDAwKTtcbiAgICAgIHJlc3VsdC50aW1lem9uZSA9IHNlbGYudGltZXpvbmU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIHVzZWNcbiAgICBgc2VsZi5nZXRNaWxsaXNlY29uZHMoKSAqIDEwMDBgXG4gIGVuZFxuXG4gIGRlZiB6b25lXG4gICAgJXh7XG4gICAgICBpZiAoc2VsZi50aW1lem9uZSA9PT0gMCkgcmV0dXJuIFwiVVRDXCI7XG4gICAgICBlbHNlIGlmIChzZWxmLnRpbWV6b25lICE9IG51bGwpIHJldHVybiBuaWw7XG5cbiAgICAgIHZhciBzdHJpbmcgPSBzZWxmLnRvU3RyaW5nKCksXG4gICAgICAgICAgcmVzdWx0O1xuXG4gICAgICBpZiAoc3RyaW5nLmluZGV4T2YoJygnKSA9PSAtMSkge1xuICAgICAgICByZXN1bHQgPSBzdHJpbmcubWF0Y2goL1tBLVpdezMsNH0vKVswXTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBzdHJpbmcubWF0Y2goL1xcKCguKylcXCkoPzpcXHN8JCkvKVsxXVxuICAgICAgfVxuXG4gICAgICBpZiAocmVzdWx0ID09IFwiR01UXCIgJiYgLyhHTVRcXFcqXFxkezR9KS8udGVzdChzdHJpbmcpKSB7XG4gICAgICAgIHJldHVybiBSZWdFeHAuJDE7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBnZXRnbVxuICAgICV4e1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBEYXRlKHNlbGYuZ2V0VGltZSgpKTtcbiAgICAgIHJlc3VsdC50aW1lem9uZSA9IDA7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGdtdGltZVxuICAgICV4e1xuICAgICAgaWYgKHNlbGYudGltZXpvbmUgIT09IDApIHtcbiAgICAgICAgJGRlbnlfZnJvemVuX2FjY2VzcyhzZWxmKTtcbiAgICAgICAgc2VsZi50aW1lem9uZSA9IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBnbXQ/XG4gICAgYHNlbGYudGltZXpvbmUgPT09IDBgXG4gIGVuZFxuXG4gIGRlZiBnbXRfb2Zmc2V0XG4gICAgYChzZWxmLnRpbWV6b25lICE9IG51bGwpID8gc2VsZi50aW1lem9uZSAqIDYwIDogLXNlbGYuZ2V0VGltZXpvbmVPZmZzZXQoKSAqIDYwYFxuICBlbmRcblxuICBkZWYgc3RyZnRpbWUoZm9ybWF0KVxuICAgICV4e1xuICAgICAgcmV0dXJuIGZvcm1hdC5yZXBsYWNlKC8lKFtcXC1fI14wXSo6ezAsMn0pKFxcZCspPyhbRU9dKikoLikvZywgZnVuY3Rpb24oZnVsbCwgZmxhZ3MsIHdpZHRoLCBfLCBjb252KSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBcIlwiLCBqZCwgYywgcyxcbiAgICAgICAgICAgIHplcm8gICA9IGZsYWdzLmluZGV4T2YoJzAnKSAhPT0gLTEsXG4gICAgICAgICAgICBwYWQgICAgPSBmbGFncy5pbmRleE9mKCctJykgPT09IC0xLFxuICAgICAgICAgICAgYmxhbmsgID0gZmxhZ3MuaW5kZXhPZignXycpICE9PSAtMSxcbiAgICAgICAgICAgIHVwY2FzZSA9IGZsYWdzLmluZGV4T2YoJ14nKSAhPT0gLTEsXG4gICAgICAgICAgICBpbnZlcnQgPSBmbGFncy5pbmRleE9mKCcjJykgIT09IC0xLFxuICAgICAgICAgICAgY29sb25zID0gKGZsYWdzLm1hdGNoKCc6JykgfHwgW10pLmxlbmd0aDtcblxuICAgICAgICB3aWR0aCA9IHBhcnNlSW50KHdpZHRoLCAxMCk7XG5cbiAgICAgICAgaWYgKHplcm8gJiYgYmxhbmspIHtcbiAgICAgICAgICBpZiAoZmxhZ3MuaW5kZXhPZignMCcpIDwgZmxhZ3MuaW5kZXhPZignXycpKSB7XG4gICAgICAgICAgICB6ZXJvID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYmxhbmsgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKGNvbnYpIHtcbiAgICAgICAgICBjYXNlICdZJzpcbiAgICAgICAgICAgIHJlc3VsdCArPSAje3llYXJ9O1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdDJzpcbiAgICAgICAgICAgIHplcm8gICAgPSAhYmxhbms7XG4gICAgICAgICAgICByZXN1bHQgKz0gTWF0aC5yb3VuZCgje3llYXJ9IC8gMTAwKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAneSc6XG4gICAgICAgICAgICB6ZXJvICAgID0gIWJsYW5rO1xuICAgICAgICAgICAgcmVzdWx0ICs9ICgje3llYXJ9ICUgMTAwKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICB6ZXJvICAgID0gIWJsYW5rO1xuICAgICAgICAgICAgcmVzdWx0ICs9ICN7bW9ufTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnQic6XG4gICAgICAgICAgICByZXN1bHQgKz0gbG9uZ19tb250aHNbI3ttb259IC0gMV07XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ2InOlxuICAgICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgYmxhbmsgICA9ICF6ZXJvO1xuICAgICAgICAgICAgcmVzdWx0ICs9IHNob3J0X21vbnRoc1sje21vbn0gLSAxXTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICB6ZXJvICAgID0gIWJsYW5rXG4gICAgICAgICAgICByZXN1bHQgKz0gI3tkYXl9O1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdlJzpcbiAgICAgICAgICAgIGJsYW5rICAgPSAhemVyb1xuICAgICAgICAgICAgcmVzdWx0ICs9ICN7ZGF5fTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnaic6XG4gICAgICAgICAgICB6ZXJvICAgID0gIWJsYW5rO1xuICAgICAgICAgICAgd2lkdGggICA9IGlzTmFOKHdpZHRoKSA/IDMgOiB3aWR0aDtcbiAgICAgICAgICAgIHJlc3VsdCArPSAje3lkYXl9O1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdIJzpcbiAgICAgICAgICAgIHplcm8gICAgPSAhYmxhbms7XG4gICAgICAgICAgICByZXN1bHQgKz0gI3tob3VyfTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnayc6XG4gICAgICAgICAgICBibGFuayAgID0gIXplcm87XG4gICAgICAgICAgICByZXN1bHQgKz0gI3tob3VyfTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnSSc6XG4gICAgICAgICAgICB6ZXJvICAgID0gIWJsYW5rO1xuICAgICAgICAgICAgcmVzdWx0ICs9ICgje2hvdXJ9ICUgMTIgfHwgMTIpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdsJzpcbiAgICAgICAgICAgIGJsYW5rICAgPSAhemVybztcbiAgICAgICAgICAgIHJlc3VsdCArPSAoI3tob3VyfSAlIDEyIHx8IDEyKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnUCc6XG4gICAgICAgICAgICByZXN1bHQgKz0gKCN7aG91cn0gPj0gMTIgPyBcInBtXCIgOiBcImFtXCIpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdwJzpcbiAgICAgICAgICAgIHJlc3VsdCArPSAoI3tob3VyfSA+PSAxMiA/IFwiUE1cIiA6IFwiQU1cIik7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgemVybyAgICA9ICFibGFuaztcbiAgICAgICAgICAgIHJlc3VsdCArPSAje21pbn07XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ1MnOlxuICAgICAgICAgICAgemVybyAgICA9ICFibGFuaztcbiAgICAgICAgICAgIHJlc3VsdCArPSAje3NlY31cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnTCc6XG4gICAgICAgICAgICB6ZXJvICAgID0gIWJsYW5rO1xuICAgICAgICAgICAgd2lkdGggICA9IGlzTmFOKHdpZHRoKSA/IDMgOiB3aWR0aDtcbiAgICAgICAgICAgIHJlc3VsdCArPSBzZWxmLmdldE1pbGxpc2Vjb25kcygpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdOJzpcbiAgICAgICAgICAgIHdpZHRoICAgPSBpc05hTih3aWR0aCkgPyA5IDogd2lkdGg7XG4gICAgICAgICAgICByZXN1bHQgKz0gI3tgc2VsZi5nZXRNaWxsaXNlY29uZHMoKS50b1N0cmluZygpYC5yanVzdCgzLCAnMCcpfTtcbiAgICAgICAgICAgIHJlc3VsdCAgPSAje2ByZXN1bHRgLmxqdXN0KGB3aWR0aGAsICcwJyl9O1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICd6JzpcbiAgICAgICAgICAgIHZhciBvZmZzZXQgID0gKHNlbGYudGltZXpvbmUgPT0gbnVsbCkgPyBzZWxmLmdldFRpbWV6b25lT2Zmc2V0KCkgOiAoLXNlbGYudGltZXpvbmUgKiA2MCksXG4gICAgICAgICAgICAgICAgaG91cnMgICA9IE1hdGguZmxvb3IoTWF0aC5hYnMob2Zmc2V0KSAvIDYwKSxcbiAgICAgICAgICAgICAgICBtaW51dGVzID0gTWF0aC5hYnMob2Zmc2V0KSAlIDYwO1xuXG4gICAgICAgICAgICByZXN1bHQgKz0gb2Zmc2V0IDwgMCA/IFwiK1wiIDogXCItXCI7XG4gICAgICAgICAgICByZXN1bHQgKz0gaG91cnMgPCAxMCA/IFwiMFwiIDogXCJcIjtcbiAgICAgICAgICAgIHJlc3VsdCArPSBob3VycztcblxuICAgICAgICAgICAgaWYgKGNvbG9ucyA+IDApIHtcbiAgICAgICAgICAgICAgcmVzdWx0ICs9IFwiOlwiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXN1bHQgKz0gbWludXRlcyA8IDEwID8gXCIwXCIgOiBcIlwiO1xuICAgICAgICAgICAgcmVzdWx0ICs9IG1pbnV0ZXM7XG5cbiAgICAgICAgICAgIGlmIChjb2xvbnMgPiAxKSB7XG4gICAgICAgICAgICAgIHJlc3VsdCArPSBcIjowMFwiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ1onOlxuICAgICAgICAgICAgcmVzdWx0ICs9ICN7em9uZX07XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ0EnOlxuICAgICAgICAgICAgcmVzdWx0ICs9IGRheXNfb2Zfd2Vla1sje3dkYXl9XTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnYSc6XG4gICAgICAgICAgICByZXN1bHQgKz0gc2hvcnRfZGF5c1sje3dkYXl9XTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAndSc6XG4gICAgICAgICAgICByZXN1bHQgKz0gKCN7d2RheX0gKyAxKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICByZXN1bHQgKz0gI3t3ZGF5fTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnVic6XG4gICAgICAgICAgICByZXN1bHQgKz0gI3tjd2Vla19jeWVhclswXS50b19zLnJqdXN0KDIsICcwJyl9O1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdHJzpcbiAgICAgICAgICAgIHJlc3VsdCArPSAje2N3ZWVrX2N5ZWFyWzFdfTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnZyc6XG4gICAgICAgICAgICByZXN1bHQgKz0gI3tjd2Vla19jeWVhclsxXVstMi4uLTFdfTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAncyc6XG4gICAgICAgICAgICByZXN1bHQgKz0gI3t0b19pfTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnbic6XG4gICAgICAgICAgICByZXN1bHQgKz0gXCJcXG5cIjtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAndCc6XG4gICAgICAgICAgICByZXN1bHQgKz0gXCJcXHRcIjtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnJSc6XG4gICAgICAgICAgICByZXN1bHQgKz0gXCIlXCI7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ2MnOlxuICAgICAgICAgICAgcmVzdWx0ICs9ICN7c3RyZnRpbWUoJyVhICViICVlICVUICVZJyl9O1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICBjYXNlICd4JzpcbiAgICAgICAgICAgIHJlc3VsdCArPSAje3N0cmZ0aW1lKCclbS8lZC8leScpfTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnRic6XG4gICAgICAgICAgICByZXN1bHQgKz0gI3tzdHJmdGltZSgnJVktJW0tJWQnKX07XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ3YnOlxuICAgICAgICAgICAgcmVzdWx0ICs9ICN7c3RyZnRpbWUoJyVlLSVeYi0lNFknKX07XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ3InOlxuICAgICAgICAgICAgcmVzdWx0ICs9ICN7c3RyZnRpbWUoJyVJOiVNOiVTICVwJyl9O1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdSJzpcbiAgICAgICAgICAgIHJlc3VsdCArPSAje3N0cmZ0aW1lKCclSDolTScpfTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnVCc6XG4gICAgICAgICAgY2FzZSAnWCc6XG4gICAgICAgICAgICByZXN1bHQgKz0gI3tzdHJmdGltZSgnJUg6JU06JVMnKX07XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIC8vIE5vbi1zdGFuZGFyZDogSklTIFggMDMwMSBkYXRlIGZvcm1hdFxuICAgICAgICAgIGNhc2UgJ0onOlxuICAgICAgICAgICAgamQgPSAje3RvX2RhdGUuamR9O1xuICAgICAgICAgICAgaWYgKGpkIDwgMjQwNTE2MCkge1xuICAgICAgICAgICAgICByZXN1bHQgKz0gI3tzdHJmdGltZSgnJVktJW0tJWQnKX07XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoamQgPCAyNDE5NjE0KVxuICAgICAgICAgICAgICBjID0gJ00nLCBzID0gMTg2NztcbiAgICAgICAgICAgIGVsc2UgaWYgKGpkIDwgMjQyNDg3NSlcbiAgICAgICAgICAgICAgYyA9ICdUJywgcyA9IDE5MTE7XG4gICAgICAgICAgICBlbHNlIGlmIChqZCA8IDI0NDc1MzUpXG4gICAgICAgICAgICAgIGMgPSAnUycsIHMgPSAxOTI1O1xuICAgICAgICAgICAgZWxzZSBpZiAoamQgPCAyNDU4NjA1KVxuICAgICAgICAgICAgICBjID0gJ0gnLCBzID0gMTk4ODtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgYyA9ICdSJywgcyA9IDIwMTg7XG5cbiAgICAgICAgICAgIHJlc3VsdCArPSAje2Zvcm1hdCAnJWMlMDJkJywgYGNgLCB5ZWFyIC0gYHNgfTtcbiAgICAgICAgICAgIHJlc3VsdCArPSAje3N0cmZ0aW1lKCctJW0tJWQnKX07XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gZnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1cGNhc2UpIHtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQudG9VcHBlckNhc2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbnZlcnQpIHtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQucmVwbGFjZSgvW0EtWl0vLCBmdW5jdGlvbihjKSB7IGMudG9Mb3dlckNhc2UoKSB9KS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZSgvW2Etel0vLCBmdW5jdGlvbihjKSB7IGMudG9VcHBlckNhc2UoKSB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYWQgJiYgKHplcm8gfHwgYmxhbmspKSB7XG4gICAgICAgICAgcmVzdWx0ID0gI3tgcmVzdWx0YC5yanVzdChgaXNOYU4od2lkdGgpID8gMiA6IHdpZHRoYCwgYGJsYW5rID8gXCIgXCIgOiBcIjBcImApfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9KTtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiB0b19hXG4gICAgW3NlYywgbWluLCBob3VyLCBkYXksIG1vbnRoLCB5ZWFyLCB3ZGF5LCB5ZGF5LCBpc2RzdCwgem9uZV1cbiAgZW5kXG5cbiAgZGVmIHRvX2ZcbiAgICBgc2VsZi5nZXRUaW1lKCkgLyAxMDAwYFxuICBlbmRcblxuICBkZWYgdG9faVxuICAgIGBwYXJzZUludChzZWxmLmdldFRpbWUoKSAvIDEwMDAsIDEwKWBcbiAgZW5kXG5cbiAgZGVmIGN3ZWVrX2N5ZWFyXG4gICAgamFuMDEgPSA6OlRpbWUubmV3KHllYXIsIDEsIDEpXG4gICAgamFuMDFfd2RheSA9IGphbjAxLndkYXlcbiAgICBmaXJzdF9tb25kYXkgPSAwXG4gICAgeWVhciA9IHNlbGYueWVhclxuICAgIGlmIGphbjAxX3dkYXkgPD0gNCAmJiBqYW4wMV93ZGF5ICE9IDBcbiAgICAgICMgSmFuIDAxIGlzIGluIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyXG4gICAgICBvZmZzZXQgPSBqYW4wMV93ZGF5IC0gMVxuICAgIGVsc2VcbiAgICAgICMgSmFuIDAxIGlzIGluIHRoZSBsYXN0IHdlZWsgb2YgdGhlIHByZXZpb3VzIHllYXJcbiAgICAgIG9mZnNldCA9IGphbjAxX3dkYXkgLSA3IC0gMVxuICAgICAgb2Zmc2V0ID0gLTEgaWYgb2Zmc2V0ID09IC04ICMgQWRqdXN0IGlmIEphbiAwMSBpcyBhIFN1bmRheVxuICAgIGVuZFxuXG4gICAgd2VlayA9ICgoeWRheSArIG9mZnNldCkgLyA3LjAwKS5jZWlsXG5cbiAgICBpZiB3ZWVrIDw9IDBcbiAgICAgICMgR2V0IHRoZSBsYXN0IHdlZWsgb2YgdGhlIHByZXZpb3VzIHllYXJcbiAgICAgIHJldHVybiA6OlRpbWUubmV3KHNlbGYueWVhciAtIDEsIDEyLCAzMSkuY3dlZWtfY3llYXJcbiAgICBlbHNpZiB3ZWVrID09IDUzXG4gICAgICAjIEZpbmQgb3V0IHdoZXRoZXIgdGhpcyBpcyBhY3R1YWxseSB3ZWVrIDUzIG9yIGFscmVhZHkgd2VlayAwMSBvZiB0aGUgZm9sbG93aW5nIHllYXJcbiAgICAgIGRlYzMxID0gOjpUaW1lLm5ldyhzZWxmLnllYXIsIDEyLCAzMSlcbiAgICAgIGRlYzMxX3dkYXkgPSBkZWMzMS53ZGF5XG4gICAgICBpZiBkZWMzMV93ZGF5IDw9IDMgJiYgZGVjMzFfd2RheSAhPSAwXG4gICAgICAgIHdlZWsgPSAxXG4gICAgICAgIHllYXIgKz0gMVxuICAgICAgZW5kXG4gICAgZW5kXG5cbiAgICBbd2VlaywgeWVhcl1cbiAgZW5kXG5cbiAgY2xhc3MgPDwgc2VsZlxuICAgIGFsaWFzIG1rdGltZSBsb2NhbFxuICAgIGFsaWFzIHV0YyBnbVxuICBlbmRcblxuICBhbGlhcyBjdGltZSBhc2N0aW1lXG4gIGFsaWFzIGRzdD8gaXNkc3RcbiAgYWxpYXMgZ2V0dXRjIGdldGdtXG4gIGFsaWFzIGdtdG9mZiBnbXRfb2Zmc2V0XG4gIGFsaWFzIG1kYXkgZGF5XG4gIGFsaWFzIG1vbnRoIG1vblxuICBhbGlhcyB0b19zIGluc3BlY3RcbiAgYWxpYXMgdHZfc2VjIHRvX2lcbiAgYWxpYXMgdHZfdXNlYyB1c2VjXG4gIGFsaWFzIHV0YyBnbXRpbWVcbiAgYWxpYXMgdXRjPyBnbXQ/XG4gIGFsaWFzIHV0Y19vZmZzZXQgZ210X29mZnNldFxuZW5kXG4iXSwibmFtZXMiOlsiPHRvcCAocmVxdWlyZWQpPiIsInNlbGYiLCJyZXF1aXJlIiwiPGNsYXNzOlRpbWU+IiwiaW5jbHVkZSIsIkNvbXBhcmFibGUiLCJhdCIsInNlY29uZHMiLCJmcmFjIiwiVGltZSIsIj09PSIsIktlcm5lbCIsInJhaXNlIiwiVHlwZUVycm9yIiwiT3BhbCIsImNvZXJjZV90byEiLCJJbnRlZ2VyIiwicmVzcG9uZF90bz8iLCJ0b19zdHIiLCJ0b19pIiwiQXJndW1lbnRFcnJvciIsIm5ldyIsInllYXIiLCJtb250aCIsImRheSIsImhvdXIiLCJtaW4iLCJzZWMiLCJ1dGNfb2Zmc2V0IiwiX3BhcnNlX29mZnNldCIsImxvY2FsIiwibWlsbGlzZWNvbmQiLCJfZHVtbXkxIiwiX2R1bW15MiIsIl9kdW1teTMiLCJnbSIsIm5vdyIsIisiLCJvdGhlciIsIi0iLCI8PT4iLCJ0b19mIiwiciIsIm5pbD8iLCI+IiwiMCIsIi0xIiwiPCIsIjEiLCI9PSIsIiRyZXRfb3JfMSIsImFzY3RpbWUiLCJzdHJmdGltZSIsImVhY2giLCJibG9jayBpbiA8Y2xhc3M6VGltZT4iLCJtZXRob2QiLCJnZXR0ZXIiLCJ1dGNnZXR0ZXIiLCJkaWZmZXJlbmNlIiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiA8Y2xhc3M6VGltZT4iLCJkZWZpbmVfbWV0aG9kIiwiYmxvY2sgKDMgbGV2ZWxzKSBpbiA8Y2xhc3M6VGltZT4iLCJ5ZGF5Iiwic3RhcnRfb2ZfeWVhciIsInN0YXJ0X29mX2RheSIsIm9uZV9kYXkiLCI4NjQwMCIsIi8iLCJyb3VuZCIsImlzZHN0IiwiZHVwIiwiY29weSIsImNvcHlfaW5zdGFuY2VfdmFyaWFibGVzIiwiaW5pdGlhbGl6ZV9kdXAiLCJlcWw/IiwiaXNfYT8iLCJ6ZXJvPyIsIjIiLCIzIiwiNCIsIjUiLCI2Iiwid2Vla2RheSIsIndkYXkiLCJoYXNoIiwiaW5zcGVjdCIsInV0Yz8iLCJzdWNjIiwidXNlYyIsInpvbmUiLCJnZXRnbSIsImdtdGltZSIsImdtdD8iLCJnbXRfb2Zmc2V0IiwiZm9ybWF0IiwibW9uIiwicmp1c3QiLCJsanVzdCIsImN3ZWVrX2N5ZWFyIiwiW10iLCJ0b19zIiwiLTIiLCJ0b19kYXRlIiwiamQiLCJ0b19hIiwiamFuMDEiLCJqYW4wMV93ZGF5IiwiZmlyc3RfbW9uZGF5IiwiPD0iLCJvZmZzZXQiLCI3IiwiLTgiLCJ3ZWVrIiwiY2VpbCIsIjEyIiwiMzEiLCI1MyIsImRlYzMxIiwiZGVjMzFfd2RheSJdLCJtYXBwaW5ncyI6IkFBQUFBLCtCQUFBQSxnQkFBQUE7RUFBQUE7O0VBQUFBOztFQUVBQyxJQUFBQyxTQUFBQSxDQUFRRixvQkFBUkU7RUFFQUYsT0FBQUc7RUFBQUE7O0lBQUFBOzs7SUFDRUYsSUFBQUcsU0FBQUEsQ0FBUUMsaUJBQVJEOztBQUdGRCx1QkFBeUIsQ0FBR0EsUUFBSCxFQUFV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QUFNLE1BQU4sRUFBVyxNQUFYO0lBQ0FFLE9BQUEsYUFBTSxZQUFOLEVBQWlCLFlBQWpCO0VBN3dCRkEsR0FBTSxJQUFOQSxFQUFnQkgsSUFBaEJHO0FBSkFIOyJ9fSx7Im9mZnNldCI6eyJsaW5lIjo0MjQwLCJjb2x1bW4iOjB9LCJtYXAiOnsidmVyc2lvbiI6Mywic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29yZWxpYi91bnN1cHBvcnRlZC5yYiJdLCJzb3VyY2VzQ29udGVudCI6WyIleHtcbiAgdmFyIHdhcm5pbmdzID0ge307XG5cbiAgZnVuY3Rpb24gaGFuZGxlX3Vuc3VwcG9ydGVkX2ZlYXR1cmUobWVzc2FnZSkge1xuICAgIHN3aXRjaCAoT3BhbC5jb25maWcudW5zdXBwb3J0ZWRfZmVhdHVyZXNfc2V2ZXJpdHkpIHtcbiAgICBjYXNlICdlcnJvcic6XG4gICAgICAjezo6S2VybmVsLnJhaXNlIDo6Tm90SW1wbGVtZW50ZWRFcnJvciwgYG1lc3NhZ2VgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnd2FybmluZyc6XG4gICAgICB3YXJuKG1lc3NhZ2UpXG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OiAvLyBpZ25vcmVcbiAgICAgIC8vIG5vb3BcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB3YXJuKHN0cmluZykge1xuICAgIGlmICh3YXJuaW5nc1tzdHJpbmddKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2FybmluZ3Nbc3RyaW5nXSA9IHRydWU7XG4gICAgI3t3YXJuKGBzdHJpbmdgKX07XG4gIH1cbn1cblxuY2xhc3MgOjpTdHJpbmdcbiAgYHZhciBFUlJPUiA9IFwiU3RyaW5nIyVzIG5vdCBzdXBwb3J0ZWQuIE11dGFibGUgU3RyaW5nIG1ldGhvZHMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gT3BhbC5cImBcblxuICAlaVtcbiAgICA8PCBjYXBpdGFsaXplISBjaG9tcCEgY2hvcCEgZG93bmNhc2UhIGdzdWIhIGxzdHJpcCEgbmV4dCEgcmV2ZXJzZSFcbiAgICBzbGljZSEgc3F1ZWV6ZSEgc3RyaXAhIHN1YiEgc3VjYyEgc3dhcGNhc2UhIHRyISB0cl9zISB1cGNhc2UhIHByZXBlbmRcbiAgICBbXT0gY2xlYXIgZW5jb2RlISB1bmljb2RlX25vcm1hbGl6ZSFcbiAgXS5lYWNoIGRvIHxtZXRob2RfbmFtZXxcbiAgICBkZWZpbmVfbWV0aG9kIG1ldGhvZF9uYW1lIGRvIHwqfFxuICAgICAgOjpLZXJuZWwucmFpc2UgOjpOb3RJbXBsZW1lbnRlZEVycm9yLCBgRVJST1JgICUgbWV0aG9kX25hbWVcbiAgICBlbmRcbiAgZW5kXG5lbmRcblxubW9kdWxlIDo6S2VybmVsXG4gIGB2YXIgRVJST1IgPSBcIk9iamVjdCB0YWludGluZyBpcyBub3Qgc3VwcG9ydGVkIGJ5IE9wYWxcImBcblxuICBkZWYgdGFpbnRcbiAgICBgaGFuZGxlX3Vuc3VwcG9ydGVkX2ZlYXR1cmUoRVJST1IpYFxuICAgIHNlbGZcbiAgZW5kXG5cbiAgZGVmIHVudGFpbnRcbiAgICBgaGFuZGxlX3Vuc3VwcG9ydGVkX2ZlYXR1cmUoRVJST1IpYFxuICAgIHNlbGZcbiAgZW5kXG5cbiAgZGVmIHRhaW50ZWQ/XG4gICAgYGhhbmRsZV91bnN1cHBvcnRlZF9mZWF0dXJlKEVSUk9SKWBcbiAgICBmYWxzZVxuICBlbmRcbmVuZFxuXG5jbGFzcyA6Ok1vZHVsZVxuICBkZWYgcHVibGljKCptZXRob2RzKVxuICAgICV4e1xuICAgICAgaWYgKG1ldGhvZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHNlbGYuJCRtb2R1bGVfZnVuY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIG5pbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAobWV0aG9kcy5sZW5ndGggPT09IDEpID8gbWV0aG9kc1swXSA6IG1ldGhvZHM7XG4gICAgfVxuICBlbmRcblxuICBkZWYgcHJpdmF0ZV9jbGFzc19tZXRob2QoKm1ldGhvZHMpXG4gICAgYHJldHVybiAobWV0aG9kcy5sZW5ndGggPT09IDEpID8gbWV0aG9kc1swXSA6IG1ldGhvZHNgXG4gIGVuZFxuXG4gIGRlZiBwcml2YXRlX21ldGhvZF9kZWZpbmVkPyhvYmopXG4gICAgZmFsc2VcbiAgZW5kXG5cbiAgZGVmIHByaXZhdGVfY29uc3RhbnQoKilcbiAgZW5kXG5cbiAgYWxpYXMgbmVzdGluZyBwdWJsaWNcbiAgYWxpYXMgcHJpdmF0ZSBwdWJsaWNcbiAgYWxpYXMgcHJvdGVjdGVkIHB1YmxpY1xuICBhbGlhcyBwcm90ZWN0ZWRfbWV0aG9kX2RlZmluZWQ/IHByaXZhdGVfbWV0aG9kX2RlZmluZWQ/XG4gIGFsaWFzIHB1YmxpY19jbGFzc19tZXRob2QgcHJpdmF0ZV9jbGFzc19tZXRob2RcbiAgYWxpYXMgcHVibGljX2luc3RhbmNlX21ldGhvZCBpbnN0YW5jZV9tZXRob2RcbiAgYWxpYXMgcHVibGljX2luc3RhbmNlX21ldGhvZHMgaW5zdGFuY2VfbWV0aG9kc1xuICBhbGlhcyBwdWJsaWNfbWV0aG9kX2RlZmluZWQ/IG1ldGhvZF9kZWZpbmVkP1xuZW5kXG5cbm1vZHVsZSA6Oktlcm5lbFxuICBkZWYgcHJpdmF0ZV9tZXRob2RzKCptZXRob2RzKVxuICAgIFtdXG4gIGVuZFxuXG4gIGFsaWFzIHByb3RlY3RlZF9tZXRob2RzIHByaXZhdGVfbWV0aG9kc1xuICBhbGlhcyBwcml2YXRlX2luc3RhbmNlX21ldGhvZHMgcHJpdmF0ZV9tZXRob2RzXG4gIGFsaWFzIHByb3RlY3RlZF9pbnN0YW5jZV9tZXRob2RzIHByaXZhdGVfbWV0aG9kc1xuZW5kXG5cbm1vZHVsZSA6Oktlcm5lbFxuICBkZWYgZXZhbCgqKVxuICAgIDo6S2VybmVsLnJhaXNlIDo6Tm90SW1wbGVtZW50ZWRFcnJvciwgXCJUbyB1c2UgS2VybmVsI2V2YWwsIHlvdSBtdXN0IGZpcnN0IHJlcXVpcmUgJ29wYWwtcGFyc2VyJy4gXCJcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJTZWUgaHR0cHM6Ly9naXRodWIuY29tL29wYWwvb3BhbC9ibG9iLyN7UlVCWV9FTkdJTkVfVkVSU0lPTn0vZG9jcy9vcGFsX3BhcnNlci5tZCBmb3IgZGV0YWlscy5cIlxuICBlbmRcbmVuZFxuXG5kZWYgc2VsZi5wdWJsaWMoKm1ldGhvZHMpXG4gIGByZXR1cm4gKG1ldGhvZHMubGVuZ3RoID09PSAxKSA/IG1ldGhvZHNbMF0gOiBtZXRob2RzYFxuZW5kXG5cbmRlZiBzZWxmLnByaXZhdGUoKm1ldGhvZHMpXG4gIGByZXR1cm4gKG1ldGhvZHMubGVuZ3RoID09PSAxKSA/IG1ldGhvZHNbMF0gOiBtZXRob2RzYFxuZW5kXG4iXSwibmFtZXMiOlsiPHRvcCAocmVxdWlyZWQpPiIsIktlcm5lbCIsInJhaXNlIiwiTm90SW1wbGVtZW50ZWRFcnJvciIsInNlbGYiLCJ3YXJuIiwiPGNsYXNzOlN0cmluZz4iLCJlYWNoIiwiYmxvY2sgaW4gPGNsYXNzOlN0cmluZz4iLCJtZXRob2RfbmFtZSIsImJsb2NrICgyIGxldmVscykgaW4gPGNsYXNzOlN0cmluZz4iLCJkZWZpbmVfbWV0aG9kIiwiYmxvY2sgKDMgbGV2ZWxzKSBpbiA8Y2xhc3M6U3RyaW5nPiIsIiUiLCI8bW9kdWxlOktlcm5lbD4iLCJ0YWludCIsInVudGFpbnQiLCJ0YWludGVkPyIsIjxjbGFzczpNb2R1bGU+IiwicHVibGljIiwicHJpdmF0ZV9jbGFzc19tZXRob2QiLCJwcml2YXRlX21ldGhvZF9kZWZpbmVkPyIsInByaXZhdGVfY29uc3RhbnQiLCJwcml2YXRlX21ldGhvZHMiLCJldmFsIiwiUlVCWV9FTkdJTkVfVkVSU0lPTiIsInByaXZhdGUiXSwibWFwcGluZ3MiOiJBQUFBQSxzQ0FBQUEsZ0JBQUFBO0VBQUFBOztFQUFBQTs7O0FBQ0FBOztBQUVBQTtBQUNBQTtBQUNBQTtBQUNBQSxNQUFRQyxPQUFRQyxPQUFBQSxDQUFPQywwQkFBZixFQUF1Q0gsT0FBL0JFO0FBQ2hCRjtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTs7QUFFQUE7QUFDQUE7QUFDQUE7QUFDQUE7O0FBRUFBO0FBQ0FBLElBQU1JLElB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O0FBQUFBLE1BQUFBOzs7TUF0R0Y7TUFzR1c7TUFDUEEsT0FBQXZCLE9BQVFDLE9BQUFBLENBQU9DLDBCQUFmLEVBQXNDcUIsNERBQUEsR0FBQSxDQUNDQSx3Q0FBRCxHQUFBLENBQXlDQyx5QkFBekMsQ0FBQSxHQUE2REQsbUNBRDdELENBQTlCdEI7SUFEVnNCLENBQUFBLElBQUFBO0VBREZWLEdBQU8sSUFBUEE7RUFPQUssTUFBSWYsSUFBSmUsYUFBQUEsbUJBNUdBLEVBNEdBQTtBQUFBQSxJQUFBQTs7O0lBNUdBO0lBNEdnQjtJQUNiQSxvREFBREE7RUFERkEsQ0FBQUEsSUFBQUE7RUFJQW5CLE9BQUEwQixNQUFJdEIsSUFBSnNCLGNBQUFBLG9CQWhIQSxFQWdIQUE7QUFBQUEsSUFBQUE7OztJQWhIQTtJQWdIaUI7SUFDZEEsb0RBQURBO0VBREZBLENBQUFBLElBQUFBO0FBaEhBMUI7In19LHsib2Zmc2V0Ijp7ImxpbmUiOjQ0MTUsImNvbHVtbiI6MH0sIm1hcCI6eyJ2ZXJzaW9uIjozLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb3JlbGliL3N0cmluZy9lbmNvZGluZy5yYiJdLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlICdjb3JlbGliL3N0cmluZydcblxuY2xhc3MgOjpFbmNvZGluZ1xuICBkZWYgc2VsZi5yZWdpc3RlcihuYW1lLCBvcHRpb25zID0ge30sICZibG9jaylcbiAgICBuYW1lcyA9IFtuYW1lXSArIChvcHRpb25zWzphbGlhc2VzXSB8fCBbXSlcbiAgICBhc2NpaSA9IG9wdGlvbnNbOmFzY2lpXSB8fCBmYWxzZVxuICAgIGR1bW15ID0gb3B0aW9uc1s6ZHVtbXldIHx8IGZhbHNlXG5cbiAgICBpZiBvcHRpb25zWzppbmhlcml0c11cbiAgICAgIGVuY29kaW5nID0gb3B0aW9uc1s6aW5oZXJpdHNdLmNsb25lXG4gICAgICBlbmNvZGluZy5pbml0aWFsaXplKG5hbWUsIG5hbWVzLCBhc2NpaSwgZHVtbXkpXG4gICAgZWxzZVxuICAgICAgZW5jb2RpbmcgPSBuZXcobmFtZSwgbmFtZXMsIGFzY2lpLCBkdW1teSlcbiAgICBlbmRcbiAgICBlbmNvZGluZy5pbnN0YW5jZV9ldmFsKCZibG9jaykgaWYgYmxvY2tfZ2l2ZW4/XG5cbiAgICByZWdpc3RlciA9IGBPcGFsLmVuY29kaW5nc2BcbiAgICBuYW1lcy5lYWNoIGRvIHxlbmNvZGluZ19uYW1lfFxuICAgICAgY29uc3Rfc2V0IGVuY29kaW5nX25hbWUudHIoJy0nLCAnXycpLCBlbmNvZGluZ1xuICAgICAgcmVnaXN0ZXIuSlNbZW5jb2RpbmdfbmFtZV0gPSBlbmNvZGluZ1xuICAgIGVuZFxuICBlbmRcblxuICBkZWYgc2VsZi5maW5kKG5hbWUpXG4gICAgcmV0dXJuIGRlZmF1bHRfZXh0ZXJuYWwgaWYgbmFtZSA9PSA6ZGVmYXVsdF9leHRlcm5hbFxuICAgIGByZXR1cm4gT3BhbC5maW5kX2VuY29kaW5nKG5hbWUpYFxuICBlbmRcblxuICBzaW5nbGV0b25fY2xhc3MuYXR0cl9hY2Nlc3NvciA6ZGVmYXVsdF9leHRlcm5hbFxuXG4gIGF0dHJfcmVhZGVyIDpuYW1lLCA6bmFtZXNcblxuICBkZWYgaW5pdGlhbGl6ZShuYW1lLCBuYW1lcywgYXNjaWksIGR1bW15KVxuICAgIEBuYW1lICA9IG5hbWVcbiAgICBAbmFtZXMgPSBuYW1lc1xuICAgIEBhc2NpaSA9IGFzY2lpXG4gICAgQGR1bW15ID0gZHVtbXlcbiAgZW5kXG5cbiAgZGVmIGFzY2lpX2NvbXBhdGlibGU/XG4gICAgQGFzY2lpXG4gIGVuZFxuXG4gIGRlZiBkdW1teT9cbiAgICBAZHVtbXlcbiAgZW5kXG5cbiAgZGVmIGJpbmFyeT9cbiAgICBmYWxzZVxuICBlbmRcblxuICBkZWYgdG9fc1xuICAgIEBuYW1lXG4gIGVuZFxuXG4gIGRlZiBpbnNwZWN0XG4gICAgXCIjPEVuY29kaW5nOiN7QG5hbWV9I3snIChkdW1teSknIGlmIEBkdW1teX0+XCJcbiAgZW5kXG5cbiAgIyBtZXRob2RzIHRvIGltcGxlbWVudCBwZXIgZW5jb2RpbmdcbiAgZGVmIGNoYXJzaXplKHN0cmluZylcbiAgICAleHtcbiAgICAgIHZhciBsZW4gPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY2hhcmNvZGUgPSBzdHJpbmcuY2hhckNvZGVBdChpKTtcbiAgICAgICAgaWYgKCEoY2hhcmNvZGUgPj0gMHhEODAwICYmIGNoYXJjb2RlIDw9IDB4REJGRikpIHtcbiAgICAgICAgICBsZW4rKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGxlbjtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBlYWNoX2NoYXIoc3RyaW5nLCAmYmxvY2spXG4gICAgJXh7XG4gICAgICB2YXIgbG93X3N1cnJvZ2F0ZSA9IFwiXCI7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjaGFyY29kZSA9IHN0cmluZy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICB2YXIgY2hyID0gc3RyaW5nLmNoYXJBdChpKTtcbiAgICAgICAgaWYgKGNoYXJjb2RlID49IDB4REMwMCAmJiBjaGFyY29kZSA8PSAweERGRkYpIHtcbiAgICAgICAgICBsb3dfc3Vycm9nYXRlID0gY2hyO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNoYXJjb2RlID49IDB4RDgwMCAmJiBjaGFyY29kZSA8PSAweERCRkYpIHtcbiAgICAgICAgICBjaHIgPSBsb3dfc3Vycm9nYXRlICsgY2hyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdHJpbmcuZW5jb2RpbmcubmFtZSAhPSBcIlVURi04XCIpIHtcbiAgICAgICAgICBjaHIgPSBuZXcgU3RyaW5nKGNocik7XG4gICAgICAgICAgY2hyLmVuY29kaW5nID0gc3RyaW5nLmVuY29kaW5nO1xuICAgICAgICB9XG4gICAgICAgIE9wYWwueWllbGQxKGJsb2NrLCBjaHIpO1xuICAgICAgfVxuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGVhY2hfYnl0ZSgqKVxuICAgIDo6S2VybmVsLnJhaXNlIDo6Tm90SW1wbGVtZW50ZWRFcnJvclxuICBlbmRcblxuICBkZWYgYnl0ZXNpemUoKilcbiAgICA6Oktlcm5lbC5yYWlzZSA6Ok5vdEltcGxlbWVudGVkRXJyb3JcbiAgZW5kXG5cbiAgY2xhc3MgOjpFbmNvZGluZ0Vycm9yIDwgOjpTdGFuZGFyZEVycm9yOyBlbmRcbiAgY2xhc3MgOjpDb21wYXRpYmlsaXR5RXJyb3IgPCA6OkVuY29kaW5nRXJyb3I7IGVuZFxuZW5kXG5cbjo6RW5jb2RpbmcucmVnaXN0ZXIgJ1VURi04JywgYWxpYXNlczogWydDUDY1MDAxJ10sIGFzY2lpOiB0cnVlIGRvXG4gIGRlZiBlYWNoX2J5dGUoc3RyaW5nLCAmYmxvY2spXG4gICAgJXh7XG4gICAgICAvLyBUYWtlbiBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9ibG9iL2Y1MmRmZmQ5ZGYwNDQ1YjkzYzBjOTA2NWMyZjhmMGY0NmIyYzcyOWEvaW5kZXguanMjTDE5NTQtTDIwMzJcbiAgICAgIHZhciB1bml0cyA9IEluZmluaXR5O1xuICAgICAgdmFyIGNvZGVQb2ludDtcbiAgICAgIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpO1xuXG4gICAgICAgIC8vIGlzIHN1cnJvZ2F0ZSBjb21wb25lbnRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHtcbiAgICAgICAgICAgICAgLy8gdW5leHBlY3RlZCB0cmFpbFxuICAgICAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAje3lpZWxkIGAweEVGYH07XG4gICAgICAgICAgICAgICAgI3t5aWVsZCBgMHhCRmB9O1xuICAgICAgICAgICAgICAgICN7eWllbGQgYDB4QkRgfTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkge1xuICAgICAgICAgICAgICAgICN7eWllbGQgYDB4RUZgfTtcbiAgICAgICAgICAgICAgICAje3lpZWxkIGAweEJGYH07XG4gICAgICAgICAgICAgICAgI3t5aWVsZCBgMHhCRGB9O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyB2YWxpZCBsZWFkXG4gICAgICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50O1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICAgICAgaWYgKGNvZGVQb2ludCA8IDB4REMwMCkge1xuICAgICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSB7XG4gICAgICAgICAgICAgICN7eWllbGQgYDB4RUZgfTtcbiAgICAgICAgICAgICAgI3t5aWVsZCBgMHhCRmB9O1xuICAgICAgICAgICAgICAje3lpZWxkIGAweEJEYH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50O1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwO1xuICAgICAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSB7XG4gICAgICAgICAgICAje3lpZWxkIGAweEVGYH07XG4gICAgICAgICAgICAje3lpZWxkIGAweEJGYH07XG4gICAgICAgICAgICAje3lpZWxkIGAweEJEYH07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGw7XG5cbiAgICAgICAgLy8gZW5jb2RlIHV0ZjhcbiAgICAgICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWs7XG4gICAgICAgICAgI3t5aWVsZCBgY29kZVBvaW50YH07XG4gICAgICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWs7XG4gICAgICAgICAgI3t5aWVsZCBgY29kZVBvaW50ID4+IDB4NiB8IDB4QzBgfTtcbiAgICAgICAgICAje3lpZWxkIGBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MGB9O1xuICAgICAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWs7XG4gICAgICAgICAgI3t5aWVsZCBgY29kZVBvaW50ID4+IDB4QyB8IDB4RTBgfTtcbiAgICAgICAgICAje3lpZWxkIGBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODBgfTtcbiAgICAgICAgICAje3lpZWxkIGBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MGB9O1xuICAgICAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrO1xuICAgICAgICAgICN7eWllbGQgYGNvZGVQb2ludCA+PiAweDEyIHwgMHhGMGB9O1xuICAgICAgICAgICN7eWllbGQgYGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MGB9O1xuICAgICAgICAgICN7eWllbGQgYGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MGB9O1xuICAgICAgICAgICN7eWllbGQgYGNvZGVQb2ludCAmIDB4M0YgfCAweDgwYH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gSW52YWxpZCBjb2RlIHBvaW50XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBieXRlc2l6ZShzdHJpbmcpXG4gICAgc3RyaW5nLmJ5dGVzLmxlbmd0aFxuICBlbmRcbmVuZFxuXG46OkVuY29kaW5nLnJlZ2lzdGVyICdVVEYtMTZMRScgZG9cbiAgZGVmIGVhY2hfYnl0ZShzdHJpbmcsICZibG9jaylcbiAgICAleHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBzdHJpbmcubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNvZGUgPSBzdHJpbmcuY2hhckNvZGVBdChpKTtcblxuICAgICAgICAje3lpZWxkIGBjb2RlICYgMHhmZmB9O1xuICAgICAgICAje3lpZWxkIGBjb2RlID4+IDhgfTtcbiAgICAgIH1cbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBieXRlc2l6ZShzdHJpbmcpXG4gICAgYHN0cmluZy5sZW5ndGggKiAyYFxuICBlbmRcbmVuZFxuXG46OkVuY29kaW5nLnJlZ2lzdGVyICdVVEYtMTZCRScsIGluaGVyaXRzOiA6OkVuY29kaW5nOjpVVEZfMTZMRSBkb1xuICBkZWYgZWFjaF9ieXRlKHN0cmluZywgJmJsb2NrKVxuICAgICV4e1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY29kZSA9IHN0cmluZy5jaGFyQ29kZUF0KGkpO1xuXG4gICAgICAgICN7eWllbGQgYGNvZGUgPj4gOGB9O1xuICAgICAgICAje3lpZWxkIGBjb2RlICYgMHhmZmB9O1xuICAgICAgfVxuICAgIH1cbiAgZW5kXG5lbmRcblxuOjpFbmNvZGluZy5yZWdpc3RlciAnVVRGLTMyTEUnIGRvXG4gIGRlZiBlYWNoX2J5dGUoc3RyaW5nLCAmYmxvY2spXG4gICAgJXh7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjb2RlID0gc3RyaW5nLmNoYXJDb2RlQXQoaSk7XG5cbiAgICAgICAgI3t5aWVsZCBgY29kZSAmIDB4ZmZgfTtcbiAgICAgICAgI3t5aWVsZCBgY29kZSA+PiA4YH07XG4gICAgICAgICN7eWllbGQgMH07XG4gICAgICAgICN7eWllbGQgMH07XG4gICAgICB9XG4gICAgfVxuICBlbmRcblxuICBkZWYgYnl0ZXNpemUoc3RyaW5nKVxuICAgIGBzdHJpbmcubGVuZ3RoICogNGBcbiAgZW5kXG5lbmRcblxuOjpFbmNvZGluZy5yZWdpc3RlciAnVVRGLTMyQkUnLCBpbmhlcml0czogOjpFbmNvZGluZzo6VVRGXzMyTEUgZG9cbiAgZGVmIGVhY2hfYnl0ZShzdHJpbmcsICZibG9jaylcbiAgICAleHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBzdHJpbmcubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNvZGUgPSBzdHJpbmcuY2hhckNvZGVBdChpKTtcblxuICAgICAgICAje3lpZWxkIDB9O1xuICAgICAgICAje3lpZWxkIDB9O1xuICAgICAgICAje3lpZWxkIGBjb2RlID4+IDhgfTtcbiAgICAgICAgI3t5aWVsZCBgY29kZSAmIDB4ZmZgfTtcbiAgICAgIH1cbiAgICB9XG4gIGVuZFxuZW5kXG5cbjo6RW5jb2RpbmcucmVnaXN0ZXIgJ0FTQ0lJLThCSVQnLCBhbGlhc2VzOiBbJ0JJTkFSWSddLCBhc2NpaTogdHJ1ZSBkb1xuICBkZWYgZWFjaF9jaGFyKHN0cmluZywgJmJsb2NrKVxuICAgICV4e1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY2hyID0gbmV3IFN0cmluZyhzdHJpbmcuY2hhckF0KGkpKTtcbiAgICAgICAgY2hyLmVuY29kaW5nID0gc3RyaW5nLmVuY29kaW5nO1xuICAgICAgICAje3lpZWxkIGBjaHJgfTtcbiAgICAgIH1cbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBjaGFyc2l6ZShzdHJpbmcpXG4gICAgYHN0cmluZy5sZW5ndGhgXG4gIGVuZFxuXG4gIGRlZiBlYWNoX2J5dGUoc3RyaW5nLCAmYmxvY2spXG4gICAgJXh7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjb2RlID0gc3RyaW5nLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICN7eWllbGQgYGNvZGUgJiAweGZmYH07XG4gICAgICB9XG4gICAgfVxuICBlbmRcblxuICBkZWYgYnl0ZXNpemUoc3RyaW5nKVxuICAgIGBzdHJpbmcubGVuZ3RoYFxuICBlbmRcblxuICBkZWYgYmluYXJ5P1xuICAgIHRydWVcbiAgZW5kXG5lbmRcblxuOjpFbmNvZGluZy5yZWdpc3RlciAnSVNPLTg4NTktMScsIGFsaWFzZXM6IFsnSVNPODg1OS0xJ10sIGFzY2lpOiB0cnVlLCBpbmhlcml0czogOjpFbmNvZGluZzo6QVNDSUlfOEJJVFxuOjpFbmNvZGluZy5yZWdpc3RlciAnVVMtQVNDSUknLCBhbGlhc2VzOiBbJ0FTQ0lJJ10sIGFzY2lpOiB0cnVlLCBpbmhlcml0czogOjpFbmNvZGluZzo6QVNDSUlfOEJJVFxuXG5jbGFzcyA6OlN0cmluZ1xuICBhdHRyX3JlYWRlciA6ZW5jb2RpbmdcbiAgYXR0cl9yZWFkZXIgOmludGVybmFsX2VuY29kaW5nXG4gIGBPcGFsLnByb3AoU3RyaW5nLnByb3RvdHlwZSwgJ2J5dGVzJywgbmlsKWBcbiAgYE9wYWwucHJvcChTdHJpbmcucHJvdG90eXBlLCAnZW5jb2RpbmcnLCAjezo6RW5jb2Rpbmc6OlVURl84fSlgXG4gIGBPcGFsLnByb3AoU3RyaW5nLnByb3RvdHlwZSwgJ2ludGVybmFsX2VuY29kaW5nJywgI3s6OkVuY29kaW5nOjpVVEZfOH0pYFxuXG4gIGRlZiBiXG4gICAgZHVwLmZvcmNlX2VuY29kaW5nKCdiaW5hcnknKVxuICBlbmRcblxuICBkZWYgYnl0ZXNpemVcbiAgICBAaW50ZXJuYWxfZW5jb2RpbmcuYnl0ZXNpemUoc2VsZilcbiAgZW5kXG5cbiAgZGVmIGVhY2hfYnl0ZSgmYmxvY2spXG4gICAgcmV0dXJuIGVudW1fZm9yKDplYWNoX2J5dGUpIHsgYnl0ZXNpemUgfSB1bmxlc3MgYmxvY2tfZ2l2ZW4/XG5cbiAgICBAaW50ZXJuYWxfZW5jb2RpbmcuZWFjaF9ieXRlKHNlbGYsICZibG9jaylcblxuICAgIHNlbGZcbiAgZW5kXG5cbiAgZGVmIGJ5dGVzXG4gICAgIyBSRU1JTkQ6IHJlcXVpcmVkIHdoZW4gcnVubmluZyBpbiBzdHJpY3QgbW9kZSwgb3RoZXJ3aXNlIHRoZSBmb2xsb3dpbmcgZXJyb3Igd2lsbCBiZSB0aHJvd246XG4gICAgIyBDYW5ub3QgY3JlYXRlIHByb3BlcnR5ICdieXRlcycgb24gc3RyaW5nICdhYmMnXG4gICAgJXh7XG4gICAgICBpZiAodHlwZW9mIHNlbGYgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiAje2BuZXcgU3RyaW5nKHNlbGYpYC5lYWNoX2J5dGUudG9fYX07XG4gICAgICB9XG4gICAgfVxuXG4gICAgQGJ5dGVzIHx8PSBlYWNoX2J5dGUudG9fYVxuICAgIEBieXRlcy5kdXBcbiAgZW5kXG5cbiAgZGVmIGVhY2hfY2hhcigmYmxvY2spXG4gICAgcmV0dXJuIGVudW1fZm9yKDplYWNoX2NoYXIpIHsgbGVuZ3RoIH0gdW5sZXNzIGJsb2NrX2dpdmVuP1xuXG4gICAgQGVuY29kaW5nLmVhY2hfY2hhcihzZWxmLCAmYmxvY2spXG5cbiAgICBzZWxmXG4gIGVuZFxuXG4gIGRlZiBjaGFycygmYmxvY2spXG4gICAgcmV0dXJuIGVhY2hfY2hhci50b19hIHVubGVzcyBibG9ja1xuXG4gICAgZWFjaF9jaGFyKCZibG9jaylcbiAgZW5kXG5cbiAgZGVmIGVhY2hfY29kZXBvaW50KCZibG9jaylcbiAgICByZXR1cm4gZW51bV9mb3IgOmVhY2hfY29kZXBvaW50IHVubGVzcyBibG9ja19naXZlbj9cbiAgICAleHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBzZWxmLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICN7eWllbGQgYHNlbGYuY29kZVBvaW50QXQoaSlgfTtcbiAgICAgIH1cbiAgICB9XG4gICAgc2VsZlxuICBlbmRcblxuICBkZWYgY29kZXBvaW50cygmYmxvY2spXG4gICAgIyBJZiBhIGJsb2NrIGlzIGdpdmVuLCB3aGljaCBpcyBhIGRlcHJlY2F0ZWQgZm9ybSwgd29ya3MgdGhlIHNhbWUgYXMgZWFjaF9jb2RlcG9pbnQuXG4gICAgcmV0dXJuIGVhY2hfY29kZXBvaW50KCZibG9jaykgaWYgYmxvY2tfZ2l2ZW4/XG4gICAgZWFjaF9jb2RlcG9pbnQudG9fYVxuICBlbmRcblxuICBkZWYgZW5jb2RlKGVuY29kaW5nKVxuICAgIGBPcGFsLmVuYyhzZWxmLCBlbmNvZGluZylgXG4gIGVuZFxuXG4gIGRlZiBmb3JjZV9lbmNvZGluZyhlbmNvZGluZylcbiAgICAleHtcbiAgICAgIHZhciBzdHIgPSBzZWxmO1xuXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHN0ci5lbmNvZGluZykgeyByZXR1cm4gc3RyOyB9XG5cbiAgICAgIGVuY29kaW5nID0gI3s6Ok9wYWwuY29lcmNlX3RvIShlbmNvZGluZywgOjpTdHJpbmcsIDp0b19zKX07XG4gICAgICBlbmNvZGluZyA9ICN7OjpFbmNvZGluZy5maW5kKGVuY29kaW5nKX07XG5cbiAgICAgIGlmIChlbmNvZGluZyA9PT0gc3RyLmVuY29kaW5nKSB7IHJldHVybiBzdHI7IH1cblxuICAgICAgc3RyID0gT3BhbC5zZXRfZW5jb2Rpbmcoc3RyLCBlbmNvZGluZyk7XG5cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICBlbmRcblxuICBkZWYgZ2V0Ynl0ZShpZHgpXG4gICAgc3RyaW5nX2J5dGVzID0gYnl0ZXNcbiAgICBpZHggPSA6Ok9wYWwuY29lcmNlX3RvIShpZHgsIDo6SW50ZWdlciwgOnRvX2ludClcbiAgICByZXR1cm4gaWYgc3RyaW5nX2J5dGVzLmxlbmd0aCA8IGlkeFxuXG4gICAgc3RyaW5nX2J5dGVzW2lkeF1cbiAgZW5kXG5cbiAgZGVmIGluaXRpYWxpemVfY29weShvdGhlcilcbiAgICAle1xuICAgICAgc2VsZi5lbmNvZGluZyA9IG90aGVyLmVuY29kaW5nO1xuICAgICAgc2VsZi5pbnRlcm5hbF9lbmNvZGluZyA9IG90aGVyLmludGVybmFsX2VuY29kaW5nO1xuICAgIH1cbiAgZW5kXG5cbiAgIyBzdHViXG4gIGRlZiB2YWxpZF9lbmNvZGluZz9cbiAgICB0cnVlXG4gIGVuZFxuZW5kXG5cbjo6RW5jb2RpbmcuZGVmYXVsdF9leHRlcm5hbCA9IF9fRU5DT0RJTkdfX1xuIl0sIm5hbWVzIjpbIjx0b3AgKHJlcXVpcmVkKT4iLCJzZWxmIiwicmVxdWlyZSIsIjxjbGFzczpFbmNvZGluZz4iLCJyZWdpc3RlciIsIm5hbWUiLCJvcHRpb25zIiwibmFtZXMiLCIrIiwiJHJldF9vcl8xIiwiW10iLCJhc2NpaSIsImR1bW15IiwiZW5jb2RpbmciLCJjbG9uZSIsImluaXRpYWxpemUiLCJuZXciLCJibG9ja19naXZlbj8iLCJpbnN0YW5jZV9ldmFsIiwiYmxvY2siLCJ0b19wcm9jIiwiZWFjaCIsImJsb2NrIGluIHJlZ2lzdGVyIiwiZW5jb2RpbmdfbmFtZSIsImJsb2NrICgyIGxldmVscykgaW4gcmVnaXN0ZXIiLCJjb25zdF9zZXQiLCJ0ciIsImZpbmQiLCJkZWZhdWx0X2V4dGVybmFsIiwic2luZ2xldG9uX2NsYXNzIiwiYXR0cl9hY2Nlc3NvciIsImF0dHJfcmVhZGVyIiwiQG5hbWUiLCJAbmFtZXMiLCJAYXNjaWkiLCJAZHVtbXkiLCJhc2NpaV9jb21wYXRpYmxlPyIsImR1bW15PyIsImJpbmFyeT8iLCJ0b19zIiwiaW5zcGVjdCIsImNoYXJzaXplIiwic3RyaW5nIiwiZWFjaF9jaGFyIiwiZWFjaF9ieXRlIiwiS2VybmVsIiwicmFpc2UiLCJOb3RJbXBsZW1lbnRlZEVycm9yIiwiYnl0ZXNpemUiLCI8Y2xhc3M6RW5jb2RpbmdFcnJvcj4iLCJTdGFuZGFyZEVycm9yIiwiPGNsYXNzOkNvbXBhdGliaWxpdHlFcnJvcj4iLCJFbmNvZGluZ0Vycm9yIiwiRW5jb2RpbmciLCJibG9jayBpbiA8dG9wIChyZXF1aXJlZCk+IiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiA8dG9wIChyZXF1aXJlZCk+IiwiYnl0ZXMiLCJsZW5ndGgiLCJFbmNvZGluZzo6VVRGXzE2TEUiLCIwIiwiRW5jb2Rpbmc6OlVURl8zMkxFIiwiRW5jb2Rpbmc6OkFTQ0lJXzhCSVQiLCI8Y2xhc3M6U3RyaW5nPiIsIkVuY29kaW5nOjpVVEZfOCIsImIiLCJkdXAiLCJmb3JjZV9lbmNvZGluZyIsIkBpbnRlcm5hbF9lbmNvZGluZyIsImVudW1fZm9yIiwiYmxvY2sgaW4gZWFjaF9ieXRlIiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiBlYWNoX2J5dGUiLCJ0b19hIiwiQGJ5dGVzIiwiYmxvY2sgaW4gZWFjaF9jaGFyIiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiBlYWNoX2NoYXIiLCJAZW5jb2RpbmciLCJjaGFycyIsImVhY2hfY29kZXBvaW50IiwiY29kZXBvaW50cyIsImVuY29kZSIsIk9wYWwiLCJjb2VyY2VfdG8hIiwiU3RyaW5nIiwiZ2V0Ynl0ZSIsImlkeCIsInN0cmluZ19ieXRlcyIsIkludGVnZXIiLCI8IiwiaW5pdGlhbGl6ZV9jb3B5Iiwib3RoZXIiLCJ2YWxpZF9lbmNvZGluZz8iLCJkZWZhdWx0X2V4dGVybmFsPSJdLCJtYXBwaW5ncyI6IkFBQUFBLDBDQUFBQSxnQkFBQUE7RUFBQUE7O0VBQUFBOztFQUFBQyxJQUFBQyxTQUFBQSxDQUFRRixnQkFBUkU7RUFFQUM7RUFBQUE7O0lBQUFBOztBQUFBQTs7SUFDRUMsTUFBSUgsSUFBSkcsZUFBQUEsb0JBQWtCQyxJQUFELEVBQU9DLE9BQXhCRjtBQUFBQSxNQUFBQTs7TUFBQUE7OztNQUF3QiwrQkFBVSxZQUFBO01BQ2hDRyxRQUFlQyxTQUFQLENBQUNILElBQUQsQ0FBT0csRUFBRyxDQUFBLFFBQUFDLENBQUFBLFlBQUFILE9BQU9JLE9BQUFBLENBQUMsU0FBREEsQ0FBUEQsQ0FBQSxDQUFBLEdBQUEsQ0FBQSxTQUFBLElBQUEsQ0FBcUIsRUFBckIsQ0FBQSxDQUFIRDtNQUNmRyxRQUFRLENBQUEsUUFBQUYsQ0FBQUEsWUFBQUgsT0FBT0ksT0FBQUEsQ0FBQyxPQUFEQSxDQUFQRCxDQUFBLENBQUEsSUFBQSxDQUFBLFNBQUEsQ0FBQTtNQUNSRyxRQUFRLENBQUEsUUFBQUgsQ0FBQUEsWUFBQUgsT0FBT0ksT0FBQUEsQ0FBQyxPQUFEQSxDQUFQRCxDQUFBLENBQUEsSUFBQSxDQUFBLFNBQUEsQ0FBQTtNQUVSLElBQUEsUUFBR0gsT0FBT0ksT0FBQUEsQ0FBQyxVQUFEQSxDQUFWLENBQUE7O1FBQ0VHLFdBQVdQLE9BQU9JLE9BQUFBLENBQUMsVUFBREEsQ0FBV0ksT0FBQUEsQ0FBQUE7UUFDN0JELFFBQVFFLFlBQUFBLENBQVlWLElBQXBCLEVBQTBCRSxLQUExQixFQUFpQ0ksS0FBakMsRUFBd0NDLEtBQWhDRztNQUZWO1FBSUVGLFdBQVdaLElBQUFlLEtBQUFBLENBQUlYLElB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QkQ7QUFBQUE7TUFDRUEsT0FBRUEsSUFBRixHQUNKQSx5Q0FESSxHQUVKQSwyREFGSSxHQUdKQTtJQUpFQSxDQUFBQSxHQUFBQTtJQVFBMUIsT0FBQTRCLCtCQUFBQSxZQUNFLElBREZBLENBQUFBLEdBQUFBO0VBdkdGNUIsR0FBTSxJQUFOQSxFQUFBQSxJQUFBQTtFQTRHQTlELE9BQVUyRixNQUFBQSxDQUFvQjVCLElBM1o5QlYsY0EyWjhCVSxVQUFwQjRCLENBQUFBLEVBQUFBLE1BQVZ0QyxlQUFVc0MscUJBQUFBLEVBQUFBLEVBQUFBLENBQUFBLEVBQUFBO0FBM1pWM0Y7In19LHsib2Zmc2V0Ijp7ImxpbmUiOjQ5MzksImNvbHVtbiI6MH0sIm1hcCI6eyJ2ZXJzaW9uIjozLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb3JlbGliL3JhdGlvbmFsLnJiIl0sInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUgJ2NvcmVsaWIvbnVtZXJpYydcbnJlcXVpcmUgJ2NvcmVsaWIvcmF0aW9uYWwvYmFzZSdcblxuY2xhc3MgOjpSYXRpb25hbCA8IDo6TnVtZXJpY1xuICBkZWYgc2VsZi5yZWR1Y2UobnVtLCBkZW4pXG4gICAgbnVtID0gbnVtLnRvX2lcbiAgICBkZW4gPSBkZW4udG9faVxuXG4gICAgaWYgZGVuID09IDBcbiAgICAgIDo6S2VybmVsLnJhaXNlIDo6WmVyb0RpdmlzaW9uRXJyb3IsICdkaXZpZGVkIGJ5IDAnXG4gICAgZWxzaWYgZGVuIDwgMFxuICAgICAgbnVtID0gLW51bVxuICAgICAgZGVuID0gLWRlblxuICAgIGVsc2lmIGRlbiA9PSAxXG4gICAgICByZXR1cm4gbmV3KG51bSwgZGVuKVxuICAgIGVuZFxuXG4gICAgZ2NkID0gbnVtLmdjZChkZW4pXG5cbiAgICBuZXcobnVtIC8gZ2NkLCBkZW4gLyBnY2QpXG4gIGVuZFxuXG4gIGRlZiBzZWxmLmNvbnZlcnQobnVtLCBkZW4pXG4gICAgaWYgbnVtLm5pbD8gfHwgZGVuLm5pbD9cbiAgICAgIDo6S2VybmVsLnJhaXNlIDo6VHlwZUVycm9yLCAnY2Fubm90IGNvbnZlcnQgbmlsIGludG8gUmF0aW9uYWwnXG4gICAgZW5kXG5cbiAgICBpZiA6OkludGVnZXIgPT09IG51bSAmJiA6OkludGVnZXIgPT09IGRlblxuICAgICAgcmV0dXJuIHJlZHVjZShudW0sIGRlbilcbiAgICBlbmRcblxuICAgIGlmIDo6RmxvYXQgPT09IG51bSB8fCA6OlN0cmluZyA9PT0gbnVtIHx8IDo6Q29tcGxleCA9PT0gbnVtXG4gICAgICBudW0gPSBudW0udG9fclxuICAgIGVuZFxuXG4gICAgaWYgOjpGbG9hdCA9PT0gZGVuIHx8IDo6U3RyaW5nID09PSBkZW4gfHwgOjpDb21wbGV4ID09PSBkZW5cbiAgICAgIGRlbiA9IGRlbi50b19yXG4gICAgZW5kXG5cbiAgICBpZiBkZW4uZXF1YWw/KDEpICYmICEoOjpJbnRlZ2VyID09PSBudW0pXG4gICAgICA6Ok9wYWwuY29lcmNlX3RvIShudW0sIDo6UmF0aW9uYWwsIDp0b19yKVxuICAgIGVsc2lmIDo6TnVtZXJpYyA9PT0gbnVtICYmIDo6TnVtZXJpYyA9PT0gZGVuXG4gICAgICBudW0gLyBkZW5cbiAgICBlbHNlXG4gICAgICByZWR1Y2UobnVtLCBkZW4pXG4gICAgZW5kXG4gIGVuZFxuXG4gIGRlZiBpbml0aWFsaXplKG51bSwgZGVuKVxuICAgIEBudW0gPSBudW1cbiAgICBAZGVuID0gZGVuXG4gICAgZnJlZXplXG4gIGVuZFxuXG4gIGRlZiBudW1lcmF0b3JcbiAgICBAbnVtXG4gIGVuZFxuXG4gIGRlZiBkZW5vbWluYXRvclxuICAgIEBkZW5cbiAgZW5kXG5cbiAgZGVmIGNvZXJjZShvdGhlcilcbiAgICBjYXNlIG90aGVyXG4gICAgd2hlbiA6OlJhdGlvbmFsXG4gICAgICBbb3RoZXIsIHNlbGZdXG5cbiAgICB3aGVuIDo6SW50ZWdlclxuICAgICAgW290aGVyLnRvX3IsIHNlbGZdXG5cbiAgICB3aGVuIDo6RmxvYXRcbiAgICAgIFtvdGhlciwgdG9fZl1cbiAgICBlbmRcbiAgZW5kXG5cbiAgZGVmID09KG90aGVyKVxuICAgIGNhc2Ugb3RoZXJcbiAgICB3aGVuIDo6UmF0aW9uYWxcbiAgICAgIEBudW0gPT0gb3RoZXIubnVtZXJhdG9yICYmIEBkZW4gPT0gb3RoZXIuZGVub21pbmF0b3JcblxuICAgIHdoZW4gOjpJbnRlZ2VyXG4gICAgICBAbnVtID09IG90aGVyICYmIEBkZW4gPT0gMVxuXG4gICAgd2hlbiA6OkZsb2F0XG4gICAgICB0b19mID09IG90aGVyXG5cbiAgICBlbHNlXG4gICAgICBvdGhlciA9PSBzZWxmXG4gICAgZW5kXG4gIGVuZFxuXG4gIGRlZiA8PT4ob3RoZXIpXG4gICAgY2FzZSBvdGhlclxuICAgIHdoZW4gOjpSYXRpb25hbFxuICAgICAgQG51bSAqIG90aGVyLmRlbm9taW5hdG9yIC0gQGRlbiAqIG90aGVyLm51bWVyYXRvciA8PT4gMFxuXG4gICAgd2hlbiA6OkludGVnZXJcbiAgICAgIEBudW0gLSBAZGVuICogb3RoZXIgPD0+IDBcblxuICAgIHdoZW4gOjpGbG9hdFxuICAgICAgdG9fZiA8PT4gb3RoZXJcblxuICAgIGVsc2VcbiAgICAgIF9fY29lcmNlZF9fIDo8PT4sIG90aGVyXG4gICAgZW5kXG4gIGVuZFxuXG4gIGRlZiArKG90aGVyKVxuICAgIGNhc2Ugb3RoZXJcbiAgICB3aGVuIDo6UmF0aW9uYWxcbiAgICAgIG51bSA9IEBudW0gKiBvdGhlci5kZW5vbWluYXRvciArIEBkZW4gKiBvdGhlci5udW1lcmF0b3JcbiAgICAgIGRlbiA9IEBkZW4gKiBvdGhlci5kZW5vbWluYXRvclxuXG4gICAgICA6Oktlcm5lbC5SYXRpb25hbChudW0sIGRlbilcblxuICAgIHdoZW4gOjpJbnRlZ2VyXG4gICAgICA6Oktlcm5lbC5SYXRpb25hbChAbnVtICsgb3RoZXIgKiBAZGVuLCBAZGVuKVxuXG4gICAgd2hlbiA6OkZsb2F0XG4gICAgICB0b19mICsgb3RoZXJcblxuICAgIGVsc2VcbiAgICAgIF9fY29lcmNlZF9fIDorLCBvdGhlclxuICAgIGVuZFxuICBlbmRcblxuICBkZWYgLShvdGhlcilcbiAgICBjYXNlIG90aGVyXG4gICAgd2hlbiA6OlJhdGlvbmFsXG4gICAgICBudW0gPSBAbnVtICogb3RoZXIuZGVub21pbmF0b3IgLSBAZGVuICogb3RoZXIubnVtZXJhdG9yXG4gICAgICBkZW4gPSBAZGVuICogb3RoZXIuZGVub21pbmF0b3JcblxuICAgICAgOjpLZXJuZWwuUmF0aW9uYWwobnVtLCBkZW4pXG5cbiAgICB3aGVuIDo6SW50ZWdlclxuICAgICAgOjpLZXJuZWwuUmF0aW9uYWwoQG51bSAtIG90aGVyICogQGRlbiwgQGRlbilcblxuICAgIHdoZW4gOjpGbG9hdFxuICAgICAgdG9fZiAtIG90aGVyXG5cbiAgICBlbHNlXG4gICAgICBfX2NvZXJjZWRfXyA6LSwgb3RoZXJcbiAgICBlbmRcbiAgZW5kXG5cbiAgZGVmICoob3RoZXIpXG4gICAgY2FzZSBvdGhlclxuICAgIHdoZW4gOjpSYXRpb25hbFxuICAgICAgbnVtID0gQG51bSAqIG90aGVyLm51bWVyYXRvclxuICAgICAgZGVuID0gQGRlbiAqIG90aGVyLmRlbm9taW5hdG9yXG5cbiAgICAgIDo6S2VybmVsLlJhdGlvbmFsKG51bSwgZGVuKVxuXG4gICAgd2hlbiA6OkludGVnZXJcbiAgICAgIDo6S2VybmVsLlJhdGlvbmFsKEBudW0gKiBvdGhlciwgQGRlbilcblxuICAgIHdoZW4gOjpGbG9hdFxuICAgICAgdG9fZiAqIG90aGVyXG5cbiAgICBlbHNlXG4gICAgICBfX2NvZXJjZWRfXyA6Kiwgb3RoZXJcbiAgICBlbmRcbiAgZW5kXG5cbiAgZGVmIC8ob3RoZXIpXG4gICAgY2FzZSBvdGhlclxuICAgIHdoZW4gOjpSYXRpb25hbFxuICAgICAgbnVtID0gQG51bSAqIG90aGVyLmRlbm9taW5hdG9yXG4gICAgICBkZW4gPSBAZGVuICogb3RoZXIubnVtZXJhdG9yXG5cbiAgICAgIDo6S2VybmVsLlJhdGlvbmFsKG51bSwgZGVuKVxuXG4gICAgd2hlbiA6OkludGVnZXJcbiAgICAgIGlmIG90aGVyID09IDBcbiAgICAgICAgdG9fZiAvIDAuMFxuICAgICAgZWxzZVxuICAgICAgICA6Oktlcm5lbC5SYXRpb25hbChAbnVtLCBAZGVuICogb3RoZXIpXG4gICAgICBlbmRcblxuICAgIHdoZW4gOjpGbG9hdFxuICAgICAgdG9fZiAvIG90aGVyXG5cbiAgICBlbHNlXG4gICAgICBfX2NvZXJjZWRfXyA6Lywgb3RoZXJcbiAgICBlbmRcbiAgZW5kXG5cbiAgZGVmICoqKG90aGVyKVxuICAgIGNhc2Ugb3RoZXJcbiAgICB3aGVuIDo6SW50ZWdlclxuICAgICAgaWYgc2VsZiA9PSAwICYmIG90aGVyIDwgMFxuICAgICAgICA6OkZsb2F0OjpJTkZJTklUWVxuICAgICAgZWxzaWYgb3RoZXIgPiAwXG4gICAgICAgIDo6S2VybmVsLlJhdGlvbmFsKEBudW0qKm90aGVyLCBAZGVuKipvdGhlcilcbiAgICAgIGVsc2lmIG90aGVyIDwgMFxuICAgICAgICA6Oktlcm5lbC5SYXRpb25hbChAZGVuKiotb3RoZXIsIEBudW0qKi1vdGhlcilcbiAgICAgIGVsc2VcbiAgICAgICAgOjpLZXJuZWwuUmF0aW9uYWwoMSwgMSlcbiAgICAgIGVuZFxuXG4gICAgd2hlbiA6OkZsb2F0XG4gICAgICB0b19mKipvdGhlclxuXG4gICAgd2hlbiA6OlJhdGlvbmFsXG4gICAgICBpZiBvdGhlciA9PSAwXG4gICAgICAgIDo6S2VybmVsLlJhdGlvbmFsKDEsIDEpXG4gICAgICBlbHNpZiBvdGhlci5kZW5vbWluYXRvciA9PSAxXG4gICAgICAgIGlmIG90aGVyIDwgMFxuICAgICAgICAgIDo6S2VybmVsLlJhdGlvbmFsKEBkZW4qKm90aGVyLm51bWVyYXRvci5hYnMsIEBudW0qKm90aGVyLm51bWVyYXRvci5hYnMpXG4gICAgICAgIGVsc2VcbiAgICAgICAgICA6Oktlcm5lbC5SYXRpb25hbChAbnVtKipvdGhlci5udW1lcmF0b3IsIEBkZW4qKm90aGVyLm51bWVyYXRvcilcbiAgICAgICAgZW5kXG4gICAgICBlbHNpZiBzZWxmID09IDAgJiYgb3RoZXIgPCAwXG4gICAgICAgIDo6S2VybmVsLnJhaXNlIDo6WmVyb0RpdmlzaW9uRXJyb3IsICdkaXZpZGVkIGJ5IDAnXG4gICAgICBlbHNlXG4gICAgICAgIHRvX2YqKm90aGVyXG4gICAgICBlbmRcblxuICAgIGVsc2VcbiAgICAgIF9fY29lcmNlZF9fIDoqKiwgb3RoZXJcbiAgICBlbmRcbiAgZW5kXG5cbiAgZGVmIGFic1xuICAgIDo6S2VybmVsLlJhdGlvbmFsKEBudW0uYWJzLCBAZGVuLmFicylcbiAgZW5kXG5cbiAgZGVmIGNlaWwocHJlY2lzaW9uID0gMClcbiAgICBpZiBwcmVjaXNpb24gPT0gMFxuICAgICAgKC0oLUBudW0gLyBAZGVuKSkuY2VpbFxuICAgIGVsc2VcbiAgICAgIHdpdGhfcHJlY2lzaW9uKDpjZWlsLCBwcmVjaXNpb24pXG4gICAgZW5kXG4gIGVuZFxuXG4gIGRlZiBmbG9vcihwcmVjaXNpb24gPSAwKVxuICAgIGlmIHByZWNpc2lvbiA9PSAwXG4gICAgICAoLSgtQG51bSAvIEBkZW4pKS5mbG9vclxuICAgIGVsc2VcbiAgICAgIHdpdGhfcHJlY2lzaW9uKDpmbG9vciwgcHJlY2lzaW9uKVxuICAgIGVuZFxuICBlbmRcblxuICBkZWYgaGFzaFxuICAgIFwiUmF0aW9uYWw6I3tAbnVtfToje0BkZW59XCJcbiAgZW5kXG5cbiAgZGVmIGluc3BlY3RcbiAgICBcIigje3NlbGZ9KVwiXG4gIGVuZFxuXG4gIGRlZiByYXRpb25hbGl6ZShlcHMgPSB1bmRlZmluZWQpXG4gICAgJXh7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsIFwid3JvbmcgbnVtYmVyIG9mIGFyZ3VtZW50cyAoI3tgYXJndW1lbnRzLmxlbmd0aGB9IGZvciAwLi4xKVwifTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVwcyA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgICAgfVxuXG4gICAgICB2YXIgZSA9ICN7ZXBzLmFic30sXG4gICAgICAgICAgYSA9ICN7c2VsZiAtIGBlYH0sXG4gICAgICAgICAgYiA9ICN7c2VsZiArIGBlYH07XG5cbiAgICAgIHZhciBwMCA9IDAsXG4gICAgICAgICAgcDEgPSAxLFxuICAgICAgICAgIHEwID0gMSxcbiAgICAgICAgICBxMSA9IDAsXG4gICAgICAgICAgcDIsIHEyO1xuXG4gICAgICB2YXIgYywgaywgdDtcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgYyA9ICN7YGFgLmNlaWx9O1xuXG4gICAgICAgIGlmICgje2BjYCA8PSBgYmB9KSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBrICA9IGMgLSAxO1xuICAgICAgICBwMiA9IGsgKiBwMSArIHAwO1xuICAgICAgICBxMiA9IGsgKiBxMSArIHEwO1xuICAgICAgICB0ICA9ICN7MSAvIChgYmAgLSBga2ApfTtcbiAgICAgICAgYiAgPSAjezEgLyAoYGFgIC0gYGtgKX07XG4gICAgICAgIGEgID0gdDtcblxuICAgICAgICBwMCA9IHAxO1xuICAgICAgICBxMCA9IHExO1xuICAgICAgICBwMSA9IHAyO1xuICAgICAgICBxMSA9IHEyO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gI3s6Oktlcm5lbC5SYXRpb25hbChgYyAqIHAxICsgcDBgLCBgYyAqIHExICsgcTBgKX07XG4gICAgfVxuICBlbmRcblxuICBkZWYgcm91bmQocHJlY2lzaW9uID0gMClcbiAgICByZXR1cm4gd2l0aF9wcmVjaXNpb24oOnJvdW5kLCBwcmVjaXNpb24pIHVubGVzcyBwcmVjaXNpb24gPT0gMFxuICAgIHJldHVybiAwIGlmIEBudW0gPT0gMFxuICAgIHJldHVybiBAbnVtIGlmIEBkZW4gPT0gMVxuXG4gICAgbnVtID0gQG51bS5hYnMgKiAyICsgQGRlblxuICAgIGRlbiA9IEBkZW4gKiAyXG5cbiAgICBhcHByb3ggPSAobnVtIC8gZGVuKS50cnVuY2F0ZVxuXG4gICAgaWYgQG51bSA8IDBcbiAgICAgIC1hcHByb3hcbiAgICBlbHNlXG4gICAgICBhcHByb3hcbiAgICBlbmRcbiAgZW5kXG5cbiAgZGVmIHRvX2ZcbiAgICBAbnVtIC8gQGRlblxuICBlbmRcblxuICBkZWYgdG9faVxuICAgIHRydW5jYXRlXG4gIGVuZFxuXG4gIGRlZiB0b19yXG4gICAgc2VsZlxuICBlbmRcblxuICBkZWYgdG9fc1xuICAgIFwiI3tAbnVtfS8je0BkZW59XCJcbiAgZW5kXG5cbiAgZGVmIHRydW5jYXRlKHByZWNpc2lvbiA9IDApXG4gICAgaWYgcHJlY2lzaW9uID09IDBcbiAgICAgIEBudW0gPCAwID8gY2VpbCA6IGZsb29yXG4gICAgZWxzZVxuICAgICAgd2l0aF9wcmVjaXNpb24oOnRydW5jYXRlLCBwcmVjaXNpb24pXG4gICAgZW5kXG4gIGVuZFxuXG4gIGRlZiB3aXRoX3ByZWNpc2lvbihtZXRob2QsIHByZWNpc2lvbilcbiAgICA6Oktlcm5lbC5yYWlzZSA6OlR5cGVFcnJvciwgJ25vdCBhbiBJbnRlZ2VyJyB1bmxlc3MgOjpJbnRlZ2VyID09PSBwcmVjaXNpb25cblxuICAgIHAgPSAxMCoqcHJlY2lzaW9uXG4gICAgcyA9IHNlbGYgKiBwXG5cbiAgICBpZiBwcmVjaXNpb24gPCAxXG4gICAgICAocy5zZW5kKG1ldGhvZCkgLyBwKS50b19pXG4gICAgZWxzZVxuICAgICAgOjpLZXJuZWwuUmF0aW9uYWwocy5zZW5kKG1ldGhvZCksIHApXG4gICAgZW5kXG4gIGVuZFxuXG4gIGRlZiBzZWxmLmZyb21fc3RyaW5nKHN0cmluZylcbiAgICAleHtcbiAgICAgIHZhciBzdHIgPSBzdHJpbmcudHJpbUxlZnQoKSxcbiAgICAgICAgICByZSA9IC9eWystXT9bXFxkX10rKFxcLltcXGRfXSspPy8sXG4gICAgICAgICAgbWF0Y2ggPSBzdHIubWF0Y2gocmUpLFxuICAgICAgICAgIG51bWVyYXRvciwgZGVub21pbmF0b3I7XG5cbiAgICAgIGZ1bmN0aW9uIGlzRmxvYXQoKSB7XG4gICAgICAgIHJldHVybiByZS50ZXN0KHN0cik7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGN1dEZsb2F0KCkge1xuICAgICAgICB2YXIgbWF0Y2ggPSBzdHIubWF0Y2gocmUpO1xuICAgICAgICB2YXIgbnVtYmVyID0gbWF0Y2hbMF07XG4gICAgICAgIHN0ciA9IHN0ci5zbGljZShudW1iZXIubGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIG51bWJlci5yZXBsYWNlKC9fL2csICcnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRmxvYXQoKSkge1xuICAgICAgICBudW1lcmF0b3IgPSBwYXJzZUZsb2F0KGN1dEZsb2F0KCkpO1xuXG4gICAgICAgIGlmIChzdHJbMF0gPT09ICcvJykge1xuICAgICAgICAgIC8vIHJhdGlvbmFsIHJlYWwgcGFydFxuICAgICAgICAgIHN0ciA9IHN0ci5zbGljZSgxKTtcblxuICAgICAgICAgIGlmIChpc0Zsb2F0KCkpIHtcbiAgICAgICAgICAgIGRlbm9taW5hdG9yID0gcGFyc2VGbG9hdChjdXRGbG9hdCgpKTtcbiAgICAgICAgICAgIHJldHVybiAjezo6S2VybmVsLlJhdGlvbmFsKGBudW1lcmF0b3JgLCBgZGVub21pbmF0b3JgKX07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAjezo6S2VybmVsLlJhdGlvbmFsKGBudW1lcmF0b3JgLCAxKX07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAjezo6S2VybmVsLlJhdGlvbmFsKGBudW1lcmF0b3JgLCAxKX07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAjezo6S2VybmVsLlJhdGlvbmFsKDAsIDEpfTtcbiAgICAgIH1cbiAgICB9XG4gIGVuZFxuXG4gIGFsaWFzIGRpdmlkZSAvXG4gIGFsaWFzIHF1byAvXG5lbmRcbiJdLCJuYW1lcyI6WyI8dG9wIChyZXF1aXJlZCk+Iiwic2VsZiIsInJlcXVpcmUiLCI8Y2xhc3M6UmF0aW9uYWw+IiwicmVkdWNlIiwibnVtIiwiZGVuIiwidG9faSIsIjAiLCJLZXJuZWwiLCJyYWlzZSIsIlplcm9EaXZpc2lvbkVycm9yIiwiPCIsIi1AIiwiMSIsIm5ldyIsImdjZCIsIi8iLCJjb252ZXJ0IiwibmlsPyIsIlR5cGVFcnJvciIsIkludGVnZXIiLCJGbG9hdCIsIlN0cmluZyIsIkNvbXBsZXgiLCJ0b19yIiwiZXF1YWw/IiwiPT09IiwiT3BhbCIsImNvZXJjZV90byEiLCJSYXRpb25hbCIsIk51bWVyaWMiLCJpbml0aWFsaXplIiwiQG51bSIsIkBkZW4iLCJmcmVlemUiLCJudW1lcmF0b3IiLCJkZW5vbWluYXRvciIsImNvZXJjZSIsIm90aGVyIiwiJHJldF9vcl8xIiwidG9fZiIsIj09IiwiJHJldF9vcl8yIiwiPD0+IiwiLSIsIioiLCJfX2NvZXJjZWRfXyIsIisiLCIqKiIsIkZsb2F0OjpJTkZJTklUWSIsIj4iLCJhYnMiLCJjZWlsIiwicHJlY2lzaW9uIiwid2l0aF9wcmVjaXNpb24iLCJmbG9vciIsImhhc2giLCJpbnNwZWN0IiwicmF0aW9uYWxpemUiLCJlcHMiLCJBcmd1bWVudEVycm9yIiwiPD0iLCJyb3VuZCIsIjIiLCJhcHByb3giLCJ0cnVuY2F0ZSIsInRvX3MiLCJtZXRob2QiLCJwIiwiMTAiLCJzIiwic2VuZCIsImZyb21fc3RyaW5nIiwic3RyaW5nIl0sIm1hcHBpbmdzIjoiQUFBQUEsbUNBQUFBLGdCQUFBQTtFQUFBQTs7RUFBQUE7O0VBQUFDLElBQUFDLFNBQUFBLENBQVFGLGlCQUFSRTtFQUNBRCxJQUFBQyxTQUFBQSxDQUFRRix1QkFBUkU7RUFFQUYsT0FBQUc7RUFBQUE7O0lBQUFBOztBQUFBQTs7SUFDRUMsTUFBSUgsSUFBSkcsYUFBQUEsa0JBQWdCQyxHQUFELEVBQU1DLEdBQXJCRjtBQUFBQSxNQUFBQTs7O01BQ0VDLE1BQU1BLEdBQUdFLE1BQUFBLENBQUFBO01BQ1RELE1BQU1BLEdBQUdDLE1BQUFBLENBQUFBO01BRVQsSUFBQSxNQUFHRCxHQUFILEVBQVVFLENBQVYsQ0FBQTtRQUNFQyxPQUFR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LE1BQUFBLENBQU1KLE1BQU5JLENBQWN2RCxFQUFFb0QsQ0FBRnBELENBQUlWLE1BQUFBLENBQUFBO01BRHRCO1FBR0VnRCxPQUFBOUMsT0FBUXFCLFVBQUFBLENBQVV5QyxDQUFDQyxNQUFBQSxDQUFNSixNQUFOSSxDQUFuQixFQUFrQ0gsQ0FBMUJ2QztNQUhWO0lBTkZ5QixDQUFBQSxHQUFBQTtJQWFBa0IsTUFBSXhFLElBQUp3RSxrQkFBQUEsdUJBQXFCQyxNQUFyQkQ7QUFBQUE7O0FBRUZBO0FBQ0FBO0FBQ0FBO0FBQ0FBOztBQUVBQTtBQUNBQTtBQUNBQTs7QUFFQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7O0FBRUFBO0FBQ0FBOztBQUVBQTtBQUNBQTtBQUNBQTs7QUFFQUE7QUFDQUE7QUFDQUEsbUJBQXFCaEUsT0FBUXFCLFVBQUFBLENBQVcyQyxTQUFuQixFQUFnQ0EsV0FBeEIzQyxDQUFzQzJDO0FBQ25FQTtBQUNBQSxtQkFBcUJoRSxPQUFRcUIsVUFBQUEsQ0FBVzJDLFNBQW5CLEVBQStCM0QsQ0FBdkJnQixDQUEwQjJDO0FBQ3ZEQTtBQUNBQTtBQUNBQSxpQkFBbUJoRSxPQUFRcUIsVUFBQUEsQ0FBVzJDLFNBQW5CLEVBQStCM0QsQ0FBdkJnQixDQUEwQjJDO0FBQ3JEQTtBQUNBQTtBQUNBQSxlQUFpQmhFLE9BQVFxQixVQUFBQSxDQUFVdEIsQ0FBbEIsRUFBcUJNLENBQWJnQixDQUFnQjJDO0FBQ3pDQTtBQUNBQTtJQXJDRUEsQ0FBQUEsR0FBQUE7SUF3Q0EsYUFBTSxRQUFOLEVBQWEsR0FBYjtJQUNBdEUsT0FBQSxhQUFNLEtBQU4sRUFBVSxHQUFWO0VBcllGQSxHQUFNLElBQU5BLEVBQW1CNEIsY0FBbkI1QjtBQUhBSDsifX0seyJvZmZzZXQiOnsibGluZSI6NTM3NywiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvcmVsaWIvcmFuZG9tLnJiIl0sInNvdXJjZXNDb250ZW50IjpbIiMgaGVscGVyczogdHJ1dGh5XG5cbnJlcXVpcmUgJ2NvcmVsaWIvcmFuZG9tL2Zvcm1hdHRlcidcblxuY2xhc3MgOjpSYW5kb21cbiAgYXR0cl9yZWFkZXIgOnNlZWQsIDpzdGF0ZVxuXG4gIGRlZiBzZWxmLl92ZXJpZnlfY291bnQoY291bnQpXG4gICAgJXh7XG4gICAgICBpZiAoISR0cnV0aHkoY291bnQpKSBjb3VudCA9IDE2O1xuICAgICAgaWYgKHR5cGVvZiBjb3VudCAhPT0gXCJudW1iZXJcIikgY291bnQgPSAje2Bjb3VudGAudG9faW50fTtcbiAgICAgIGlmIChjb3VudCA8IDApICN7OjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCAnbmVnYXRpdmUgc3RyaW5nIHNpemUgKG9yIHNpemUgdG9vIGJpZyknfTtcbiAgICAgIGNvdW50ID0gTWF0aC5mbG9vcihjb3VudCk7XG4gICAgICByZXR1cm4gY291bnQ7XG4gICAgfVxuICBlbmRcblxuICBkZWYgaW5pdGlhbGl6ZShzZWVkID0gOjpSYW5kb20ubmV3X3NlZWQpXG4gICAgc2VlZCA9IDo6T3BhbC5jb2VyY2VfdG8hKHNlZWQsIDo6SW50ZWdlciwgOnRvX2ludClcbiAgICBAc3RhdGUgPSBzZWVkXG4gICAgcmVzZWVkKHNlZWQpXG4gIGVuZFxuXG4gIGRlZiByZXNlZWQoc2VlZClcbiAgICBAc2VlZCA9IHNlZWRcbiAgICBgc2VsZi4kcm5nID0gT3BhbC4kJHJhbmQucmVzZWVkKHNlZWQpYFxuICBlbmRcblxuICBkZWYgc2VsZi5uZXdfc2VlZFxuICAgIGBPcGFsLiQkcmFuZC5uZXdfc2VlZCgpYFxuICBlbmRcblxuICBkZWYgc2VsZi5yYW5kKGxpbWl0ID0gdW5kZWZpbmVkKVxuICAgIHNlbGY6OkRFRkFVTFQucmFuZChsaW1pdClcbiAgZW5kXG5cbiAgZGVmIHNlbGYuc3JhbmQobiA9IDo6UmFuZG9tLm5ld19zZWVkKVxuICAgIG4gPSA6Ok9wYWwuY29lcmNlX3RvIShuLCA6OkludGVnZXIsIDp0b19pbnQpXG5cbiAgICBwcmV2aW91c19zZWVkID0gc2VsZjo6REVGQVVMVC5zZWVkXG4gICAgc2VsZjo6REVGQVVMVC5yZXNlZWQobilcbiAgICBwcmV2aW91c19zZWVkXG4gIGVuZFxuXG4gIGRlZiBzZWxmLnVyYW5kb20oc2l6ZSlcbiAgICA6OlNlY3VyZVJhbmRvbS5ieXRlcyhzaXplKVxuICBlbmRcblxuICBkZWYgPT0ob3RoZXIpXG4gICAgcmV0dXJuIGZhbHNlIHVubGVzcyA6OlJhbmRvbSA9PT0gb3RoZXJcblxuICAgIHNlZWQgPT0gb3RoZXIuc2VlZCAmJiBzdGF0ZSA9PSBvdGhlci5zdGF0ZVxuICBlbmRcblxuICBkZWYgYnl0ZXMobGVuZ3RoKVxuICAgIGxlbmd0aCA9IDo6UmFuZG9tLl92ZXJpZnlfY291bnQobGVuZ3RoKVxuXG4gICAgOjpBcnJheS5uZXcobGVuZ3RoKSB7IHJhbmQoMjU1KS5jaHIgfS5qb2luLmVuY29kZSgnQVNDSUktOEJJVCcpXG4gIGVuZFxuXG4gIGRlZiBzZWxmLmJ5dGVzKGxlbmd0aClcbiAgICBzZWxmOjpERUZBVUxULmJ5dGVzKGxlbmd0aClcbiAgZW5kXG5cbiAgZGVmIHJhbmQobGltaXQgPSB1bmRlZmluZWQpXG4gICAgcmFuZG9tX251bWJlcihsaW1pdClcbiAgZW5kXG5cbiAgIyBOb3QgcGFydCBvZiB0aGUgUnVieSBpbnRlcmZhY2UgKHVzZSAjcmFuZG9tX251bWJlciBmb3IgcG9ydGFiaWxpdHkpLCBidXRcbiAgIyB1c2VkIGJ5IFJhbmRvbTo6Rm9ybWF0dGVyIGFzIGEgc2hvcnRjdXQsIGFzIGZvciBSYW5kb20gaW50ZXJmYWNlIHRoZSBmbG9hdFxuICAjIFJORyBpcyBwcmltYXJ5LlxuICBkZWYgcmFuZG9tX2Zsb2F0XG4gICAgJXh7XG4gICAgICBzZWxmLnN0YXRlKys7XG4gICAgICByZXR1cm4gT3BhbC4kJHJhbmQucmFuZChzZWxmLiRybmcpO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIHNlbGYucmFuZG9tX2Zsb2F0XG4gICAgc2VsZjo6REVGQVVMVC5yYW5kb21fZmxvYXRcbiAgZW5kXG5cbiAgZGVmIHNlbGYuZ2VuZXJhdG9yPShnZW5lcmF0b3IpXG4gICAgYE9wYWwuJCRyYW5kID0gI3tnZW5lcmF0b3J9YFxuXG4gICAgaWYgY29uc3RfZGVmaW5lZD8gOkRFRkFVTFRcbiAgICAgIHNlbGY6OkRFRkFVTFQucmVzZWVkXG4gICAgZWxzZVxuICAgICAgY29uc3Rfc2V0IDpERUZBVUxULCBuZXcobmV3X3NlZWQpXG4gICAgZW5kXG4gIGVuZFxuZW5kXG5cbnJlcXVpcmUgJ2NvcmVsaWIvcmFuZG9tL21lcnNlbm5lX3R3aXN0ZXInXG4iXSwibmFtZXMiOlsiPHRvcCAocmVxdWlyZWQpPiIsInNlbGYiLCJyZXF1aXJlIiwiPGNsYXNzOlJhbmRvbT4iLCJhdHRyX3JlYWRlciIsIl92ZXJpZnlfY291bnQiLCJjb3VudCIsInRvX2ludCIsIktlcm5lbCIsInJhaXNlIiwiQXJndW1lbnRFcnJvciIsImluaXRpYWxpemUiLCJzZWVkIiwiUmFuZG9tIiwibmV3X3NlZWQiLCJPcGFsIiwiY29lcmNlX3RvISIsIkludGVnZXIiLCJAc3RhdGUiLCJyZXNlZWQiLCJAc2VlZCIsInJhbmQiLCJsaW1pdCIsInNlbGY6OkRFRkFVTFQiLCJzcmFuZCIsIm4iLCJwcmV2aW91c19zZWVkIiwidXJhbmRvbSIsInNpemUiLCJTZWN1cmVSYW5kb20iLCJieXRlcyIsIj09Iiwib3RoZXIiLCIkcmV0X29yXzEiLCJzdGF0ZSIsImxlbmd0aCIsIm5ldyIsIkFycmF5IiwiYmxvY2sgaW4gYnl0ZXMiLCJibG9jayAoMiBsZXZlbHMpIGluIGJ5dGVzIiwiMjU1IiwiY2hyIiwiam9pbiIsImVuY29kZSIsInJhbmRvbV9udW1iZXIiLCJyYW5kb21fZmxvYXQiLCJnZW5lcmF0b3I9IiwiZ2VuZXJhdG9yIiwiY29uc3RfZGVmaW5lZD8iLCJjb25zdF9zZXQiXSwibWFwcGluZ3MiOiJBQUFBQSxpQ0FBQUEsZ0JBQUFBO0VBQUFBOztFQUFBQTs7RUFFQUMsSUFBQUMsU0FBQUEsQ0FBUUYsMEJBQVJFO0VBRUFDO0VBQUFBOzs7O0lBQ0VGLElBQUFH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LE9BQUFQLElBQUF0QixJQUFBc0IsWUFBYU8sT0FBQUEsQ0FBT0ssTUFBUEw7SUFEZkEsQ0FBQUEsR0FBQUE7O0FBSUFULElBQUFBLG9CQUFBQSxnQkFBU0MsS0FBVEQ7QUFBQUEsTUFBQUE7Ozs7TUFDRUEsT0FBQXBCLElBQUEyQyxlQUFBQSxDQUFjdEIsS0FBZHNCO0lBREZ2QixDQUFBQSxJQUFBQTs7QUFPQXdCLElBQUFBLDRCQUFBQSx3QkFBQUE7QUFBQUEsTUFBQUE7OztBQUVGQTtBQUNBQTtBQUNBQTtJQUpFQSxDQUFBQSxHQUFBQTtJQU9BQSxNQUFJNUMsSUFBSjRDLG1CQUFBQSx3QkFBQUE7QUFBQUEsTUFBQUE7O01BQ0VBLE9BQUF0QixJQUFBdEIsSUFBQXNCLFlBQWFzQixjQUFBQSxDQUFBQTtJQURmQSxDQUFBQSxHQUFBQTtJQUlBMUMsT0FBQTJDLE1BQUk3QyxJQUFKNkMsaUJBQUFBLGdDQUFvQkMsU0FBcEJEO0FBQUFBLE1BQUFBOzs7TUFDR0EsY0FBZ0JDO01BRWpCLElBQUEsUUFBRzlDLElBQUErQyxtQkFBQUEsQ0FBZSxTQUFmQSxDQUFILENBQUE7UUFDRUYsT0FBQXZCLElBQUF0QixJQUFBc0IsWUFBYUosUUFBQUEsQ0FBQUE7TUFEZjtRQUdFMkIsT0FBQTdDLElBQUFnRCxXQUFBQSxDQUFVLFNBQVYsRUFBb0JoRCxJQUFBbUMsS0FBQUEsQ0FBSW5DLElBQUFhLFVBQUFBLENBQUFBLENBQUpzQixDQUFwQmE7TUFIRjtJQUhGSCxDQUFBQSxHQUFBQTtFQTlFRjNDLEdBQU0sSUFBTkEsRUFBQUEsSUFBQUE7RUF5RkFILE9BQUFDLElBQUFDLFNBQUFBLENBQVFGLGlDQUFSRTtBQTdGQUY7In19LHsib2Zmc2V0Ijp7ImxpbmUiOjU1MDgsImNvbHVtbiI6MH0sIm1hcCI6eyJ2ZXJzaW9uIjozLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJvcGFsL2Jhc2UucmIiXSwic291cmNlc0NvbnRlbnQiOlsiOjpPYmplY3QucmVxdWlyZSAnY29yZWxpYi9ydW50aW1lJ1xuOjpPYmplY3QucmVxdWlyZSAnY29yZWxpYi9oZWxwZXJzJ1xuOjpPYmplY3QucmVxdWlyZSAnY29yZWxpYi9tb2R1bGUnXG46Ok9iamVjdC5yZXF1aXJlICdjb3JlbGliL2NsYXNzJ1xuOjpPYmplY3QucmVxdWlyZSAnY29yZWxpYi9iYXNpY19vYmplY3QnXG46Ok9iamVjdC5yZXF1aXJlICdjb3JlbGliL2tlcm5lbCdcbjo6T2JqZWN0LnJlcXVpcmUgJ2NvcmVsaWIvbWFpbidcbjo6T2JqZWN0LnJlcXVpcmUgJ2NvcmVsaWIvZXJyb3InXG5cbjo6T2JqZWN0LnJlcXVpcmUgJ2NvcmVsaWIvY29uc3RhbnRzJ1xuIl0sIm5hbWVzIjpbIjx0b3AgKHJlcXVpcmVkKT4iLCJPYmplY3QiLCJyZXF1aXJlIl0sIm1hcHBpbmdzIjoiQUFBQUEsNEJBQUFBLGdCQUFBQTtFQUFBQTs7RUFBQUE7O0VBQUFDLE9BQVFDLFNBQUFBLENBQVNGLGlCQUFURTtFQUNSRCxPQUFRQyxTQUFBQSxDQUFTRixpQkFBVEU7RUFDUkQsT0FBUUMsU0FBQUEsQ0FBU0YsZ0JBQVRFO0VBQ1JELE9BQVFDLFNBQUFBLENBQVNGLGVBQVRFO0VBQ1JELE9BQVFDLFNBQUFBLENBQVNGLHNCQUFURTtFQUNSRCxPQUFRQyxTQUFBQSxDQUFTRixnQkFBVEU7RUFDUkQsT0FBUUMsU0FBQUEsQ0FBU0YsY0FBVEU7RUFDUkQsT0FBUUMsU0FBQUEsQ0FBU0YsZUFBVEU7RUFFUkYsT0FBQUMsT0FBUUMsU0FBQUEsQ0FBU0YsbUJBQVRFO0FBVFJGOyJ9fSx7Im9mZnNldCI6eyJsaW5lIjo1NTI0LCJjb2x1bW4iOjB9LCJtYXAiOnsidmVyc2lvbiI6Mywic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29yZWxpYi9wcm9jZXNzLnJiIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZSA6OlByb2Nlc3NcbiAgQF9fY2xvY2tzX18gPSBbXVxuICBkZWYgc2VsZi5fX3JlZ2lzdGVyX2Nsb2NrX18obmFtZSwgZnVuYylcbiAgICBjb25zdF9zZXQgbmFtZSwgQF9fY2xvY2tzX18uc2l6ZVxuICAgIEBfX2Nsb2Nrc19fIDw8IGZ1bmNcbiAgZW5kXG5cbiAgX19yZWdpc3Rlcl9jbG9ja19fIDpDTE9DS19SRUFMVElNRSwgYGZ1bmN0aW9uKCkgeyByZXR1cm4gRGF0ZS5ub3coKSB9YFxuXG4gIG1vbm90b25pYyA9IGZhbHNlXG5cbiAgJXh7XG4gICAgaWYgKE9wYWwuZ2xvYmFsLnBlcmZvcm1hbmNlKSB7XG4gICAgICBtb25vdG9uaWMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpXG4gICAgICB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChPcGFsLmdsb2JhbC5wcm9jZXNzICYmIHByb2Nlc3MuaHJ0aW1lKSB7XG4gICAgICAvLyBsZXQgbm93IGJlIHRoZSBiYXNlIHRvIGdldCBzbWFsbGVyIG51bWJlcnNcbiAgICAgIHZhciBocnRpbWVfYmFzZSA9IHByb2Nlc3MuaHJ0aW1lKCk7XG5cbiAgICAgIG1vbm90b25pYyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaHJ0aW1lID0gcHJvY2Vzcy5ocnRpbWUoaHJ0aW1lX2Jhc2UpO1xuICAgICAgICB2YXIgdXMgPSAoaHJ0aW1lWzFdIC8gMTAwMCkgfCAwOyAvLyBjdXQgYmVsb3cgbWljcm9zZWNzO1xuICAgICAgICByZXR1cm4gKChocnRpbWVbMF0gKiAxMDAwKSArICh1cyAvIDEwMDApKTtcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgX19yZWdpc3Rlcl9jbG9ja19fKDpDTE9DS19NT05PVE9OSUMsIG1vbm90b25pYykgaWYgbW9ub3RvbmljXG5cbiAgZGVmIHNlbGYucGlkXG4gICAgMFxuICBlbmRcblxuICBkZWYgc2VsZi50aW1lc1xuICAgIHQgPSA6OlRpbWUubm93LnRvX2ZcbiAgICA6OkJlbmNobWFyazo6VG1zLm5ldyh0LCB0LCB0LCB0LCB0KVxuICBlbmRcblxuICBkZWYgc2VsZi5jbG9ja19nZXR0aW1lKGNsb2NrX2lkLCB1bml0ID0gOmZsb2F0X3NlY29uZClcbiAgICAoY2xvY2sgPSBAX19jbG9ja3NfX1tjbG9ja19pZF0pIHx8IDo6S2VybmVsLnJhaXNlKDo6RXJybm86OkVJTlZBTCwgXCJjbG9ja19nZXR0aW1lKCN7Y2xvY2tfaWR9KSAje0BfX2Nsb2Nrc19fW2Nsb2NrX2lkXX1cIilcbiAgICAleHtcbiAgICAgIHZhciBtcyA9IGNsb2NrKCk7XG4gICAgICBzd2l0Y2ggKHVuaXQpIHtcbiAgICAgICAgY2FzZSAnZmxvYXRfc2Vjb25kJzogICAgICByZXR1cm4gIChtcyAvIDEwMDApOyAgICAgICAgIC8vIG51bWJlciBvZiBzZWNvbmRzIGFzIGEgZmxvYXQgKGRlZmF1bHQpXG4gICAgICAgIGNhc2UgJ2Zsb2F0X21pbGxpc2Vjb25kJzogcmV0dXJuICAobXMgLyAxKTsgICAgICAgICAgICAvLyBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGFzIGEgZmxvYXRcbiAgICAgICAgY2FzZSAnZmxvYXRfbWljcm9zZWNvbmQnOiByZXR1cm4gIChtcyAqIDEwMDApOyAgICAgICAgIC8vIG51bWJlciBvZiBtaWNyb3NlY29uZHMgYXMgYSBmbG9hdFxuICAgICAgICBjYXNlICdzZWNvbmQnOiAgICAgICAgICAgIHJldHVybiAoKG1zIC8gMTAwMCkgICAgfCAwKTsgLy8gbnVtYmVyIG9mIHNlY29uZHMgYXMgYW4gaW50ZWdlclxuICAgICAgICBjYXNlICdtaWxsaXNlY29uZCc6ICAgICAgIHJldHVybiAoKG1zIC8gMSkgICAgICAgfCAwKTsgLy8gbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBhcyBhbiBpbnRlZ2VyXG4gICAgICAgIGNhc2UgJ21pY3Jvc2Vjb25kJzogICAgICAgcmV0dXJuICgobXMgKiAxMDAwKSAgICB8IDApOyAvLyBudW1iZXIgb2YgbWljcm9zZWNvbmRzIGFzIGFuIGludGVnZXJcbiAgICAgICAgY2FzZSAnbmFub3NlY29uZCc6ICAgICAgICByZXR1cm4gKChtcyAqIDEwMDAwMDApIHwgMCk7IC8vIG51bWJlciBvZiBuYW5vc2Vjb25kcyBhcyBhbiBpbnRlZ2VyXG4gICAgICAgIGRlZmF1bHQ6ICN7OjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCBcInVuZXhwZWN0ZWQgdW5pdDogI3t1bml0fVwifVxuICAgICAgfVxuICAgIH1cbiAgZW5kXG5lbmRcbiJdLCJuYW1lcyI6WyI8dG9wIChyZXF1aXJlZCk+IiwiPG1vZHVsZTpQcm9jZXNzPiIsIkBfX2Nsb2Nrc19fIiwiX19yZWdpc3Rlcl9jbG9ja19fIiwic2VsZiIsIm5hbWUiLCJmdW5jIiwiY29uc3Rfc2V0Iiwic2l6ZSIsIjw8IiwibW9ub3RvbmljIiwicGlkIiwiMCIsInRpbWVzIiwidCIsIlRpbWUiLCJub3ciLCJ0b19mIiwiQmVuY2htYXJrOjpUbXMiLCJCZW5jaG1hcmsiLCJuZXciLCJjbG9ja19nZXR0aW1lIiwiY2xvY2tfaWQiLCJ1bml0IiwiJHJldF9vcl8xIiwiY2xvY2siLCJbXSIsIktlcm5lbCIsInJhaXNlIiwiRXJybm86OkVJTlZBTCIsIkVycm5vIiwiQXJndW1lbnRFcnJvciJdLCJtYXBwaW5ncyI6IkFBQUFBLGtDQUFBQSxnQkFBQUE7RUFBQUE7O0VBQUFBO0VBQUFBLE9BQUFDO0VBQUFBOztJQUFBQTs7O0lBQ0VDLGtCQUFjO0lBQ2RDLE1BQUlDLElBQUpELHlCQUFBQSw4QkFBNEJFLElBQUQsRUFBT0MsSUFBbENIO0FBQUFBLE1BQUFBO0FBQUFBOzs7TUFDRUMsSUFBQUcsV0FBQUEsQ0FBVUYsSUFBVixFQUFnQkgsZUFBV00sTUFBQUEsQ0FBQUEsQ0FBM0JEO01BQ0FKLE9BQUFELGVBQVlPLE9BQUFBLENBQUdILElBQUhHO0lBRmROLENBQUFBLEdBQUFBO0lBS0FDLElBQUFELG9CQUFBQSxDQUFtQixnQkFBbkIsRUFBcUNGLGdDQUFyQ0U7SUFFQU8sWUFBWTs7QUFHZFQ7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7O0FBRUFBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0lBRUUsSUFBQSxRQUFtRFMsU0FBbkQsQ0FBQTtNQUFBTixJQUFBRCxvQkFBQUEsQ0FBbUIsaUJBQW5CLEVBQXFDTyxTQUFyQ1A7SUFBQTtJQUVBUSxNQUFJUCxJQUFKTyxVQUFBQSxZQUNFQyxDQURGRCxDQUFBQSxHQUFBQTtJQUlBRSxNQUFJVCxJQUFKUyxZQUFBQSxpQkFBQUE7QUFBQUEsTUFBQUE7OztNQUNFQyxJQUFJQyxXQUFNQyxLQUFBQSxDQUFBQSxDQUFJQyxNQUFBQSxDQUFBQTtNQUNkSixPQUFBSyxJQUFBQyxnQkFBQUQsUUFBZ0JFLEtBQUFBLENBQUtOLENBQXJCLEVBQXdCQSxDQUF4QixFQUEyQkEsQ0FBM0IsRUFBOEJBLENBQTlCLEVBQWlDQSxDQUFqQk07SUFGbEJQLENBQUFBLEdBQUFBO0lBS0FaLE9BQUFvQixNQUFJakIsSUFBSmlCLG9CQUFBQSx5QkFBdUJDLFFBQUQsRUFBV0MsSUFBakNGO0FBQUFBLE1BQUFBO0FBQUFBOzs7TUFBaUMseUJBQU87TUFDdEMsSUFBQSxRQUFBRyxDQUFBQSxZQUFDQyxDQUFBQSxRQUFRdkIsZUFBV3dCLE9BQUFBLENBQUNKLFFBQURJLENBQW5CRCxDQUFERCxDQUFBLENBQUE7UUFBQTtNQUFBO1FBQW1DRyxPQUFRQyxPQUFBQSxDQUFPQyxJQUFBQyxZQUFBRCxXQUFmLEVBQWlDUixnQkFBRCxHQUFBLENBQWlCQyxRQUFqQixDQUFBLEdBQTBCRCxJQUExQixHQUFBLENBQThCbkIsZUFBV3dCLE9BQUFBLENBQUNKLFFBQURJLENBQXpDLENBQXhCRTtNQUEzQzs7QUFFSlA7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUEsaUJBQW1CTSxPQUFRQyxPQUFBQSxDQUFPRyxvQkFBZixFQUFpQ1YsbUJBQUQsR0FBQSxDQUFvQkUsSUFBcEIsQ0FBeEJLO0FBQzNCUDtBQUNBQTtJQWRFQSxDQUFBQSxJQUFBQTtFQXhDRnBCLEdBQU8sSUFBUEE7QUFBQUQ7In19LHsib2Zmc2V0Ijp7ImxpbmUiOjU2MDEsImNvbHVtbiI6MH0sIm1hcCI6eyJ2ZXJzaW9uIjozLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb3JlbGliL2NvbXBsZXgucmIiXSwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSAnY29yZWxpYi9udW1lcmljJ1xucmVxdWlyZSAnY29yZWxpYi9jb21wbGV4L2Jhc2UnXG5cbmNsYXNzIDo6Q29tcGxleCA8IDo6TnVtZXJpY1xuICBkZWYgc2VsZi5yZWN0KHJlYWwsIGltYWcgPSAwKVxuICAgIHVubGVzcyA6Ok51bWVyaWMgPT09IHJlYWwgJiYgcmVhbC5yZWFsPyAmJiA6Ok51bWVyaWMgPT09IGltYWcgJiYgaW1hZy5yZWFsP1xuICAgICAgOjpLZXJuZWwucmFpc2UgOjpUeXBlRXJyb3IsICdub3QgYSByZWFsJ1xuICAgIGVuZFxuXG4gICAgbmV3KHJlYWwsIGltYWcpXG4gIGVuZFxuXG4gIGRlZiBzZWxmLnBvbGFyKHIsIHRoZXRhID0gMClcbiAgICB1bmxlc3MgOjpOdW1lcmljID09PSByICYmIHIucmVhbD8gJiYgOjpOdW1lcmljID09PSB0aGV0YSAmJiB0aGV0YS5yZWFsP1xuICAgICAgOjpLZXJuZWwucmFpc2UgOjpUeXBlRXJyb3IsICdub3QgYSByZWFsJ1xuICAgIGVuZFxuXG4gICAgbmV3KHIgKiA6Ok1hdGguY29zKHRoZXRhKSwgciAqIDo6TWF0aC5zaW4odGhldGEpKVxuICBlbmRcblxuICBhdHRyX3JlYWRlciA6cmVhbCwgOmltYWdcblxuICBkZWYgaW5pdGlhbGl6ZShyZWFsLCBpbWFnID0gMClcbiAgICBAcmVhbCA9IHJlYWxcbiAgICBAaW1hZyA9IGltYWdcbiAgICBmcmVlemVcbiAgZW5kXG5cbiAgZGVmIGNvZXJjZShvdGhlcilcbiAgICBpZiA6OkNvbXBsZXggPT09IG90aGVyXG4gICAgICBbb3RoZXIsIHNlbGZdXG4gICAgZWxzaWYgOjpOdW1lcmljID09PSBvdGhlciAmJiBvdGhlci5yZWFsP1xuICAgICAgWzo6Q29tcGxleC5uZXcob3RoZXIsIDApLCBzZWxmXVxuICAgIGVsc2VcbiAgICAgIDo6S2VybmVsLnJhaXNlIDo6VHlwZUVycm9yLCBcIiN7b3RoZXIuY2xhc3N9IGNhbid0IGJlIGNvZXJjZWQgaW50byBDb21wbGV4XCJcbiAgICBlbmRcbiAgZW5kXG5cbiAgZGVmID09KG90aGVyKVxuICAgIGlmIDo6Q29tcGxleCA9PT0gb3RoZXJcbiAgICAgIEByZWFsID09IG90aGVyLnJlYWwgJiYgQGltYWcgPT0gb3RoZXIuaW1hZ1xuICAgIGVsc2lmIDo6TnVtZXJpYyA9PT0gb3RoZXIgJiYgb3RoZXIucmVhbD9cbiAgICAgIEByZWFsID09IG90aGVyICYmIEBpbWFnID09IDBcbiAgICBlbHNlXG4gICAgICBvdGhlciA9PSBzZWxmXG4gICAgZW5kXG4gIGVuZFxuXG4gIGRlZiAtQFxuICAgIDo6S2VybmVsLkNvbXBsZXgoLUByZWFsLCAtQGltYWcpXG4gIGVuZFxuXG4gIGRlZiArKG90aGVyKVxuICAgIGlmIDo6Q29tcGxleCA9PT0gb3RoZXJcbiAgICAgIDo6S2VybmVsLkNvbXBsZXgoQHJlYWwgKyBvdGhlci5yZWFsLCBAaW1hZyArIG90aGVyLmltYWcpXG4gICAgZWxzaWYgOjpOdW1lcmljID09PSBvdGhlciAmJiBvdGhlci5yZWFsP1xuICAgICAgOjpLZXJuZWwuQ29tcGxleChAcmVhbCArIG90aGVyLCBAaW1hZylcbiAgICBlbHNlXG4gICAgICBfX2NvZXJjZWRfXyA6Kywgb3RoZXJcbiAgICBlbmRcbiAgZW5kXG5cbiAgZGVmIC0ob3RoZXIpXG4gICAgaWYgOjpDb21wbGV4ID09PSBvdGhlclxuICAgICAgOjpLZXJuZWwuQ29tcGxleChAcmVhbCAtIG90aGVyLnJlYWwsIEBpbWFnIC0gb3RoZXIuaW1hZylcbiAgICBlbHNpZiA6Ok51bWVyaWMgPT09IG90aGVyICYmIG90aGVyLnJlYWw/XG4gICAgICA6Oktlcm5lbC5Db21wbGV4KEByZWFsIC0gb3RoZXIsIEBpbWFnKVxuICAgIGVsc2VcbiAgICAgIF9fY29lcmNlZF9fIDotLCBvdGhlclxuICAgIGVuZFxuICBlbmRcblxuICBkZWYgKihvdGhlcilcbiAgICBpZiA6OkNvbXBsZXggPT09IG90aGVyXG4gICAgICA6Oktlcm5lbC5Db21wbGV4KEByZWFsICogb3RoZXIucmVhbCAtIEBpbWFnICogb3RoZXIuaW1hZyxcbiAgICAgICAgQHJlYWwgKiBvdGhlci5pbWFnICsgQGltYWcgKiBvdGhlci5yZWFsLFxuICAgICAgKVxuICAgIGVsc2lmIDo6TnVtZXJpYyA9PT0gb3RoZXIgJiYgb3RoZXIucmVhbD9cbiAgICAgIDo6S2VybmVsLkNvbXBsZXgoQHJlYWwgKiBvdGhlciwgQGltYWcgKiBvdGhlcilcbiAgICBlbHNlXG4gICAgICBfX2NvZXJjZWRfXyA6Kiwgb3RoZXJcbiAgICBlbmRcbiAgZW5kXG5cbiAgZGVmIC8ob3RoZXIpXG4gICAgaWYgOjpDb21wbGV4ID09PSBvdGhlclxuICAgICAgaWYgKDo6TnVtYmVyID09PSBAcmVhbCAmJiBAcmVhbC5uYW4/KSB8fCAoOjpOdW1iZXIgPT09IEBpbWFnICYmIEBpbWFnLm5hbj8pIHx8XG4gICAgICAgICAoOjpOdW1iZXIgPT09IG90aGVyLnJlYWwgJiYgb3RoZXIucmVhbC5uYW4/KSB8fCAoOjpOdW1iZXIgPT09IG90aGVyLmltYWcgJiYgb3RoZXIuaW1hZy5uYW4/KVxuICAgICAgICA6OkNvbXBsZXgubmV3KDo6RmxvYXQ6Ok5BTiwgOjpGbG9hdDo6TkFOKVxuICAgICAgZWxzZVxuICAgICAgICBzZWxmICogb3RoZXIuY29uaiAvIG90aGVyLmFiczJcbiAgICAgIGVuZFxuICAgIGVsc2lmIDo6TnVtZXJpYyA9PT0gb3RoZXIgJiYgb3RoZXIucmVhbD9cbiAgICAgIDo6S2VybmVsLkNvbXBsZXgoQHJlYWwucXVvKG90aGVyKSwgQGltYWcucXVvKG90aGVyKSlcbiAgICBlbHNlXG4gICAgICBfX2NvZXJjZWRfXyA6Lywgb3RoZXJcbiAgICBlbmRcbiAgZW5kXG5cbiAgZGVmICoqKG90aGVyKVxuICAgIGlmIG90aGVyID09IDBcbiAgICAgIHJldHVybiA6OkNvbXBsZXgubmV3KDEsIDApXG4gICAgZW5kXG5cbiAgICBpZiA6OkNvbXBsZXggPT09IG90aGVyXG4gICAgICByLCB0aGV0YSA9IHBvbGFyXG4gICAgICBvcmUgICAgICA9IG90aGVyLnJlYWxcbiAgICAgIG9pbSAgICAgID0gb3RoZXIuaW1hZ1xuICAgICAgbnIgICAgICAgPSA6Ok1hdGguZXhwKG9yZSAqIDo6TWF0aC5sb2cocikgLSBvaW0gKiB0aGV0YSlcbiAgICAgIG50aGV0YSAgID0gdGhldGEgKiBvcmUgKyBvaW0gKiA6Ok1hdGgubG9nKHIpXG5cbiAgICAgIDo6Q29tcGxleC5wb2xhcihuciwgbnRoZXRhKVxuICAgIGVsc2lmIDo6SW50ZWdlciA9PT0gb3RoZXJcbiAgICAgIGlmIG90aGVyID4gMFxuICAgICAgICB4ID0gc2VsZlxuICAgICAgICB6ID0geFxuICAgICAgICBuID0gb3RoZXIgLSAxXG5cbiAgICAgICAgd2hpbGUgbiAhPSAwXG4gICAgICAgICAgZGl2LCBtb2QgPSBuLmRpdm1vZCgyKVxuICAgICAgICAgIHdoaWxlIG1vZCA9PSAwXG4gICAgICAgICAgICB4ID0gOjpLZXJuZWwuQ29tcGxleCh4LnJlYWwgKiB4LnJlYWwgLSB4LmltYWcgKiB4LmltYWcsIDIgKiB4LnJlYWwgKiB4LmltYWcpXG4gICAgICAgICAgICBuID0gZGl2XG4gICAgICAgICAgICBkaXYsIG1vZCA9IG4uZGl2bW9kKDIpXG4gICAgICAgICAgZW5kXG5cbiAgICAgICAgICB6ICo9IHhcbiAgICAgICAgICBuIC09IDFcbiAgICAgICAgZW5kXG5cbiAgICAgICAgelxuICAgICAgZWxzZVxuICAgICAgICAoOjpSYXRpb25hbC5uZXcoMSwgMSkgLyBzZWxmKSoqLW90aGVyXG4gICAgICBlbmRcbiAgICBlbHNpZiA6OkZsb2F0ID09PSBvdGhlciB8fCA6OlJhdGlvbmFsID09PSBvdGhlclxuICAgICAgciwgdGhldGEgPSBwb2xhclxuXG4gICAgICA6OkNvbXBsZXgucG9sYXIocioqb3RoZXIsIHRoZXRhICogb3RoZXIpXG4gICAgZWxzZVxuICAgICAgX19jb2VyY2VkX18gOioqLCBvdGhlclxuICAgIGVuZFxuICBlbmRcblxuICBkZWYgYWJzXG4gICAgOjpNYXRoLmh5cG90KEByZWFsLCBAaW1hZylcbiAgZW5kXG5cbiAgZGVmIGFiczJcbiAgICBAcmVhbCAqIEByZWFsICsgQGltYWcgKiBAaW1hZ1xuICBlbmRcblxuICBkZWYgYW5nbGVcbiAgICA6Ok1hdGguYXRhbjIoQGltYWcsIEByZWFsKVxuICBlbmRcblxuICBkZWYgY29ualxuICAgIDo6S2VybmVsLkNvbXBsZXgoQHJlYWwsIC1AaW1hZylcbiAgZW5kXG5cbiAgZGVmIGRlbm9taW5hdG9yXG4gICAgQHJlYWwuZGVub21pbmF0b3IubGNtKEBpbWFnLmRlbm9taW5hdG9yKVxuICBlbmRcblxuICBkZWYgZXFsPyhvdGhlcilcbiAgICBDb21wbGV4ID09PSBvdGhlciAmJiBAcmVhbC5jbGFzcyA9PSBAaW1hZy5jbGFzcyAmJiBzZWxmID09IG90aGVyXG4gIGVuZFxuXG4gIGRlZiBmZGl2KG90aGVyKVxuICAgIHVubGVzcyA6Ok51bWVyaWMgPT09IG90aGVyXG4gICAgICA6Oktlcm5lbC5yYWlzZSA6OlR5cGVFcnJvciwgXCIje290aGVyLmNsYXNzfSBjYW4ndCBiZSBjb2VyY2VkIGludG8gQ29tcGxleFwiXG4gICAgZW5kXG5cbiAgICBzZWxmIC8gb3RoZXJcbiAgZW5kXG5cbiAgZGVmIGZpbml0ZT9cbiAgICBAcmVhbC5maW5pdGU/ICYmIEBpbWFnLmZpbml0ZT9cbiAgZW5kXG5cbiAgZGVmIGhhc2hcbiAgICBcIkNvbXBsZXg6I3tAcmVhbH06I3tAaW1hZ31cIlxuICBlbmRcblxuICBkZWYgaW5maW5pdGU/XG4gICAgQHJlYWwuaW5maW5pdGU/IHx8IEBpbWFnLmluZmluaXRlP1xuICBlbmRcblxuICBkZWYgaW5zcGVjdFxuICAgIFwiKCN7c2VsZn0pXCJcbiAgZW5kXG5cbiAgZGVmIG51bWVyYXRvclxuICAgIGQgPSBkZW5vbWluYXRvclxuXG4gICAgOjpLZXJuZWwuQ29tcGxleChAcmVhbC5udW1lcmF0b3IgKiAoZCAvIEByZWFsLmRlbm9taW5hdG9yKSxcbiAgICAgIEBpbWFnLm51bWVyYXRvciAqIChkIC8gQGltYWcuZGVub21pbmF0b3IpLFxuICAgIClcbiAgZW5kXG5cbiAgZGVmIHBvbGFyXG4gICAgW2FicywgYXJnXVxuICBlbmRcblxuICBkZWYgcmF0aW9uYWxpemUoZXBzID0gdW5kZWZpbmVkKVxuICAgICV4e1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCBcIndyb25nIG51bWJlciBvZiBhcmd1bWVudHMgKCN7YGFyZ3VtZW50cy5sZW5ndGhgfSBmb3IgMC4uMSlcIn07XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgQGltYWcgIT0gMFxuICAgICAgOjpLZXJuZWwucmFpc2UgOjpSYW5nZUVycm9yLCBcImNhbid0IGNvbnZlcnQgI3tzZWxmfSBpbnRvIFJhdGlvbmFsXCJcbiAgICBlbmRcblxuICAgIHJlYWwucmF0aW9uYWxpemUoZXBzKVxuICBlbmRcblxuICBkZWYgcmVhbD9cbiAgICBmYWxzZVxuICBlbmRcblxuICBkZWYgcmVjdFxuICAgIFtAcmVhbCwgQGltYWddXG4gIGVuZFxuXG4gIGRlZiB0b19mXG4gICAgdW5sZXNzIEBpbWFnID09IDBcbiAgICAgIDo6S2VybmVsLnJhaXNlIDo6UmFuZ2VFcnJvciwgXCJjYW4ndCBjb252ZXJ0ICN7c2VsZn0gaW50byBGbG9hdFwiXG4gICAgZW5kXG5cbiAgICBAcmVhbC50b19mXG4gIGVuZFxuXG4gIGRlZiB0b19pXG4gICAgdW5sZXNzIEBpbWFnID09IDBcbiAgICAgIDo6S2VybmVsLnJhaXNlIDo6UmFuZ2VFcnJvciwgXCJjYW4ndCBjb252ZXJ0ICN7c2VsZn0gaW50byBJbnRlZ2VyXCJcbiAgICBlbmRcblxuICAgIEByZWFsLnRvX2lcbiAgZW5kXG5cbiAgZGVmIHRvX3JcbiAgICB1bmxlc3MgQGltYWcgPT0gMFxuICAgICAgOjpLZXJuZWwucmFpc2UgOjpSYW5nZUVycm9yLCBcImNhbid0IGNvbnZlcnQgI3tzZWxmfSBpbnRvIFJhdGlvbmFsXCJcbiAgICBlbmRcblxuICAgIEByZWFsLnRvX3JcbiAgZW5kXG5cbiAgZGVmIHRvX3NcbiAgICByZXN1bHQgPSBAcmVhbC5pbnNwZWN0XG5cbiAgICByZXN1bHQgKz1cbiAgICAgIGlmICg6Ok51bWJlciA9PT0gQGltYWcgJiYgQGltYWcubmFuPykgfHwgQGltYWcucG9zaXRpdmU/IHx8IEBpbWFnLnplcm8/XG4gICAgICAgICcrJ1xuICAgICAgZWxzZVxuICAgICAgICAnLSdcbiAgICAgIGVuZFxuXG4gICAgcmVzdWx0ICs9IEBpbWFnLmFicy5pbnNwZWN0XG5cbiAgICBpZiA6Ok51bWJlciA9PT0gQGltYWcgJiYgKEBpbWFnLm5hbj8gfHwgQGltYWcuaW5maW5pdGU/KVxuICAgICAgcmVzdWx0ICs9ICcqJ1xuICAgIGVuZFxuXG4gICAgcmVzdWx0ICsgJ2knXG4gIGVuZFxuXG4gIEkgPSBuZXcoMCwgMSlcblxuICBkZWYgc2VsZi5mcm9tX3N0cmluZyhzdHIpXG4gICAgJXh7XG4gICAgICB2YXIgcmUgPSAvWystXT9bXFxkX10rKFxcLltcXGRfXSspPyhlXFxkKyk/LyxcbiAgICAgICAgICBtYXRjaCA9IHN0ci5tYXRjaChyZSksXG4gICAgICAgICAgcmVhbCwgaW1hZywgZGVub21pbmF0b3I7XG5cbiAgICAgIGZ1bmN0aW9uIGlzRmxvYXQoKSB7XG4gICAgICAgIHJldHVybiByZS50ZXN0KHN0cik7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGN1dEZsb2F0KCkge1xuICAgICAgICB2YXIgbWF0Y2ggPSBzdHIubWF0Y2gocmUpO1xuICAgICAgICB2YXIgbnVtYmVyID0gbWF0Y2hbMF07XG4gICAgICAgIHN0ciA9IHN0ci5zbGljZShudW1iZXIubGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIG51bWJlci5yZXBsYWNlKC9fL2csICcnKTtcbiAgICAgIH1cblxuICAgICAgLy8gaGFuZGxlcyBib3RoIGZsb2F0cyBhbmQgcmF0aW9uYWxzXG4gICAgICBmdW5jdGlvbiBjdXROdW1iZXIoKSB7XG4gICAgICAgIGlmIChpc0Zsb2F0KCkpIHtcbiAgICAgICAgICB2YXIgbnVtZXJhdG9yID0gcGFyc2VGbG9hdChjdXRGbG9hdCgpKTtcblxuICAgICAgICAgIGlmIChzdHJbMF0gPT09ICcvJykge1xuICAgICAgICAgICAgLy8gcmF0aW9uYWwgcmVhbCBwYXJ0XG4gICAgICAgICAgICBzdHIgPSBzdHIuc2xpY2UoMSk7XG5cbiAgICAgICAgICAgIGlmIChpc0Zsb2F0KCkpIHtcbiAgICAgICAgICAgICAgdmFyIGRlbm9taW5hdG9yID0gcGFyc2VGbG9hdChjdXRGbG9hdCgpKTtcbiAgICAgICAgICAgICAgcmV0dXJuICN7OjpLZXJuZWwuUmF0aW9uYWwoYG51bWVyYXRvcmAsIGBkZW5vbWluYXRvcmApfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIHJldmVydGluZyAnLydcbiAgICAgICAgICAgICAgc3RyID0gJy8nICsgc3RyO1xuICAgICAgICAgICAgICByZXR1cm4gbnVtZXJhdG9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBmbG9hdCByZWFsIHBhcnQsIG5vIGRlbm9taW5hdG9yXG4gICAgICAgICAgICByZXR1cm4gbnVtZXJhdG9yO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZWFsID0gY3V0TnVtYmVyKCk7XG5cbiAgICAgIGlmICghcmVhbCkge1xuICAgICAgICBpZiAoc3RyWzBdID09PSAnaScpIHtcbiAgICAgICAgICAvLyBpID0+IENvbXBsZXgoMCwgMSlcbiAgICAgICAgICByZXR1cm4gI3s6Oktlcm5lbC5Db21wbGV4KDAsIDEpfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RyWzBdID09PSAnLScgJiYgc3RyWzFdID09PSAnaScpIHtcbiAgICAgICAgICAvLyAtaSA9PiBDb21wbGV4KDAsIC0xKVxuICAgICAgICAgIHJldHVybiAjezo6S2VybmVsLkNvbXBsZXgoMCwgLTEpfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RyWzBdID09PSAnKycgJiYgc3RyWzFdID09PSAnaScpIHtcbiAgICAgICAgICAvLyAraSA9PiBDb21wbGV4KDAsIDEpXG4gICAgICAgICAgcmV0dXJuICN7OjpLZXJuZWwuQ29tcGxleCgwLCAxKX07XG4gICAgICAgIH1cbiAgICAgICAgLy8gYW55dGhpbmcgPT4gQ29tcGxleCgwLCAwKVxuICAgICAgICByZXR1cm4gI3s6Oktlcm5lbC5Db21wbGV4KDAsIDApfTtcbiAgICAgIH1cblxuICAgICAgaW1hZyA9IGN1dE51bWJlcigpO1xuICAgICAgaWYgKCFpbWFnKSB7XG4gICAgICAgIGlmIChzdHJbMF0gPT09ICdpJykge1xuICAgICAgICAgIC8vIDNpID0+IENvbXBsZXgoMCwgMylcbiAgICAgICAgICByZXR1cm4gI3s6Oktlcm5lbC5Db21wbGV4KDAsIGByZWFsYCl9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIDMgPT4gQ29tcGxleCgzLCAwKVxuICAgICAgICAgIHJldHVybiAjezo6S2VybmVsLkNvbXBsZXgoYHJlYWxgLCAwKX07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIDMrMmkgPT4gQ29tcGxleCgzLCAyKVxuICAgICAgICByZXR1cm4gI3s6Oktlcm5lbC5Db21wbGV4KGByZWFsYCwgYGltYWdgKX07XG4gICAgICB9XG4gICAgfVxuICBlbmRcblxuICBjbGFzcyA8PCBzZWxmXG4gICAgYWxpYXMgcmVjdGFuZ3VsYXIgcmVjdFxuICBlbmRcblxuICBhbGlhcyBhcmcgYW5nbGVcbiAgYWxpYXMgY29uanVnYXRlIGNvbmpcbiAgYWxpYXMgZGl2aWRlIC9cbiAgYWxpYXMgaW1hZ2luYXJ5IGltYWdcbiAgYWxpYXMgbWFnbml0dWRlIGFic1xuICBhbGlhcyBwaGFzZSBhcmdcbiAgYWxpYXMgcXVvIC9cbiAgYWxpYXMgcmVjdGFuZ3VsYXIgcmVjdFxuXG4gIHVuZGVmIG5lZ2F0aXZlP1xuICB1bmRlZiBwb3NpdGl2ZT9cbiAgdW5kZWYgc3RlcFxuZW5kXG4iXSwibmFtZXMiOlsiPHRvcCAocmVxdWlyZWQpPiIsInNlbGYiLCJyZXF1aXJlIiwiPGNsYXNzOkNvbXBsZXg+IiwicmVjdCIsInJlYWwiLCJpbWFnIiwiMCIsIk51bWVyaWMiLCJyZWFsPyIsIktlcm5lbCIsInJhaXNlIiwiVHlwZUVycm9yIiwibmV3IiwicG9sYXIiLCJyIiwidGhldGEiLCIqIiwiTWF0aCIsImNvcyIsInNpbiIsImF0dHJfcmVhZGVyIiwiaW5pdGlhbGl6ZSIsIkByZWFsIiwiQGltYWciLCJmcmVlemUiLCJjb2VyY2UiLCJvdGhlciIsIkNvbXBsZXgiLCJjbGFzcyIsIj09IiwiJHJldF9vcl8xIiwiLUAiLCIrIiwiX19jb2VyY2VkX18iLCItIiwiLyIsIk51bWJlciIsIm5hbj8iLCJGbG9hdDo6TkFOIiwiRmxvYXQiLCJjb25qIiwiYWJzMiIsInF1byIsIioqIiwiMSIsIm9yZSIsIm9pbSIsIm5yIiwiZXhwIiwibG9nIiwibnRoZXRhIiwiSW50ZWdlciIsIj4iLCJ4IiwieiIsIm4iLCJkaXZtb2QiLCIyIiwiZGl2IiwibW9kIiwiUmF0aW9uYWwiLCJhYnMiLCJoeXBvdCIsImFuZ2xlIiwiYXRhbjIiLCJkZW5vbWluYXRvciIsImxjbSIsImVxbD8iLCIkcmV0X29yXzIiLCI9PT0iLCJmZGl2IiwiZmluaXRlPyIsImhhc2giLCJpbmZpbml0ZT8iLCJpbnNwZWN0IiwibnVtZXJhdG9yIiwiZCIsImFyZyIsInJhdGlvbmFsaXplIiwiZXBzIiwiQXJndW1lbnRFcnJvciIsIlJhbmdlRXJyb3IiLCJ0b19mIiwidG9faSIsInRvX3IiLCJ0b19zIiwicmVzdWx0IiwicG9zaXRpdmU/IiwiemVybz8iLCJmcm9tX3N0cmluZyIsInN0ciIsIi0xIl0sIm1hcHBpbmdzIjoiQUFBQUEsa0NBQUFB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SUFDQSxzQkFBTSxNQUFOO0lBM1dGRSxPQUFBO0VBR0FBLEdBQU0sSUFBTkEsRUFBa0JLLGNBQWxCTDtBQUhBSDsifX0seyJvZmZzZXQiOnsibGluZSI6NjA0NywiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvcmVsaWIvcHJvY2Vzcy9iYXNlLnJiIl0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIDo6U2lnbmFsXG4gIGRlZiBzZWxmLnRyYXAoKilcbiAgZW5kXG5lbmRcblxuY2xhc3MgOjpHQ1xuICBkZWYgc2VsZi5zdGFydFxuICBlbmRcbmVuZFxuIl0sIm5hbWVzIjpbIjx0b3AgKHJlcXVpcmVkKT4iLCI8Y2xhc3M6U2lnbmFsPiIsInRyYXAiLCJzZWxmIiwiPGNsYXNzOkdDPiIsInN0YXJ0Il0sIm1hcHBpbmdzIjoiQUFBQUEsdUNBQUFBLGdCQUFBQTtFQUFBQTs7O0VBQUFDO0VBQUFBOzs7SUFDRUEsT0FBQUMsTUFBSUMsSUFBSkQsV0FBQUEsZ0JBREYsRUFDRUE7QUFBQUEsTUFBQUE7OztNQURGO01BQ2dCO01BRGhCQSxPQUFBO0lBQ0VBLENBQUFBLElBQUFBO0VBREZELEdBQU0sSUFBTkEsRUFBQUEsSUFBQUE7RUFLQUQsT0FBQUk7RUFBQUE7OztJQUNFQSxPQUFBQyxNQUFJRixJQUFKRSxZQUFBQSxZQU5GLEdBTUVBLENBQUFBLEdBQUFBO0VBREZELEdBQU0sSUFBTkEsRUFBQUEsSUFBQUE7QUFMQUo7In19LHsib2Zmc2V0Ijp7ImxpbmUiOjYwNzIsImNvbHVtbiI6MH0sIm1hcCI6eyJ2ZXJzaW9uIjozLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb3JlbGliL2ZpbGUucmIiXSwic291cmNlc0NvbnRlbnQiOlsiIyBoZWxwZXJzOiB0cnV0aHlcblxuY2xhc3MgOjpGaWxlIDwgOjpJT1xuICBTZXBhcmF0b3IgPSBTRVBBUkFUT1IgPSAnLydcbiAgQUxUX1NFUEFSQVRPUiA9IG5pbFxuICBQQVRIX1NFUEFSQVRPUiA9ICc6J1xuICAjIEFzc3VtaW5nIGNhc2UgaW5zZW5zdGl2ZSBmaWxlc3lzdGVtXG4gIEZOTV9TWVNDQVNFID0gMFxuICB3aW5kb3dzX3Jvb3RfcnggPSAlcnteW2EtekEtWl06KD86XFxcXHxcXC8pfVxuXG4gIGNsYXNzIDw8IHNlbGZcbiAgICBkZWYgYWJzb2x1dGVfcGF0aChwYXRoLCBiYXNlZGlyID0gbmlsKVxuICAgICAgc2VwID0gU0VQQVJBVE9SXG4gICAgICBzZXBfY2hhcnMgPSBgJHNlcF9jaGFycygpYFxuICAgICAgbmV3X3BhcnRzID0gW11cblxuICAgICAgcGF0aCA9IHBhdGgucmVzcG9uZF90bz8oOnRvX3BhdGgpID8gcGF0aC50b19wYXRoIDogcGF0aFxuICAgICAgcGF0aCA9IDo6T3BhbC5jb2VyY2VfdG8hKGBwYXRoYCwgOjpTdHJpbmcsIDp0b19zdHIpXG5cbiAgICAgIGJhc2VkaXIgfHw9IDo6RGlyLnB3ZFxuICAgICAgcGF0aF9hYnMgICAgPSBgcGF0aC5zdWJzdHIoMCwgc2VwLmxlbmd0aCkgPT09IHNlcCB8fCB3aW5kb3dzX3Jvb3RfcngudGVzdChwYXRoKWBcbiAgICAgIGJhc2VkaXJfYWJzID0gYGJhc2VkaXIuc3Vic3RyKDAsIHNlcC5sZW5ndGgpID09PSBzZXAgfHwgd2luZG93c19yb290X3J4LnRlc3QoYmFzZWRpcilgXG5cbiAgICAgIGlmIHBhdGhfYWJzXG4gICAgICAgIHBhcnRzICAgICAgID0gcGF0aC5zcGxpdCgvWyN7c2VwX2NoYXJzfV0vKVxuICAgICAgICBsZWFkaW5nX3NlcCA9IGB3aW5kb3dzX3Jvb3RfcngudGVzdChwYXRoKSA/ICcnIDogI3twYXRoLnN1YigvXihbI3tzZXBfY2hhcnN9XSspLiokLywgJ1xcMScpfWBcbiAgICAgICAgYWJzICAgICAgICAgPSB0cnVlXG4gICAgICBlbHNlXG4gICAgICAgIHBhcnRzICAgICAgID0gYmFzZWRpci5zcGxpdCgvWyN7c2VwX2NoYXJzfV0vKSArIHBhdGguc3BsaXQoL1sje3NlcF9jaGFyc31dLylcbiAgICAgICAgbGVhZGluZ19zZXAgPSBgd2luZG93c19yb290X3J4LnRlc3QoYmFzZWRpcikgPyAnJyA6ICN7YmFzZWRpci5zdWIoL14oWyN7c2VwX2NoYXJzfV0rKS4qJC8sICdcXDEnKX1gXG4gICAgICAgIGFicyAgICAgICAgID0gYmFzZWRpcl9hYnNcbiAgICAgIGVuZFxuXG4gICAgICAleHtcbiAgICAgICAgdmFyIHBhcnQ7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHBhcnRzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICBwYXJ0ID0gcGFydHNbaV07XG5cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAocGFydCA9PT0gbmlsKSB8fFxuICAgICAgICAgICAgKHBhcnQgPT09ICcnICAmJiAoKG5ld19wYXJ0cy5sZW5ndGggPT09IDApIHx8IGFicykpIHx8XG4gICAgICAgICAgICAocGFydCA9PT0gJy4nICYmICgobmV3X3BhcnRzLmxlbmd0aCA9PT0gMCkgfHwgYWJzKSlcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgICAgICAgbmV3X3BhcnRzLnBvcCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdfcGFydHMucHVzaChwYXJ0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWFicyAmJiBwYXJ0c1swXSAhPT0gJy4nKSB7XG4gICAgICAgICAgI3tuZXdfcGFydHMudW5zaGlmdCAnLid9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbmV3X3BhdGggPSBuZXdfcGFydHMuam9pbihzZXApXG4gICAgICBuZXdfcGF0aCA9IGxlYWRpbmdfc2VwICsgbmV3X3BhdGggaWYgYWJzXG4gICAgICBuZXdfcGF0aFxuICAgIGVuZFxuXG4gICAgZGVmIGV4cGFuZF9wYXRoKHBhdGgsIGJhc2VkaXIgPSBuaWwpXG4gICAgICBzZXAgPSBTRVBBUkFUT1JcbiAgICAgIHNlcF9jaGFycyA9IGAkc2VwX2NoYXJzKClgXG4gICAgICBpZiBgcGF0aFswXSA9PT0gJ34nIHx8IChiYXNlZGlyICYmIGJhc2VkaXJbMF0gPT09ICd+JylgXG4gICAgICAgIGhvbWUgPSBEaXIuaG9tZVxuICAgICAgICA6Oktlcm5lbC5yYWlzZSg6OkFyZ3VtZW50RXJyb3IsIFwiY291bGRuJ3QgZmluZCBIT01FIGVudmlyb25tZW50IC0tIGV4cGFuZGluZyBgfidcIikgdW5sZXNzIGhvbWVcbiAgICAgICAgbGVhZGluZ19zZXAgPSBgd2luZG93c19yb290X3J4LnRlc3QoaG9tZSkgPyAnJyA6ICN7aG9tZS5zdWIoL14oWyN7c2VwX2NoYXJzfV0rKS4qJC8sICdcXDEnKX1gXG4gICAgICAgIDo6S2VybmVsLnJhaXNlKDo6QXJndW1lbnRFcnJvciwgJ25vbi1hYnNvbHV0ZSBob21lJykgdW5sZXNzIGhvbWUuc3RhcnRfd2l0aD8obGVhZGluZ19zZXApXG5cbiAgICAgICAgaG9tZSAgICAgICAgICAgICs9IHNlcFxuICAgICAgICBob21lX3BhdGhfcmVnZXhwID0gL15cXH4oPzoje3NlcH18JCkvXG4gICAgICAgIHBhdGggICAgICAgICAgICAgPSBwYXRoLnN1Yihob21lX3BhdGhfcmVnZXhwLCBob21lKVxuICAgICAgICBiYXNlZGlyICAgICAgICAgID0gYmFzZWRpci5zdWIoaG9tZV9wYXRoX3JlZ2V4cCwgaG9tZSkgaWYgYmFzZWRpclxuICAgICAgZW5kXG4gICAgICBhYnNvbHV0ZV9wYXRoKHBhdGgsIGJhc2VkaXIpXG4gICAgZW5kXG5cbiAgICAleHtcbiAgICAgIC8vIENvZXJjZSBhIGdpdmVuIHBhdGggdG8gYSBwYXRoIHN0cmluZyB1c2luZyAjdG9fcGF0aCBhbmQgI3RvX3N0clxuICAgICAgZnVuY3Rpb24gJGNvZXJjZV90b19wYXRoKHBhdGgpIHtcbiAgICAgICAgaWYgKCR0cnV0aHkoI3tgcGF0aGAucmVzcG9uZF90bz8oOnRvX3BhdGgpfSkpIHtcbiAgICAgICAgICBwYXRoID0gcGF0aC4kdG9fcGF0aCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGF0aCA9ICN7OjpPcGFsLmNvZXJjZV90byEoYHBhdGhgLCA6OlN0cmluZywgOnRvX3N0cil9O1xuXG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgfVxuXG4gICAgICAvLyBSZXR1cm4gYSBSZWdFeHAgY29tcGF0aWJsZSBjaGFyIGNsYXNzXG4gICAgICBmdW5jdGlvbiAkc2VwX2NoYXJzKCkge1xuICAgICAgICBpZiAoI3tBTFRfU0VQQVJBVE9SfSA9PT0gbmlsKSB7XG4gICAgICAgICAgcmV0dXJuIE9wYWwuZXNjYXBlX3JlZ2V4cCgje1NFUEFSQVRPUn0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBPcGFsLmVzY2FwZV9yZWdleHAoI3tTRVBBUkFUT1IgKyBBTFRfU0VQQVJBVE9SfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBkZWYgZGlybmFtZShwYXRoLCBsZXZlbCA9IDEpXG4gICAgICByZXR1cm4gcGF0aCBpZiBsZXZlbCA9PSAwXG4gICAgICA6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsIFwibGV2ZWwgY2FuJ3QgYmUgbmVnYXRpdmVcIiBpZiBsZXZlbCA8IDBcblxuICAgICAgc2VwX2NoYXJzID0gYCRzZXBfY2hhcnMoKWBcbiAgICAgIHBhdGggPSBgJGNvZXJjZV90b19wYXRoKHBhdGgpYFxuICAgICAgJXh7XG4gICAgICAgIHZhciBhYnNvbHV0ZSA9IHBhdGgubWF0Y2gobmV3IFJlZ0V4cCgje1wiXlsje3NlcF9jaGFyc31dXCJ9KSksIG91dDtcblxuICAgICAgICBwYXRoID0gcGF0aC5yZXBsYWNlKG5ldyBSZWdFeHAoI3tcIlsje3NlcF9jaGFyc31dKyRcIn0pLCAnJyk7IC8vIHJlbW92ZSB0cmFpbGluZyBzZXBhcmF0b3JzXG4gICAgICAgIHBhdGggPSBwYXRoLnJlcGxhY2UobmV3IFJlZ0V4cCgje1wiW14je3NlcF9jaGFyc31dKyRcIn0pLCAnJyk7IC8vIHJlbW92ZSB0cmFpbGluZyBiYXNlbmFtZVxuICAgICAgICBwYXRoID0gcGF0aC5yZXBsYWNlKG5ldyBSZWdFeHAoI3tcIlsje3NlcF9jaGFyc31dKyRcIn0pLCAnJyk7IC8vIHJlbW92ZSBmaW5hbCB0cmFpbGluZyBzZXBhcmF0b3JzXG5cbiAgICAgICAgaWYgKHBhdGggPT09ICcnKSB7XG4gICAgICAgICAgb3V0ID0gYWJzb2x1dGUgPyAnLycgOiAnLic7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgb3V0ID0gcGF0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsZXZlbCA9PSAxKSB7XG4gICAgICAgICAgcmV0dXJuIG91dDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gI3tkaXJuYW1lKGBvdXRgLCBsZXZlbCAtIDEpfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgZW5kXG5cbiAgICBkZWYgYmFzZW5hbWUobmFtZSwgc3VmZml4ID0gbmlsKVxuICAgICAgc2VwX2NoYXJzID0gYCRzZXBfY2hhcnMoKWBcbiAgICAgIG5hbWUgPSBgJGNvZXJjZV90b19wYXRoKG5hbWUpYFxuICAgICAgJXh7XG4gICAgICAgIGlmIChuYW1lLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3VmZml4ICE9PSBuaWwpIHtcbiAgICAgICAgICBzdWZmaXggPSAjezo6T3BhbC5jb2VyY2VfdG8hKHN1ZmZpeCwgOjpTdHJpbmcsIDp0b19zdHIpfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN1ZmZpeCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKG5ldyBSZWdFeHAoI3tcIiguKVsje3NlcF9jaGFyc31dKiRcIn0pLCAnJDEnKTtcbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShuZXcgUmVnRXhwKCN7XCJeKD86LipbI3tzZXBfY2hhcnN9XSk/KFteI3tzZXBfY2hhcnN9XSspJFwifSksICckMScpO1xuXG4gICAgICAgIGlmIChzdWZmaXggPT09IFwiLipcIikge1xuICAgICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoL1xcLlteXFwuXSskLywgJycpO1xuICAgICAgICB9IGVsc2UgaWYoc3VmZml4ICE9PSBudWxsKSB7XG4gICAgICAgICAgc3VmZml4ID0gT3BhbC5lc2NhcGVfcmVnZXhwKHN1ZmZpeCk7XG4gICAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShuZXcgUmVnRXhwKCN7XCIje3N1ZmZpeH0kXCJ9KSwgJycpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgICB9XG4gICAgZW5kXG5cbiAgICBkZWYgZXh0bmFtZShwYXRoKVxuICAgICAgYHBhdGggPSAkY29lcmNlX3RvX3BhdGgocGF0aClgXG4gICAgICBmaWxlbmFtZSA9IGJhc2VuYW1lKHBhdGgpXG4gICAgICByZXR1cm4gJycgaWYgZmlsZW5hbWUuZW1wdHk/XG4gICAgICBsYXN0X2RvdF9pZHggPSBmaWxlbmFtZVsxLi4tMV0ucmluZGV4KCcuJylcbiAgICAgICMgZXh0ZW5zaW9uIG5hbWUgbXVzdCBjb250YWlucyBhdCBsZWFzdCBvbmUgY2hhcmFjdGVyIC4oc29tZXRoaW5nKVxuICAgICAgbGFzdF9kb3RfaWR4Lm5pbD8gfHwgbGFzdF9kb3RfaWR4ICsgMSA9PSBmaWxlbmFtZS5sZW5ndGggLSAxID8gJycgOiBmaWxlbmFtZVsobGFzdF9kb3RfaWR4ICsgMSkuLi0xXVxuICAgIGVuZFxuXG4gICAgZGVmIGV4aXN0PyhwYXRoKVxuICAgICAgYE9wYWwubW9kdWxlc1sje3BhdGh9XSAhPSBudWxsYFxuICAgIGVuZFxuXG4gICAgZGVmIGRpcmVjdG9yeT8ocGF0aClcbiAgICAgIGZpbGVzID0gW11cbiAgICAgICV4e1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gT3BhbC5tb2R1bGVzKSB7XG4gICAgICAgICAgI3tmaWxlc30ucHVzaChrZXkpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHBhdGggPSBwYXRoLmdzdWIoLyheLiN7U0VQQVJBVE9SfSt8I3tTRVBBUkFUT1J9KyQpLylcbiAgICAgIGZpbGUgPSBmaWxlcy5maW5kIHsgfGZ8IGYgPX4gL14je3BhdGh9LyB9XG4gICAgICBmaWxlXG4gICAgZW5kXG5cbiAgICBkZWYgam9pbigqcGF0aHMpXG4gICAgICBpZiBwYXRocy5lbXB0eT9cbiAgICAgICAgcmV0dXJuICcnXG4gICAgICBlbmRcbiAgICAgIHJlc3VsdCA9ICcnXG4gICAgICBwYXRocyA9IHBhdGhzLmZsYXR0ZW4uZWFjaF93aXRoX2luZGV4Lm1hcCBkbyB8aXRlbSwgaW5kZXh8XG4gICAgICAgIGlmIGluZGV4ID09IDAgJiYgaXRlbS5lbXB0eT9cbiAgICAgICAgICBTRVBBUkFUT1JcbiAgICAgICAgZWxzaWYgcGF0aHMubGVuZ3RoID09IGluZGV4ICsgMSAmJiBpdGVtLmVtcHR5P1xuICAgICAgICAgIFNFUEFSQVRPUlxuICAgICAgICBlbHNlXG4gICAgICAgICAgaXRlbVxuICAgICAgICBlbmRcbiAgICAgIGVuZFxuICAgICAgcGF0aHMgPSBwYXRocy5yZWplY3QoJjplbXB0eT8pXG4gICAgICBwYXRocy5lYWNoX3dpdGhfaW5kZXggZG8gfGl0ZW0sIGluZGV4fFxuICAgICAgICBuZXh0X2l0ZW0gPSBwYXRoc1tpbmRleCArIDFdXG4gICAgICAgIGlmIG5leHRfaXRlbS5uaWw/XG4gICAgICAgICAgcmVzdWx0ID0gXCIje3Jlc3VsdH0je2l0ZW19XCJcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGlmIGl0ZW0uZW5kX3dpdGg/KFNFUEFSQVRPUikgJiYgbmV4dF9pdGVtLnN0YXJ0X3dpdGg/KFNFUEFSQVRPUilcbiAgICAgICAgICAgIGl0ZW0gPSBpdGVtLnN1YigvI3tTRVBBUkFUT1J9KyQvLCAnJylcbiAgICAgICAgICBlbmRcbiAgICAgICAgICByZXN1bHQgPSBpZiBpdGVtLmVuZF93aXRoPyhTRVBBUkFUT1IpIHx8IG5leHRfaXRlbS5zdGFydF93aXRoPyhTRVBBUkFUT1IpXG4gICAgICAgICAgICAgICAgICAgICBcIiN7cmVzdWx0fSN7aXRlbX1cIlxuICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgIFwiI3tyZXN1bHR9I3tpdGVtfSN7U0VQQVJBVE9SfVwiXG4gICAgICAgICAgICAgICAgICAgZW5kXG4gICAgICAgIGVuZFxuICAgICAgZW5kXG4gICAgICByZXN1bHRcbiAgICBlbmRcblxuICAgIGRlZiBzcGxpdChwYXRoKVxuICAgICAgcGF0aC5zcGxpdChTRVBBUkFUT1IpXG4gICAgZW5kXG5cbiAgICBhbGlhcyByZWFscGF0aCBleHBhbmRfcGF0aFxuICAgIGFsaWFzIGV4aXN0cz8gZXhpc3Q/XG4gIGVuZFxuZW5kXG4iXSwibmFtZXMiOlsiPHRvcCAocmVxdWlyZWQpPiIsIjxjbGFzczpGaWxlPiIsIjAiLCJ3aW5kb3dzX3Jvb3RfcngiLCJhYnNvbHV0ZV9wYXRoIiwicGF0aCIsImJhc2VkaXIiLCJzZXAiLCJTRVBBUkFUT1IiLCJzZXBfY2hhcnMiLCJuZXdfcGFydHMiLCJyZXNwb25kX3RvPyIsInRvX3BhdGgiLCJPcGFsIiwiY29lcmNlX3RvISIsIlN0cmluZyIsIiRyZXRfb3JfMSIsIkRpciIsInB3ZCIsInBhdGhfYWJzIiwiYmFzZWRpcl9hYnMiLCJwYXJ0cyIsInNwbGl0IiwibGVhZGluZ19zZXAiLCJzdWIiLCJhYnMiLCIrIiwidW5zaGlmdCIsIm5ld19wYXRoIiwiam9pbiIsImV4cGFuZF9wYXRoIiwiaG9tZSIsIktlcm5lbCIsInJhaXNlIiwiQXJndW1lbnRFcnJvciIsInN0YXJ0X3dpdGg/IiwiaG9tZV9wYXRoX3JlZ2V4cCIsInNlbGYiLCJBTFRfU0VQQVJBVE9SIiwiZGlybmFtZSIsImxldmVsIiwiMSIsIjwiLCItIiwiYmFzZW5hbWUiLCJuYW1lIiwic3VmZml4IiwiZXh0bmFtZSIsImZpbGVuYW1lIiwiZW1wdHk/IiwibGFzdF9kb3RfaWR4IiwiW10iLCItMSIsInJpbmRleCIsIm5pbD8iLCJsZW5ndGgiLCJleGlzdD8iLCJkaXJlY3Rvcnk/IiwiZmlsZXMiLCJnc3ViIiwiZmlsZSIsImZpbmQiLCJibG9jayBpbiBkaXJlY3Rvcnk/IiwiZiIsImJsb2NrICgyIGxldmVscykgaW4gZGlyZWN0b3J5PyIsIj1+IiwicGF0aHMiLCJyZXN1bHQiLCJtYXAiLCJmbGF0dGVuIiwiZWFjaF93aXRoX2luZGV4IiwiYmxvY2sgaW4gam9pbiIsIml0ZW0iLCJpbmRleCIsImJsb2NrICgyIGxldmVscykgaW4gam9pbiIsInJlamVjdCIsInRvX3Byb2MiLCJuZXh0X2l0ZW0iLCJlbmRfd2l0aD8iLCJJTyJdLCJtYXBwaW5ncyI6IkFBQUFBLCtCQUFBQSxnQkFBQUE7RUFBQUE7O0VBQUFBO0VBRUFBLE9BQUFDO0VBQUFBOztJQUFBQTs7O0lBQ0UscUNBQVkscUNBQVlBLEdBQVosQ0FBWjtJQUNBLHlDQUFnQixHQUFoQjtJQUNBLDBDQUFpQkEsR0FBakI7SUFFQSx1Q0FBY0MsQ0FBZDtJQUNBQyxrQkFBa0I7SUFFbEJGLE9BQUE7TUFBQTs7OztBQUNFRyxNQUFBQSw2QkFBQUEseUJBQWtCQyxJQUFELEVBQU9DLE9BQXhCRjtBQUFBQSxRQUFBQTs7O1FBQXdCLCtCQUFVO1FBQ2hDRyxNQUFNQztRQUNOQyxZQUFhTDtRQUNiTSxZQUFZO1FBRVpMLE9BQU8sQ0FBQSxRQUFBQSxJQUFJTSxnQkFBQUEsQ0FBYSxTQUFiQSxDQUFKLENBQUEsR0FBQSxDQUE2Qk4sSUFBSU8sU0FBQUEsQ0FBQUEsQ0FBakMsSUFBQSxDQUE0Q1AsSUFBNUMsQ0FBQTtRQUNQQSxPQUFPUSxLQUFNQyxlQUFBQSxDQUFhVixJQUFuQixFQUEwQlcsYUFBMUIsRUFBb0MsUUFBOUJEO1FBRWJSLFVBbkJOLENBQUEsUUFBQVUsQ0FBQUEsWUFtQk1WLE9BbkJOVSxDQUFBLENBQUEsR0FBQSxDQUFBLFNBQUEsSUFBQSxDQW1Ca0JDLFVBQUtDLEtBQUFBLENBQUFB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TUFBSCxDQUFBLEdBQUEsQ0FBWUssSUFBWixDQUFBLEdBQUEsQ0FBbUJoRSxlQUFuQixDQUhGLENBQUEsQ0FBVDJEO1VBTkYsRUFGRkksQ0FBQUEsR0FBS0Q7UUFlTHpDLE9BQUFzQztNQTlCRnRDLENBQUFBLElBQUFBOztBQWlDQVAsTUFBQUEscUJBQUFBLGlCQUFVakIsSUFBVmlCO0FBQUFBO1FBQ0VBLE9BQUFqQixJQUFJaUIsT0FBQUEsQ0FBT2QsZUFBUGM7TUFETkEsQ0FBQUEsR0FBQUE7TUFJQSxhQUFNLFVBQU4sRUFBZSxhQUFmO01BQ0EsT0FBQSxhQUFNLFNBQU4sRUFBYyxRQUFkO0lBbk5GLDRCQUFTZSxJQUFUO0VBUkZwQyxHQUFNLElBQU5BLEVBQWU4RSxTQUFmOUU7QUFGQUQ7In19LHsib2Zmc2V0Ijp7ImxpbmUiOjYzNTIsImNvbHVtbiI6MH0sIm1hcCI6eyJ2ZXJzaW9uIjozLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb3JlbGliL2tlcm5lbC9mb3JtYXQucmIiXSwic291cmNlc0NvbnRlbnQiOlsiIyBoZWxwZXJzOiBjb2VyY2VfdG9cblxubW9kdWxlIDo6S2VybmVsXG4gIGRlZiBmb3JtYXQoZm9ybWF0X3N0cmluZywgKmFyZ3MpXG4gICAgaWYgYXJncy5sZW5ndGggPT0gMSAmJiBhcmdzWzBdLnJlc3BvbmRfdG8/KDp0b19hcnkpXG4gICAgICBhcnkgPSA6Ok9wYWwuY29lcmNlX3RvPyhhcmdzWzBdLCA6OkFycmF5LCA6dG9fYXJ5KVxuICAgICAgYXJncyA9IGFyeS50b19hIHVubGVzcyBhcnkubmlsP1xuICAgIGVuZFxuXG4gICAgJXh7XG4gICAgICB2YXIgcmVzdWx0ID0gJycsXG4gICAgICAgICAgLy91c2VkIGZvciBzbGljaW5nOlxuICAgICAgICAgIGJlZ2luX3NsaWNlID0gMCxcbiAgICAgICAgICBlbmRfc2xpY2UsXG4gICAgICAgICAgLy91c2VkIGZvciBpdGVyYXRpbmcgb3ZlciB0aGUgZm9ybWF0IHN0cmluZzpcbiAgICAgICAgICBpLFxuICAgICAgICAgIGxlbiA9IGZvcm1hdF9zdHJpbmcubGVuZ3RoLFxuICAgICAgICAgIC8vdXNlZCBmb3IgcHJvY2Vzc2luZyBmaWVsZCB2YWx1ZXM6XG4gICAgICAgICAgYXJnLFxuICAgICAgICAgIHN0cixcbiAgICAgICAgICAvL3VzZWQgZm9yIHByb2Nlc3NpbmcgJWcgYW5kICVHIGZpZWxkczpcbiAgICAgICAgICBleHBvbmVudCxcbiAgICAgICAgICAvL3VzZWQgZm9yIGtlZXBpbmcgdHJhY2sgb2Ygd2lkdGggYW5kIHByZWNpc2lvbjpcbiAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICBwcmVjaXNpb24sXG4gICAgICAgICAgLy91c2VkIGZvciBob2xkaW5nIHRlbXBvcmFyeSB2YWx1ZXM6XG4gICAgICAgICAgdG1wX251bSxcbiAgICAgICAgICAvL3VzZWQgZm9yIHByb2Nlc3NpbmcgJXt9IGFuZCAlPD4gZmlsZWRzOlxuICAgICAgICAgIGhhc2hfcGFyYW1ldGVyX2tleSxcbiAgICAgICAgICBjbG9zaW5nX2JyYWNlX2NoYXIsXG4gICAgICAgICAgLy91c2VkIGZvciBwcm9jZXNzaW5nICViLCAlQiwgJW8sICV4LCBhbmQgJVggZmllbGRzOlxuICAgICAgICAgIGJhc2VfbnVtYmVyLFxuICAgICAgICAgIGJhc2VfcHJlZml4LFxuICAgICAgICAgIGJhc2VfbmVnX3plcm9fcmVnZXgsXG4gICAgICAgICAgYmFzZV9uZWdfemVyb19kaWdpdCxcbiAgICAgICAgICAvL3VzZWQgZm9yIHByb2Nlc3NpbmcgYXJndW1lbnRzOlxuICAgICAgICAgIG5leHRfYXJnLFxuICAgICAgICAgIHNlcV9hcmdfbnVtID0gMSxcbiAgICAgICAgICBwb3NfYXJnX251bSA9IDAsXG4gICAgICAgICAgLy91c2VkIGZvciBrZWVwaW5nIHRyYWNrIG9mIGZsYWdzOlxuICAgICAgICAgIGZsYWdzLFxuICAgICAgICAgIEZOT05FICA9IDAsXG4gICAgICAgICAgRlNIQVJQID0gMSxcbiAgICAgICAgICBGTUlOVVMgPSAyLFxuICAgICAgICAgIEZQTFVTICA9IDQsXG4gICAgICAgICAgRlpFUk8gID0gOCxcbiAgICAgICAgICBGU1BBQ0UgPSAxNixcbiAgICAgICAgICBGV0lEVEggPSAzMixcbiAgICAgICAgICBGUFJFQyAgPSA2NCxcbiAgICAgICAgICBGUFJFQzAgPSAxMjg7XG5cbiAgICAgIGZ1bmN0aW9uIENIRUNLX0ZPUl9GTEFHUygpIHtcbiAgICAgICAgaWYgKGZsYWdzJkZXSURUSCkgeyAjezo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgJ2ZsYWcgYWZ0ZXIgd2lkdGgnfSB9XG4gICAgICAgIGlmIChmbGFncyZGUFJFQzApIHsgI3s6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsICdmbGFnIGFmdGVyIHByZWNpc2lvbid9IH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gQ0hFQ0tfRk9SX1dJRFRIKCkge1xuICAgICAgICBpZiAoZmxhZ3MmRldJRFRIKSB7ICN7OjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCAnd2lkdGggZ2l2ZW4gdHdpY2UnfSB9XG4gICAgICAgIGlmIChmbGFncyZGUFJFQzApIHsgI3s6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsICd3aWR0aCBhZnRlciBwcmVjaXNpb24nfSB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIEdFVF9OVEhfQVJHKG51bSkge1xuICAgICAgICBpZiAobnVtID49IGFyZ3MubGVuZ3RoKSB7ICN7OjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCAndG9vIGZldyBhcmd1bWVudHMnfSB9XG4gICAgICAgIHJldHVybiBhcmdzW251bV07XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIEdFVF9ORVhUX0FSRygpIHtcbiAgICAgICAgc3dpdGNoIChwb3NfYXJnX251bSkge1xuICAgICAgICBjYXNlIC0xOiAjezo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgXCJ1bm51bWJlcmVkKCN7YHNlcV9hcmdfbnVtYH0pIG1peGVkIHdpdGggbnVtYmVyZWRcIn0gLy8gcmFpc2VcbiAgICAgICAgY2FzZSAtMjogI3s6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsIFwidW5udW1iZXJlZCgje2BzZXFfYXJnX251bWB9KSBtaXhlZCB3aXRoIG5hbWVkXCJ9IC8vIHJhaXNlXG4gICAgICAgIH1cbiAgICAgICAgcG9zX2FyZ19udW0gPSBzZXFfYXJnX251bSsrO1xuICAgICAgICByZXR1cm4gR0VUX05USF9BUkcocG9zX2FyZ19udW0gLSAxKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gR0VUX1BPU19BUkcobnVtKSB7XG4gICAgICAgIGlmIChwb3NfYXJnX251bSA+IDApIHtcbiAgICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgXCJudW1iZXJlZCgje2BudW1gfSkgYWZ0ZXIgdW5udW1iZXJlZCgje2Bwb3NfYXJnX251bWB9KVwifVxuICAgICAgICB9XG4gICAgICAgIGlmIChwb3NfYXJnX251bSA9PT0gLTIpIHtcbiAgICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgXCJudW1iZXJlZCgje2BudW1gfSkgYWZ0ZXIgbmFtZWRcIn1cbiAgICAgICAgfVxuICAgICAgICBpZiAobnVtIDwgMSkge1xuICAgICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCBcImludmFsaWQgaW5kZXggLSAje2BudW1gfSRcIn1cbiAgICAgICAgfVxuICAgICAgICBwb3NfYXJnX251bSA9IC0xO1xuICAgICAgICByZXR1cm4gR0VUX05USF9BUkcobnVtIC0gMSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIEdFVF9BUkcoKSB7XG4gICAgICAgIHJldHVybiAobmV4dF9hcmcgPT09IHVuZGVmaW5lZCA/IEdFVF9ORVhUX0FSRygpIDogbmV4dF9hcmcpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBSRUFEX05VTShsYWJlbCkge1xuICAgICAgICB2YXIgbnVtLCBzdHIgPSAnJztcbiAgICAgICAgZm9yICg7OyBpKyspIHtcbiAgICAgICAgICBpZiAoaSA9PT0gbGVuKSB7XG4gICAgICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgJ21hbGZvcm1lZCBmb3JtYXQgc3RyaW5nIC0gJSpbMC05XSd9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChmb3JtYXRfc3RyaW5nLmNoYXJDb2RlQXQoaSkgPCA0OCB8fCBmb3JtYXRfc3RyaW5nLmNoYXJDb2RlQXQoaSkgPiA1Nykge1xuICAgICAgICAgICAgaS0tO1xuICAgICAgICAgICAgbnVtID0gcGFyc2VJbnQoc3RyLCAxMCkgfHwgMDtcbiAgICAgICAgICAgIGlmIChudW0gPiAyMTQ3NDgzNjQ3KSB7XG4gICAgICAgICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCBcIiN7YGxhYmVsYH0gdG9vIGJpZ1wifVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RyICs9IGZvcm1hdF9zdHJpbmcuY2hhckF0KGkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIFJFQURfTlVNX0FGVEVSX0FTVEVSKGxhYmVsKSB7XG4gICAgICAgIHZhciBhcmcsIG51bSA9IFJFQURfTlVNKGxhYmVsKTtcbiAgICAgICAgaWYgKGZvcm1hdF9zdHJpbmcuY2hhckF0KGkgKyAxKSA9PT0gJyQnKSB7XG4gICAgICAgICAgaSsrO1xuICAgICAgICAgIGFyZyA9IEdFVF9QT1NfQVJHKG51bSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXJnID0gR0VUX05FWFRfQVJHKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICN7YGFyZ2AudG9faW50fTtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gZm9ybWF0X3N0cmluZy5pbmRleE9mKCclJyk7IGkgIT09IC0xOyBpID0gZm9ybWF0X3N0cmluZy5pbmRleE9mKCclJywgaSkpIHtcbiAgICAgICAgc3RyID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGZsYWdzID0gRk5PTkU7XG4gICAgICAgIHdpZHRoID0gLTE7XG4gICAgICAgIHByZWNpc2lvbiA9IC0xO1xuICAgICAgICBuZXh0X2FyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgICBlbmRfc2xpY2UgPSBpO1xuXG4gICAgICAgIGkrKztcblxuICAgICAgICBzd2l0Y2ggKGZvcm1hdF9zdHJpbmcuY2hhckF0KGkpKSB7XG4gICAgICAgIGNhc2UgJyUnOlxuICAgICAgICAgIGJlZ2luX3NsaWNlID0gaTtcbiAgICAgICAgICAvLyBuby1icmVha1xuICAgICAgICBjYXNlICcnOlxuICAgICAgICBjYXNlICdcXG4nOlxuICAgICAgICBjYXNlICdcXDAnOlxuICAgICAgICAgIGkrKztcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcm1hdF9zZXF1ZW5jZTogZm9yICg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIHN3aXRjaCAoZm9ybWF0X3N0cmluZy5jaGFyQXQoaSkpIHtcblxuICAgICAgICAgIGNhc2UgJyAnOlxuICAgICAgICAgICAgQ0hFQ0tfRk9SX0ZMQUdTKCk7XG4gICAgICAgICAgICBmbGFncyB8PSBGU1BBQ0U7XG4gICAgICAgICAgICBjb250aW51ZSBmb3JtYXRfc2VxdWVuY2U7XG5cbiAgICAgICAgICBjYXNlICcjJzpcbiAgICAgICAgICAgIENIRUNLX0ZPUl9GTEFHUygpO1xuICAgICAgICAgICAgZmxhZ3MgfD0gRlNIQVJQO1xuICAgICAgICAgICAgY29udGludWUgZm9ybWF0X3NlcXVlbmNlO1xuXG4gICAgICAgICAgY2FzZSAnKyc6XG4gICAgICAgICAgICBDSEVDS19GT1JfRkxBR1MoKTtcbiAgICAgICAgICAgIGZsYWdzIHw9IEZQTFVTO1xuICAgICAgICAgICAgY29udGludWUgZm9ybWF0X3NlcXVlbmNlO1xuXG4gICAgICAgICAgY2FzZSAnLSc6XG4gICAgICAgICAgICBDSEVDS19GT1JfRkxBR1MoKTtcbiAgICAgICAgICAgIGZsYWdzIHw9IEZNSU5VUztcbiAgICAgICAgICAgIGNvbnRpbnVlIGZvcm1hdF9zZXF1ZW5jZTtcblxuICAgICAgICAgIGNhc2UgJzAnOlxuICAgICAgICAgICAgQ0hFQ0tfRk9SX0ZMQUdTKCk7XG4gICAgICAgICAgICBmbGFncyB8PSBGWkVSTztcbiAgICAgICAgICAgIGNvbnRpbnVlIGZvcm1hdF9zZXF1ZW5jZTtcblxuICAgICAgICAgIGNhc2UgJzEnOlxuICAgICAgICAgIGNhc2UgJzInOlxuICAgICAgICAgIGNhc2UgJzMnOlxuICAgICAgICAgIGNhc2UgJzQnOlxuICAgICAgICAgIGNhc2UgJzUnOlxuICAgICAgICAgIGNhc2UgJzYnOlxuICAgICAgICAgIGNhc2UgJzcnOlxuICAgICAgICAgIGNhc2UgJzgnOlxuICAgICAgICAgIGNhc2UgJzknOlxuICAgICAgICAgICAgdG1wX251bSA9IFJFQURfTlVNKCd3aWR0aCcpO1xuICAgICAgICAgICAgaWYgKGZvcm1hdF9zdHJpbmcuY2hhckF0KGkgKyAxKSA9PT0gJyQnKSB7XG4gICAgICAgICAgICAgIGlmIChpICsgMiA9PT0gbGVuKSB7XG4gICAgICAgICAgICAgICAgc3RyID0gJyUnO1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICBicmVhayBmb3JtYXRfc2VxdWVuY2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKG5leHRfYXJnICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgXCJ2YWx1ZSBnaXZlbiB0d2ljZSAtICUje2B0bXBfbnVtYH0kXCJ9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbmV4dF9hcmcgPSBHRVRfUE9TX0FSRyh0bXBfbnVtKTtcbiAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgQ0hFQ0tfRk9SX1dJRFRIKCk7XG4gICAgICAgICAgICAgIGZsYWdzIHw9IEZXSURUSDtcbiAgICAgICAgICAgICAgd2lkdGggPSB0bXBfbnVtO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWUgZm9ybWF0X3NlcXVlbmNlO1xuXG4gICAgICAgICAgY2FzZSAnPCc6XG4gICAgICAgICAgY2FzZSAnXFx7JzpcbiAgICAgICAgICAgIGNsb3NpbmdfYnJhY2VfY2hhciA9IChmb3JtYXRfc3RyaW5nLmNoYXJBdChpKSA9PT0gJzwnID8gJz4nIDogJ1xcfScpO1xuICAgICAgICAgICAgaGFzaF9wYXJhbWV0ZXJfa2V5ID0gJyc7XG5cbiAgICAgICAgICAgIGkrKztcblxuICAgICAgICAgICAgZm9yICg7OyBpKyspIHtcbiAgICAgICAgICAgICAgaWYgKGkgPT09IGxlbikge1xuICAgICAgICAgICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCAnbWFsZm9ybWVkIG5hbWUgLSB1bm1hdGNoZWQgcGFyZW50aGVzaXMnfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChmb3JtYXRfc3RyaW5nLmNoYXJBdChpKSA9PT0gY2xvc2luZ19icmFjZV9jaGFyKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAocG9zX2FyZ19udW0gPiAwKSB7XG4gICAgICAgICAgICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgXCJuYW1lZCAje2BoYXNoX3BhcmFtZXRlcl9rZXlgfSBhZnRlciB1bm51bWJlcmVkKCN7YHBvc19hcmdfbnVtYH0pXCJ9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwb3NfYXJnX251bSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCBcIm5hbWVkICN7YGhhc2hfcGFyYW1ldGVyX2tleWB9IGFmdGVyIG51bWJlcmVkXCJ9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBvc19hcmdfbnVtID0gLTI7XG5cbiAgICAgICAgICAgICAgICBpZiAoYXJnc1swXSA9PT0gdW5kZWZpbmVkIHx8ICFhcmdzWzBdLiQkaXNfaGFzaCkge1xuICAgICAgICAgICAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsICdvbmUgaGFzaCByZXF1aXJlZCd9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbmV4dF9hcmcgPSAje2BhcmdzWzBdYC5mZXRjaChgaGFzaF9wYXJhbWV0ZXJfa2V5YCl9O1xuXG4gICAgICAgICAgICAgICAgaWYgKGNsb3NpbmdfYnJhY2VfY2hhciA9PT0gJz4nKSB7XG4gICAgICAgICAgICAgICAgICBjb250aW51ZSBmb3JtYXRfc2VxdWVuY2U7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHN0ciA9IG5leHRfYXJnLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICBpZiAocHJlY2lzaW9uICE9PSAtMSkgeyBzdHIgPSBzdHIuc2xpY2UoMCwgcHJlY2lzaW9uKTsgfVxuICAgICAgICAgICAgICAgICAgaWYgKGZsYWdzJkZNSU5VUykge1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoc3RyLmxlbmd0aCA8IHdpZHRoKSB7IHN0ciA9IHN0ciArICcgJzsgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHN0ci5sZW5ndGggPCB3aWR0aCkgeyBzdHIgPSAnICcgKyBzdHI7IH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGJyZWFrIGZvcm1hdF9zZXF1ZW5jZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaGFzaF9wYXJhbWV0ZXJfa2V5ICs9IGZvcm1hdF9zdHJpbmcuY2hhckF0KGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gcmFpc2VcblxuICAgICAgICAgIGNhc2UgJyonOlxuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgQ0hFQ0tfRk9SX1dJRFRIKCk7XG4gICAgICAgICAgICBmbGFncyB8PSBGV0lEVEg7XG4gICAgICAgICAgICB3aWR0aCA9IFJFQURfTlVNX0FGVEVSX0FTVEVSKCd3aWR0aCcpO1xuICAgICAgICAgICAgaWYgKHdpZHRoIDwgMCkge1xuICAgICAgICAgICAgICBmbGFncyB8PSBGTUlOVVM7XG4gICAgICAgICAgICAgIHdpZHRoID0gLXdpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWUgZm9ybWF0X3NlcXVlbmNlO1xuXG4gICAgICAgICAgY2FzZSAnLic6XG4gICAgICAgICAgICBpZiAoZmxhZ3MmRlBSRUMwKSB7XG4gICAgICAgICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCAncHJlY2lzaW9uIGdpdmVuIHR3aWNlJ31cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZsYWdzIHw9IEZQUkVDfEZQUkVDMDtcbiAgICAgICAgICAgIHByZWNpc2lvbiA9IDA7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgICAgICBpZiAoZm9ybWF0X3N0cmluZy5jaGFyQXQoaSkgPT09ICcqJykge1xuICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgIHByZWNpc2lvbiA9IFJFQURfTlVNX0FGVEVSX0FTVEVSKCdwcmVjaXNpb24nKTtcbiAgICAgICAgICAgICAgaWYgKHByZWNpc2lvbiA8IDApIHtcbiAgICAgICAgICAgICAgICBmbGFncyAmPSB+RlBSRUM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29udGludWUgZm9ybWF0X3NlcXVlbmNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJlY2lzaW9uID0gUkVBRF9OVU0oJ3ByZWNpc2lvbicpO1xuICAgICAgICAgICAgY29udGludWUgZm9ybWF0X3NlcXVlbmNlO1xuXG4gICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgY2FzZSAnaSc6XG4gICAgICAgICAgY2FzZSAndSc6XG4gICAgICAgICAgICBhcmcgPSAjezo6S2VybmVsLkludGVnZXIoYEdFVF9BUkcoKWApfTtcbiAgICAgICAgICAgIGlmIChhcmcgPj0gMCkge1xuICAgICAgICAgICAgICBzdHIgPSBhcmcudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgd2hpbGUgKHN0ci5sZW5ndGggPCBwcmVjaXNpb24pIHsgc3RyID0gJzAnICsgc3RyOyB9XG4gICAgICAgICAgICAgIGlmIChmbGFncyZGTUlOVVMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZmxhZ3MmRlBMVVMgfHwgZmxhZ3MmRlNQQUNFKSB7IHN0ciA9IChmbGFncyZGUExVUyA/ICcrJyA6ICcgJykgKyBzdHI7IH1cbiAgICAgICAgICAgICAgICB3aGlsZSAoc3RyLmxlbmd0aCA8IHdpZHRoKSB7IHN0ciA9IHN0ciArICcgJzsgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChmbGFncyZGWkVSTyAmJiBwcmVjaXNpb24gPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICB3aGlsZSAoc3RyLmxlbmd0aCA8IHdpZHRoIC0gKChmbGFncyZGUExVUyB8fCBmbGFncyZGU1BBQ0UpID8gMSA6IDApKSB7IHN0ciA9ICcwJyArIHN0cjsgfVxuICAgICAgICAgICAgICAgICAgaWYgKGZsYWdzJkZQTFVTIHx8IGZsYWdzJkZTUEFDRSkgeyBzdHIgPSAoZmxhZ3MmRlBMVVMgPyAnKycgOiAnICcpICsgc3RyOyB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGlmIChmbGFncyZGUExVUyB8fCBmbGFncyZGU1BBQ0UpIHsgc3RyID0gKGZsYWdzJkZQTFVTID8gJysnIDogJyAnKSArIHN0cjsgfVxuICAgICAgICAgICAgICAgICAgd2hpbGUgKHN0ci5sZW5ndGggPCB3aWR0aCkgeyBzdHIgPSAnICcgKyBzdHI7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHN0ciA9ICgtYXJnKS50b1N0cmluZygpO1xuICAgICAgICAgICAgICB3aGlsZSAoc3RyLmxlbmd0aCA8IHByZWNpc2lvbikgeyBzdHIgPSAnMCcgKyBzdHI7IH1cbiAgICAgICAgICAgICAgaWYgKGZsYWdzJkZNSU5VUykge1xuICAgICAgICAgICAgICAgIHN0ciA9ICctJyArIHN0cjtcbiAgICAgICAgICAgICAgICB3aGlsZSAoc3RyLmxlbmd0aCA8IHdpZHRoKSB7IHN0ciA9IHN0ciArICcgJzsgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChmbGFncyZGWkVSTyAmJiBwcmVjaXNpb24gPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICB3aGlsZSAoc3RyLmxlbmd0aCA8IHdpZHRoIC0gMSkgeyBzdHIgPSAnMCcgKyBzdHI7IH1cbiAgICAgICAgICAgICAgICAgIHN0ciA9ICctJyArIHN0cjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgc3RyID0gJy0nICsgc3RyO1xuICAgICAgICAgICAgICAgICAgd2hpbGUgKHN0ci5sZW5ndGggPCB3aWR0aCkgeyBzdHIgPSAnICcgKyBzdHI7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrIGZvcm1hdF9zZXF1ZW5jZTtcblxuICAgICAgICAgIGNhc2UgJ2InOlxuICAgICAgICAgIGNhc2UgJ0InOlxuICAgICAgICAgIGNhc2UgJ28nOlxuICAgICAgICAgIGNhc2UgJ3gnOlxuICAgICAgICAgIGNhc2UgJ1gnOlxuICAgICAgICAgICAgc3dpdGNoIChmb3JtYXRfc3RyaW5nLmNoYXJBdChpKSkge1xuICAgICAgICAgICAgY2FzZSAnYic6XG4gICAgICAgICAgICBjYXNlICdCJzpcbiAgICAgICAgICAgICAgYmFzZV9udW1iZXIgPSAyO1xuICAgICAgICAgICAgICBiYXNlX3ByZWZpeCA9ICcwYic7XG4gICAgICAgICAgICAgIGJhc2VfbmVnX3plcm9fcmVnZXggPSAvXjErLztcbiAgICAgICAgICAgICAgYmFzZV9uZWdfemVyb19kaWdpdCA9ICcxJztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdvJzpcbiAgICAgICAgICAgICAgYmFzZV9udW1iZXIgPSA4O1xuICAgICAgICAgICAgICBiYXNlX3ByZWZpeCA9ICcwJztcbiAgICAgICAgICAgICAgYmFzZV9uZWdfemVyb19yZWdleCA9IC9eMz83Ky87XG4gICAgICAgICAgICAgIGJhc2VfbmVnX3plcm9fZGlnaXQgPSAnNyc7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAneCc6XG4gICAgICAgICAgICBjYXNlICdYJzpcbiAgICAgICAgICAgICAgYmFzZV9udW1iZXIgPSAxNjtcbiAgICAgICAgICAgICAgYmFzZV9wcmVmaXggPSAnMHgnO1xuICAgICAgICAgICAgICBiYXNlX25lZ196ZXJvX3JlZ2V4ID0gL15mKy87XG4gICAgICAgICAgICAgIGJhc2VfbmVnX3plcm9fZGlnaXQgPSAnZic7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXJnID0gI3s6Oktlcm5lbC5JbnRlZ2VyKGBHRVRfQVJHKClgKX07XG4gICAgICAgICAgICBpZiAoYXJnID49IDApIHtcbiAgICAgICAgICAgICAgc3RyID0gYXJnLnRvU3RyaW5nKGJhc2VfbnVtYmVyKTtcbiAgICAgICAgICAgICAgd2hpbGUgKHN0ci5sZW5ndGggPCBwcmVjaXNpb24pIHsgc3RyID0gJzAnICsgc3RyOyB9XG4gICAgICAgICAgICAgIGlmIChmbGFncyZGTUlOVVMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZmxhZ3MmRlBMVVMgfHwgZmxhZ3MmRlNQQUNFKSB7IHN0ciA9IChmbGFncyZGUExVUyA/ICcrJyA6ICcgJykgKyBzdHI7IH1cbiAgICAgICAgICAgICAgICBpZiAoZmxhZ3MmRlNIQVJQICYmIGFyZyAhPT0gMCkgeyBzdHIgPSBiYXNlX3ByZWZpeCArIHN0cjsgfVxuICAgICAgICAgICAgICAgIHdoaWxlIChzdHIubGVuZ3RoIDwgd2lkdGgpIHsgc3RyID0gc3RyICsgJyAnOyB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGZsYWdzJkZaRVJPICYmIHByZWNpc2lvbiA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgIHdoaWxlIChzdHIubGVuZ3RoIDwgd2lkdGggLSAoKGZsYWdzJkZQTFVTIHx8IGZsYWdzJkZTUEFDRSkgPyAxIDogMCkgLSAoKGZsYWdzJkZTSEFSUCAmJiBhcmcgIT09IDApID8gYmFzZV9wcmVmaXgubGVuZ3RoIDogMCkpIHsgc3RyID0gJzAnICsgc3RyOyB9XG4gICAgICAgICAgICAgICAgICBpZiAoZmxhZ3MmRlNIQVJQICYmIGFyZyAhPT0gMCkgeyBzdHIgPSBiYXNlX3ByZWZpeCArIHN0cjsgfVxuICAgICAgICAgICAgICAgICAgaWYgKGZsYWdzJkZQTFVTIHx8IGZsYWdzJkZTUEFDRSkgeyBzdHIgPSAoZmxhZ3MmRlBMVVMgPyAnKycgOiAnICcpICsgc3RyOyB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGlmIChmbGFncyZGU0hBUlAgJiYgYXJnICE9PSAwKSB7IHN0ciA9IGJhc2VfcHJlZml4ICsgc3RyOyB9XG4gICAgICAgICAgICAgICAgICBpZiAoZmxhZ3MmRlBMVVMgfHwgZmxhZ3MmRlNQQUNFKSB7IHN0ciA9IChmbGFncyZGUExVUyA/ICcrJyA6ICcgJykgKyBzdHI7IH1cbiAgICAgICAgICAgICAgICAgIHdoaWxlIChzdHIubGVuZ3RoIDwgd2lkdGgpIHsgc3RyID0gJyAnICsgc3RyOyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoZmxhZ3MmRlBMVVMgfHwgZmxhZ3MmRlNQQUNFKSB7XG4gICAgICAgICAgICAgICAgc3RyID0gKC1hcmcpLnRvU3RyaW5nKGJhc2VfbnVtYmVyKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoc3RyLmxlbmd0aCA8IHByZWNpc2lvbikgeyBzdHIgPSAnMCcgKyBzdHI7IH1cbiAgICAgICAgICAgICAgICBpZiAoZmxhZ3MmRk1JTlVTKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoZmxhZ3MmRlNIQVJQKSB7IHN0ciA9IGJhc2VfcHJlZml4ICsgc3RyOyB9XG4gICAgICAgICAgICAgICAgICBzdHIgPSAnLScgKyBzdHI7XG4gICAgICAgICAgICAgICAgICB3aGlsZSAoc3RyLmxlbmd0aCA8IHdpZHRoKSB7IHN0ciA9IHN0ciArICcgJzsgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBpZiAoZmxhZ3MmRlpFUk8gJiYgcHJlY2lzaW9uID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoc3RyLmxlbmd0aCA8IHdpZHRoIC0gMSAtIChmbGFncyZGU0hBUlAgPyAyIDogMCkpIHsgc3RyID0gJzAnICsgc3RyOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChmbGFncyZGU0hBUlApIHsgc3RyID0gYmFzZV9wcmVmaXggKyBzdHI7IH1cbiAgICAgICAgICAgICAgICAgICAgc3RyID0gJy0nICsgc3RyO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZsYWdzJkZTSEFSUCkgeyBzdHIgPSBiYXNlX3ByZWZpeCArIHN0cjsgfVxuICAgICAgICAgICAgICAgICAgICBzdHIgPSAnLScgKyBzdHI7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChzdHIubGVuZ3RoIDwgd2lkdGgpIHsgc3RyID0gJyAnICsgc3RyOyB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0ciA9IChhcmcgPj4+IDApLnRvU3RyaW5nKGJhc2VfbnVtYmVyKS5yZXBsYWNlKGJhc2VfbmVnX3plcm9fcmVnZXgsIGJhc2VfbmVnX3plcm9fZGlnaXQpO1xuICAgICAgICAgICAgICAgIHdoaWxlIChzdHIubGVuZ3RoIDwgcHJlY2lzaW9uIC0gMikgeyBzdHIgPSBiYXNlX25lZ196ZXJvX2RpZ2l0ICsgc3RyOyB9XG4gICAgICAgICAgICAgICAgaWYgKGZsYWdzJkZNSU5VUykge1xuICAgICAgICAgICAgICAgICAgc3RyID0gJy4uJyArIHN0cjtcbiAgICAgICAgICAgICAgICAgIGlmIChmbGFncyZGU0hBUlApIHsgc3RyID0gYmFzZV9wcmVmaXggKyBzdHI7IH1cbiAgICAgICAgICAgICAgICAgIHdoaWxlIChzdHIubGVuZ3RoIDwgd2lkdGgpIHsgc3RyID0gc3RyICsgJyAnOyB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGlmIChmbGFncyZGWkVSTyAmJiBwcmVjaXNpb24gPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChzdHIubGVuZ3RoIDwgd2lkdGggLSAyIC0gKGZsYWdzJkZTSEFSUCA/IGJhc2VfcHJlZml4Lmxlbmd0aCA6IDApKSB7IHN0ciA9IGJhc2VfbmVnX3plcm9fZGlnaXQgKyBzdHI7IH1cbiAgICAgICAgICAgICAgICAgICAgc3RyID0gJy4uJyArIHN0cjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZsYWdzJkZTSEFSUCkgeyBzdHIgPSBiYXNlX3ByZWZpeCArIHN0cjsgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3RyID0gJy4uJyArIHN0cjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZsYWdzJkZTSEFSUCkgeyBzdHIgPSBiYXNlX3ByZWZpeCArIHN0cjsgfVxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoc3RyLmxlbmd0aCA8IHdpZHRoKSB7IHN0ciA9ICcgJyArIHN0cjsgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZvcm1hdF9zdHJpbmcuY2hhckF0KGkpID09PSBmb3JtYXRfc3RyaW5nLmNoYXJBdChpKS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgIHN0ciA9IHN0ci50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWsgZm9ybWF0X3NlcXVlbmNlO1xuXG4gICAgICAgICAgY2FzZSAnZic6XG4gICAgICAgICAgY2FzZSAnZSc6XG4gICAgICAgICAgY2FzZSAnRSc6XG4gICAgICAgICAgY2FzZSAnZyc6XG4gICAgICAgICAgY2FzZSAnRyc6XG4gICAgICAgICAgICBhcmcgPSAjezo6S2VybmVsLkZsb2F0KGBHRVRfQVJHKClgKX07XG4gICAgICAgICAgICBpZiAoYXJnID49IDAgfHwgaXNOYU4oYXJnKSkge1xuICAgICAgICAgICAgICBpZiAoYXJnID09PSBJbmZpbml0eSkge1xuICAgICAgICAgICAgICAgIHN0ciA9ICdJbmYnO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZm9ybWF0X3N0cmluZy5jaGFyQXQoaSkpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdmJzpcbiAgICAgICAgICAgICAgICAgIHN0ciA9IGFyZy50b0ZpeGVkKHByZWNpc2lvbiA9PT0gLTEgPyA2IDogcHJlY2lzaW9uKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2UnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0UnOlxuICAgICAgICAgICAgICAgICAgc3RyID0gYXJnLnRvRXhwb25lbnRpYWwocHJlY2lzaW9uID09PSAtMSA/IDYgOiBwcmVjaXNpb24pO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRyc6XG4gICAgICAgICAgICAgICAgICBzdHIgPSBhcmcudG9FeHBvbmVudGlhbCgpO1xuICAgICAgICAgICAgICAgICAgZXhwb25lbnQgPSBwYXJzZUludChzdHIuc3BsaXQoJ2UnKVsxXSwgMTApO1xuICAgICAgICAgICAgICAgICAgaWYgKCEoZXhwb25lbnQgPCAtNCB8fCBleHBvbmVudCA+PSAocHJlY2lzaW9uID09PSAtMSA/IDYgOiBwcmVjaXNpb24pKSkge1xuICAgICAgICAgICAgICAgICAgICBzdHIgPSBhcmcudG9QcmVjaXNpb24ocHJlY2lzaW9uID09PSAtMSA/IChmbGFncyZGU0hBUlAgPyA2IDogdW5kZWZpbmVkKSA6IHByZWNpc2lvbik7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGZsYWdzJkZNSU5VUykge1xuICAgICAgICAgICAgICAgIGlmIChmbGFncyZGUExVUyB8fCBmbGFncyZGU1BBQ0UpIHsgc3RyID0gKGZsYWdzJkZQTFVTID8gJysnIDogJyAnKSArIHN0cjsgfVxuICAgICAgICAgICAgICAgIHdoaWxlIChzdHIubGVuZ3RoIDwgd2lkdGgpIHsgc3RyID0gc3RyICsgJyAnOyB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGZsYWdzJkZaRVJPICYmIGFyZyAhPT0gSW5maW5pdHkgJiYgIWlzTmFOKGFyZykpIHtcbiAgICAgICAgICAgICAgICAgIHdoaWxlIChzdHIubGVuZ3RoIDwgd2lkdGggLSAoKGZsYWdzJkZQTFVTIHx8IGZsYWdzJkZTUEFDRSkgPyAxIDogMCkpIHsgc3RyID0gJzAnICsgc3RyOyB9XG4gICAgICAgICAgICAgICAgICBpZiAoZmxhZ3MmRlBMVVMgfHwgZmxhZ3MmRlNQQUNFKSB7IHN0ciA9IChmbGFncyZGUExVUyA/ICcrJyA6ICcgJykgKyBzdHI7IH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgaWYgKGZsYWdzJkZQTFVTIHx8IGZsYWdzJkZTUEFDRSkgeyBzdHIgPSAoZmxhZ3MmRlBMVVMgPyAnKycgOiAnICcpICsgc3RyOyB9XG4gICAgICAgICAgICAgICAgICB3aGlsZSAoc3RyLmxlbmd0aCA8IHdpZHRoKSB7IHN0ciA9ICcgJyArIHN0cjsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKGFyZyA9PT0gLUluZmluaXR5KSB7XG4gICAgICAgICAgICAgICAgc3RyID0gJ0luZic7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChmb3JtYXRfc3RyaW5nLmNoYXJBdChpKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2YnOlxuICAgICAgICAgICAgICAgICAgc3RyID0gKC1hcmcpLnRvRml4ZWQocHJlY2lzaW9uID09PSAtMSA/IDYgOiBwcmVjaXNpb24pO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRSc6XG4gICAgICAgICAgICAgICAgICBzdHIgPSAoLWFyZykudG9FeHBvbmVudGlhbChwcmVjaXNpb24gPT09IC0xID8gNiA6IHByZWNpc2lvbik7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdnJzpcbiAgICAgICAgICAgICAgICBjYXNlICdHJzpcbiAgICAgICAgICAgICAgICAgIHN0ciA9ICgtYXJnKS50b0V4cG9uZW50aWFsKCk7XG4gICAgICAgICAgICAgICAgICBleHBvbmVudCA9IHBhcnNlSW50KHN0ci5zcGxpdCgnZScpWzFdLCAxMCk7XG4gICAgICAgICAgICAgICAgICBpZiAoIShleHBvbmVudCA8IC00IHx8IGV4cG9uZW50ID49IChwcmVjaXNpb24gPT09IC0xID8gNiA6IHByZWNpc2lvbikpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0ciA9ICgtYXJnKS50b1ByZWNpc2lvbihwcmVjaXNpb24gPT09IC0xID8gKGZsYWdzJkZTSEFSUCA/IDYgOiB1bmRlZmluZWQpIDogcHJlY2lzaW9uKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoZmxhZ3MmRk1JTlVTKSB7XG4gICAgICAgICAgICAgICAgc3RyID0gJy0nICsgc3RyO1xuICAgICAgICAgICAgICAgIHdoaWxlIChzdHIubGVuZ3RoIDwgd2lkdGgpIHsgc3RyID0gc3RyICsgJyAnOyB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGZsYWdzJkZaRVJPICYmIGFyZyAhPT0gLUluZmluaXR5KSB7XG4gICAgICAgICAgICAgICAgICB3aGlsZSAoc3RyLmxlbmd0aCA8IHdpZHRoIC0gMSkgeyBzdHIgPSAnMCcgKyBzdHI7IH1cbiAgICAgICAgICAgICAgICAgIHN0ciA9ICctJyArIHN0cjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgc3RyID0gJy0nICsgc3RyO1xuICAgICAgICAgICAgICAgICAgd2hpbGUgKHN0ci5sZW5ndGggPCB3aWR0aCkgeyBzdHIgPSAnICcgKyBzdHI7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmb3JtYXRfc3RyaW5nLmNoYXJBdChpKSA9PT0gZm9ybWF0X3N0cmluZy5jaGFyQXQoaSkudG9VcHBlckNhc2UoKSAmJiBhcmcgIT09IEluZmluaXR5ICYmIGFyZyAhPT0gLUluZmluaXR5ICYmICFpc05hTihhcmcpKSB7XG4gICAgICAgICAgICAgIHN0ciA9IHN0ci50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UoLyhbZUVdWy0rXT8pKFswLTldKSQvLCAnJDEwJDInKTtcbiAgICAgICAgICAgIGJyZWFrIGZvcm1hdF9zZXF1ZW5jZTtcblxuICAgICAgICAgIGNhc2UgJ2EnOlxuICAgICAgICAgIGNhc2UgJ0EnOlxuICAgICAgICAgICAgLy8gTm90IGltcGxlbWVudGVkIGJlY2F1c2UgdGhlcmUgYXJlIG5vIHNwZWNzIGZvciB0aGlzIGZpZWxkIHR5cGUuXG4gICAgICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6Tm90SW1wbGVtZW50ZWRFcnJvciwgJ2BBYCBhbmQgYGFgIGZvcm1hdCBmaWVsZCB0eXBlcyBhcmUgbm90IGltcGxlbWVudGVkIGluIE9wYWwgeWV0J31cbiAgICAgICAgICAgIC8vIHJhaXNlXG5cbiAgICAgICAgICBjYXNlICdjJzpcbiAgICAgICAgICAgIGFyZyA9IEdFVF9BUkcoKTtcbiAgICAgICAgICAgIGlmICgje2BhcmdgLnJlc3BvbmRfdG8/KDp0b19hcnkpfSkgeyBhcmcgPSAje2BhcmdgLnRvX2FyeX1bMF07IH1cbiAgICAgICAgICAgIGlmICgje2BhcmdgLnJlc3BvbmRfdG8/KDp0b19zdHIpfSkge1xuICAgICAgICAgICAgICBzdHIgPSAje2BhcmdgLnRvX3N0cn07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzdHIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCRjb2VyY2VfdG8oYXJnLCAjezo6SW50ZWdlcn0sICd0b19pbnQnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RyLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgJyVjIHJlcXVpcmVzIGEgY2hhcmFjdGVyJ31cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmbGFncyZGTUlOVVMpIHtcbiAgICAgICAgICAgICAgd2hpbGUgKHN0ci5sZW5ndGggPCB3aWR0aCkgeyBzdHIgPSBzdHIgKyAnICc7IH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHdoaWxlIChzdHIubGVuZ3RoIDwgd2lkdGgpIHsgc3RyID0gJyAnICsgc3RyOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhayBmb3JtYXRfc2VxdWVuY2U7XG5cbiAgICAgICAgICBjYXNlICdwJzpcbiAgICAgICAgICAgIHN0ciA9ICN7YEdFVF9BUkcoKWAuaW5zcGVjdH07XG4gICAgICAgICAgICBpZiAocHJlY2lzaW9uICE9PSAtMSkgeyBzdHIgPSBzdHIuc2xpY2UoMCwgcHJlY2lzaW9uKTsgfVxuICAgICAgICAgICAgaWYgKGZsYWdzJkZNSU5VUykge1xuICAgICAgICAgICAgICB3aGlsZSAoc3RyLmxlbmd0aCA8IHdpZHRoKSB7IHN0ciA9IHN0ciArICcgJzsgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgd2hpbGUgKHN0ci5sZW5ndGggPCB3aWR0aCkgeyBzdHIgPSAnICcgKyBzdHI7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrIGZvcm1hdF9zZXF1ZW5jZTtcblxuICAgICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgc3RyID0gI3tgR0VUX0FSRygpYC50b19zfTtcbiAgICAgICAgICAgIGlmIChwcmVjaXNpb24gIT09IC0xKSB7IHN0ciA9IHN0ci5zbGljZSgwLCBwcmVjaXNpb24pOyB9XG4gICAgICAgICAgICBpZiAoZmxhZ3MmRk1JTlVTKSB7XG4gICAgICAgICAgICAgIHdoaWxlIChzdHIubGVuZ3RoIDwgd2lkdGgpIHsgc3RyID0gc3RyICsgJyAnOyB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB3aGlsZSAoc3RyLmxlbmd0aCA8IHdpZHRoKSB7IHN0ciA9ICcgJyArIHN0cjsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWsgZm9ybWF0X3NlcXVlbmNlO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCBcIm1hbGZvcm1lZCBmb3JtYXQgc3RyaW5nIC0gJSN7YGZvcm1hdF9zdHJpbmcuY2hhckF0KGkpYH1cIn1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgJ21hbGZvcm1lZCBmb3JtYXQgc3RyaW5nIC0gJSd9XG4gICAgICAgIH1cblxuICAgICAgICByZXN1bHQgKz0gZm9ybWF0X3N0cmluZy5zbGljZShiZWdpbl9zbGljZSwgZW5kX3NsaWNlKSArIHN0cjtcbiAgICAgICAgYmVnaW5fc2xpY2UgPSBpICsgMTtcbiAgICAgIH1cblxuICAgICAgaWYgKCN7JERFQlVHfSAmJiBwb3NfYXJnX251bSA+PSAwICYmIHNlcV9hcmdfbnVtIDwgYXJncy5sZW5ndGgpIHtcbiAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsICd0b28gbWFueSBhcmd1bWVudHMgZm9yIGZvcm1hdCBzdHJpbmcnfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0ICsgZm9ybWF0X3N0cmluZy5zbGljZShiZWdpbl9zbGljZSk7XG4gICAgfVxuICBlbmRcblxuICBhbGlhcyBzcHJpbnRmIGZvcm1hdFxuZW5kXG4iXSwibmFtZXMiOlsiPHRvcCAocmVxdWlyZWQpPiIsIjxtb2R1bGU6S2VybmVsPiIsImZvcm1hdCIsImZvcm1hdF9zdHJpbmciLCJhcmdzIiwibGVuZ3RoIiwiMSIsIltdIiwiMCIsInJlc3BvbmRfdG8/IiwiYXJ5IiwiT3BhbCIsImNvZXJjZV90bz8iLCJBcnJheSIsIm5pbD8iLCJ0b19hIiwiS2VybmVsIiwicmFpc2UiLCJBcmd1bWVudEVycm9yIiwidG9faW50IiwiZmV0Y2giLCJJbnRlZ2VyIiwiRmxvYXQiLCJOb3RJbXBsZW1lbnRlZEVycm9yIiwidG9fYXJ5IiwidG9fc3RyIiwiaW5zcGVjdCIsInRvX3MiLCIkREVCVUciXSwibWFwcGluZ3MiOiJBQUFBQSx3Q0FBQUEsZ0JBQUFBO0VBQUFBOztFQUFBQTtFQUVBQSxPQUFBQztFQUFBQTs7Ozs7QUFDRUMsSUFBQUEsc0JBQUFBLGtCQUFXQyxhQUFELEVBSFosRUFHRUQ7QUFBQUEsTUFBQUE7QUFBQUE7OztNQUhGO01BRzRCO01BQ3hCLElBQUcsQ0FBQSxNQUFBRSxJQUFJQyxRQUFBQSxDQUFBQSxDQUFKLEVBQWVDLENBQWYsQ0FBQSxJQUFBLENBQUEsUUFBb0JGLElBQUlHLE9BQUFBLENBQUNDLENBQURELENBQUdFLGdCQUFBQSxDQUFhLFFBQWJBLENBQTNCLENBQUEsQ0FBQSxDQUFIOztRQUNFQyxNQUFNQyxLQUFNQyxlQUFBQSxDQUFZUixJQUFJRyxPQUFBQSxDQUFDQyxDQUFERCxDQUF0QixFQUEyQk0sWUFBM0IsRUFBb0MsUUFBOUJEO1FBQ1osS0FBQSxRQUF1QkYsR0FBR0ksU0FBQUEsQ0FBQUEsQ0FBMUIsQ0FBQTtVQUFBVixPQUFPTSxHQUFHSyxNQUFBQSxDQUFBQTtRQUFWO01BRkY7O0FBTUpiO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FB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FNLFNBQU4sRUFBYyxRQUFkO0VBamlCRkEsR0FBTyxJQUFQQTtBQUZBRDsifX0seyJvZmZzZXQiOnsibGluZSI6NjkxNywiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvcmVsaWIvZGlyLnJiIl0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIDo6RGlyXG4gIGNsYXNzIDw8IHNlbGZcbiAgICBkZWYgY2hkaXIoZGlyKVxuICAgICAgcHJldl9jd2QgPSBgT3BhbC5jdXJyZW50X2RpcmBcbiAgICAgIGBPcGFsLmN1cnJlbnRfZGlyID0gI3tkaXJ9YFxuICAgICAgeWllbGRcbiAgICBlbnN1cmVcbiAgICAgIGBPcGFsLmN1cnJlbnRfZGlyID0gI3twcmV2X2N3ZH1gXG4gICAgZW5kXG5cbiAgICBkZWYgcHdkXG4gICAgICBgT3BhbC5jdXJyZW50X2RpciB8fCAnLidgXG4gICAgZW5kXG5cbiAgICBkZWYgaG9tZVxuICAgICAgOjpFTlZbJ0hPTUUnXSB8fCAnLidcbiAgICBlbmRcblxuICAgIGFsaWFzIGdldHdkIHB3ZFxuICBlbmRcbmVuZFxuIl0sIm5hbWVzIjpbIjx0b3AgKHJlcXVpcmVkKT4iLCI8Y2xhc3M6RGlyPiIsImNoZGlyIiwiZGlyIiwicHJldl9jd2QiLCJwd2QiLCJob21lIiwiJHJldF9vcl8xIiwiRU5WIiwiW10iLCJzZWxmIl0sIm1hcHBpbmdzIjoiQUFBQUEsOEJBQUFBLGdCQUFBQTtFQUFBQTs7RUFBQUE7RUFBQUEsT0FBQUM7RUFBQUE7O0lBQUFBOztJQUNFQSxPQUFBOzs7O0FBQ0VDLE1BQUFBLHFCQUFBQSxpQkFBVUMsR0FBVkQ7QUFBQUEsUUFBQUE7O1FBQUFBO1FBQ0VBLE9BQUEsY0FBQTs7UUFBQUUsV0FBWUY7UUFDWEEsbUJBQXFCQztRQUN0QixPQUFBLHFCQUFBLEVBQUE7UUFGQTtVQUlDRCxtQkFBcUJFO1FBSnRCLENBQUE7TUFERkYsQ0FBQUEsR0FBQUE7O0FBUUFHLE1BQUFBLG1CQUFBQSxlQUFBQTtBQUFBQTtRQUNFQSxPQUFDQSx1QkFBREE7TUFERkEsQ0FBQUEsR0FBQUE7O0FBSUFDLE1BQUFBLG9CQUFBQSxnQkFBQUE7QUFBQUEsUUFBQUE7O1FBQ0UsSUFBQSxRQUFBQyxDQUFBQSxZQUFBQyxVQUFLQyxPQUFBQSxDQUFDSCxNQUFERyxDQUFMRixDQUFBLENBQUE7VUFBQUQsT0FBQTtRQUFBO1VBQWlCQSxPQUFBQTtRQUFqQjtNQURGQSxDQUFBQSxHQUFBQTtNQUlBLE9BQUEsYUFBTSxPQUFOLEVBQVksS0FBWjtJQWpCRiw0QkFBU0ksSUFBVDtFQURGVCxHQUFNLElBQU5BLEVBQUFBLElBQUFBO0FBQUFEOyJ9fSx7Im9mZnNldCI6eyJsaW5lIjo2OTYzLCJjb2x1bW4iOjB9LCJtYXAiOnsidmVyc2lvbiI6Mywic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29yZWxpYi9tYWluLnJiIl0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIDw8IHNlbGZcbiAgZGVmIHRvX3NcbiAgICAnbWFpbidcbiAgZW5kXG5cbiAgZGVmIGluY2x1ZGUobW9kKVxuICAgIDo6T2JqZWN0LmluY2x1ZGUgbW9kXG4gIGVuZFxuXG4gIGRlZiBhdXRvbG9hZCgqYXJncylcbiAgICBgT3BhbC5PYmplY3QuJGF1dG9sb2FkLmFwcGx5KE9wYWwuT2JqZWN0LCBhcmdzKWBcbiAgZW5kXG5cbiAgIyBDb21waWxlciBvdmVycmlkZXMgdGhpcyBtZXRob2RcbiAgZGVmIHVzaW5nKG1vZClcbiAgICA6Oktlcm5lbC5yYWlzZSAnbWFpbi51c2luZyBpcyBwZXJtaXR0ZWQgb25seSBhdCB0b3BsZXZlbCdcbiAgZW5kXG5lbmRcbiJdLCJuYW1lcyI6WyI8dG9wIChyZXF1aXJlZCk+IiwidG9fcyIsImluY2x1ZGUiLCJtb2QiLCJPYmplY3QiLCJhdXRvbG9hZCIsInVzaW5nIiwiS2VybmVsIiwicmFpc2UiLCJzZWxmIl0sIm1hcHBpbmdzIjoiQUFBQUEsK0JBQUFBLGdCQUFBQTtFQUFBQTs7RUFBQUE7RUFBQUEsT0FBQTs7OztBQUNFQyxJQUFBQSxvQkFBQUEsWUFDRSxNQURGQSxDQUFBQSxHQUFBQTs7QUFJQUMsSUFBQUEsdUJBQUFBLG1CQUFZQyxHQUFaRDtBQUFBQTtNQUNFQSxPQUFBRSxPQUFRRixTQUFBQSxDQUFTQyxHQUFURDtJQURWQSxDQUFBQSxHQUFBQTs7QUFJQUcsSUFBQUEsd0JBQUFBLG9CQVRGLEVBU0VBO0FBQUFBLE1BQUFBOzs7TUFURjtNQVNlO01BQ1hBLE9BQUNBLDhDQUFEQTtJQURGQSxDQUFBQSxJQUFBQTtJQUtBLE9BQUFDLHFCQUFBQSxpQkFBVUgsR0FBVkc7QUFBQUE7TUFDRUEsT0FBQUMsT0FBUUMsT0FBQUEsQ0FBT0YsMENBQVBFO0lBRFZGLENBQUFBLEdBQUFBO0VBZEYsNEJBQVNHLElBQVQ7QUFBQVQ7In19LHsib2Zmc2V0Ijp7ImxpbmUiOjY5OTMsImNvbHVtbiI6MH0sIm1hcCI6eyJ2ZXJzaW9uIjozLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb3JlbGliL2Vycm9yLnJiIl0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIDo6RXhjZXB0aW9uIDwgYEVycm9yYFxuICBgT3BhbC5wcm9wKHNlbGYuJCRwcm90b3R5cGUsICckJGlzX2V4Y2VwdGlvbicsIHRydWUpYFxuICBgdmFyIHN0YWNrX3RyYWNlX2xpbWl0YFxuXG4gIGBFcnJvci5zdGFja1RyYWNlTGltaXQgPSAxMDBgXG5cbiAgZGVmIHNlbGYubmV3KCphcmdzKVxuICAgICV4e1xuICAgICAgdmFyIG1lc3NhZ2UgICA9IChhcmdzLmxlbmd0aCA+IDApID8gYXJnc1swXSA6IG5pbDtcbiAgICAgIHZhciBlcnJvciAgICAgPSBuZXcgc2VsZi4kJGNvbnN0cnVjdG9yKG1lc3NhZ2UpO1xuICAgICAgZXJyb3IubmFtZSAgICA9IHNlbGYuJCRuYW1lO1xuICAgICAgZXJyb3IubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICBlcnJvci5jYXVzZSAgID0gI3skIX07XG4gICAgICBPcGFsLnNlbmQoZXJyb3IsIGVycm9yLiRpbml0aWFsaXplLCBhcmdzKTtcblxuICAgICAgLy8gRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoKSB3aWxsIHVzZSAubmFtZSBhbmQgLnRvU3RyaW5nIHRvIGJ1aWxkIHRoZVxuICAgICAgLy8gZmlyc3QgbGluZSBvZiB0aGUgc3RhY2sgdHJhY2Ugc28gaXQgbXVzdCBiZSBjYWxsZWQgYWZ0ZXIgdGhlIGVycm9yXG4gICAgICAvLyBoYXMgYmVlbiBpbml0aWFsaXplZC5cbiAgICAgIC8vIGh0dHBzOi8vbm9kZWpzLm9yZy9kaXN0L2xhdGVzdC12Ni54L2RvY3MvYXBpL2Vycm9ycy5odG1sXG4gICAgICBpZiAoT3BhbC5jb25maWcuZW5hYmxlX3N0YWNrX3RyYWNlICYmIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgICAgIC8vIFBhc3NpbmcgS2VybmVsLnJhaXNlIHdpbGwgY3V0IHRoZSBzdGFjayB0cmFjZSBmcm9tIHRoYXQgcG9pbnQgYWJvdmVcbiAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoZXJyb3IsIHN0YWNrX3RyYWNlX2xpbWl0KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVycm9yO1xuICAgIH1cbiAgZW5kXG4gIGBzdGFja190cmFjZV9saW1pdCA9IHNlbGYuJG5ld2BcblxuICBkZWYgc2VsZi5leGNlcHRpb24oKmFyZ3MpXG4gICAgbmV3KCphcmdzKVxuICBlbmRcblxuICBkZWYgaW5pdGlhbGl6ZSgqYXJncylcbiAgICAjIHVzaW5nIHNlbGYubWVzc2FnZSBha2EgQG1lc3NhZ2UgdG8gcmV0YWluIGNvbXBhdGliaWxpdHkgd2l0aCBuYXRpdmUgZXhjZXB0aW9uJ3MgbWVzc2FnZSBwcm9wZXJ0eVxuICAgIGBzZWxmLm1lc3NhZ2UgPSAoYXJncy5sZW5ndGggPiAwKSA/IGFyZ3NbMF0gOiBuaWxgXG4gIGVuZFxuXG4gICV4e1xuICAgIC8vIENvbnZlcnQgYmFja3RyYWNlIGZyb20gYW55IGZvcm1hdCB0byBSdWJ5IGZvcm1hdFxuICAgIGZ1bmN0aW9uIGNvcnJlY3RfYmFja3RyYWNlKGJhY2t0cmFjZSkge1xuICAgICAgdmFyIG5ld19idCA9IFtdLCBtO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJhY2t0cmFjZS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbG9jID0gYmFja3RyYWNlW2ldO1xuICAgICAgICBpZiAoIWxvYyB8fCAhbG9jLiQkaXNfc3RyaW5nKSB7XG4gICAgICAgICAgLyogRG8gbm90aGluZyAqL1xuICAgICAgICB9XG4gICAgICAgIC8qIENocm9taXVtIGZvcm1hdCAqL1xuICAgICAgICBlbHNlIGlmICgobSA9IGxvYy5tYXRjaCgvXiAgICBhdCAoLio/KSBcXCgoLio/KVxcKSQvKSkpIHtcbiAgICAgICAgICBuZXdfYnQucHVzaChtWzJdICsgXCI6aW4gYFwiICsgbVsxXSArIFwiJ1wiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgobSA9IGxvYy5tYXRjaCgvXiAgICBhdCAoLio/KSQvKSkpIHtcbiAgICAgICAgICBuZXdfYnQucHVzaChtWzFdICsgXCI6aW4gYHVuZGVmaW5lZCdcIik7XG4gICAgICAgIH1cbiAgICAgICAgLyogTm9kZSBmb3JtYXQgKi9cbiAgICAgICAgZWxzZSBpZiAoKG0gPSBsb2MubWF0Y2goL14gIGZyb20gKC4qPykkLykpKSB7XG4gICAgICAgICAgbmV3X2J0LnB1c2gobVsxXSk7XG4gICAgICAgIH1cbiAgICAgICAgLyogTW96aWxsYS9BcHBsZSBmb3JtYXQgKi9cbiAgICAgICAgZWxzZSBpZiAoKG0gPSBsb2MubWF0Y2goL14oLio/KUAoLio/KSQvKSkpIHtcbiAgICAgICAgICBuZXdfYnQucHVzaChtWzJdICsgJzppbiBgJyArIG1bMV0gKyBcIidcIik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ld19idDtcbiAgICB9XG4gIH1cblxuICBkZWYgYmFja3RyYWNlXG4gICAgJXh7XG4gICAgICBpZiAoc2VsZi5iYWNrdHJhY2UpIHtcbiAgICAgICAgLy8gbmlsIGlzIGEgdmFsaWQgYmFja3RyYWNlXG4gICAgICAgIHJldHVybiBzZWxmLmJhY2t0cmFjZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGJhY2t0cmFjZSA9IHNlbGYuc3RhY2s7XG5cbiAgICAgIGlmICh0eXBlb2YoYmFja3RyYWNlKSAhPT0gJ3VuZGVmaW5lZCcgJiYgYmFja3RyYWNlLiQkaXNfc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBzZWxmLmJhY2t0cmFjZSA9IGNvcnJlY3RfYmFja3RyYWNlKGJhY2t0cmFjZS5zcGxpdChcIlxcblwiKSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChiYWNrdHJhY2UpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYuYmFja3RyYWNlID0gY29ycmVjdF9iYWNrdHJhY2UoYmFja3RyYWNlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGJhY2t0cmFjZV9sb2NhdGlvbnNcbiAgICAleHtcbiAgICAgIGlmIChzZWxmLmJhY2t0cmFjZV9sb2NhdGlvbnMpIHJldHVybiBzZWxmLmJhY2t0cmFjZV9sb2NhdGlvbnM7XG4gICAgICBzZWxmLmJhY2t0cmFjZV9sb2NhdGlvbnMgPSAje2JhY2t0cmFjZSYubWFwIGRvIHxsb2N8XG4gICAgICAgIDo6VGhyZWFkOjpCYWNrdHJhY2U6OkxvY2F0aW9uLm5ldyhsb2MpXG4gICAgICBlbmR9XG4gICAgICByZXR1cm4gc2VsZi5iYWNrdHJhY2VfbG9jYXRpb25zO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGNhdXNlXG4gICAgYHNlbGYuY2F1c2UgfHwgbmlsYFxuICBlbmRcblxuICBkZWYgZXhjZXB0aW9uKHN0ciA9IG5pbClcbiAgICAleHtcbiAgICAgIGlmIChzdHIgPT09IG5pbCB8fCBzZWxmID09PSBzdHIpIHtcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICB9XG5cbiAgICAgIHZhciBjbG9uZWQgPSAje2Nsb25lfTtcbiAgICAgIGNsb25lZC5tZXNzYWdlID0gc3RyO1xuICAgICAgaWYgKHNlbGYuYmFja3RyYWNlKSBjbG9uZWQuYmFja3RyYWNlID0gc2VsZi5iYWNrdHJhY2UuJGR1cCgpO1xuICAgICAgY2xvbmVkLnN0YWNrID0gc2VsZi5zdGFjaztcbiAgICAgIGNsb25lZC5jYXVzZSA9IHNlbGYuY2F1c2U7XG4gICAgICByZXR1cm4gY2xvbmVkO1xuICAgIH1cbiAgZW5kXG5cbiAgIyBub3QgdXNpbmcgYWxpYXMgbWVzc2FnZSB0b19zIGJlY2F1c2UgeW91IG5lZWQgdG8gYmUgYWJsZSB0byBvdmVycmlkZSB0b19zIGFuZCBoYXZlIG1lc3NhZ2UgdXNlIG92ZXJyaWRkZW4gbWV0aG9kLCB3b24ndCB3b3JrIHdpdGggYWxpYXNcbiAgZGVmIG1lc3NhZ2VcbiAgICB0b19zXG4gIGVuZFxuXG4gIGRlZiBmdWxsX21lc3NhZ2Uoa3dhcmdzID0gbmlsKVxuICAgIHVubGVzcyBkZWZpbmVkPyBIYXNoXG4gICAgICAjIFdlIGFyZSBkZWFsaW5nIHdpdGggYW4gdW5mdWxseSBsb2FkZWQgT3BhbCBsaWJyYXJ5LCBzbyB3ZSBzaG91bGRcbiAgICAgICMgZG8gd2l0aCBhcyBsaXR0bGUgYXMgd2UgY2FuLlxuXG4gICAgICByZXR1cm4gXCIje0BtZXNzYWdlfVxcbiN7YHNlbGYuc3RhY2tgfVwiXG4gICAgZW5kXG5cbiAgICBrd2FyZ3MgPSB7IGhpZ2hsaWdodDogJHN0ZGVyci50dHk/LCBvcmRlcjogOnRvcCB9Lm1lcmdlKGt3YXJncyB8fCB7fSlcbiAgICBoaWdobGlnaHQsIG9yZGVyID0ga3dhcmdzWzpoaWdobGlnaHRdLCBrd2FyZ3NbOm9yZGVyXVxuXG4gICAgOjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCBcImV4cGVjdGVkIHRydWUgb3IgZmFsc2UgYXMgaGlnaGxpZ2h0OiAje2hpZ2hsaWdodH1cIiB1bmxlc3MgW3RydWUsIGZhbHNlXS5pbmNsdWRlPyBoaWdobGlnaHRcbiAgICA6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsIFwiZXhwZWN0ZWQgOnRvcCBvciA6Ym90dG9tIGFzIG9yZGVyOiAje29yZGVyfVwiIHVubGVzcyAlaVt0b3AgYm90dG9tXS5pbmNsdWRlPyBvcmRlclxuXG4gICAgaWYgaGlnaGxpZ2h0XG4gICAgICBib2xkX3VuZGVybGluZSA9IFwiXFxlWzE7NG1cIlxuICAgICAgYm9sZCA9IFwiXFxlWzFtXCJcbiAgICAgIHJlc2V0ID0gXCJcXGVbbVwiXG4gICAgZWxzZVxuICAgICAgYm9sZF91bmRlcmxpbmUgPSBib2xkID0gcmVzZXQgPSAnJ1xuICAgIGVuZFxuXG4gICAgYnQgPSBiYWNrdHJhY2UuZHVwXG4gICAgYnQgPSBjYWxsZXIgaWYgIWJ0IHx8IGJ0LmVtcHR5P1xuICAgIGZpcnN0ID0gYnQuc2hpZnRcblxuICAgIG1zZyA9IFwiI3tmaXJzdH06IFwiXG4gICAgbXNnICs9IFwiI3tib2xkfSN7dG9fc30gKCN7Ym9sZF91bmRlcmxpbmV9I3tzZWxmLmNsYXNzfSN7cmVzZXR9I3tib2xkfSkje3Jlc2V0fVxcblwiXG5cbiAgICBtc2cgKz0gYnQubWFwIHsgfGxvY3wgXCJcXHRmcm9tICN7bG9jfVxcblwiIH0uam9pblxuXG4gICAgbXNnICs9IGNhdXNlLmZ1bGxfbWVzc2FnZShoaWdobGlnaHQ6IGhpZ2hsaWdodCkgaWYgY2F1c2VcblxuICAgIGlmIG9yZGVyID09IDpib3R0b21cbiAgICAgIG1zZyA9IG1zZy5zcGxpdChcIlxcblwiKS5yZXZlcnNlLmpvaW4oXCJcXG5cIilcbiAgICAgIG1zZyA9IFwiI3tib2xkfVRyYWNlYmFjayN7cmVzZXR9IChtb3N0IHJlY2VudCBjYWxsIGxhc3QpOlxcblwiICsgbXNnXG4gICAgZW5kXG5cbiAgICBtc2dcbiAgZW5kXG5cbiAgZGVmIGluc3BlY3RcbiAgICBhc19zdHIgPSB0b19zXG4gICAgYXNfc3RyLmVtcHR5PyA/IHNlbGYuY2xhc3MudG9fcyA6IFwiIzwje3NlbGYuY2xhc3MudG9fc306ICN7dG9fc30+XCJcbiAgZW5kXG5cbiAgZGVmIHNldF9iYWNrdHJhY2UoYmFja3RyYWNlKVxuICAgICV4e1xuICAgICAgdmFyIHZhbGlkID0gdHJ1ZSwgaSwgaWk7XG5cbiAgICAgIGlmIChiYWNrdHJhY2UgPT09IG5pbCkge1xuICAgICAgICBzZWxmLmJhY2t0cmFjZSA9IG5pbDtcbiAgICAgICAgc2VsZi5zdGFjayA9ICcnO1xuICAgICAgfSBlbHNlIGlmIChiYWNrdHJhY2UuJCRpc19zdHJpbmcpIHtcbiAgICAgICAgc2VsZi5iYWNrdHJhY2UgPSBbYmFja3RyYWNlXTtcbiAgICAgICAgc2VsZi5zdGFjayA9ICcgIGZyb20gJyArIGJhY2t0cmFjZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChiYWNrdHJhY2UuJCRpc19hcnJheSkge1xuICAgICAgICAgIGZvciAoaSA9IDAsIGlpID0gYmFja3RyYWNlLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgIGlmICghYmFja3RyYWNlW2ldLiQkaXNfc3RyaW5nKSB7XG4gICAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbGlkID09PSBmYWxzZSkge1xuICAgICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpUeXBlRXJyb3IsICdiYWNrdHJhY2UgbXVzdCBiZSBBcnJheSBvZiBTdHJpbmcnfVxuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5iYWNrdHJhY2UgPSBiYWNrdHJhY2U7XG4gICAgICAgIHNlbGYuc3RhY2sgPSAje2BiYWNrdHJhY2VgLm1hcCB7IHxpfCAnICBmcm9tICcgKyBpIH19LmpvaW4oXCJcXG5cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBiYWNrdHJhY2U7XG4gICAgfVxuICBlbmRcblxuICBkZWYgdG9fc1xuICAgICMgdXNpbmcgc2VsZi5tZXNzYWdlIGFrYSBAbWVzc2FnZSB0byByZXRhaW4gY29tcGF0aWJpbGl0eSB3aXRoIG5hdGl2ZSBleGNlcHRpb24ncyBtZXNzYWdlIHByb3BlcnR5XG4gICAgKEBtZXNzYWdlICYmIEBtZXNzYWdlLnRvX3MpIHx8IHNlbGYuY2xhc3MudG9fc1xuICBlbmRcbmVuZFxuXG4jIGtlZXAgdGhlIGluZGVudGF0aW9uLCBpdCBtYWtlcyB0aGUgZXhjZXB0aW9uIGhpZXJhcmNoeSBjbGVhclxuY2xhc3MgOjpTY3JpcHRFcnJvciAgICAgICA8IDo6RXhjZXB0aW9uOyBlbmRcbmNsYXNzIDo6U3ludGF4RXJyb3IgICAgICAgICA8IDo6U2NyaXB0RXJyb3I7IGVuZFxuY2xhc3MgOjpMb2FkRXJyb3IgICAgICAgICAgIDwgOjpTY3JpcHRFcnJvcjsgZW5kXG5jbGFzcyA6Ok5vdEltcGxlbWVudGVkRXJyb3IgPCA6OlNjcmlwdEVycm9yOyBlbmRcblxuY2xhc3MgOjpTeXN0ZW1FeGl0ICAgICAgICA8IDo6RXhjZXB0aW9uOyBlbmRcbmNsYXNzIDo6Tm9NZW1vcnlFcnJvciAgICAgPCA6OkV4Y2VwdGlvbjsgZW5kXG5jbGFzcyA6OlNpZ25hbEV4Y2VwdGlvbiAgIDwgOjpFeGNlcHRpb247IGVuZFxuY2xhc3MgOjpJbnRlcnJ1cHQgICAgICAgICAgIDwgOjpTaWduYWxFeGNlcHRpb247IGVuZFxuY2xhc3MgOjpTZWN1cml0eUVycm9yICAgICA8IDo6RXhjZXB0aW9uOyBlbmRcbmNsYXNzIDo6U3lzdGVtU3RhY2tFcnJvciAgPCA6OkV4Y2VwdGlvbjsgZW5kXG5cbmNsYXNzIDo6U3RhbmRhcmRFcnJvciAgICAgPCA6OkV4Y2VwdGlvbjsgZW5kXG5jbGFzcyA6OkVuY29kaW5nRXJyb3IgICAgICAgPCA6OlN0YW5kYXJkRXJyb3I7IGVuZFxuY2xhc3MgOjpaZXJvRGl2aXNpb25FcnJvciAgIDwgOjpTdGFuZGFyZEVycm9yOyBlbmRcbmNsYXNzIDo6TmFtZUVycm9yICAgICAgICAgICA8IDo6U3RhbmRhcmRFcnJvcjsgZW5kXG5jbGFzcyA6Ok5vTWV0aG9kRXJyb3IgICAgICAgICA8IDo6TmFtZUVycm9yOyBlbmRcbmNsYXNzIDo6UnVudGltZUVycm9yICAgICAgICA8IDo6U3RhbmRhcmRFcnJvcjsgZW5kXG5jbGFzcyA6OkZyb3plbkVycm9yICAgICAgICAgICA8IDo6UnVudGltZUVycm9yOyBlbmRcbmNsYXNzIDo6TG9jYWxKdW1wRXJyb3IgICAgICA8IDo6U3RhbmRhcmRFcnJvcjsgZW5kXG5jbGFzcyA6OlR5cGVFcnJvciAgICAgICAgICAgPCA6OlN0YW5kYXJkRXJyb3I7IGVuZFxuY2xhc3MgOjpBcmd1bWVudEVycm9yICAgICAgIDwgOjpTdGFuZGFyZEVycm9yOyBlbmRcbmNsYXNzIDo6VW5jYXVnaHRUaHJvd0Vycm9yICAgIDwgOjpBcmd1bWVudEVycm9yOyBlbmRcbmNsYXNzIDo6SW5kZXhFcnJvciAgICAgICAgICA8IDo6U3RhbmRhcmRFcnJvcjsgZW5kXG5jbGFzcyA6OlN0b3BJdGVyYXRpb24gICAgICAgICA8IDo6SW5kZXhFcnJvcjsgZW5kXG5jbGFzcyA6OkNsb3NlZFF1ZXVlRXJyb3IgICAgICAgIDwgOjpTdG9wSXRlcmF0aW9uOyBlbmRcbmNsYXNzIDo6S2V5RXJyb3IgICAgICAgICAgICAgIDwgOjpJbmRleEVycm9yOyBlbmRcbmNsYXNzIDo6UmFuZ2VFcnJvciAgICAgICAgICA8IDo6U3RhbmRhcmRFcnJvcjsgZW5kXG5jbGFzcyA6OkZsb2F0RG9tYWluRXJyb3IgICAgICA8IDo6UmFuZ2VFcnJvcjsgZW5kXG5jbGFzcyA6OklPRXJyb3IgICAgICAgICAgICAgPCA6OlN0YW5kYXJkRXJyb3I7IGVuZFxuY2xhc3MgOjpFT0ZFcnJvciAgICAgICAgICAgICAgPCA6OklPRXJyb3I7IGVuZFxuY2xhc3MgOjpTeXN0ZW1DYWxsRXJyb3IgICAgIDwgOjpTdGFuZGFyZEVycm9yOyBlbmRcbmNsYXNzIDo6UmVnZXhwRXJyb3IgICAgICAgICA8IDo6U3RhbmRhcmRFcnJvcjsgZW5kXG5jbGFzcyA6OlRocmVhZEVycm9yICAgICAgICAgPCA6OlN0YW5kYXJkRXJyb3I7IGVuZFxuY2xhc3MgOjpGaWJlckVycm9yICAgICAgICAgIDwgOjpTdGFuZGFyZEVycm9yOyBlbmRcblxuOjpPYmplY3QuYXV0b2xvYWQgOkVycm5vLCAnY29yZWxpYi9lcnJvci9lcnJubydcblxuY2xhc3MgOjpGcm96ZW5FcnJvciA8IDo6UnVudGltZUVycm9yXG4gIGF0dHJfcmVhZGVyIDpyZWNlaXZlclxuXG4gIGRlZiBpbml0aWFsaXplKG1lc3NhZ2UsIHJlY2VpdmVyOiBuaWwpXG4gICAgc3VwZXIgbWVzc2FnZVxuICAgIEByZWNlaXZlciA9IHJlY2VpdmVyXG4gIGVuZFxuZW5kXG5cbmNsYXNzIDo6VW5jYXVnaHRUaHJvd0Vycm9yIDwgOjpBcmd1bWVudEVycm9yXG4gIGF0dHJfcmVhZGVyIDp0YWcsIDp2YWx1ZVxuXG4gIGRlZiBpbml0aWFsaXplKHRhZywgdmFsdWUgPSBuaWwpXG4gICAgQHRhZyA9IHRhZ1xuICAgIEB2YWx1ZSA9IHZhbHVlXG5cbiAgICBzdXBlcihcInVuY2F1Z2h0IHRocm93ICN7QHRhZy5pbnNwZWN0fVwiKVxuICBlbmRcbmVuZFxuXG5jbGFzcyA6Ok5hbWVFcnJvclxuICBhdHRyX3JlYWRlciA6bmFtZVxuXG4gIGRlZiBpbml0aWFsaXplKG1lc3NhZ2UsIG5hbWUgPSBuaWwpXG4gICAgc3VwZXIgbWVzc2FnZVxuICAgIEBuYW1lID0gbmFtZVxuICBlbmRcbmVuZFxuXG5jbGFzcyA6Ok5vTWV0aG9kRXJyb3JcbiAgYXR0cl9yZWFkZXIgOmFyZ3NcblxuICBkZWYgaW5pdGlhbGl6ZShtZXNzYWdlLCBuYW1lID0gbmlsLCBhcmdzID0gW10pXG4gICAgc3VwZXIgbWVzc2FnZSwgbmFtZVxuICAgIEBhcmdzID0gYXJnc1xuICBlbmRcbmVuZFxuXG5jbGFzcyA6OlN0b3BJdGVyYXRpb25cbiAgYXR0cl9yZWFkZXIgOnJlc3VsdFxuZW5kXG5cbmNsYXNzIDo6S2V5RXJyb3JcbiAgZGVmIGluaXRpYWxpemUobWVzc2FnZSwgcmVjZWl2ZXI6IG5pbCwga2V5OiBuaWwpXG4gICAgc3VwZXIobWVzc2FnZSlcbiAgICBAcmVjZWl2ZXIgPSByZWNlaXZlclxuICAgIEBrZXkgPSBrZXlcbiAgZW5kXG5cbiAgZGVmIHJlY2VpdmVyXG4gICAgQHJlY2VpdmVyIHx8IDo6S2VybmVsLnJhaXNlKDo6QXJndW1lbnRFcnJvciwgJ25vIHJlY2VpdmVyIGlzIGF2YWlsYWJsZScpXG4gIGVuZFxuXG4gIGRlZiBrZXlcbiAgICBAa2V5IHx8IDo6S2VybmVsLnJhaXNlKDo6QXJndW1lbnRFcnJvciwgJ25vIGtleSBpcyBhdmFpbGFibGUnKVxuICBlbmRcbmVuZFxuXG5tb2R1bGUgOjpKU1xuICBjbGFzcyBFcnJvclxuICBlbmRcbmVuZFxuIl0sIm5hbWVzIjpbIjx0b3AgKHJlcXVpcmVkKT4iLCI8Y2xhc3M6RXhjZXB0aW9uPiIsIm5ldyIsInNlbGYiLCIkISIsImV4Y2VwdGlvbiIsImFyZ3MiLCJpbml0aWFsaXplIiwiYmFja3RyYWNlIiwiYmFja3RyYWNlX2xvY2F0aW9ucyIsImJsb2NrIGluIGJhY2t0cmFjZV9sb2NhdGlvbnMiLCJsb2MiLCJibG9jayAoMiBsZXZlbHMpIGluIGJhY2t0cmFjZV9sb2NhdGlvbnMiLCJUaHJlYWQ6OkJhY2t0cmFjZTo6TG9jYXRpb24iLCJUaHJlYWQ6OkJhY2t0cmFjZSIsIlRocmVhZCIsImNhdXNlIiwic3RyIiwiY2xvbmUiLCJtZXNzYWdlIiwidG9fcyIsImZ1bGxfbWVzc2FnZSIsImt3YXJncyIsIkBtZXNzYWdlIiwiJHN0ZGVyciIsInR0eT8iLCJtZXJnZSIsIiRyZXRfb3JfMSIsIltdIiwiaGlnaGxpZ2h0Iiwib3JkZXIiLCJpbmNsdWRlPyIsIktlcm5lbCIsInJhaXNlIiwiQXJndW1lbnRFcnJvciIsImJvbGRfdW5kZXJsaW5lIiwiYm9sZCIsInJlc2V0IiwiYnQiLCJkdXAiLCJlbXB0eT8iLCJjYWxsZXIiLCJmaXJzdCIsInNoaWZ0IiwibXNnIiwiKyIsImNsYXNzIiwibWFwIiwiYmxvY2sgaW4gZnVsbF9tZXNzYWdlIiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiBmdWxsX21lc3NhZ2UiLCJqb2luIiwic3BsaXQiLCJyZXZlcnNlIiwiaW5zcGVjdCIsImFzX3N0ciIsInNldF9iYWNrdHJhY2UiLCJUeXBlRXJyb3IiLCJibG9jayBpbiBzZXRfYmFja3RyYWNlIiwiaSIsImJsb2NrICgyIGxldmVscykgaW4gc2V0X2JhY2t0cmFjZSIsIiRyZXRfb3JfMiIsIjxjbGFzczpTY3JpcHRFcnJvcj4iLCJFeGNlcHRpb24iLCI8Y2xhc3M6U3ludGF4RXJyb3I+IiwiU2NyaXB0RXJyb3IiLCI8Y2xhc3M6TG9hZEVycm9yPiIsIjxjbGFzczpOb3RJbXBsZW1lbnRlZEVycm9yPiIsIjxjbGFzczpTeXN0ZW1FeGl0PiIsIjxjbGFzczpOb01lbW9yeUVycm9yPiIsIjxjbGFzczpTaWduYWxFeGNlcHRpb24+IiwiPGNsYXNzOkludGVycnVwdD4iLCJTaWduYWxFeGNlcHRpb24iLCI8Y2xhc3M6U2VjdXJpdHlFcnJvcj4iLCI8Y2xhc3M6U3lzdGVtU3RhY2tFcnJvcj4iLCI8Y2xhc3M6U3RhbmRhcmRFcnJvcj4iLCI8Y2xhc3M6RW5jb2RpbmdFcnJvcj4iLCJTdGFuZGFyZEVycm9yIiwiPGNsYXNzOlplcm9EaXZpc2lvbkVycm9yPiIsIjxjbGFzczpOYW1lRXJyb3I+IiwiPGNsYXNzOk5vTWV0aG9kRXJyb3I+IiwiTmFtZUVycm9yIiwiPGNsYXNzOlJ1bnRpbWVFcnJvcj4iLCI8Y2xhc3M6RnJvemVuRXJyb3I+IiwiUnVudGltZUVycm9yIiwiPGNsYXNzOkxvY2FsSnVtcEVycm9yPiIsIjxjbGFzczpUeXBlRXJyb3I+IiwiPGNsYXNzOkFyZ3VtZW50RXJyb3I+IiwiPGNsYXNzOlVuY2F1Z2h0VGhyb3dFcnJvcj4iLCI8Y2xhc3M6SW5kZXhFcnJvcj4iLCI8Y2xhc3M6U3RvcEl0ZXJhdGlvbj4iLCJJbmRleEVycm9yIiwiPGNsYXNzOkNsb3NlZFF1ZXVlRXJyb3I+IiwiU3RvcEl0ZXJhdGlvbiIsIjxjbGFzczpLZXlFcnJvcj4iLCI8Y2xhc3M6UmFuZ2VFcnJvcj4iLCI8Y2xhc3M6RmxvYXREb21haW5FcnJvcj4iLCJSYW5nZUVycm9yIiwiPGNsYXNzOklPRXJyb3I+IiwiPGNsYXNzOkVPRkVycm9yPiIsIklPRXJyb3IiLCI8Y2xhc3M6U3lzdGVtQ2FsbEVycm9yPiIsIjxjbGFzczpSZWdleHBFcnJvcj4iLCI8Y2xhc3M6VGhyZWFkRXJyb3I+IiwiPGNsYXNzOkZpYmVyRXJyb3I+IiwiT2JqZWN0IiwiYXV0b2xvYWQiLCJhdHRyX3JlYWRlciIsIiRrd2FyZ3MiLCJAcmVjZWl2ZXIiLCJyZWNlaXZlciIsInRhZyIsInZhbHVlIiwiQHRhZyIsIkB2YWx1ZSIsIm5hbWUiLCJAbmFtZSIsIkBhcmdzIiwiQGtleSIsImtleSIsIjxtb2R1bGU6SlM+IiwiPGNsYXNzOkVycm9yPiJdLCJtYXBwaW5ncyI6IkFBQUFBLGdDQUFBQSxnQkFBQUE7RUFBQUE7O0VBQUFBOztFQUFBQztFQUFBQTs7SUFBQUE7O0FBQUFBOztJQUNHQTtJQUNBQTtJQUVBQTtJQUVEQyxNQUFJQyxJQUFKRCxVQUFBQSwwQkFORixFQU1FQTtBQUFBQSxNQUFBQTtBQUFBQTs7O01BTkY7TUFNZTs7QUFFZkE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUEsc0JBQXdCRSxXQUFHRjtBQUMzQkE7O0FBRUFBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBOztBQUVBQTtBQUNBQTtJQW5CRUEsQ0FBQUEsSUFBQUE7SUFxQkNEO0lBRURJLE1BQUlGLElBQUpFLGdCQUFBQSxxQkE3QkYsRUE2QkVBO0FBQUFBLE1BQUFBOzs7TUE3QkY7TUE2QnFCO01BQ2pCQSxPQUFBSCxNQUFBQyxJQUFBRCxPQUFBQSxFQUFJLE1BQUNJLElBQUQsQ0FBSko7SUFERkcsQ0FBQUEsSUFBQUE7O0FBSUFFLElBQUFBLDBCQUFBQSxzQkFqQ0YsRUFpQ0VBO0FBQUFBLE1BQUFBOzs7TUFqQ0Y7TUFpQ2lCO01BRWJBLE9BQUNBLGdEQUFEQTtJQUZGQSxDQUFBQSxJQUFBQTs7QUFNRk47QUFDQUE7QUFDQUE7O0FBRUFBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0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QiOiIiLCJzb3VyY2VzIjpbImNvcmVsaWIvYmFzaWNfb2JqZWN0LnJiIl0sInNvdXJjZXNDb250ZW50IjpbIiMgdXNlX3N0cmljdDogdHJ1ZVxuXG5jbGFzcyA6OkJhc2ljT2JqZWN0XG4gIGRlZiBpbml0aWFsaXplKCopXG4gIGVuZFxuXG4gIGRlZiA9PShvdGhlcilcbiAgICBgc2VsZiA9PT0gb3RoZXJgXG4gIGVuZFxuXG4gIGRlZiBlcWw/KG90aGVyKVxuICAgIHNlbGYgPT0gb3RoZXJcbiAgZW5kXG5cbiAgYWxpYXMgZXF1YWw/ID09XG5cbiAgZGVmIF9faWRfX1xuICAgICV4e1xuICAgICAgaWYgKHNlbGYuJCRpZCAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBzZWxmLiQkaWQ7XG4gICAgICB9XG4gICAgICBPcGFsLnByb3Aoc2VsZiwgJyQkaWQnLCBPcGFsLnVpZCgpKTtcbiAgICAgIHJldHVybiBzZWxmLiQkaWQ7XG4gICAgfVxuICBlbmRcblxuICBkZWYgX19zZW5kX18oc3ltYm9sLCAqYXJncywgJmJsb2NrKVxuICAgICV4e1xuICAgICAgaWYgKCFzeW1ib2wuJCRpc19zdHJpbmcpIHtcbiAgICAgICAgI3tyYWlzZSA6OlR5cGVFcnJvciwgXCIje2luc3BlY3R9IGlzIG5vdCBhIHN5bWJvbCBub3IgYSBzdHJpbmdcIn1cbiAgICAgIH1cblxuICAgICAgdmFyIGZ1bmMgPSBzZWxmWyckJyArIHN5bWJvbF07XG5cbiAgICAgIGlmIChmdW5jKSB7XG4gICAgICAgIGlmIChibG9jayAhPT0gbmlsKSB7XG4gICAgICAgICAgZnVuYy4kJHAgPSBibG9jaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgICAgfVxuXG4gICAgICBpZiAoYmxvY2sgIT09IG5pbCkge1xuICAgICAgICBzZWxmLiRtZXRob2RfbWlzc2luZy4kJHAgPSBibG9jaztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGYuJG1ldGhvZF9taXNzaW5nLmFwcGx5KHNlbGYsIFtzeW1ib2xdLmNvbmNhdChhcmdzKSk7XG4gICAgfVxuICBlbmRcblxuICBkZWYgIVxuICAgIGZhbHNlXG4gIGVuZFxuICA6Ok9wYWwucHJpc3RpbmUgOiFcblxuICBkZWYgIT0ob3RoZXIpXG4gICAgIShzZWxmID09IG90aGVyKVxuICBlbmRcblxuICBkZWYgaW5zdGFuY2VfZXZhbCgqYXJncywgJmJsb2NrKVxuICAgIGlmIGJsb2NrLm5pbD8gJiYgYCEhT3BhbC5jb21waWxlYFxuICAgICAgOjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCAnd3JvbmcgbnVtYmVyIG9mIGFyZ3VtZW50cyAoMCBmb3IgMS4uMyknIHVubGVzcyAoMS4uMykuY292ZXI/IGFyZ3Muc2l6ZVxuXG4gICAgICBzdHJpbmcsIGZpbGUsIF9saW5lbm8gPSAqYXJnc1xuICAgICAgZGVmYXVsdF9ldmFsX29wdGlvbnMgPSB7IGZpbGU6IChmaWxlIHx8ICcoZXZhbCknKSwgZXZhbDogdHJ1ZSB9XG4gICAgICBjb21waWxpbmdfb3B0aW9ucyA9IF9fT1BBTF9DT01QSUxFUl9DT05GSUdfXy5tZXJnZShkZWZhdWx0X2V2YWxfb3B0aW9ucylcbiAgICAgIGNvbXBpbGVkID0gOjpPcGFsLmNvbXBpbGUgc3RyaW5nLCBjb21waWxpbmdfb3B0aW9uc1xuICAgICAgYmxvY2sgPSA6Oktlcm5lbC5wcm9jIGRvXG4gICAgICAgICV4e25ldyBGdW5jdGlvbihcIk9wYWwsc2VsZlwiLCBcInJldHVybiBcIiArIGNvbXBpbGVkKShPcGFsLCBzZWxmKX1cbiAgICAgIGVuZFxuICAgIGVsc2lmIGJsb2NrLm5pbD8gJiYgYXJncy5sZW5ndGggPj0gMSAmJiBhcmdzLmZpcnN0WzBdID09ICdAJ1xuICAgICAgIyBnZXQgaW5zdGFuY2UgdmFyaWFibGVcbiAgICAgIHJldHVybiBpbnN0YW5jZV92YXJpYWJsZV9nZXQoYXJncy5maXJzdClcbiAgICBlbHNpZiBhcmdzLmFueT9cbiAgICAgIDo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgXCJ3cm9uZyBudW1iZXIgb2YgYXJndW1lbnRzICgje2FyZ3Muc2l6ZX0gZm9yIDApXCJcbiAgICBlbmRcblxuICAgICV4e1xuICAgICAgdmFyIG9sZCA9IGJsb2NrLiQkcyxcbiAgICAgICAgICByZXN1bHQ7XG5cbiAgICAgIGJsb2NrLiQkcyA9IG51bGw7XG5cbiAgICAgIC8vIE5lZWQgdG8gcGFzcyAkJGV2YWwgc28gdGhhdCBtZXRob2QgZGVmaW5pdGlvbnMga25vdyBpZiB0aGlzIGlzXG4gICAgICAvLyBiZWluZyBkb25lIG9uIGEgY2xhc3MvbW9kdWxlLiBDYW5ub3QgYmUgY29tcGlsZXIgZHJpdmVuIHNpbmNlXG4gICAgICAvLyBzZW5kKDppbnN0YW5jZV9ldmFsKSBuZWVkcyB0byB3b3JrLlxuICAgICAgaWYgKHNlbGYuJCRpc19hX21vZHVsZSkge1xuICAgICAgICBzZWxmLiQkZXZhbCA9IHRydWU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmVzdWx0ID0gYmxvY2suY2FsbChzZWxmLCBzZWxmKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICBzZWxmLiQkZXZhbCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gYmxvY2suY2FsbChzZWxmLCBzZWxmKTtcbiAgICAgIH1cblxuICAgICAgYmxvY2suJCRzID0gb2xkO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGluc3RhbmNlX2V4ZWMoKmFyZ3MsICZibG9jaylcbiAgICA6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsICdubyBibG9jayBnaXZlbicgdW5sZXNzIGJsb2NrXG5cbiAgICAleHtcbiAgICAgIHZhciBibG9ja19zZWxmID0gYmxvY2suJCRzLFxuICAgICAgICAgIHJlc3VsdDtcblxuICAgICAgYmxvY2suJCRzID0gbnVsbDtcblxuICAgICAgaWYgKHNlbGYuJCRpc19hX21vZHVsZSkge1xuICAgICAgICBzZWxmLiQkZXZhbCA9IHRydWU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmVzdWx0ID0gYmxvY2suYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgc2VsZi4kJGV2YWwgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IGJsb2NrLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgICAgfVxuXG4gICAgICBibG9jay4kJHMgPSBibG9ja19zZWxmO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIHNpbmdsZXRvbl9tZXRob2RfYWRkZWQoKilcbiAgZW5kXG5cbiAgZGVmIHNpbmdsZXRvbl9tZXRob2RfcmVtb3ZlZCgqKVxuICBlbmRcblxuICBkZWYgc2luZ2xldG9uX21ldGhvZF91bmRlZmluZWQoKilcbiAgZW5kXG5cbiAgZGVmIG1ldGhvZF9taXNzaW5nKHN5bWJvbCwgKmFyZ3MsICZibG9jaylcbiAgICBpbnNwZWN0X3Jlc3VsdCA9IDo6T3BhbC5pbnNwZWN0KHNlbGYpXG4gICAgOjpLZXJuZWwucmFpc2UgOjpOb01ldGhvZEVycm9yLm5ldyhcbiAgICAgIFwidW5kZWZpbmVkIG1ldGhvZCBgI3tzeW1ib2x9JyBmb3IgI3tpbnNwZWN0X3Jlc3VsdH1cIiwgc3ltYm9sLCBhcmdzXG4gICAgKSwgbmlsLCA6Oktlcm5lbC5jYWxsZXIoMSlcbiAgZW5kXG5cbiAgOjpPcGFsLnByaXN0aW5lKHNlbGYsIDptZXRob2RfbWlzc2luZylcblxuICBkZWYgcmVzcG9uZF90b19taXNzaW5nPyhtZXRob2RfbmFtZSwgaW5jbHVkZV9hbGwgPSBmYWxzZSlcbiAgICBmYWxzZVxuICBlbmRcbmVuZFxuIl0sIm5hbWVzIjpbIjx0b3AgKHJlcXVpcmVkKT4iLCI8Y2xhc3M6QmFzaWNPYmplY3Q+IiwiaW5pdGlhbGl6ZSIsIj09Iiwib3RoZXIiLCJlcWw/Iiwic2VsZiIsIl9faWRfXyIsIl9fc2VuZF9fIiwic3ltYm9sIiwicmFpc2UiLCJUeXBlRXJyb3IiLCJpbnNwZWN0IiwiISIsIk9wYWwiLCJwcmlzdGluZSIsIiE9IiwiaW5zdGFuY2VfZXZhbCIsImJsb2NrIiwibmlsPyIsIjEiLCIzIiwiY292ZXI/IiwiYXJncyIsInNpemUiLCJLZXJuZWwiLCJBcmd1bWVudEVycm9yIiwic3RyaW5nIiwiZmlsZSIsIl9saW5lbm8iLCJkZWZhdWx0X2V2YWxfb3B0aW9ucyIsIiRyZXRfb3JfMSIsImNvbXBpbGluZ19vcHRpb25zIiwiX19PUEFMX0NPTVBJTEVSX0NPTkZJR19fIiwibWVyZ2UiLCJjb21waWxlZCIsImNvbXBpbGUiLCJwcm9jIiwiYmxvY2sgaW4gaW5zdGFuY2VfZXZhbCIsImJsb2NrICgyIGxldmVscykgaW4gaW5zdGFuY2VfZXZhbCIsIj49IiwibGVuZ3RoIiwiZmlyc3QiLCJbXSIsIjAiLCJpbnN0YW5jZV92YXJpYWJsZV9nZXQiLCJhbnk/IiwiaW5zdGFuY2VfZXhlYyIsInNpbmdsZXRvbl9tZXRob2RfYWRkZWQiLCJzaW5nbGV0b25fbWV0aG9kX3JlbW92ZWQiLCJzaW5nbGV0b25fbWV0aG9kX3VuZGVmaW5lZCIsIm1ldGhvZF9taXNzaW5nIiwiaW5zcGVjdF9yZXN1bHQiLCJOb01ldGhvZEVycm9yIiwibmV3IiwiY2FsbGVyIiwicmVzcG9uZF90b19taXNzaW5nPyIsIm1ldGhvZF9uYW1lIiwiaW5jbHVkZV9hbGwiXSwibWFwcGluZ3MiOiJBQUFBQSx1Q0FBQUEsZ0JBQUFBO0VBQUFBO0VBQUFBOztFQUFBQTtFQUVBQSxPQUFBQztFQUFBQTs7Ozs7QUFDRUMsSUFBQUEsMEJBQUFBLHNCQUhGLEVBR0VBO0FBQUFBLE1BQUFBOzs7TUFIRjtNQUdpQjtNQUhqQkEsT0FBQTtJQUdFQSxDQUFBQSxJQUFBQTs7QUFHQUMsSUFBQUEsa0JBQUFBLCtCQUFPQyxLQUFQRDtBQUFBQSxNQUFBQTs7TUFDRUEsT0FBQ0EsY0FBREE7SUFERkEsQ0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FBQUE7OztNQTlJRjtNQThJNkI7TUFDekJDLGlCQUFpQnRDLEtBQU1GLFNBQUFBLENBQVNOLElBQVRNO01BQ3ZCdUMsT0FBQTFCLE9BQVFmLE9BQUFBLENBQU8yQyxvQkFBZUMsS0FBQUEsQ0FDM0JILG9CQUFELEdBQUEsQ0FBcUIxQyxNQUFyQixDQUFBLEdBQTRCMEMsUUFBNUIsR0FBQSxDQUFvQ0MsY0FBcEMsQ0FEYSxFQUN5QzNDLE1BRHpDLEVBQ2lEYyxJQURsQytCLENBQTlCLEVBRUcsR0FGSCxFQUVRN0IsT0FBUThCLFFBQUFBLENBQVFuQyxDQUFSbUMsQ0FGUjdDO0lBRlZ5QyxDQUFBQSxJQUFBQTtJQU9BckMsS0FBTUMsVUFBQUEsQ0FBVVQsSUFBaEIsRUFBc0IsZ0JBQWhCUztJQUVOZCxPQUFBdUQsbUNBQUFBLGdEQUF3QkMsV0FBRCxFQUFjQyxXQUFyQ0Y7QUFBQUE7O01BQXFDLHVDQUFjO01BQ2pEQSxPQUFBO0lBREZBLENBQUFBLElBQUFBO0VBckpGdkQsR0FBTSxJQUFOQSxFQUFBQSxJQUFBQTtBQUZBRDsifX0seyJvZmZzZXQiOnsibGluZSI6NzY0MCwiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvcmVsaWIva2VybmVsLnJiIl0sInNvdXJjZXNDb250ZW50IjpbIiMgaGVscGVyczogdHJ1dGh5LCBjb2VyY2VfdG8sIHJlc3BvbmRfdG8sIE9wYWwsIGRlbnlfZnJvemVuX2FjY2VzcywgZnJlZXplLCBmcmVlemVfcHJvcHNcbiMgdXNlX3N0cmljdDogdHJ1ZVxuXG5tb2R1bGUgOjpLZXJuZWxcbiAgZGVmID1+KG9iailcbiAgICBmYWxzZVxuICBlbmRcblxuICBkZWYgIX4ob2JqKVxuICAgICEoc2VsZiA9fiBvYmopXG4gIGVuZFxuXG4gIGRlZiA9PT0ob3RoZXIpXG4gICAgb2JqZWN0X2lkID09IG90aGVyLm9iamVjdF9pZCB8fCBzZWxmID09IG90aGVyXG4gIGVuZFxuXG4gIGRlZiA8PT4ob3RoZXIpXG4gICAgJXh7XG4gICAgICAvLyBzZXQgZ3VhcmQgZm9yIGluZmluaXRlIHJlY3Vyc2lvblxuICAgICAgc2VsZi4kJGNvbXBhcmFibGUgPSB0cnVlO1xuXG4gICAgICB2YXIgeCA9ICN7c2VsZiA9PSBvdGhlcn07XG5cbiAgICAgIGlmICh4ICYmIHggIT09IG5pbCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5pbDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBtZXRob2QobmFtZSlcbiAgICAleHtcbiAgICAgIHZhciBtZXRoID0gc2VsZlsnJCcgKyBuYW1lXTtcblxuICAgICAgaWYgKCFtZXRoIHx8IG1ldGguJCRzdHViKSB7XG4gICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpOYW1lRXJyb3IubmV3KFwidW5kZWZpbmVkIG1ldGhvZCBgI3tuYW1lfScgZm9yIGNsYXNzIGAje3NlbGYuY2xhc3N9J1wiLCBuYW1lKX07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAjezo6TWV0aG9kLm5ldyhzZWxmLCBgbWV0aC4kJG93bmVyIHx8ICN7c2VsZi5jbGFzc31gLCBgbWV0aGAsIG5hbWUpfTtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBtZXRob2RzKGFsbCA9IHRydWUpXG4gICAgJXh7XG4gICAgICBpZiAoJHRydXRoeSgje2FsbH0pKSB7XG4gICAgICAgIHJldHVybiBPcGFsLm1ldGhvZHMoc2VsZik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gT3BhbC5vd25fbWV0aG9kcyhzZWxmKTtcbiAgICAgIH1cbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBwdWJsaWNfbWV0aG9kcyhhbGwgPSB0cnVlKVxuICAgICV4e1xuICAgICAgaWYgKCR0cnV0aHkoI3thbGx9KSkge1xuICAgICAgICByZXR1cm4gT3BhbC5tZXRob2RzKHNlbGYpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIE9wYWwucmVjZWl2ZXJfbWV0aG9kcyhzZWxmKTtcbiAgICAgIH1cbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBBcnJheShvYmplY3QpXG4gICAgJXh7XG4gICAgICB2YXIgY29lcmNlZDtcblxuICAgICAgaWYgKG9iamVjdCA9PT0gbmlsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9iamVjdC4kJGlzX2FycmF5KSB7XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9XG5cbiAgICAgIGNvZXJjZWQgPSAjezo6T3BhbC5jb2VyY2VfdG8/KG9iamVjdCwgOjpBcnJheSwgOnRvX2FyeSl9O1xuICAgICAgaWYgKGNvZXJjZWQgIT09IG5pbCkgeyByZXR1cm4gY29lcmNlZDsgfVxuXG4gICAgICBjb2VyY2VkID0gI3s6Ok9wYWwuY29lcmNlX3RvPyhvYmplY3QsIDo6QXJyYXksIDp0b19hKX07XG4gICAgICBpZiAoY29lcmNlZCAhPT0gbmlsKSB7IHJldHVybiBjb2VyY2VkOyB9XG5cbiAgICAgIHJldHVybiBbb2JqZWN0XTtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBhdF9leGl0KCZibG9jaylcbiAgICAkX19hdF9leGl0X18gfHw9IFtdXG4gICAgJF9fYXRfZXhpdF9fIDw8IGJsb2NrXG4gICAgYmxvY2tcbiAgZW5kXG5cbiAgZGVmIGNhbGxlcihzdGFydCA9IDEsIGxlbmd0aCA9IG5pbClcbiAgICAleHtcbiAgICAgIHZhciBzdGFjaywgcmVzdWx0O1xuXG4gICAgICBzdGFjayA9IG5ldyBFcnJvcigpLiRiYWNrdHJhY2UoKTtcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBpID0gI3tzdGFydH0gKyAxLCBpaSA9IHN0YWNrLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgaWYgKCFzdGFja1tpXS5tYXRjaCgvcnVudGltZVxcLmpzLykpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChzdGFja1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChsZW5ndGggIT0gbmlsKSByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwgbGVuZ3RoKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICBlbmRcblxuICBkZWYgY2FsbGVyX2xvY2F0aW9ucygqYXJncylcbiAgICBjYWxsZXIoKmFyZ3MpLm1hcCBkbyB8bG9jfFxuICAgICAgOjpUaHJlYWQ6OkJhY2t0cmFjZTo6TG9jYXRpb24ubmV3KGxvYylcbiAgICBlbmRcbiAgZW5kXG5cbiAgZGVmIGNsYXNzXG4gICAgYHNlbGYuJCRjbGFzc2BcbiAgZW5kXG5cbiAgZGVmIGNvcHlfaW5zdGFuY2VfdmFyaWFibGVzKG90aGVyKVxuICAgICV4e1xuICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvdGhlciksIGksIGlpLCBuYW1lO1xuICAgICAgZm9yIChpID0gMCwgaWkgPSBrZXlzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgbmFtZSA9IGtleXNbaV07XG4gICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSAhPT0gJyQnICYmIG90aGVyLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgc2VsZltuYW1lXSA9IG90aGVyW25hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICBlbmRcblxuICBkZWYgY29weV9zaW5nbGV0b25fbWV0aG9kcyhvdGhlcilcbiAgICAleHtcbiAgICAgIHZhciBpLCBuYW1lLCBuYW1lcywgbGVuZ3RoO1xuXG4gICAgICBpZiAob3RoZXIuaGFzT3duUHJvcGVydHkoJyQkbWV0YScpICYmIG90aGVyLiQkbWV0YSAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgb3RoZXJfc2luZ2xldG9uX2NsYXNzID0gT3BhbC5nZXRfc2luZ2xldG9uX2NsYXNzKG90aGVyKTtcbiAgICAgICAgdmFyIHNlbGZfc2luZ2xldG9uX2NsYXNzID0gT3BhbC5nZXRfc2luZ2xldG9uX2NsYXNzKHNlbGYpO1xuICAgICAgICBuYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG90aGVyX3NpbmdsZXRvbl9jbGFzcy4kJHByb3RvdHlwZSk7XG5cbiAgICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gbmFtZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBuYW1lID0gbmFtZXNbaV07XG4gICAgICAgICAgaWYgKE9wYWwuaXNfbWV0aG9kKG5hbWUpKSB7XG4gICAgICAgICAgICBzZWxmX3NpbmdsZXRvbl9jbGFzcy4kJHByb3RvdHlwZVtuYW1lXSA9IG90aGVyX3NpbmdsZXRvbl9jbGFzcy4kJHByb3RvdHlwZVtuYW1lXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzZWxmX3NpbmdsZXRvbl9jbGFzcy4kJGNvbnN0ID0gT2JqZWN0LmFzc2lnbih7fSwgb3RoZXJfc2luZ2xldG9uX2NsYXNzLiQkY29uc3QpO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoXG4gICAgICAgICAgc2VsZl9zaW5nbGV0b25fY2xhc3MuJCRwcm90b3R5cGUsXG4gICAgICAgICAgT2JqZWN0LmdldFByb3RvdHlwZU9mKG90aGVyX3NpbmdsZXRvbl9jbGFzcy4kJHByb3RvdHlwZSlcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMCwgbmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvdGhlciksIGxlbmd0aCA9IG5hbWVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG5hbWUgPSBuYW1lc1tpXTtcbiAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSAnJCcgJiYgbmFtZS5jaGFyQXQoMSkgIT09ICckJyAmJiBvdGhlci5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgIHNlbGZbbmFtZV0gPSBvdGhlcltuYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGNsb25lKGZyZWV6ZTogbmlsKVxuICAgIHVubGVzcyBmcmVlemUubmlsPyB8fCBmcmVlemUgPT0gdHJ1ZSB8fCBmcmVlemUgPT0gZmFsc2VcbiAgICAgIHJhaXNlIEFyZ3VtZW50RXJyb3IsIFwidW5leHBlY3RlZCB2YWx1ZSBmb3IgZnJlZXplOiAje2ZyZWV6ZS5jbGFzc31cIlxuICAgIGVuZFxuXG4gICAgY29weSA9IHNlbGYuY2xhc3MuYWxsb2NhdGVcblxuICAgIGNvcHkuY29weV9pbnN0YW5jZV92YXJpYWJsZXMoc2VsZilcbiAgICBjb3B5LmNvcHlfc2luZ2xldG9uX21ldGhvZHMoc2VsZilcbiAgICBjb3B5LmluaXRpYWxpemVfY2xvbmUoc2VsZiwgZnJlZXplOiBmcmVlemUpXG5cbiAgICBpZiBmcmVlemUgPT0gdHJ1ZSB8fCAoZnJlZXplLm5pbD8gJiYgZnJvemVuPylcbiAgICAgIGNvcHkuZnJlZXplXG4gICAgZW5kXG5cbiAgICBjb3B5XG4gIGVuZFxuXG4gIGRlZiBpbml0aWFsaXplX2Nsb25lKG90aGVyLCBmcmVlemU6IG5pbClcbiAgICBpbml0aWFsaXplX2NvcHkob3RoZXIpXG4gICAgc2VsZlxuICBlbmRcblxuICBkZWYgZGVmaW5lX3NpbmdsZXRvbl9tZXRob2QobmFtZSwgbWV0aG9kID0gdW5kZWZpbmVkLCAmYmxvY2spXG4gICAgc2luZ2xldG9uX2NsYXNzLmRlZmluZV9tZXRob2QobmFtZSwgbWV0aG9kLCAmYmxvY2spXG4gIGVuZFxuXG4gIGRlZiBkdXBcbiAgICBjb3B5ID0gc2VsZi5jbGFzcy5hbGxvY2F0ZVxuXG4gICAgY29weS5jb3B5X2luc3RhbmNlX3ZhcmlhYmxlcyhzZWxmKVxuICAgIGNvcHkuaW5pdGlhbGl6ZV9kdXAoc2VsZilcblxuICAgIGNvcHlcbiAgZW5kXG5cbiAgZGVmIGluaXRpYWxpemVfZHVwKG90aGVyKVxuICAgIGluaXRpYWxpemVfY29weShvdGhlcilcbiAgZW5kXG5cbiAgZGVmIGVudW1fZm9yKG1ldGhvZCA9IDplYWNoLCAqYXJncywgJmJsb2NrKVxuICAgIDo6RW51bWVyYXRvci5mb3Ioc2VsZiwgbWV0aG9kLCAqYXJncywgJmJsb2NrKVxuICBlbmRcblxuICBkZWYgZXF1YWw/KG90aGVyKVxuICAgIGBzZWxmID09PSBvdGhlcmBcbiAgZW5kXG5cbiAgZGVmIGV4aXQoc3RhdHVzID0gdHJ1ZSlcbiAgICAkX19hdF9leGl0X18gfHw9IFtdXG5cbiAgICB1bnRpbCAkX19hdF9leGl0X18uZW1wdHk/XG4gICAgICBibG9jayA9ICRfX2F0X2V4aXRfXy5wb3BcbiAgICAgIGJsb2NrLmNhbGxcbiAgICBlbmRcblxuICAgICV4e1xuICAgICAgaWYgKHN0YXR1cy4kJGlzX2Jvb2xlYW4pIHtcbiAgICAgICAgc3RhdHVzID0gc3RhdHVzID8gMCA6IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0dXMgPSAkY29lcmNlX3RvKHN0YXR1cywgI3s6OkludGVnZXJ9LCAndG9faW50JylcbiAgICAgIH1cblxuICAgICAgT3BhbC5leGl0KHN0YXR1cyk7XG4gICAgfVxuICAgIG5pbFxuICBlbmRcblxuICBkZWYgZXh0ZW5kKCptb2RzKVxuICAgICV4e1xuICAgICAgaWYgKG1vZHMubGVuZ3RoID09IDApIHtcbiAgICAgICAgI3tyYWlzZSA6OkFyZ3VtZW50RXJyb3IsICd3cm9uZyBudW1iZXIgb2YgYXJndW1lbnRzIChnaXZlbiAwLCBleHBlY3RlZCAxKyknfVxuICAgICAgfVxuXG4gICAgICAkZGVueV9mcm96ZW5fYWNjZXNzKHNlbGYpO1xuXG4gICAgICB2YXIgc2luZ2xldG9uID0gI3tzaW5nbGV0b25fY2xhc3N9O1xuXG4gICAgICBmb3IgKHZhciBpID0gbW9kcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICB2YXIgbW9kID0gbW9kc1tpXTtcblxuICAgICAgICBpZiAoIW1vZC4kJGlzX21vZHVsZSkge1xuICAgICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpUeXBlRXJyb3IsIFwid3JvbmcgYXJndW1lbnQgdHlwZSAje2Btb2RgLmNsYXNzfSAoZXhwZWN0ZWQgTW9kdWxlKVwifTtcbiAgICAgICAgfVxuXG4gICAgICAgICN7YG1vZGAuYXBwZW5kX2ZlYXR1cmVzIGBzaW5nbGV0b25gfTtcbiAgICAgICAgI3tgbW9kYC5leHRlbmRfb2JqZWN0IHNlbGZ9O1xuICAgICAgICAje2Btb2RgLmV4dGVuZGVkIHNlbGZ9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHNlbGZcbiAgZW5kXG5cbiAgZGVmIGZyZWV6ZVxuICAgIHJldHVybiBzZWxmIGlmIGZyb3plbj9cblxuICAgICV4e1xuICAgICAgaWYgKHR5cGVvZihzZWxmKSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAkZnJlZXplX3Byb3BzKHNlbGYpO1xuICAgICAgICByZXR1cm4gJGZyZWV6ZShzZWxmKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGZyb3plbj9cbiAgICAleHtcbiAgICAgIHN3aXRjaCAodHlwZW9mKHNlbGYpKSB7XG4gICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICBjYXNlIFwic3ltYm9sXCI6XG4gICAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICAgICAgcmV0dXJuIChzZWxmLiQkZnJvemVuIHx8IGZhbHNlKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBnZXRzKCphcmdzKVxuICAgICRzdGRpbi5nZXRzKCphcmdzKVxuICBlbmRcblxuICBkZWYgaGFzaFxuICAgIF9faWRfX1xuICBlbmRcblxuICBkZWYgaW5pdGlhbGl6ZV9jb3B5KG90aGVyKVxuICBlbmRcblxuICBgdmFyIGluc3BlY3Rfc3RhY2sgPSBbXWBcblxuICBkZWYgaW5zcGVjdFxuICAgIGl2cyA9ICcnXG4gICAgaWQgPSBfX2lkX19cbiAgICBpZiBgaW5zcGVjdF9zdGFja2AuaW5jbHVkZT8gaWRcbiAgICAgIGl2cyA9ICcgLi4uJ1xuICAgIGVsc2VcbiAgICAgIGBpbnNwZWN0X3N0YWNrYCA8PCBpZFxuICAgICAgcHVzaGVkID0gdHJ1ZVxuICAgICAgaW5zdGFuY2VfdmFyaWFibGVzLmVhY2ggZG8gfGl8XG4gICAgICAgIGl2YXIgPSBpbnN0YW5jZV92YXJpYWJsZV9nZXQoaSlcbiAgICAgICAgaW5zcGVjdCA9IE9wYWwuaW5zcGVjdChpdmFyKVxuICAgICAgICBpdnMgKz0gXCIgI3tpfT0je2luc3BlY3R9XCJcbiAgICAgIGVuZFxuICAgIGVuZFxuICAgIFwiIzwje3NlbGYuY2xhc3N9OjB4I3tpZC50b19zKDE2KX0je2l2c30+XCJcbiAgcmVzY3VlID0+IGVcbiAgICBcIiM8I3tzZWxmLmNsYXNzfToweCN7aWQudG9fcygxNil9PlwiXG4gIGVuc3VyZVxuICAgIGBpbnNwZWN0X3N0YWNrYC5wb3AgaWYgcHVzaGVkXG4gIGVuZFxuXG4gIGRlZiBpbnN0YW5jZV9vZj8oa2xhc3MpXG4gICAgJXh7XG4gICAgICBpZiAoIWtsYXNzLiQkaXNfY2xhc3MgJiYgIWtsYXNzLiQkaXNfbW9kdWxlKSB7XG4gICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpUeXBlRXJyb3IsICdjbGFzcyBvciBtb2R1bGUgcmVxdWlyZWQnfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGYuJCRjbGFzcyA9PT0ga2xhc3M7XG4gICAgfVxuICBlbmRcblxuICBkZWYgaW5zdGFuY2VfdmFyaWFibGVfZGVmaW5lZD8obmFtZSlcbiAgICBuYW1lID0gOjpPcGFsLmluc3RhbmNlX3ZhcmlhYmxlX25hbWUhKG5hbWUpXG5cbiAgICBgT3BhbC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNlbGYsIG5hbWUuc3Vic3RyKDEpKWBcbiAgZW5kXG5cbiAgZGVmIGluc3RhbmNlX3ZhcmlhYmxlX2dldChuYW1lKVxuICAgIG5hbWUgPSA6Ok9wYWwuaW5zdGFuY2VfdmFyaWFibGVfbmFtZSEobmFtZSlcblxuICAgICV4e1xuICAgICAgdmFyIGl2YXIgPSBzZWxmW09wYWwuaXZhcihuYW1lLnN1YnN0cigxKSldO1xuXG4gICAgICByZXR1cm4gaXZhciA9PSBudWxsID8gbmlsIDogaXZhcjtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBpbnN0YW5jZV92YXJpYWJsZV9zZXQobmFtZSwgdmFsdWUpXG4gICAgYCRkZW55X2Zyb3plbl9hY2Nlc3Moc2VsZilgXG5cbiAgICBuYW1lID0gOjpPcGFsLmluc3RhbmNlX3ZhcmlhYmxlX25hbWUhKG5hbWUpXG5cbiAgICBgc2VsZltPcGFsLml2YXIobmFtZS5zdWJzdHIoMSkpXSA9IHZhbHVlYFxuICBlbmRcblxuICBkZWYgcmVtb3ZlX2luc3RhbmNlX3ZhcmlhYmxlKG5hbWUpXG4gICAgbmFtZSA9IDo6T3BhbC5pbnN0YW5jZV92YXJpYWJsZV9uYW1lIShuYW1lKVxuXG4gICAgJXh7XG4gICAgICB2YXIga2V5ID0gT3BhbC5pdmFyKG5hbWUuc3Vic3RyKDEpKSxcbiAgICAgICAgICB2YWw7XG4gICAgICBpZiAoc2VsZi5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIHZhbCA9IHNlbGZba2V5XTtcbiAgICAgICAgZGVsZXRlIHNlbGZba2V5XTtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICA6Oktlcm5lbC5yYWlzZSA6Ok5hbWVFcnJvciwgXCJpbnN0YW5jZSB2YXJpYWJsZSAje25hbWV9IG5vdCBkZWZpbmVkXCJcbiAgZW5kXG5cbiAgZGVmIGluc3RhbmNlX3ZhcmlhYmxlc1xuICAgICV4e1xuICAgICAgdmFyIHJlc3VsdCA9IFtdLCBpdmFyO1xuXG4gICAgICBmb3IgKHZhciBuYW1lIGluIHNlbGYpIHtcbiAgICAgICAgaWYgKHNlbGYuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgbmFtZS5jaGFyQXQoMCkgIT09ICckJykge1xuICAgICAgICAgIGlmIChuYW1lLnN1YnN0cigtMSkgPT09ICckJykge1xuICAgICAgICAgICAgaXZhciA9IG5hbWUuc2xpY2UoMCwgbmFtZS5sZW5ndGggLSAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaXZhciA9IG5hbWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKCdAJyArIGl2YXIpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICBlbmRcblxuICBkZWYgSW50ZWdlcih2YWx1ZSwgYmFzZSA9IHVuZGVmaW5lZClcbiAgICAleHtcbiAgICAgIHZhciBpLCBzdHIsIGJhc2VfZGlnaXRzO1xuXG4gICAgICBpZiAoIXZhbHVlLiQkaXNfc3RyaW5nKSB7XG4gICAgICAgIGlmIChiYXNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgJ2Jhc2Ugc3BlY2lmaWVkIGZvciBub24gc3RyaW5nIHZhbHVlJ31cbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgPT09IG5pbCkge1xuICAgICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpUeXBlRXJyb3IsIFwiY2FuJ3QgY29udmVydCBuaWwgaW50byBJbnRlZ2VyXCJ9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlLiQkaXNfbnVtYmVyKSB7XG4gICAgICAgICAgaWYgKHZhbHVlID09PSBJbmZpbml0eSB8fCB2YWx1ZSA9PT0gLUluZmluaXR5IHx8IGlzTmFOKHZhbHVlKSkge1xuICAgICAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OkZsb2F0RG9tYWluRXJyb3IsIHZhbHVlfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCN7dmFsdWUucmVzcG9uZF90bz8oOnRvX2ludCl9KSB7XG4gICAgICAgICAgaSA9ICN7dmFsdWUudG9faW50fTtcbiAgICAgICAgICBpZiAoaSAhPT0gbmlsKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICN7OjpPcGFsLmNvZXJjZV90byEodmFsdWUsIDo6SW50ZWdlciwgOnRvX2kpfTtcbiAgICAgIH1cblxuICAgICAgaWYgKHZhbHVlID09PSBcIjBcIikge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cblxuICAgICAgaWYgKGJhc2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBiYXNlID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhc2UgPSAkY29lcmNlX3RvKGJhc2UsICN7OjpJbnRlZ2VyfSwgJ3RvX2ludCcpO1xuICAgICAgICBpZiAoYmFzZSA9PT0gMSB8fCBiYXNlIDwgMCB8fCBiYXNlID4gMzYpIHtcbiAgICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgXCJpbnZhbGlkIHJhZGl4ICN7YmFzZX1cIn1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzdHIgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICBzdHIgPSBzdHIucmVwbGFjZSgvKFxcZClfKD89XFxkKS9nLCAnJDEnKTtcblxuICAgICAgc3RyID0gc3RyLnJlcGxhY2UoL14oXFxzKlsrLV0/KSgwW2JvZHhdPykvLCBmdW5jdGlvbiAoXywgaGVhZCwgZmxhZykge1xuICAgICAgICBzd2l0Y2ggKGZsYWcpIHtcbiAgICAgICAgY2FzZSAnMGInOlxuICAgICAgICAgIGlmIChiYXNlID09PSAwIHx8IGJhc2UgPT09IDIpIHtcbiAgICAgICAgICAgIGJhc2UgPSAyO1xuICAgICAgICAgICAgcmV0dXJuIGhlYWQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIG5vLWJyZWFrXG4gICAgICAgIGNhc2UgJzAnOlxuICAgICAgICBjYXNlICcwbyc6XG4gICAgICAgICAgaWYgKGJhc2UgPT09IDAgfHwgYmFzZSA9PT0gOCkge1xuICAgICAgICAgICAgYmFzZSA9IDg7XG4gICAgICAgICAgICByZXR1cm4gaGVhZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gbm8tYnJlYWtcbiAgICAgICAgY2FzZSAnMGQnOlxuICAgICAgICAgIGlmIChiYXNlID09PSAwIHx8IGJhc2UgPT09IDEwKSB7XG4gICAgICAgICAgICBiYXNlID0gMTA7XG4gICAgICAgICAgICByZXR1cm4gaGVhZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gbm8tYnJlYWtcbiAgICAgICAgY2FzZSAnMHgnOlxuICAgICAgICAgIGlmIChiYXNlID09PSAwIHx8IGJhc2UgPT09IDE2KSB7XG4gICAgICAgICAgICBiYXNlID0gMTY7XG4gICAgICAgICAgICByZXR1cm4gaGVhZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gbm8tYnJlYWtcbiAgICAgICAgfVxuICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgXCJpbnZhbGlkIHZhbHVlIGZvciBJbnRlZ2VyKCk6IFxcXCIje3ZhbHVlfVxcXCJcIn1cbiAgICAgIH0pO1xuXG4gICAgICBiYXNlID0gKGJhc2UgPT09IDAgPyAxMCA6IGJhc2UpO1xuXG4gICAgICBiYXNlX2RpZ2l0cyA9ICcwLScgKyAoYmFzZSA8PSAxMCA/IGJhc2UgLSAxIDogJzlhLScgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKDk3ICsgKGJhc2UgLSAxMSkpKTtcblxuICAgICAgaWYgKCEobmV3IFJlZ0V4cCgnXlxcXFxzKlsrLV0/WycgKyBiYXNlX2RpZ2l0cyArICddK1xcXFxzKiQnKSkudGVzdChzdHIpKSB7XG4gICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCBcImludmFsaWQgdmFsdWUgZm9yIEludGVnZXIoKTogXFxcIiN7dmFsdWV9XFxcIlwifVxuICAgICAgfVxuXG4gICAgICBpID0gcGFyc2VJbnQoc3RyLCBiYXNlKTtcblxuICAgICAgaWYgKGlzTmFOKGkpKSB7XG4gICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCBcImludmFsaWQgdmFsdWUgZm9yIEludGVnZXIoKTogXFxcIiN7dmFsdWV9XFxcIlwifVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBGbG9hdCh2YWx1ZSlcbiAgICAleHtcbiAgICAgIHZhciBzdHI7XG5cbiAgICAgIGlmICh2YWx1ZSA9PT0gbmlsKSB7XG4gICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpUeXBlRXJyb3IsIFwiY2FuJ3QgY29udmVydCBuaWwgaW50byBGbG9hdFwifVxuICAgICAgfVxuXG4gICAgICBpZiAodmFsdWUuJCRpc19zdHJpbmcpIHtcbiAgICAgICAgc3RyID0gdmFsdWUudG9TdHJpbmcoKTtcblxuICAgICAgICBzdHIgPSBzdHIucmVwbGFjZSgvKFxcZClfKD89XFxkKS9nLCAnJDEnKTtcblxuICAgICAgICAvL1NwZWNpYWwgY2FzZSBmb3IgaGV4IHN0cmluZ3Mgb25seTpcbiAgICAgICAgaWYgKC9eXFxzKlstK10/MFt4WF1bMC05YS1mQS1GXStcXHMqJC8udGVzdChzdHIpKSB7XG4gICAgICAgICAgcmV0dXJuICN7OjpLZXJuZWwuSW50ZWdlcihgc3RyYCl9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCEvXlxccypbLStdP1swLTldKlxcLj9bMC05XSsoW2VFXVstK10/WzAtOV0rKT9cXHMqJC8udGVzdChzdHIpKSB7XG4gICAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsIFwiaW52YWxpZCB2YWx1ZSBmb3IgRmxvYXQoKTogXFxcIiN7dmFsdWV9XFxcIlwifVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoc3RyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICN7OjpPcGFsLmNvZXJjZV90byEodmFsdWUsIDo6RmxvYXQsIDp0b19mKX07XG4gICAgfVxuICBlbmRcblxuICBkZWYgSGFzaChhcmcpXG4gICAgcmV0dXJuIHt9IGlmIGFyZy5uaWw/IHx8IGFyZyA9PSBbXVxuICAgIHJldHVybiBhcmcgaWYgOjpIYXNoID09PSBhcmdcbiAgICA6Ok9wYWwuY29lcmNlX3RvIShhcmcsIDo6SGFzaCwgOnRvX2hhc2gpXG4gIGVuZFxuXG4gIGRlZiBpc19hPyhrbGFzcylcbiAgICAleHtcbiAgICAgIGlmICgha2xhc3MuJCRpc19jbGFzcyAmJiAha2xhc3MuJCRpc19tb2R1bGUpIHtcbiAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OlR5cGVFcnJvciwgJ2NsYXNzIG9yIG1vZHVsZSByZXF1aXJlZCd9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gT3BhbC5pc19hKHNlbGYsIGtsYXNzKTtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBpdHNlbGZcbiAgICBzZWxmXG4gIGVuZFxuXG4gIGRlZiBsYW1iZGEoJmJsb2NrKVxuICAgIGBPcGFsLmxhbWJkYShibG9jaylgXG4gIGVuZFxuXG4gIGRlZiBsb2FkKGZpbGUpXG4gICAgZmlsZSA9IDo6T3BhbC5jb2VyY2VfdG8hKGZpbGUsIDo6U3RyaW5nLCA6dG9fc3RyKVxuICAgIGBPcGFsLmxvYWQoI3tmaWxlfSlgXG4gIGVuZFxuXG4gIGRlZiBsb29wXG4gICAgcmV0dXJuIGVudW1fZm9yKDpsb29wKSB7IDo6RmxvYXQ6OklORklOSVRZIH0gdW5sZXNzIGJsb2NrX2dpdmVuP1xuXG4gICAgd2hpbGUgdHJ1ZVxuICAgICAgYmVnaW5cbiAgICAgICAgeWllbGRcbiAgICAgIHJlc2N1ZSA6OlN0b3BJdGVyYXRpb24gPT4gZVxuICAgICAgICByZXR1cm4gZS5yZXN1bHRcbiAgICAgIGVuZFxuICAgIGVuZFxuXG4gICAgc2VsZlxuICBlbmRcblxuICBkZWYgbmlsP1xuICAgIGZhbHNlXG4gIGVuZFxuXG4gIGRlZiBwcmludGYoKmFyZ3MpXG4gICAgaWYgYXJncy5hbnk/XG4gICAgICBwcmludCBmb3JtYXQoKmFyZ3MpXG4gICAgZW5kXG5cbiAgICBuaWxcbiAgZW5kXG5cbiAgZGVmIHByb2MoJmJsb2NrKVxuICAgIHVubGVzcyBibG9ja1xuICAgICAgOjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCAndHJpZWQgdG8gY3JlYXRlIFByb2Mgb2JqZWN0IHdpdGhvdXQgYSBibG9jaydcbiAgICBlbmRcblxuICAgIGBibG9jay4kJGlzX2xhbWJkYSA9IGZhbHNlYFxuICAgIGJsb2NrXG4gIGVuZFxuXG4gIGRlZiBwdXRzKCpzdHJzKVxuICAgICRzdGRvdXQucHV0cygqc3RycylcbiAgZW5kXG5cbiAgZGVmIHAoKmFyZ3MpXG4gICAgYXJncy5lYWNoIHsgfG9ianwgJHN0ZG91dC5wdXRzIG9iai5pbnNwZWN0IH1cblxuICAgIGFyZ3MubGVuZ3RoIDw9IDEgPyBhcmdzWzBdIDogYXJnc1xuICBlbmRcblxuICBkZWYgcHJpbnQoKnN0cnMpXG4gICAgJHN0ZG91dC5wcmludCgqc3RycylcbiAgZW5kXG5cbiAgZGVmIHJlYWRsaW5lKCphcmdzKVxuICAgICRzdGRpbi5yZWFkbGluZSgqYXJncylcbiAgZW5kXG5cbiAgZGVmIHdhcm4oKnN0cnMsIHVwbGV2ZWw6IG5pbClcbiAgICBpZiB1cGxldmVsXG4gICAgICB1cGxldmVsID0gOjpPcGFsLmNvZXJjZV90byEodXBsZXZlbCwgOjpJbnRlZ2VyLCA6dG9fc3RyKVxuICAgICAgOjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCBcIm5lZ2F0aXZlIGxldmVsICgje3VwbGV2ZWx9KVwiIGlmIHVwbGV2ZWwgPCAwXG4gICAgICBsb2NhdGlvbiA9IGNhbGxlcih1cGxldmVsICsgMSwgMSkuZmlyc3QmLnNwbGl0KCc6aW4gYCcpJi5maXJzdFxuICAgICAgbG9jYXRpb24gPSBcIiN7bG9jYXRpb259OiBcIiBpZiBsb2NhdGlvblxuICAgICAgc3RycyA9IHN0cnMubWFwIHsgfHN8IFwiI3tsb2NhdGlvbn13YXJuaW5nOiAje3N9XCIgfVxuICAgIGVuZFxuXG4gICAgJHN0ZGVyci5wdXRzKCpzdHJzKSB1bmxlc3MgJFZFUkJPU0UubmlsPyB8fCBzdHJzLmVtcHR5P1xuICBlbmRcblxuICBkZWYgcmFpc2UoZXhjZXB0aW9uID0gdW5kZWZpbmVkLCBzdHJpbmcgPSBuaWwsIGJhY2t0cmFjZSA9IG5pbClcbiAgICAleHtcbiAgICAgIGlmIChleGNlcHRpb24gPT0gbnVsbCAmJiAjeyQhfSAhPT0gbmlsKSB7XG4gICAgICAgIHRocm93ICN7JCF9O1xuICAgICAgfVxuICAgICAgaWYgKGV4Y2VwdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIGV4Y2VwdGlvbiA9ICN7OjpSdW50aW1lRXJyb3IubmV3ICcnfTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKCRyZXNwb25kX3RvKGV4Y2VwdGlvbiwgJyR0b19zdHInKSkge1xuICAgICAgICBleGNlcHRpb24gPSAjezo6UnVudGltZUVycm9yLm5ldyBleGNlcHRpb24udG9fc3RyfTtcbiAgICAgIH1cbiAgICAgIC8vIHVzaW5nIHJlc3BvbmRfdG8/IGFuZCBub3QgYW4gdW5kZWZpbmVkIGNoZWNrIHRvIGF2b2lkIG1ldGhvZF9taXNzaW5nIG1hdGNoaW5nIGFzIHRydWVcbiAgICAgIGVsc2UgaWYgKGV4Y2VwdGlvbi4kJGlzX2NsYXNzICYmICRyZXNwb25kX3RvKGV4Y2VwdGlvbiwgJyRleGNlcHRpb24nKSkge1xuICAgICAgICBleGNlcHRpb24gPSAje2V4Y2VwdGlvbi5leGNlcHRpb24gc3RyaW5nfTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGV4Y2VwdGlvbi4kJGlzX2V4Y2VwdGlvbikge1xuICAgICAgICAvLyBleGNlcHRpb24gaXMgZmluZVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGV4Y2VwdGlvbiA9ICN7OjpUeXBlRXJyb3IubmV3ICdleGNlcHRpb24gY2xhc3Mvb2JqZWN0IGV4cGVjdGVkJ307XG4gICAgICB9XG5cbiAgICAgIGlmIChiYWNrdHJhY2UgIT09IG5pbCkge1xuICAgICAgICBleGNlcHRpb24uJHNldF9iYWNrdHJhY2UoYmFja3RyYWNlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCN7JCF9ICE9PSBuaWwpIHtcbiAgICAgICAgT3BhbC5leGNlcHRpb25zLnB1c2goI3skIX0pO1xuICAgICAgfVxuXG4gICAgICAjeyQhfSA9IGV4Y2VwdGlvbjtcbiAgICAgICN7JEB9ID0gI3tgZXhjZXB0aW9uYC5iYWNrdHJhY2V9O1xuXG4gICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgfVxuICBlbmRcblxuICBkZWYgcmFuZChtYXggPSB1bmRlZmluZWQpXG4gICAgJXh7XG4gICAgICBpZiAobWF4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuICN7OjpSYW5kb206OkRFRkFVTFQucmFuZH07XG4gICAgICB9XG5cbiAgICAgIGlmIChtYXguJCRpc19udW1iZXIpIHtcbiAgICAgICAgaWYgKG1heCA8IDApIHtcbiAgICAgICAgICBtYXggPSBNYXRoLmFicyhtYXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1heCAlIDEgIT09IDApIHtcbiAgICAgICAgICBtYXggPSBtYXguJHRvX2koKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtYXggPT09IDApIHtcbiAgICAgICAgICBtYXggPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgOjpSYW5kb206OkRFRkFVTFQucmFuZChtYXgpXG4gIGVuZFxuXG4gIGRlZiByZXNwb25kX3RvPyhuYW1lLCBpbmNsdWRlX2FsbCA9IGZhbHNlKVxuICAgICV4e1xuICAgICAgdmFyIGJvZHkgPSBzZWxmWyckJyArIG5hbWVdO1xuXG4gICAgICBpZiAodHlwZW9mKGJvZHkpID09PSBcImZ1bmN0aW9uXCIgJiYgIWJvZHkuJCRzdHViKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2VsZlsnJHJlc3BvbmRfdG9fbWlzc2luZz8nXS4kJHByaXN0aW5lID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAje3Jlc3BvbmRfdG9fbWlzc2luZz8obmFtZSwgaW5jbHVkZV9hbGwpfTtcbiAgICAgIH1cbiAgICB9XG4gIGVuZFxuXG4gIGRlZiByZXNwb25kX3RvX21pc3Npbmc/KG1ldGhvZF9uYW1lLCBpbmNsdWRlX2FsbCA9IGZhbHNlKVxuICAgIGZhbHNlXG4gIGVuZFxuXG4gIDo6T3BhbC5wcmlzdGluZShzZWxmLCA6cmVzcG9uZF90bz8sIDpyZXNwb25kX3RvX21pc3Npbmc/KVxuXG4gIGRlZiByZXF1aXJlKGZpbGUpXG4gICAgJXh7XG4gICAgICAvLyBBcyBPYmplY3QucmVxdWlyZSByZWZlcnMgdG8gS2VybmVsLnJlcXVpcmUgb25jZSBLZXJuZWwgaGFzIGJlZW4gbG9hZGVkIHRoZSBTdHJpbmdcbiAgICAgIC8vIGNsYXNzIG1heSBub3QgYmUgYXZhaWxhYmxlIHlldCwgdGhlIGNvZXJjaW9uIHJlcXVpcmVzIGJvdGggIFN0cmluZyBhbmQgQXJyYXkgdG8gYmUgbG9hZGVkLlxuICAgICAgaWYgKHR5cGVvZiAje2ZpbGV9ICE9PSAnc3RyaW5nJyAmJiBPcGFsLlN0cmluZyAmJiBPcGFsLkFycmF5KSB7XG4gICAgICAgICN7ZmlsZSA9IDo6T3BhbC5jb2VyY2VfdG8hKGZpbGUsIDo6U3RyaW5nLCA6dG9fc3RyKSB9XG4gICAgICB9XG4gICAgICByZXR1cm4gT3BhbC5yZXF1aXJlKCN7ZmlsZX0pXG4gICAgfVxuICBlbmRcblxuICBkZWYgcmVxdWlyZV9yZWxhdGl2ZShmaWxlKVxuICAgIDo6T3BhbC50cnlfY29udmVydCEoZmlsZSwgOjpTdHJpbmcsIDp0b19zdHIpXG4gICAgZmlsZSA9IDo6RmlsZS5leHBhbmRfcGF0aCA6OkZpbGUuam9pbihgT3BhbC5jdXJyZW50X2ZpbGVgLCAnLi4nLCBmaWxlKVxuXG4gICAgYE9wYWwucmVxdWlyZSgje2ZpbGV9KWBcbiAgZW5kXG5cbiAgIyBgcGF0aGAgc2hvdWxkIGJlIHRoZSBmdWxsIHBhdGggdG8gYmUgZm91bmQgaW4gcmVnaXN0ZXJlZCBtb2R1bGVzIChgT3BhbC5tb2R1bGVzYClcbiAgZGVmIHJlcXVpcmVfdHJlZShwYXRoLCBhdXRvbG9hZDogZmFsc2UpXG4gICAgJXh7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG5cbiAgICAgIHBhdGggPSAjezo6RmlsZS5leHBhbmRfcGF0aChwYXRoKX1cbiAgICAgIHBhdGggPSBPcGFsLm5vcm1hbGl6ZShwYXRoKTtcbiAgICAgIGlmIChwYXRoID09PSAnLicpIHBhdGggPSAnJztcbiAgICAgIGZvciAodmFyIG5hbWUgaW4gT3BhbC5tb2R1bGVzKSB7XG4gICAgICAgIGlmICgje2BuYW1lYC5zdGFydF93aXRoPyhwYXRoKX0pIHtcbiAgICAgICAgICBpZighI3thdXRvbG9hZH0pIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKFtuYW1lLCBPcGFsLnJlcXVpcmUobmFtZSldKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goW25hbWUsIHRydWVdKTsgLy8gZG8gbm90aGluZywgZGVsZWdhdGVkIHRvIGEgYXV0b2xvYWRpbmdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBzaW5nbGV0b25fY2xhc3NcbiAgICBgT3BhbC5nZXRfc2luZ2xldG9uX2NsYXNzKHNlbGYpYFxuICBlbmRcblxuICBkZWYgc2xlZXAoc2Vjb25kcyA9IG5pbClcbiAgICAleHtcbiAgICAgIGlmIChzZWNvbmRzID09PSBuaWwpIHtcbiAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OlR5cGVFcnJvciwgXCJjYW4ndCBjb252ZXJ0IE5pbENsYXNzIGludG8gdGltZSBpbnRlcnZhbFwifVxuICAgICAgfVxuICAgICAgaWYgKCFzZWNvbmRzLiQkaXNfbnVtYmVyKSB7XG4gICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpUeXBlRXJyb3IsIFwiY2FuJ3QgY29udmVydCAje3NlY29uZHMuY2xhc3N9IGludG8gdGltZSBpbnRlcnZhbFwifVxuICAgICAgfVxuICAgICAgaWYgKHNlY29uZHMgPCAwKSB7XG4gICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCAndGltZSBpbnRlcnZhbCBtdXN0IGJlIHBvc2l0aXZlJ31cbiAgICAgIH1cbiAgICAgIHZhciBnZXRfdGltZSA9IE9wYWwuZ2xvYmFsLnBlcmZvcm1hbmNlID9cbiAgICAgICAgZnVuY3Rpb24oKSB7cmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpfSA6XG4gICAgICAgIGZ1bmN0aW9uKCkge3JldHVybiBuZXcgRGF0ZSgpfVxuXG4gICAgICB2YXIgdCA9IGdldF90aW1lKCk7XG4gICAgICB3aGlsZSAoZ2V0X3RpbWUoKSAtIHQgPD0gc2Vjb25kcyAqIDEwMDApO1xuICAgICAgcmV0dXJuIE1hdGgucm91bmQoc2Vjb25kcyk7XG4gICAgfVxuICBlbmRcblxuICBkZWYgc3JhbmQoc2VlZCA9IFJhbmRvbS5uZXdfc2VlZClcbiAgICA6OlJhbmRvbS5zcmFuZChzZWVkKVxuICBlbmRcblxuICBkZWYgU3RyaW5nKHN0cilcbiAgICA6Ok9wYWwuY29lcmNlX3RvPyhzdHIsIDo6U3RyaW5nLCA6dG9fc3RyKSB8fFxuICAgICAgOjpPcGFsLmNvZXJjZV90byEoc3RyLCA6OlN0cmluZywgOnRvX3MpXG4gIGVuZFxuXG4gIGRlZiB0YXAoJmJsb2NrKVxuICAgIHlpZWxkIHNlbGZcbiAgICBzZWxmXG4gIGVuZFxuXG4gIGRlZiB0b19wcm9jXG4gICAgc2VsZlxuICBlbmRcblxuICBkZWYgdG9fc1xuICAgIFwiIzwje3NlbGYuY2xhc3N9OjB4I3tfX2lkX18udG9fcygxNil9PlwiXG4gIGVuZFxuXG4gIGRlZiBjYXRjaCh0YWcgPSBuaWwpXG4gICAgdGFnIHx8PSA6Ok9iamVjdC5uZXdcbiAgICB5aWVsZCh0YWcpXG4gIHJlc2N1ZSA6OlVuY2F1Z2h0VGhyb3dFcnJvciA9PiBlXG4gICAgcmV0dXJuIGUudmFsdWUgaWYgZS50YWcgPT0gdGFnXG4gICAgOjpLZXJuZWwucmFpc2VcbiAgZW5kXG5cbiAgZGVmIHRocm93KHRhZywgb2JqID0gbmlsKVxuICAgIDo6S2VybmVsLnJhaXNlIDo6VW5jYXVnaHRUaHJvd0Vycm9yLm5ldyh0YWcsIG9iailcbiAgZW5kXG5cbiAgIyBiYXNpYyBpbXBsZW1lbnRhdGlvbiBvZiBvcGVuLCBkZWxlZ2F0ZSB0byBGaWxlLm9wZW5cbiAgZGVmIG9wZW4oKmFyZ3MsICZibG9jaylcbiAgICA6OkZpbGUub3BlbigqYXJncywgJmJsb2NrKVxuICBlbmRcblxuICBkZWYgeWllbGRfc2VsZlxuICAgIHJldHVybiBlbnVtX2Zvcig6eWllbGRfc2VsZikgeyAxIH0gdW5sZXNzIGJsb2NrX2dpdmVuP1xuICAgIHlpZWxkIHNlbGZcbiAgZW5kXG5cbiAgYWxpYXMgZmFpbCByYWlzZVxuICBhbGlhcyBraW5kX29mPyBpc19hP1xuICBhbGlhcyBvYmplY3RfaWQgX19pZF9fXG4gIGFsaWFzIHB1YmxpY19zZW5kIF9fc2VuZF9fXG4gIGFsaWFzIHNlbmQgX19zZW5kX19cbiAgYWxpYXMgdGhlbiB5aWVsZF9zZWxmXG4gIGFsaWFzIHRvX2VudW0gZW51bV9mb3JcbmVuZFxuXG5jbGFzcyA6Ok9iamVjdFxuICAjIE9iamVjdC5yZXF1aXJlIGhhcyBiZWVuIHNldCB0byBydW50aW1lLmpzIE9wYWwucmVxdWlyZVxuICAjIE5vdyB3ZSBoYXZlIEtlcm5lbCBsb2FkZWQsIG1ha2Ugc3VyZSBPYmplY3QucmVxdWlyZSByZWZlcnMgdG8gS2VybmVsLnJlcXVpcmVcbiAgIyB3aGljaCBpcyB3aGF0IHJ1YnkgZG9lcyBhbmQgYWxsb3dzIGZvciBvdmVyd3JpdGluZyBieSBhdXRvbG9hZGVyc1xuICBgZGVsZXRlICRPYmplY3QuJCRwcm90b3R5cGUuJHJlcXVpcmVgXG4gIGluY2x1ZGUgOjpLZXJuZWxcbmVuZFxuIl0sIm5hbWVzIjpbIjx0b3AgKHJlcXVpcmVkKT4iLCI8bW9kdWxlOktlcm5lbD4iLCI9fiIsIiF+Iiwib2JqIiwic2VsZiIsIiEiLCI9PT0iLCJvdGhlciIsIiRyZXRfb3JfMSIsIm9iamVjdF9pZCIsIj09IiwiPD0+IiwibWV0aG9kIiwibmFtZSIsIktlcm5lbCIsInJhaXNlIiwiTmFtZUVycm9yIiwibmV3IiwiY2xhc3MiLCJNZXRob2QiLCJtZXRob2RzIiwiYWxsIiwicHVibGljX21ldGhvZHMiLCJBcnJheSIsIm9iamVjdCIsIk9wYWwiLCJjb2VyY2VfdG8/IiwiYXRfZXhpdCIsIiRfX2F0X2V4aXRfXyIsIjw8IiwiYmxvY2siLCJjYWxsZXIiLCJzdGFydCIsImxlbmd0aCIsIjEiLCJjYWxsZXJfbG9jYXRpb25zIiwibWFwIiwiYXJncyIsImJsb2NrIGluIGNhbGxlcl9sb2NhdGlvbnMiLCJsb2MiLCJibG9jayAoMiBsZXZlbHMpIGluIGNhbGxlcl9sb2NhdGlvbnMiLCJUaHJlYWQ6OkJhY2t0cmFjZTo6TG9jYXRpb24iLCJUaHJlYWQ6OkJhY2t0cmFjZSIsIlRocmVhZCIsImNvcHlfaW5zdGFuY2VfdmFyaWFibGVzIiwiY29weV9zaW5nbGV0b25fbWV0aG9kcyIsImNsb25lIiwiJGt3YXJncyIsImZyZWV6ZSIsIm5pbD8iLCJBcmd1bWVudEVycm9yIiwiY29weSIsImFsbG9jYXRlIiwiaW5pdGlhbGl6ZV9jbG9uZSIsImZyb3plbj8iLCJpbml0aWFsaXplX2NvcHkiLCJkZWZpbmVfc2luZ2xldG9uX21ldGhvZCIsImRlZmluZV9tZXRob2QiLCJzaW5nbGV0b25fY2xhc3MiLCJ0b19wcm9jIiwiZHVwIiwiaW5pdGlhbGl6ZV9kdXAiLCJlbnVtX2ZvciIsImZvciIsIkVudW1lcmF0b3IiLCJlcXVhbD8iLCJleGl0Iiwic3RhdHVzIiwiZW1wdHk/IiwicG9wIiwiY2FsbCIsIkludGVnZXIiLCJleHRlbmQiLCJUeXBlRXJyb3IiLCJhcHBlbmRfZmVhdHVyZXMiLCJleHRlbmRfb2JqZWN0IiwiZXh0ZW5kZWQiLCJnZXRzIiwiJHN0ZGluIiwiaGFzaCIsIl9faWRfXyIsImluc3BlY3QiLCJpdnMiLCJpZCIsImluY2x1ZGU/IiwicHVzaGVkIiwiZWFjaCIsImluc3RhbmNlX3ZhcmlhYmxlcyIsImJsb2NrIGluIGluc3BlY3QiLCJpIiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiBpbnNwZWN0IiwiaXZhciIsImluc3RhbmNlX3ZhcmlhYmxlX2dldCIsIisiLCJ0b19zIiwiMTYiLCJTdGFuZGFyZEVycm9yIiwiZSIsImluc3RhbmNlX29mPyIsImtsYXNzIiwiaW5zdGFuY2VfdmFyaWFibGVfZGVmaW5lZD8iLCJpbnN0YW5jZV92YXJpYWJsZV9uYW1lISIsImluc3RhbmNlX3ZhcmlhYmxlX3NldCIsInZhbHVlIiwicmVtb3ZlX2luc3RhbmNlX3ZhcmlhYmxlIiwiYmFzZSIsIkZsb2F0RG9tYWluRXJyb3IiLCJyZXNwb25kX3RvPyIsInRvX2ludCIsImNvZXJjZV90byEiLCJGbG9hdCIsIkhhc2giLCJhcmciLCJpc19hPyIsIml0c2VsZiIsImxhbWJkYSIsImxvYWQiLCJmaWxlIiwiU3RyaW5nIiwibG9vcCIsImJsb2NrX2dpdmVuPyIsImJsb2NrIGluIGxvb3AiLCJibG9jayAoMiBsZXZlbHMpIGluIGxvb3AiLCJGbG9hdDo6SU5GSU5JVFkiLCJTdG9wSXRlcmF0aW9uIiwicmVzdWx0IiwicHJpbnRmIiwiYW55PyIsInByaW50IiwiZm9ybWF0IiwicHJvYyIsInB1dHMiLCIkc3Rkb3V0Iiwic3RycyIsInAiLCJibG9jayBpbiBwIiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiBwIiwiPD0iLCJbXSIsIjAiLCJyZWFkbGluZSIsIndhcm4iLCJ1cGxldmVsIiwiPCIsImxvY2F0aW9uIiwiZmlyc3QiLCJibG9jayBpbiB3YXJuIiwicyIsImJsb2NrICgyIGxldmVscykgaW4gd2FybiIsIiRWRVJCT1NFIiwiJHN0ZGVyciIsImV4Y2VwdGlvbiIsInN0cmluZyIsImJhY2t0cmFjZSIsIiQhIiwiUnVudGltZUVycm9yIiwidG9fc3RyIiwiJEAiLCJyYW5kIiwibWF4IiwiUmFuZG9tOjpERUZBVUxUIiwiUmFuZG9tIiwiaW5jbHVkZV9hbGwiLCJyZXNwb25kX3RvX21pc3Npbmc/IiwibWV0aG9kX25hbWUiLCJwcmlzdGluZSIsInJlcXVpcmUiLCJyZXF1aXJlX3JlbGF0aXZlIiwidHJ5X2NvbnZlcnQhIiwiRmlsZSIsImV4cGFuZF9wYXRoIiwiam9pbiIsInJlcXVpcmVfdHJlZSIsInBhdGgiLCJzdGFydF93aXRoPyIsImF1dG9sb2FkIiwic2xlZXAiLCJzZWNvbmRzIiwic3JhbmQiLCJzZWVkIiwibmV3X3NlZWQiLCJzdHIiLCJ0YXAiLCJjYXRjaCIsInRhZyIsIk9iamVjdCIsIlVuY2F1Z2h0VGhyb3dFcnJvciIsInRocm93Iiwib3BlbiIsInlpZWxkX3NlbGYiLCJibG9jayBpbiB5aWVsZF9zZWxmIiwiPGNsYXNzOk9iamVjdD4iLCJpbmNsdWRlIl0sIm1hcHBpbmdzIjoiQUFBQUEsaUNBQUFBLGdCQUFBQTtFQUFBQTtFQUFBQTs7RUFBQUE7O0VBR0FDO0VBQUFBOztJQUFBQTs7OztBQUNFQyxJQUFBQSxrQkFBQUEsWUFDRSxLQURGQSxDQUFBQSxHQUFBQTs7QUFJQUMsSUFBQUEsa0JBQUFBLCtCQUFPQyxHQUFQRDtBQUFBQSxNQUFBQTs7TUFDRUEsT0FBRUUsSUFBS0gsT0FBQUEsQ0FBR0UsR0FBSEYsQ0FBUEksTUFBQUEsQ0FBQUE7SUFERkgsQ0FBQUEsR0FBQUE7O0FBSUFJLElBQUFBLG1CQUFBQSw2QkFBUUMsS0FBUkQ7QUFBQUEsTUFBQUE7O01BQ0UsSUFBQSxRQUFBRSxDQUFBQSxZQUFBSixJQUFBSyxXQUFBQSxDQUFBQSxDQUFVQyxPQUFBQSxDQUFHSCxLQUFLRSxXQUFBQSxDQUFBQSxDQUFSQyxDQUFWRixDQUFBLENBQUE7UUFBQUYsT0FBQTtNQUFBO1FBQWdDQSxPQUFBRixJQUFLTSxPQUFBQSxDQUFHSCxLQUFIRztNQUFyQztJQURGSixDQUFBQSxHQUFBQTs7QUFJQUssSUFBQUEsbUJBQUFBLDZCQUFRSixLQUFSSTtBQUFBQSxNQUFBQTs7O0FBRUZBO0FBQ0FBOztBQUVBQSxjQUFnQlAsSUFBS00sT0FBQUEsQ0FBR0gsS0FBSEcsQ0FBU0M7O0FBRTlCQTtBQUNBQTtBQUNBQTs7QUFFQUE7QUFDQUE7SUFaRUEsQ0FBQUEsR0FBQUE7O0FBZUFDLElBQUFBLHNCQUFBQSxrQkFBV0MsSUFBWEQ7QUFBQUEsTU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FBTzFELE1BQUExRCxJQUFBMEQsWUFBQUEsRUFBQUEsQ0FBUyxZQUFUQSxDQUFBQSxFQUFBZ0ksWUFBd0I1SixDQUF4QjRKLENBQUFBLEdBQUFoSTtNQUFQO01BQ0EsT0FBQSxvQkFBTTFELElBQU4sQ0FBQTtJQUZGeUwsQ0FBQUEsR0FBQUE7SUFLQSxhQUFNLE1BQU4sRUFBVyxPQUFYO0lBQ0EsYUFBTSxVQUFOLEVBQWUsT0FBZjtJQUNBLGFBQU0sV0FBTixFQUFnQixRQUFoQjtJQUNBLGFBQU0sYUFBTixFQUFrQixVQUFsQjtJQUNBLGFBQU0sTUFBTixFQUFXLFVBQVg7SUFDQSxhQUFNLE1BQU4sRUFBVyxZQUFYO0lBQ0E3TCxPQUFBLGFBQU0sU0FBTixFQUFjLFVBQWQ7RUE1eEJGQSxHQUFPLElBQVBBO0VBK3hCQUQsT0FBQWdNO0VBQUFBOzs7O0lBSUdBO0lBQ0RBLE9BQUEzTCxJQUFBNEwsU0FBQUEsQ0FBUWxMLE9BQVJrTDtFQUxGRCxHQUFNLElBQU5BLEVBQUFBLElBQUFBO0FBbHlCQWhNOyJ9fSx7Im9mZnNldCI6eyJsaW5lIjo4NzI4LCJjb2x1bW4iOjB9LCJtYXAiOnsidmVyc2lvbiI6Mywic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29yZWxpYi9zdHJ1Y3QucmIiXSwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSAnY29yZWxpYi9lbnVtZXJhYmxlJ1xuXG5jbGFzcyA6OlN0cnVjdFxuICBpbmNsdWRlIDo6RW51bWVyYWJsZVxuXG4gIGRlZiBzZWxmLm5ldyhjb25zdF9uYW1lLCAqYXJncywga2V5d29yZF9pbml0OiBmYWxzZSwgJmJsb2NrKVxuICAgIGlmIGNvbnN0X25hbWVcbiAgICAgIGlmIGNvbnN0X25hbWUuY2xhc3MgPT0gOjpTdHJpbmcgJiYgY29uc3RfbmFtZVswXS51cGNhc2UgIT0gY29uc3RfbmFtZVswXVxuICAgICAgICAjIEZhc3QgdHJhY2sgc28gdGhhdCB3ZSBza2lwIG5lZWRsZXNzbHkgZ29pbmcgdGhydSBleGNlcHRpb25zXG4gICAgICAgICMgaW4gbW9zdCBjYXNlcy5cbiAgICAgICAgYXJncy51bnNoaWZ0KGNvbnN0X25hbWUpXG4gICAgICAgIGNvbnN0X25hbWUgPSBuaWxcbiAgICAgIGVsc2VcbiAgICAgICAgYmVnaW5cbiAgICAgICAgICBjb25zdF9uYW1lID0gOjpPcGFsLmNvbnN0X25hbWUhKGNvbnN0X25hbWUpXG4gICAgICAgIHJlc2N1ZSA6OlR5cGVFcnJvciwgOjpOYW1lRXJyb3JcbiAgICAgICAgICBhcmdzLnVuc2hpZnQoY29uc3RfbmFtZSlcbiAgICAgICAgICBjb25zdF9uYW1lID0gbmlsXG4gICAgICAgIGVuZFxuICAgICAgZW5kXG4gICAgZW5kXG5cbiAgICBhcmdzLm1hcCBkbyB8YXJnfFxuICAgICAgOjpPcGFsLmNvZXJjZV90byEoYXJnLCA6OlN0cmluZywgOnRvX3N0cilcbiAgICBlbmRcblxuICAgIGtsYXNzID0gOjpDbGFzcy5uZXcoc2VsZikgZG9cbiAgICAgIGFyZ3MuZWFjaCB7IHxhcmd8IGRlZmluZV9zdHJ1Y3RfYXR0cmlidXRlKGFyZykgfVxuXG4gICAgICBjbGFzcyA8PCBzZWxmXG4gICAgICAgIGRlZiBuZXcoKmFyZ3MpXG4gICAgICAgICAgaW5zdGFuY2UgPSBhbGxvY2F0ZVxuICAgICAgICAgIGAje2luc3RhbmNlfS4kJGRhdGEgPSB7fWBcbiAgICAgICAgICBpbnN0YW5jZS5pbml0aWFsaXplKCphcmdzKVxuICAgICAgICAgIGluc3RhbmNlXG4gICAgICAgIGVuZFxuXG4gICAgICAgIGFsaWFzX21ldGhvZCA6W10sIDpuZXdcbiAgICAgIGVuZFxuICAgIGVuZFxuXG4gICAga2xhc3MubW9kdWxlX2V2YWwoJmJsb2NrKSBpZiBibG9ja1xuICAgIGBrbGFzcy4kJGtleXdvcmRfaW5pdCA9IGtleXdvcmRfaW5pdGBcblxuICAgIGlmIGNvbnN0X25hbWVcbiAgICAgIDo6U3RydWN0LmNvbnN0X3NldChjb25zdF9uYW1lLCBrbGFzcylcbiAgICBlbmRcblxuICAgIGtsYXNzXG4gIGVuZFxuXG4gIGRlZiBzZWxmLmRlZmluZV9zdHJ1Y3RfYXR0cmlidXRlKG5hbWUpXG4gICAgaWYgc2VsZiA9PSA6OlN0cnVjdFxuICAgICAgOjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCAneW91IGNhbm5vdCBkZWZpbmUgYXR0cmlidXRlcyB0byB0aGUgU3RydWN0IGNsYXNzJ1xuICAgIGVuZFxuXG4gICAgbWVtYmVycyA8PCBuYW1lXG5cbiAgICBkZWZpbmVfbWV0aG9kIG5hbWUgZG9cbiAgICAgIGBzZWxmLiQkZGF0YVtuYW1lXWBcbiAgICBlbmRcblxuICAgIGRlZmluZV9tZXRob2QgXCIje25hbWV9PVwiIGRvIHx2YWx1ZXxcbiAgICAgIGBzZWxmLiQkZGF0YVtuYW1lXSA9IHZhbHVlYFxuICAgIGVuZFxuICBlbmRcblxuICBkZWYgc2VsZi5tZW1iZXJzXG4gICAgaWYgc2VsZiA9PSA6OlN0cnVjdFxuICAgICAgOjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCAndGhlIFN0cnVjdCBjbGFzcyBoYXMgbm8gbWVtYmVycydcbiAgICBlbmRcblxuICAgIEBtZW1iZXJzIHx8PSBbXVxuICBlbmRcblxuICBkZWYgc2VsZi5pbmhlcml0ZWQoa2xhc3MpXG4gICAgbWVtYmVycyA9IEBtZW1iZXJzXG5cbiAgICBrbGFzcy5pbnN0YW5jZV9ldmFsIGRvXG4gICAgICBAbWVtYmVycyA9IG1lbWJlcnNcbiAgICBlbmRcbiAgZW5kXG5cbiAgZGVmIGluaXRpYWxpemUoKmFyZ3MpXG4gICAgaWYgYCN7c2VsZi5jbGFzc30uJCRrZXl3b3JkX2luaXRgXG4gICAgICBrd2FyZ3MgPSBhcmdzLmxhc3QgfHwge31cblxuICAgICAgaWYgYXJncy5sZW5ndGggPiAxIHx8IGAoYXJncy5sZW5ndGggPT09IDEgJiYgIWt3YXJncy4kJGlzX2hhc2gpYFxuICAgICAgICA6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsIFwid3JvbmcgbnVtYmVyIG9mIGFyZ3VtZW50cyAoZ2l2ZW4gI3thcmdzLmxlbmd0aH0sIGV4cGVjdGVkIDApXCJcbiAgICAgIGVuZFxuXG4gICAgICBleHRyYSA9IGt3YXJncy5rZXlzIC0gc2VsZi5jbGFzcy5tZW1iZXJzXG4gICAgICBpZiBleHRyYS5hbnk/XG4gICAgICAgIDo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgXCJ1bmtub3duIGtleXdvcmRzOiAje2V4dHJhLmpvaW4oJywgJyl9XCJcbiAgICAgIGVuZFxuXG4gICAgICBzZWxmLmNsYXNzLm1lbWJlcnMuZWFjaCBkbyB8bmFtZXxcbiAgICAgICAgc2VsZltuYW1lXSA9IGt3YXJnc1tuYW1lXVxuICAgICAgZW5kXG4gICAgZWxzZVxuICAgICAgaWYgYXJncy5sZW5ndGggPiBzZWxmLmNsYXNzLm1lbWJlcnMubGVuZ3RoXG4gICAgICAgIDo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgJ3N0cnVjdCBzaXplIGRpZmZlcnMnXG4gICAgICBlbmRcblxuICAgICAgc2VsZi5jbGFzcy5tZW1iZXJzLmVhY2hfd2l0aF9pbmRleCBkbyB8bmFtZSwgaW5kZXh8XG4gICAgICAgIHNlbGZbbmFtZV0gPSBhcmdzW2luZGV4XVxuICAgICAgZW5kXG4gICAgZW5kXG4gIGVuZFxuXG4gIGRlZiBpbml0aWFsaXplX2NvcHkoZnJvbSlcbiAgICAleHtcbiAgICAgIHNlbGYuJCRkYXRhID0ge31cbiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZnJvbS4kJGRhdGEpLCBpLCBtYXgsIG5hbWU7XG4gICAgICBmb3IgKGkgPSAwLCBtYXggPSBrZXlzLmxlbmd0aDsgaSA8IG1heDsgaSsrKSB7XG4gICAgICAgIG5hbWUgPSBrZXlzW2ldO1xuICAgICAgICBzZWxmLiQkZGF0YVtuYW1lXSA9IGZyb20uJCRkYXRhW25hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgZW5kXG5cbiAgZGVmIHNlbGYua2V5d29yZF9pbml0P1xuICAgIGBzZWxmLiQka2V5d29yZF9pbml0YFxuICBlbmRcblxuICBkZWYgbWVtYmVyc1xuICAgIHNlbGYuY2xhc3MubWVtYmVyc1xuICBlbmRcblxuICBkZWYgaGFzaFxuICAgIEhhc2gubmV3KGBzZWxmLiQkZGF0YWApLmhhc2hcbiAgZW5kXG5cbiAgZGVmIFtdKG5hbWUpXG4gICAgaWYgOjpJbnRlZ2VyID09PSBuYW1lXG4gICAgICA6Oktlcm5lbC5yYWlzZSA6OkluZGV4RXJyb3IsIFwib2Zmc2V0ICN7bmFtZX0gdG9vIHNtYWxsIGZvciBzdHJ1Y3Qoc2l6ZToje3NlbGYuY2xhc3MubWVtYmVycy5zaXplfSlcIiBpZiBuYW1lIDwgLXNlbGYuY2xhc3MubWVtYmVycy5zaXplXG4gICAgICA6Oktlcm5lbC5yYWlzZSA6OkluZGV4RXJyb3IsIFwib2Zmc2V0ICN7bmFtZX0gdG9vIGxhcmdlIGZvciBzdHJ1Y3Qoc2l6ZToje3NlbGYuY2xhc3MubWVtYmVycy5zaXplfSlcIiBpZiBuYW1lID49IHNlbGYuY2xhc3MubWVtYmVycy5zaXplXG5cbiAgICAgIG5hbWUgPSBzZWxmLmNsYXNzLm1lbWJlcnNbbmFtZV1cbiAgICBlbHNpZiA6OlN0cmluZyA9PT0gbmFtZVxuICAgICAgJXh7XG4gICAgICAgIGlmKCFzZWxmLiQkZGF0YS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpOYW1lRXJyb3IubmV3KFwibm8gbWVtYmVyICcje25hbWV9JyBpbiBzdHJ1Y3RcIiwgbmFtZSl9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBlbHNlXG4gICAgICA6Oktlcm5lbC5yYWlzZSA6OlR5cGVFcnJvciwgXCJubyBpbXBsaWNpdCBjb252ZXJzaW9uIG9mICN7bmFtZS5jbGFzc30gaW50byBJbnRlZ2VyXCJcbiAgICBlbmRcblxuICAgIG5hbWUgPSA6Ok9wYWwuY29lcmNlX3RvIShuYW1lLCA6OlN0cmluZywgOnRvX3N0cilcbiAgICBgc2VsZi4kJGRhdGFbbmFtZV1gXG4gIGVuZFxuXG4gIGRlZiBbXT0obmFtZSwgdmFsdWUpXG4gICAgaWYgOjpJbnRlZ2VyID09PSBuYW1lXG4gICAgICA6Oktlcm5lbC5yYWlzZSA6OkluZGV4RXJyb3IsIFwib2Zmc2V0ICN7bmFtZX0gdG9vIHNtYWxsIGZvciBzdHJ1Y3Qoc2l6ZToje3NlbGYuY2xhc3MubWVtYmVycy5zaXplfSlcIiBpZiBuYW1lIDwgLXNlbGYuY2xhc3MubWVtYmVycy5zaXplXG4gICAgICA6Oktlcm5lbC5yYWlzZSA6OkluZGV4RXJyb3IsIFwib2Zmc2V0ICN7bmFtZX0gdG9vIGxhcmdlIGZvciBzdHJ1Y3Qoc2l6ZToje3NlbGYuY2xhc3MubWVtYmVycy5zaXplfSlcIiBpZiBuYW1lID49IHNlbGYuY2xhc3MubWVtYmVycy5zaXplXG5cbiAgICAgIG5hbWUgPSBzZWxmLmNsYXNzLm1lbWJlcnNbbmFtZV1cbiAgICBlbHNpZiA6OlN0cmluZyA9PT0gbmFtZVxuICAgICAgOjpLZXJuZWwucmFpc2UgOjpOYW1lRXJyb3IubmV3KFwibm8gbWVtYmVyICcje25hbWV9JyBpbiBzdHJ1Y3RcIiwgbmFtZSkgdW5sZXNzIHNlbGYuY2xhc3MubWVtYmVycy5pbmNsdWRlPyhuYW1lLnRvX3N5bSlcbiAgICBlbHNlXG4gICAgICA6Oktlcm5lbC5yYWlzZSA6OlR5cGVFcnJvciwgXCJubyBpbXBsaWNpdCBjb252ZXJzaW9uIG9mICN7bmFtZS5jbGFzc30gaW50byBJbnRlZ2VyXCJcbiAgICBlbmRcblxuICAgIG5hbWUgPSA6Ok9wYWwuY29lcmNlX3RvIShuYW1lLCA6OlN0cmluZywgOnRvX3N0cilcbiAgICBgc2VsZi4kJGRhdGFbbmFtZV0gPSB2YWx1ZWBcbiAgZW5kXG5cbiAgZGVmID09KG90aGVyKVxuICAgIHJldHVybiBmYWxzZSB1bmxlc3Mgb3RoZXIuaW5zdGFuY2Vfb2Y/KHNlbGYuY2xhc3MpXG5cbiAgICAleHtcbiAgICAgIHZhciByZWN1cnNlZDEgPSB7fSwgcmVjdXJzZWQyID0ge307XG5cbiAgICAgIGZ1bmN0aW9uIF9lcWVxKHN0cnVjdCwgb3RoZXIpIHtcbiAgICAgICAgdmFyIGtleSwgYSwgYjtcblxuICAgICAgICByZWN1cnNlZDFbI3tgc3RydWN0YC5fX2lkX199XSA9IHRydWU7XG4gICAgICAgIHJlY3Vyc2VkMlsje2BvdGhlcmAuX19pZF9ffV0gPSB0cnVlO1xuXG4gICAgICAgIGZvciAoa2V5IGluIHN0cnVjdC4kJGRhdGEpIHtcbiAgICAgICAgICBhID0gc3RydWN0LiQkZGF0YVtrZXldO1xuICAgICAgICAgIGIgPSBvdGhlci4kJGRhdGFba2V5XTtcblxuICAgICAgICAgIGlmICgjezo6U3RydWN0ID09PSBgYWB9KSB7XG4gICAgICAgICAgICBpZiAoIXJlY3Vyc2VkMS5oYXNPd25Qcm9wZXJ0eSgje2BhYC5fX2lkX199KSB8fCAhcmVjdXJzZWQyLmhhc093blByb3BlcnR5KCN7YGJgLl9faWRfX30pKSB7XG4gICAgICAgICAgICAgIGlmICghX2VxZXEoYSwgYikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCEje2BhYCA9PSBgYmB9KSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9lcWVxKHNlbGYsIG90aGVyKTtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBlcWw/KG90aGVyKVxuICAgIHJldHVybiBmYWxzZSB1bmxlc3Mgb3RoZXIuaW5zdGFuY2Vfb2Y/KHNlbGYuY2xhc3MpXG5cbiAgICAleHtcbiAgICAgIHZhciByZWN1cnNlZDEgPSB7fSwgcmVjdXJzZWQyID0ge307XG5cbiAgICAgIGZ1bmN0aW9uIF9lcWVxKHN0cnVjdCwgb3RoZXIpIHtcbiAgICAgICAgdmFyIGtleSwgYSwgYjtcblxuICAgICAgICByZWN1cnNlZDFbI3tgc3RydWN0YC5fX2lkX199XSA9IHRydWU7XG4gICAgICAgIHJlY3Vyc2VkMlsje2BvdGhlcmAuX19pZF9ffV0gPSB0cnVlO1xuXG4gICAgICAgIGZvciAoa2V5IGluIHN0cnVjdC4kJGRhdGEpIHtcbiAgICAgICAgICBhID0gc3RydWN0LiQkZGF0YVtrZXldO1xuICAgICAgICAgIGIgPSBvdGhlci4kJGRhdGFba2V5XTtcblxuICAgICAgICAgIGlmICgjezo6U3RydWN0ID09PSBgYWB9KSB7XG4gICAgICAgICAgICBpZiAoIXJlY3Vyc2VkMS5oYXNPd25Qcm9wZXJ0eSgje2BhYC5fX2lkX199KSB8fCAhcmVjdXJzZWQyLmhhc093blByb3BlcnR5KCN7YGJgLl9faWRfX30pKSB7XG4gICAgICAgICAgICAgIGlmICghX2VxZXEoYSwgYikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCEje2BhYC5lcWw/KGBiYCl9KSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9lcWVxKHNlbGYsIG90aGVyKTtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBlYWNoXG4gICAgcmV0dXJuIGVudW1fZm9yKDplYWNoKSB7IHNpemUgfSB1bmxlc3MgYmxvY2tfZ2l2ZW4/XG5cbiAgICBzZWxmLmNsYXNzLm1lbWJlcnMuZWFjaCB7IHxuYW1lfCB5aWVsZCBzZWxmW25hbWVdIH1cbiAgICBzZWxmXG4gIGVuZFxuXG4gIGRlZiBlYWNoX3BhaXJcbiAgICByZXR1cm4gZW51bV9mb3IoOmVhY2hfcGFpcikgeyBzaXplIH0gdW5sZXNzIGJsb2NrX2dpdmVuP1xuXG4gICAgc2VsZi5jbGFzcy5tZW1iZXJzLmVhY2ggeyB8bmFtZXwgeWllbGQgW25hbWUsIHNlbGZbbmFtZV1dIH1cbiAgICBzZWxmXG4gIGVuZFxuXG4gIGRlZiBsZW5ndGhcbiAgICBzZWxmLmNsYXNzLm1lbWJlcnMubGVuZ3RoXG4gIGVuZFxuXG4gIGRlZiB0b19hXG4gICAgc2VsZi5jbGFzcy5tZW1iZXJzLm1hcCB7IHxuYW1lfCBzZWxmW25hbWVdIH1cbiAgZW5kXG5cbiAgYHZhciBpbnNwZWN0X3N0YWNrID0gW11gXG5cbiAgZGVmIGluc3BlY3RcbiAgICByZXN1bHQgPSAnIzxzdHJ1Y3QgJ1xuXG4gICAgaWYgYGluc3BlY3Rfc3RhY2tgLmluY2x1ZGU/IF9faWRfX1xuICAgICAgcmVzdWx0ICsgJzouLi4+J1xuICAgIGVsc2VcbiAgICAgIGBpbnNwZWN0X3N0YWNrYCA8PCBfX2lkX19cbiAgICAgIHB1c2hlZCA9IHRydWVcblxuICAgICAgaWYgOjpTdHJ1Y3QgPT09IHNlbGYgJiYgc2VsZi5jbGFzcy5uYW1lXG4gICAgICAgIHJlc3VsdCArPSBcIiN7c2VsZi5jbGFzc30gXCJcbiAgICAgIGVuZFxuXG4gICAgICByZXN1bHQgKz0gZWFjaF9wYWlyLm1hcCBkbyB8bmFtZSwgdmFsdWV8XG4gICAgICAgIFwiI3tuYW1lfT0je09wYWwuaW5zcGVjdCh2YWx1ZSl9XCJcbiAgICAgIGVuZC5qb2luICcsICdcblxuICAgICAgcmVzdWx0ICs9ICc+J1xuXG4gICAgICByZXN1bHRcbiAgICBlbmRcbiAgZW5zdXJlXG4gICAgYGluc3BlY3Rfc3RhY2sucG9wKClgIGlmIHB1c2hlZFxuICBlbmRcblxuICBkZWYgdG9faCgmYmxvY2spXG4gICAgcmV0dXJuIG1hcCgmYmxvY2spLnRvX2goKmFyZ3MpIGlmIGJsb2NrX2dpdmVuP1xuXG4gICAgc2VsZi5jbGFzcy5tZW1iZXJzLmVhY2hfd2l0aF9vYmplY3Qoe30pIHsgfG5hbWUsIGh8IGhbbmFtZV0gPSBzZWxmW25hbWVdIH1cbiAgZW5kXG5cbiAgZGVmIHZhbHVlc19hdCgqYXJncylcbiAgICBhcmdzID0gYXJncy5tYXAgeyB8YXJnfCBgYXJnLiQkaXNfcmFuZ2UgPyAje2FyZy50b19hfSA6IGFyZ2AgfS5mbGF0dGVuXG4gICAgJXh7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJncy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBpZiAoIWFyZ3NbaV0uJCRpc19udW1iZXIpIHtcbiAgICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6VHlwZUVycm9yLCBcIm5vIGltcGxpY2l0IGNvbnZlcnNpb24gb2YgI3tgYXJnc1tpXWAuY2xhc3N9IGludG8gSW50ZWdlclwifVxuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC5wdXNoKCN7c2VsZltgYXJnc1tpXWBdfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGRpZyhrZXksICprZXlzKVxuICAgIGl0ZW0gPSBpZiBga2V5LiQkaXNfc3RyaW5nICYmIHNlbGYuJCRkYXRhLmhhc093blByb3BlcnR5KGtleSlgXG4gICAgICAgICAgICAgYHNlbGYuJCRkYXRhW2tleV0gfHwgbmlsYFxuICAgICAgICAgICBlbmRcblxuICAgICV4e1xuICAgICAgaWYgKGl0ZW0gPT09IG5pbCB8fCBrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB1bmxlc3MgaXRlbS5yZXNwb25kX3RvPyg6ZGlnKVxuICAgICAgOjpLZXJuZWwucmFpc2UgOjpUeXBlRXJyb3IsIFwiI3tpdGVtLmNsYXNzfSBkb2VzIG5vdCBoYXZlICNkaWcgbWV0aG9kXCJcbiAgICBlbmRcblxuICAgIGl0ZW0uZGlnKCprZXlzKVxuICBlbmRcblxuICBhbGlhcyBzaXplIGxlbmd0aFxuICBhbGlhcyB0b19zIGluc3BlY3RcbiAgYWxpYXMgdmFsdWVzIHRvX2FcbmVuZFxuIl0sIm5hbWVzIjpbIjx0b3AgKHJlcXVpcmVkKT4iLCJzZWxmIiwicmVxdWlyZSIsIjxjbGFzczpTdHJ1Y3Q+IiwiaW5jbHVkZSIsIkVudW1lcmFibGUiLCJuZXciLCJjb25zdF9uYW1lIiwiY2xhc3MiLCJTdHJpbmciLCJbXSIsIjAiLCJ1cGNhc2UiLCJhcmdzIiwidW5zaGlmdCIsIk9wYWwiLCJjb25zdF9uYW1lISIsIlR5cGVFcnJvciIsIk5hbWVFcnJvciIsIm1hcCIsImJsb2NrIGluIG5ldyIsImFyZyIsImJsb2NrICgyIGxldmVscykgaW4gbmV3IiwiY29lcmNlX3RvISIsImtsYXNzIiwiQ2xhc3MiLCJlYWNoIiwiYmxvY2sgKDMgbGV2ZWxzKSBpbiBuZXciLCJkZWZpbmVfc3RydWN0X2F0dHJpYnV0ZSIsImluc3RhbmNlIiwiYWxsb2NhdGUiLCJpbml0aWFsaXplIiwiYWxpYXNfbWV0aG9kIiwiYmxvY2siLCJtb2R1bGVfZXZhbCIsInRvX3Byb2MiLCJTdHJ1Y3QiLCJjb25zdF9zZXQiLCJuYW1lIiwiS2VybmVsIiwicmFpc2UiLCJBcmd1bWVudEVycm9yIiwibWVtYmVycyIsIjw8IiwiZGVmaW5lX21ldGhvZCIsImJsb2NrIGluIGRlZmluZV9zdHJ1Y3RfYXR0cmlidXRlIiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiBkZWZpbmVfc3RydWN0X2F0dHJpYnV0ZSIsInZhbHVlIiwiQG1lbWJlcnMiLCIkcmV0X29yXzEiLCJpbmhlcml0ZWQiLCJpbnN0YW5jZV9ldmFsIiwiYmxvY2sgaW4gaW5oZXJpdGVkIiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiBpbmhlcml0ZWQiLCJrd2FyZ3MiLCJsYXN0IiwiPiIsImxlbmd0aCIsIjEiLCJleHRyYSIsIi0iLCJrZXlzIiwiYW55PyIsImpvaW4iLCJibG9jayBpbiBpbml0aWFsaXplIiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiBpbml0aWFsaXplIiwiW109IiwiZWFjaF93aXRoX2luZGV4IiwiaW5kZXgiLCJpbml0aWFsaXplX2NvcHkiLCJmcm9tIiwia2V5d29yZF9pbml0PyIsImhhc2giLCJIYXNoIiwiSW50ZWdlciIsIjwiLCJzaXplIiwiLUAiLCJJbmRleEVycm9yIiwiPj0iLCJpbmNsdWRlPyIsInRvX3N5bSIsIj09Iiwib3RoZXIiLCJpbnN0YW5jZV9vZj8iLCJfX2lkX18iLCI9PT0iLCJlcWw/IiwiYmxvY2tfZ2l2ZW4/IiwiZW51bV9mb3IiLCJibG9jayBpbiBlYWNoIiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiBlYWNoIiwiZWFjaF9wYWlyIiwiYmxvY2sgaW4gZWFjaF9wYWlyIiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiBlYWNoX3BhaXIiLCJ0b19hIiwiYmxvY2sgaW4gdG9fYSIsImJsb2NrICgyIGxldmVscykgaW4gdG9fYSIsImluc3BlY3QiLCJyZXN1bHQiLCIrIiwicHVzaGVkIiwiYmxvY2sgaW4gaW5zcGVjdCIsImJsb2NrICgyIGxldmVscykgaW4gaW5zcGVjdCIsInRvX2giLCJlYWNoX3dpdGhfb2JqZWN0IiwiYmxvY2sgaW4gdG9faCIsImgiLCJibG9jayAoMiBsZXZlbHMpIGluIHRvX2giLCJ2YWx1ZXNfYXQiLCJibG9jayBpbiB2YWx1ZXNfYXQiLCJibG9jayAoMiBsZXZlbHMpIGluIHZhbHVlc19hdCIsImZsYXR0ZW4iLCJkaWciLCJrZXkiLCJpdGVtIiwicmVzcG9uZF90bz8iXSwibWFwcGluZ3MiOiJBQUFBQSxpQ0FBQUEsZ0JBQUFBO0VBQUFBOztFQUFBQTs7RUFBQUMsSUFBQUMsU0FBQUEsQ0FBUUYsb0JBQVJFO0VBRUFGLE9BQUFHO0VBQUFBOztJQUFBQTs7O0lBQ0VGLElBQUFHLFNBQUFBLENBQVFDLGlCQUFSRDtJQUVBRSxNQUFJTCxJQUFKSyxVQUFBQSx1QkFBYUMsVUFBRCxFQUxkLEVBS2MsRUFMZCxFQUtFRDtBQUFBQSxNQUFBQTs7TUFBQUE7OztNQUxGO01BQUE7TUFBQTtNQUsyQjs7TUFBTyw4Q0FBQSx5Q0FBYztNQUM1QyxJQUFBLFFBQUdDLFVBQUgsQ0FBQTtRQUNFLElBQUcsQ0FBQSxNQUFBQSxVQUFVQyxPQUFBQSxDQUFBQSxDQUFWLEVBQW9CQyxhQUFwQixDQUFBLElBQUEsQ0FBQSxPQUFnQ0YsVUFBVUcsT0FBQUEsQ0FBQ0MsQ0FBREQsQ0FBR0UsUUFBQUEsQ0FBQUEsQ0FBN0MsRUFBd0RMLFVBQVVHLE9BQUFBLE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NBQUVtRyxPQUFGbkcsQ0FBWW1HO0FBQ3RDQTtBQUNBQTtBQUNBQTtJQVhFQSxDQUFBQSxJQUFBQTs7QUFjQUksSUFBQUEsbUJBQUFBLGVBQVFDLEdBQUQsRUF0VFQsRUFzVEVEO0FBQUFBLE1BQUFBOzs7TUF0VEY7TUFzVGU7TUFDWEUsT0FBTyxDQUFBLFFBQUlGLGtEQUFKLENBQUEsR0FBQSxDQUNHQSx1QkFESCxJQUFBLEdBQUE7O0FBS1hBO0FBQ0FBO0FBQ0FBO0FBQ0FBO01BRUksS0FBQSxRQUFPRSxJQUFJQyxnQkFBQUEsQ0FBYSxLQUFiQSxDQUFYLENBQUE7UUFDRTdFLE9BQVFDLE9BQUFBLENBQU92QixnQkFBZixFQUE0QixFQUFBLEdBQUEsQ0FBR2tHLElBQUkzRyxPQUFBQSxDQUFBQSxDQUFQLENBQUEsR0FBY3lHLDRCQUFsQ3pFO01BRFY7TUFJQXlFLE9BQUlBLE1BQUpFLElBQUlGLE9BQUFBLEVBQUssTUFBQ3BELElBQUQsQ0FBTG9EO0lBZk5BLENBQUFBLElBQUFBO0lBa0JBLGFBQU0sTUFBTixFQUFXLFFBQVg7SUFDQSxhQUFNLE1BQU4sRUFBVyxTQUFYO0lBQ0E5RyxPQUFBLGFBQU0sUUFBTixFQUFhLE1BQWI7RUF4VUZBLEdBQU0sSUFBTkEsRUFBQUEsSUFBQUE7QUFGQUg7In19LHsib2Zmc2V0Ijp7ImxpbmUiOjkxODcsImNvbHVtbiI6MH0sIm1hcCI6eyJ2ZXJzaW9uIjozLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb3JlbGliL3JhdGlvbmFsL2Jhc2UucmIiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlIDo6S2VybmVsXG4gIGRlZiBSYXRpb25hbChudW1lcmF0b3IsIGRlbm9taW5hdG9yID0gMSlcbiAgICA6OlJhdGlvbmFsLmNvbnZlcnQobnVtZXJhdG9yLCBkZW5vbWluYXRvcilcbiAgZW5kXG5lbmRcblxuY2xhc3MgOjpTdHJpbmdcbiAgZGVmIHRvX3JcbiAgICA6OlJhdGlvbmFsLmZyb21fc3RyaW5nKHNlbGYpXG4gIGVuZFxuZW5kXG4iXSwibmFtZXMiOlsiPHRvcCAocmVxdWlyZWQpPiIsIjxtb2R1bGU6S2VybmVsPiIsIlJhdGlvbmFsIiwibnVtZXJhdG9yIiwiZGVub21pbmF0b3IiLCIxIiwiY29udmVydCIsIjxjbGFzczpTdHJpbmc+IiwidG9fciIsImZyb21fc3RyaW5nIiwic2VsZiJdLCJtYXBwaW5ncyI6IkFBQUFBLHdDQUFBQSxnQkFBQUE7RUFBQUE7O0VBQUFBOztFQUFBQztFQUFBQTs7O0lBQ0VBLE9BQUFDLHdCQUFBQSxvQkFBYUMsU0FBRCxFQUFZQyxXQUF4QkY7QUFBQUE7O01BQXdCLHVDQUFjRztNQUNwQ0gsT0FBQUEsZUFBVUksU0FBQUEsQ0FBU0gsU0FBbkIsRUFBOEJDLFdBQXBCRTtJQURaSixDQUFBQSxJQUFBQTtFQURGRCxHQUFPLElBQVBBO0VBTUFELE9BQUFPO0VBQUFBOzs7SUFDRUEsT0FBQUMsb0JBQUFBLGdCQUFBQTtBQUFBQSxNQUFBQTs7TUFDRUEsT0FBQU4sZUFBVU8sYUFBQUEsQ0FBYUMsSUFBYkQ7SUFEWkQsQ0FBQUEsR0FBQUE7RUFERkQsR0FBTSxJQUFOQSxFQUFBQSxJQUFBQTtBQU5BUDsifX0seyJvZmZzZXQiOnsibGluZSI6OTIxNSwiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvcmVsaWIvY2xhc3MucmIiXSwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSAnY29yZWxpYi9tb2R1bGUnXG5cbmNsYXNzIDo6Q2xhc3NcbiAgZGVmIHNlbGYubmV3KHN1cGVyY2xhc3MgPSBPYmplY3QsICZibG9jaylcbiAgICAleHtcbiAgICAgIGlmICghc3VwZXJjbGFzcy4kJGlzX2NsYXNzKSB7XG4gICAgICAgIHRocm93IE9wYWwuVHlwZUVycm9yLiRuZXcoXCJzdXBlcmNsYXNzIG11c3QgYmUgYSBDbGFzc1wiKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGtsYXNzID0gT3BhbC5hbGxvY2F0ZV9jbGFzcyhuaWwsIHN1cGVyY2xhc3MpO1xuICAgICAgc3VwZXJjbGFzcy4kaW5oZXJpdGVkKGtsYXNzKTtcbiAgICAgICN7YGtsYXNzYC5jbGFzc19ldmFsKCZibG9jaykgaWYgYmxvY2tfZ2l2ZW4/fVxuICAgICAgcmV0dXJuIGtsYXNzO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGFsbG9jYXRlXG4gICAgJXh7XG4gICAgICB2YXIgb2JqID0gbmV3IHNlbGYuJCRjb25zdHJ1Y3RvcigpO1xuICAgICAgb2JqLiQkaWQgPSBPcGFsLnVpZCgpO1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBkZXNjZW5kYW50c1xuICAgIHN1YmNsYXNzZXMgKyBzdWJjbGFzc2VzLm1hcCgmOmRlc2NlbmRhbnRzKS5mbGF0dGVuXG4gIGVuZFxuXG4gIGRlZiBpbmhlcml0ZWQoY2xzKVxuICBlbmRcblxuICBkZWYgaW5pdGlhbGl6ZV9kdXAob3JpZ2luYWwpXG4gICAgaW5pdGlhbGl6ZV9jb3B5KG9yaWdpbmFsKVxuICAgICV4e1xuICAgICAgc2VsZi4kJG5hbWUgPSBudWxsO1xuICAgICAgc2VsZi4kJGZ1bGxfbmFtZSA9IG51bGw7XG4gICAgfVxuICBlbmRcblxuICBkZWYgbmV3KCphcmdzLCAmYmxvY2spXG4gICAgJXh7XG4gICAgICB2YXIgb2JqZWN0ID0gI3thbGxvY2F0ZX07XG4gICAgICBPcGFsLnNlbmQob2JqZWN0LCBvYmplY3QuJGluaXRpYWxpemUsIGFyZ3MsIGJsb2NrKTtcbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuICBlbmRcblxuICBkZWYgc3ViY2xhc3Nlc1xuICAgICV4e1xuICAgICAgaWYgKHR5cGVvZiBXZWFrUmVmICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgaSwgc3ViY2xhc3MsIG91dCA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2VsZi4kJHN1YmNsYXNzZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBzdWJjbGFzcyA9IHNlbGYuJCRzdWJjbGFzc2VzW2ldLmRlcmVmKCk7XG4gICAgICAgICAgaWYgKHN1YmNsYXNzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG91dC5wdXNoKHN1YmNsYXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gc2VsZi4kJHN1YmNsYXNzZXM7XG4gICAgICB9XG4gICAgfVxuICBlbmRcblxuICBkZWYgc3VwZXJjbGFzc1xuICAgIGBzZWxmLiQkc3VwZXIgfHwgbmlsYFxuICBlbmRcblxuICBkZWYgdG9fc1xuICAgICV4e1xuICAgICAgdmFyIHNpbmdsZXRvbl9vZiA9IHNlbGYuJCRzaW5nbGV0b25fb2Y7XG5cbiAgICAgIGlmIChzaW5nbGV0b25fb2YgJiYgc2luZ2xldG9uX29mLiQkaXNfYV9tb2R1bGUpIHtcbiAgICAgICAgcmV0dXJuICN7XCIjPENsYXNzOiN7YHNpbmdsZXRvbl9vZmAubmFtZX0+XCJ9O1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoc2luZ2xldG9uX29mKSB7XG4gICAgICAgIC8vIGEgc2luZ2xldG9uIGNsYXNzIGNyZWF0ZWQgZnJvbSBhbiBvYmplY3RcbiAgICAgICAgcmV0dXJuICN7XCIjPENsYXNzOiM8I3tgc2luZ2xldG9uX29mLiQkY2xhc3NgLm5hbWV9OjB4I3tgT3BhbC5pZChzaW5nbGV0b25fb2YpYC50b19zKDE2KX0+PlwifTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICN7c3VwZXIoKX07XG4gICAgfVxuICBlbmRcblxuICBhbGlhcyBpbnNwZWN0IHRvX3NcbmVuZFxuIl0sIm5hbWVzIjpbIjx0b3AgKHJlcXVpcmVkKT4iLCJzZWxmIiwicmVxdWlyZSIsIjxjbGFzczpDbGFzcz4iLCJuZXciLCJzdXBlcmNsYXNzIiwiT2JqZWN0IiwiYmxvY2tfZ2l2ZW4/IiwiY2xhc3NfZXZhbCIsImJsb2NrIiwidG9fcHJvYyIsImFsbG9jYXRlIiwiZGVzY2VuZGFudHMiLCIrIiwic3ViY2xhc3NlcyIsIm1hcCIsImZsYXR0ZW4iLCJpbmhlcml0ZWQiLCJpbml0aWFsaXplX2R1cCIsIm9yaWdpbmFsIiwiaW5pdGlhbGl6ZV9jb3B5IiwidG9fcyIsIm5hbWUiLCIxNiJdLCJtYXBwaW5ncyI6IkFBQUFBLGdDQUFBQSxnQkFBQUE7RUFBQUE7O0VBQUFBOztFQUFBQyxJQUFBQyxTQUFBQSxDQUFRRixnQkFBUkU7RUFFQUYsT0FBQUc7RUFBQUE7O0lBQUFBOzs7SUFDRUMsTUFBSUgsSUFBSkcsVUFBQUEsc0JBQWFDLFVBQWJEO0FBQUFBLE1BQUFBOztNQUFBQTs7O01BQWEscUNBQWFFOztBQUU1QkY7QUFDQUE7QUFDQUE7O0FBRUFBO0FBQ0FBO0FBQ0FBLE1BQVEsQ0FBOEJHLGVBQTlCLEdBQUEsQ0FBT0MsTUFBUEosQ0FBQ0EsS0FBREEsQ0FBT0ksY0FBQUEsRUFBQUEsRUFBQUEsRUFBYUMsS0FBREMsU0FBQUEsQ0FBQUEsQ0FBWkYsQ0FBUCxJQUFBLEdBQUE7QUFDUko7QUFDQUE7SUFWRUEsQ0FBQUEsSUFBQUE7O0FBYUFPLElBQUFBLHdCQUFBQSxvQkFBQUE7QUFBQUEsTUFBQUE7OztBQUVGQTtBQUNBQTtBQUNBQTtBQUNBQTtJQUxFQSxDQUFBQSxHQUFBQTs7QUFRQUMsSUFBQUEsMkJBQUFBLHVCQUFBQTtBQUFBQSxNQUFBQTs7TUFDRUEsT0FBV0MsU0FBWFosSUFBQWEsWUFBQUEsQ0FBQUEsQ0FBV0QsRUFBWUUsTUFBVmQsSUFBQWEsWUFBQUEsQ0FBQUEsQ0FBVUMsT0FBQUEsRUFBQUEsRUFBQUEsRUFBTSxhQUFETCxTQUFBQSxDQUFBQSxDQUFMSyxDQUFtQkMsU0FBQUEsQ0FBQUEsQ0FBL0JIO0lBRGJELENBQUFBLEdBQUFBOztBQUlBSyxJQUFBQSx5QkFBQUEsWUE1QkYsR0E0QkVBLENBQUFBLEdBQUFBOztBQUdBQyxJQUFBQSw4QkFBQUEsMEJBQW1CQyxRQUFuQkQ7QUFBQUEsTUFBQUE7OztNQUNFakIsSUFBQW1CLGlCQUFBQSxDQUFnQkQsUUFBaEJDOztBQUVKRjtBQUNBQTtBQUNBQTtJQUxFQSxDQUFBQSxHQUFBQTs7QUFRQWQsSUFBQUEsbUJBQUFBLHNCQXZDRixFQXVDRUE7QUFBQUEsTUFBQUE7O01BQUFBOzs7TUF2Q0Y7TUF1Q1U7O0FBRVZBLG1CQUFxQkgsSUFBQVUsVUFBQUEsQ0FBQUEsQ0FBU1A7QUFDOUJBO0FBQ0FBO0FBQ0FBO0lBTEVBLENBQUFBLElBQUFBOztBQVFBVSxJQUFBQSwwQkFBQUEsc0JBQUFBO0FBQUFBLE1BQUFBOzs7QUFFRkE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7SUFmRUEsQ0FBQUEsR0FBQUE7O0FBa0JBVCxJQUFBQSwwQkFBQUEsc0JBQUFBO0FBQUFBLE1BQUFBOztNQUNFQSxPQUFDQSxtQkFBREE7SUFERkEsQ0FBQUEsR0FBQUE7O0FBSUFnQixJQUFBQSxvQkFBQUEsZ0JBQUFBO0FBQUFBLE1BQUFBOztNQUFBQTs7QUFFRkE7O0FBRUFBO0FBQ0FBLGVBQWtCQSxVQUFELEdBQUEsQ0FBV0EsQ0FBQ0EsWUFBREEsQ0FBY0MsTUFBQUEsQ0FBQUEsQ0FBekIsQ0FBQSxHQUErQkQsR0FBR0E7QUFDbkRBO0FBQ0FBO0FBQ0FBO0FBQ0FBLGVBQWtCQSxZQUFELEdBQUEsQ0FBYUEsQ0FBQ0Esb0JBQURBLENBQXNCQyxNQUFBQSxDQUFBQSxDQUFuQyxDQUFBLEdBQXlDRCxLQUF6QyxHQUFBLENBQThDQSxDQUFDQSxxQkFBREEsQ0FBdUJBLE1BQUFBLENBQU1FLEVBQU5GLENBQXJFLENBQUEsR0FBK0VBLElBQUlBO0FBQ3BHQTs7QUFFQUEsYUFBZSxPQUFBcEIsSUFBQSxFQUFBLDhDQUFBLFFBQUEsRUFBQSxFQUFBLEVBQUEsSUFBQSxDQUFRb0I7QUFDdkJBO0lBYkVBLENBQUFBLEdBQUFBO0lBZ0JBbEIsT0FBQSxhQUFNLFNBQU4sRUFBYyxNQUFkO0VBbkZGQSxHQUFNLElBQU5BLEVBQUFBLElBQUFBO0FBRkFIOyJ9fSx7Im9mZnNldCI6eyJsaW5lIjo5MzM4LCJjb2x1bW4iOjB9LCJtYXAiOnsidmVyc2lvbiI6Mywic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29yZWxpYi9yYW5kb20vbWVyc2VubmVfdHdpc3Rlci5yYiJdLCJzb3VyY2VzQ29udGVudCI6WyIjIFRoaXMgaXMgYmFzZWQgb24gYW4gYWRhcHRhdGlvbiBvZiBNYWtvdG8gTWF0c3Vtb3RvIGFuZCBUYWt1amkgTmlzaGltdXJhJ3MgY29kZVxuIyBkb25lIGJ5IFNlYW4gTWNDdWxsb3VnaCA8YmFua3NlYW5AZ21haWwuY29tPiBhbmQgRGF2ZSBIZWl0em1hblxuIyA8ZGF2ZWhlaXR6bWFuQHlhaG9vLmNvbT4sIHN1YnNlcXVlbnRseSByZWFkYXB0ZWQgZnJvbSBhbiB1cGRhdGVkIHZlcnNpb24gb2ZcbiMgcnVieSdzIHJhbmRvbS5jIChyZXYgYzM4YTE4MzAzMmE3ODI2ZGYxYWRhYmQ4YWEwNzI1YzcxM2Q1M2UxYykuXG4jXG4jIFRoZSBvcmlnaW5hbCBjb3B5cmlnaHQgbm90aWNlIGZyb20gcmFuZG9tLmMgZm9sbG93cy5cbiNcbiMgICBUaGlzIGlzIGJhc2VkIG9uIHRyaW1tZWQgdmVyc2lvbiBvZiBNVDE5OTM3LiAgVG8gZ2V0IHRoZSBvcmlnaW5hbCB2ZXJzaW9uLFxuIyAgIGNvbnRhY3QgPGh0dHA6Ly93d3cubWF0aC5zY2kuaGlyb3NoaW1hLXUuYWMuanAvfm0tbWF0L01UL2VtdC5odG1sPi5cbiNcbiMgICBUaGUgb3JpZ2luYWwgY29weXJpZ2h0IG5vdGljZSBmb2xsb3dzLlxuI1xuIyAgICAgIEEgQy1wcm9ncmFtIGZvciBNVDE5OTM3LCB3aXRoIGluaXRpYWxpemF0aW9uIGltcHJvdmVkIDIwMDIvMi8xMC5cbiMgICAgICBDb2RlZCBieSBUYWt1amkgTmlzaGltdXJhIGFuZCBNYWtvdG8gTWF0c3Vtb3RvLlxuIyAgICAgIFRoaXMgaXMgYSBmYXN0ZXIgdmVyc2lvbiBieSB0YWtpbmcgU2hhd24gQ29rdXMncyBvcHRpbWl6YXRpb24sXG4jICAgICAgTWF0dGhlIEJlbGxldydzIHNpbXBsaWZpY2F0aW9uLCBJc2FrdSBXYWRhJ3MgcmVhbCB2ZXJzaW9uLlxuI1xuIyAgICAgIEJlZm9yZSB1c2luZywgaW5pdGlhbGl6ZSB0aGUgc3RhdGUgYnkgdXNpbmcgaW5pdF9nZW5yYW5kKG10LCBzZWVkKVxuIyAgICAgIG9yIGluaXRfYnlfYXJyYXkobXQsIGluaXRfa2V5LCBrZXlfbGVuZ3RoKS5cbiNcbiMgICAgICBDb3B5cmlnaHQgKEMpIDE5OTcgLSAyMDAyLCBNYWtvdG8gTWF0c3Vtb3RvIGFuZCBUYWt1amkgTmlzaGltdXJhLFxuIyAgICAgIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4jXG4jICAgICAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4jICAgICAgbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zXG4jICAgICAgYXJlIG1ldDpcbiNcbiMgICAgICAgIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0XG4jICAgICAgICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4jXG4jICAgICAgICAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodFxuIyAgICAgICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZVxuIyAgICAgICAgICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiNcbiMgICAgICAgIDMuIFRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBub3QgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGVcbiMgICAgICAgICAgIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlblxuIyAgICAgICAgICAgcGVybWlzc2lvbi5cbiNcbiMgICAgICBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTXG4jICAgICAgXCJBUyBJU1wiIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVFxuIyAgICAgIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUlxuIyAgICAgIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBPV05FUiBPUlxuIyAgICAgIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLFxuIyAgICAgIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTyxcbiMgICAgICBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1JcbiMgICAgICBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GXG4jICAgICAgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcbiMgICAgICBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVNcbiMgICAgICBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiNcbiNcbiMgICAgICBBbnkgZmVlZGJhY2sgaXMgdmVyeSB3ZWxjb21lLlxuIyAgICAgIGh0dHA6Ly93d3cubWF0aC5rZWlvLmFjLmpwL21hdHVtb3RvL2VtdC5odG1sXG4jICAgICAgZW1haWw6IG1hdHVtb3RvQG1hdGgua2Vpby5hYy5qcFxubWVyc2VubmVfdHdpc3RlciA9ICV4eyhmdW5jdGlvbigpIHtcbiAgLyogUGVyaW9kIHBhcmFtZXRlcnMgKi9cbiAgdmFyIE4gPSA2MjQ7XG4gIHZhciBNID0gMzk3O1xuICB2YXIgTUFUUklYX0EgPSAweDk5MDhiMGRmOyAgICAgIC8qIGNvbnN0YW50IHZlY3RvciBhICovXG4gIHZhciBVTUFTSyA9IDB4ODAwMDAwMDA7ICAgICAgICAgLyogbW9zdCBzaWduaWZpY2FudCB3LXIgYml0cyAqL1xuICB2YXIgTE1BU0sgPSAweDdmZmZmZmZmOyAgICAgICAgIC8qIGxlYXN0IHNpZ25pZmljYW50IHIgYml0cyAqL1xuICB2YXIgTUlYQklUUyA9IGZ1bmN0aW9uKHUsdikgeyByZXR1cm4gKCAoKHUpICYgVU1BU0spIHwgKCh2KSAmIExNQVNLKSApOyB9O1xuICB2YXIgVFdJU1QgPSBmdW5jdGlvbih1LHYpIHsgcmV0dXJuIChNSVhCSVRTKCh1KSwodikpID4+PiAxKSBeICgodiAmIDB4MSkgPyBNQVRSSVhfQSA6IDB4MCk7IH07XG5cbiAgZnVuY3Rpb24gaW5pdChzKSB7XG4gICAgdmFyIG10ID0ge2xlZnQ6IDAsIG5leHQ6IE4sIHN0YXRlOiBuZXcgQXJyYXkoTil9O1xuICAgIGluaXRfZ2VucmFuZChtdCwgcyk7XG4gICAgcmV0dXJuIG10O1xuICB9XG5cbiAgLyogaW5pdGlhbGl6ZXMgbXRbTl0gd2l0aCBhIHNlZWQgKi9cbiAgZnVuY3Rpb24gaW5pdF9nZW5yYW5kKG10LCBzKSB7XG4gICAgdmFyIGosIGk7XG4gICAgbXQuc3RhdGVbMF0gPSBzID4+PiAwO1xuICAgIGZvciAoaj0xOyBqPE47IGorKykge1xuICAgICAgbXQuc3RhdGVbal0gPSAoMTgxMjQzMzI1MyAqICgobXQuc3RhdGVbai0xXSBeIChtdC5zdGF0ZVtqLTFdID4+IDMwKSA+Pj4gMCkpICsgaik7XG4gICAgICAvKiBTZWUgS251dGggVEFPQ1AgVm9sMi4gM3JkIEVkLiBQLjEwNiBmb3IgbXVsdGlwbGllci4gKi9cbiAgICAgIC8qIEluIHRoZSBwcmV2aW91cyB2ZXJzaW9ucywgTVNCcyBvZiB0aGUgc2VlZCBhZmZlY3QgICAqL1xuICAgICAgLyogb25seSBNU0JzIG9mIHRoZSBhcnJheSBzdGF0ZVtdLiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAvKiAyMDAyLzAxLzA5IG1vZGlmaWVkIGJ5IE1ha290byBNYXRzdW1vdG8gICAgICAgICAgICAgKi9cbiAgICAgIG10LnN0YXRlW2pdICY9IDB4ZmZmZmZmZmY7ICAvKiBmb3IgPjMyIGJpdCBtYWNoaW5lcyAqL1xuICAgIH1cbiAgICBtdC5sZWZ0ID0gMTtcbiAgICBtdC5uZXh0ID0gTjtcbiAgfVxuXG4gIC8qIGdlbmVyYXRlIE4gd29yZHMgYXQgb25lIHRpbWUgKi9cbiAgZnVuY3Rpb24gbmV4dF9zdGF0ZShtdCkge1xuICAgIHZhciBwID0gMCwgX3AgPSBtdC5zdGF0ZTtcbiAgICB2YXIgajtcblxuICAgIG10LmxlZnQgPSBOO1xuICAgIG10Lm5leHQgPSAwO1xuXG4gICAgZm9yIChqPU4tTSsxOyAtLWo7IHArKylcbiAgICAgIF9wW3BdID0gX3BbcCsoTSldIF4gVFdJU1QoX3BbcCsoMCldLCBfcFtwKygxKV0pO1xuXG4gICAgZm9yIChqPU07IC0tajsgcCsrKVxuICAgICAgX3BbcF0gPSBfcFtwKyhNLU4pXSBeIFRXSVNUKF9wW3ArKDApXSwgX3BbcCsoMSldKTtcblxuICAgIF9wW3BdID0gX3BbcCsoTS1OKV0gXiBUV0lTVChfcFtwKygwKV0sIF9wWzBdKTtcbiAgfVxuXG4gIC8qIGdlbmVyYXRlcyBhIHJhbmRvbSBudW1iZXIgb24gWzAsMHhmZmZmZmZmZl0taW50ZXJ2YWwgKi9cbiAgZnVuY3Rpb24gZ2VucmFuZF9pbnQzMihtdCkge1xuICAgIC8qIG10IG11c3QgYmUgaW5pdGlhbGl6ZWQgKi9cbiAgICB2YXIgeTtcblxuICAgIGlmICgtLW10LmxlZnQgPD0gMCkgbmV4dF9zdGF0ZShtdCk7XG4gICAgeSA9IG10LnN0YXRlW210Lm5leHQrK107XG5cbiAgICAvKiBUZW1wZXJpbmcgKi9cbiAgICB5IF49ICh5ID4+PiAxMSk7XG4gICAgeSBePSAoeSA8PCA3KSAmIDB4OWQyYzU2ODA7XG4gICAgeSBePSAoeSA8PCAxNSkgJiAweGVmYzYwMDAwO1xuICAgIHkgXj0gKHkgPj4+IDE4KTtcblxuICAgIHJldHVybiB5ID4+PiAwO1xuICB9XG5cbiAgZnVuY3Rpb24gaW50X3BhaXJfdG9fcmVhbF9leGNsdXNpdmUoYSwgYikge1xuICAgIGEgPj4+PSA1O1xuICAgIGIgPj4+PSA2O1xuICAgIHJldHVybihhKjY3MTA4ODY0LjArYikqKDEuMC85MDA3MTk5MjU0NzQwOTkyLjApO1xuICB9XG5cbiAgLy8gZ2VuZXJhdGVzIGEgcmFuZG9tIG51bWJlciBvbiBbMCwxKSB3aXRoIDUzLWJpdCByZXNvbHV0aW9uXG4gIGZ1bmN0aW9uIGdlbnJhbmRfcmVhbChtdCkge1xuICAgIC8qIG10IG11c3QgYmUgaW5pdGlhbGl6ZWQgKi9cbiAgICB2YXIgYSA9IGdlbnJhbmRfaW50MzIobXQpLCBiID0gZ2VucmFuZF9pbnQzMihtdCk7XG4gICAgcmV0dXJuIGludF9wYWlyX3RvX3JlYWxfZXhjbHVzaXZlKGEsIGIpO1xuICB9XG5cbiAgcmV0dXJuIHsgZ2VucmFuZF9yZWFsOiBnZW5yYW5kX3JlYWwsIGluaXQ6IGluaXQgfTtcbn0pKCl9XG5cbmNsYXNzIDo6UmFuZG9tXG4gIGB2YXIgTUFYX0lOVCA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSIHx8IE1hdGgucG93KDIsIDUzKSAtIDFgXG5cbiAgc2VsZjo6TUVSU0VOTkVfVFdJU1RFUl9HRU5FUkFUT1IgPSBge1xuICAgIG5ld19zZWVkOiBmdW5jdGlvbigpIHsgcmV0dXJuIE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIE1BWF9JTlQpOyB9LFxuICAgIHJlc2VlZDogZnVuY3Rpb24oc2VlZCkgeyByZXR1cm4gbWVyc2VubmVfdHdpc3Rlci5pbml0KHNlZWQpOyB9LFxuICAgIHJhbmQ6IGZ1bmN0aW9uKG10KSB7IHJldHVybiBtZXJzZW5uZV90d2lzdGVyLmdlbnJhbmRfcmVhbChtdCk7IH1cbiAgfWBcblxuICBzZWxmLmdlbmVyYXRvciA9IHNlbGY6Ok1FUlNFTk5FX1RXSVNURVJfR0VORVJBVE9SXG5lbmRcbiJdLCJuYW1lcyI6WyI8dG9wIChyZXF1aXJlZCk+IiwibWVyc2VubmVfdHdpc3RlciIsIjxjbGFzczpSYW5kb20+Iiwic2VsZiIsImdlbmVyYXRvcj0iLCJzZWxmOjpNRVJTRU5ORV9UV0lTVEVSX0dFTkVSQVRPUiJdLCJtYXBwaW5ncyI6IkFBQUFBLGtEQUFBQSxnQkFBQUE7RUFBQUE7O0VBQUFBOztFQXNEQUMsbUJBQXNCRDtBQUN0QkE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7O0FBRUFBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBOztBQUVBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTs7QUFFQUE7QUFDQUE7QUFDQUE7QUFDQUE7O0FBRUFBO0FBQ0FBOztBQUVBQTtBQUNBQTs7QUFFQUE7QUFDQUE7O0FBRUFBO0FBQ0FBOztBQUVBQTtBQUNBQTtBQUNBQTtBQUNBQTs7QUFFQUE7QUFDQUE7O0FBRUFBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBOztBQUVBQTtBQUNBQTs7QUFFQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7O0FBRUFBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBOztBQUVBQTtBQUNBQTtFQUVBQSxPQUFBRTtFQUFBQTs7SUFBQUE7OztJQUNHQTtJQUVELFdBQUFDLElBQUEsZ0NBQW9DRDtBQUN0Q0E7QUFDQUE7QUFDQUE7QUFDQUEsR0FKRTtJQU1BQSxPQUFJRSxNQUFBQSxDQUFhQyxJQUFBRixJQUFBRSwrQkFBYkQsQ0FBQUEsRUFBQUEsTUFBSkQsSUFBSUMsY0FBQUEsRUFBQUEsRUFBQUEsQ0FBQUEsRUFBQUE7RUFUTkYsR0FBTSxJQUFOQSxFQUFBQSxJQUFBQTtBQXhJQUY7In19LHsib2Zmc2V0Ijp7ImxpbmUiOjk0NDAsImNvbHVtbiI6MH0sIm1hcCI6eyJ2ZXJzaW9uIjozLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb3JlbGliL21hdGgucmIiXSwic291cmNlc0NvbnRlbnQiOlsiIyBoZWxwZXJzOiB0eXBlX2Vycm9yXG5cbm1vZHVsZSA6Ok1hdGhcbiAgc2VsZjo6RSAgPSBgTWF0aC5FYFxuICBzZWxmOjpQSSA9IGBNYXRoLlBJYFxuXG4gIHNlbGY6OkRvbWFpbkVycm9yID0gOjpDbGFzcy5uZXcoOjpTdGFuZGFyZEVycm9yKVxuXG4gIGRlZiBzZWxmLmNoZWNrZWQobWV0aG9kLCAqYXJncylcbiAgICAleHtcbiAgICAgIGlmIChpc05hTihhcmdzWzBdKSB8fCAoYXJncy5sZW5ndGggPT0gMiAmJiBpc05hTihhcmdzWzFdKSkpIHtcbiAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlc3VsdCA9IE1hdGhbbWV0aG9kXS5hcHBseShudWxsLCBhcmdzKTtcblxuICAgICAgaWYgKGlzTmFOKHJlc3VsdCkpIHtcbiAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSBEb21haW5FcnJvciwgXCJOdW1lcmljYWwgYXJndW1lbnQgaXMgb3V0IG9mIGRvbWFpbiAtIFxcXCIje21ldGhvZH1cXFwiXCJ9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIHNlbGYuZmxvYXQhKHZhbHVlKVxuICAgIDo6S2VybmVsLkZsb2F0KHZhbHVlKVxuICByZXNjdWUgOjpBcmd1bWVudEVycm9yXG4gICAgOjpLZXJuZWwucmFpc2UgYCR0eXBlX2Vycm9yKHZhbHVlLCAjezo6RmxvYXR9KWBcbiAgZW5kXG5cbiAgZGVmIHNlbGYuaW50ZWdlciEodmFsdWUpXG4gICAgOjpLZXJuZWwuSW50ZWdlcih2YWx1ZSlcbiAgcmVzY3VlIDo6QXJndW1lbnRFcnJvclxuICAgIDo6S2VybmVsLnJhaXNlIGAkdHlwZV9lcnJvcih2YWx1ZSwgI3s6OkludGVnZXJ9KWBcbiAgZW5kXG5cbiAgbW9kdWxlX2Z1bmN0aW9uXG5cbiAgdW5sZXNzIGRlZmluZWQ/KGBNYXRoLmVyZmApXG4gICAgJXh7XG4gICAgICBPcGFsLnByb3AoTWF0aCwgJ2VyZicsIGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgdmFyIEExID0gIDAuMjU0ODI5NTkyLFxuICAgICAgICAgICAgQTIgPSAtMC4yODQ0OTY3MzYsXG4gICAgICAgICAgICBBMyA9ICAxLjQyMTQxMzc0MSxcbiAgICAgICAgICAgIEE0ID0gLTEuNDUzMTUyMDI3LFxuICAgICAgICAgICAgQTUgPSAgMS4wNjE0MDU0MjksXG4gICAgICAgICAgICBQICA9ICAwLjMyNzU5MTE7XG5cbiAgICAgICAgdmFyIHNpZ24gPSAxO1xuXG4gICAgICAgIGlmICh4IDwgMCkge1xuICAgICAgICAgICAgc2lnbiA9IC0xO1xuICAgICAgICB9XG5cbiAgICAgICAgeCA9IE1hdGguYWJzKHgpO1xuXG4gICAgICAgIHZhciB0ID0gMS4wIC8gKDEuMCArIFAgKiB4KTtcbiAgICAgICAgdmFyIHkgPSAxLjAgLSAoKCgoKEE1ICogdCArIEE0KSAqIHQpICsgQTMpICogdCArIEEyKSAqIHQgKyBBMSkgKiB0ICogTWF0aC5leHAoLXggKiB4KTtcblxuICAgICAgICByZXR1cm4gc2lnbiAqIHk7XG4gICAgICB9KTtcbiAgICB9XG4gIGVuZFxuXG4gIHVubGVzcyBkZWZpbmVkPyhgTWF0aC5lcmZjYClcbiAgICAleHtcbiAgICAgIE9wYWwucHJvcChNYXRoLCAnZXJmYycsIGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgdmFyIHogPSBNYXRoLmFicyh4KSxcbiAgICAgICAgICAgIHQgPSAxLjAgLyAoMC41ICogeiArIDEuMCk7XG5cbiAgICAgICAgdmFyIEExID0gdCAqIDAuMTcwODcyNzcgKyAtMC44MjIxNTIyMyxcbiAgICAgICAgICAgIEEyID0gdCAqIEExICsgMS40ODg1MTU4NyxcbiAgICAgICAgICAgIEEzID0gdCAqIEEyICsgLTEuMTM1MjAzOTgsXG4gICAgICAgICAgICBBNCA9IHQgKiBBMyArIDAuMjc4ODY4MDcsXG4gICAgICAgICAgICBBNSA9IHQgKiBBNCArIC0wLjE4NjI4ODA2LFxuICAgICAgICAgICAgQTYgPSB0ICogQTUgKyAwLjA5Njc4NDE4LFxuICAgICAgICAgICAgQTcgPSB0ICogQTYgKyAwLjM3NDA5MTk2LFxuICAgICAgICAgICAgQTggPSB0ICogQTcgKyAxLjAwMDAyMzY4LFxuICAgICAgICAgICAgQTkgPSB0ICogQTgsXG4gICAgICAgICAgICBBMTAgPSAteiAqIHogLSAxLjI2NTUxMjIzICsgQTk7XG5cbiAgICAgICAgdmFyIGEgPSB0ICogTWF0aC5leHAoQTEwKTtcblxuICAgICAgICBpZiAoeCA8IDAuMCkge1xuICAgICAgICAgIHJldHVybiAyLjAgLSBhO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIGVuZFxuXG4gICMgU2luZ2xlIGFyZ3VtZW50IGVxdWl2YWxlbnQgZnVuY3Rpb25zXG4gICVpW1xuICAgIGFjb3MgYWNvc2ggYXNpbiBhc2luaCBhdGFuIGF0YW5oIGNicnRcbiAgICBjb3MgY29zaCBlcmYgZXJmYyBleHAgc2luIHNpbmggc3FydCB0YW5oXG4gIF0uZWFjaCBkbyB8bWV0aG9kfFxuICAgIGRlZmluZV9tZXRob2QgbWV0aG9kIGRvIHx4fFxuICAgICAgOjpNYXRoLmNoZWNrZWQgbWV0aG9kLCA6Ok1hdGguZmxvYXQhKHgpXG4gICAgZW5kXG4gIGVuZFxuXG4gIGRlZiBhdGFuMih5LCB4KVxuICAgIDo6TWF0aC5jaGVja2VkIDphdGFuMiwgOjpNYXRoLmZsb2F0ISh5KSwgOjpNYXRoLmZsb2F0ISh4KVxuICBlbmRcblxuICBkZWYgaHlwb3QoeCwgeSlcbiAgICA6Ok1hdGguY2hlY2tlZCA6aHlwb3QsIDo6TWF0aC5mbG9hdCEoeCksIDo6TWF0aC5mbG9hdCEoeSlcbiAgZW5kXG5cbiAgZGVmIGZyZXhwKHgpXG4gICAgeCA9IE1hdGguZmxvYXQhKHgpXG5cbiAgICAleHtcbiAgICAgIGlmIChpc05hTih4KSkge1xuICAgICAgICByZXR1cm4gW05hTiwgMF07XG4gICAgICB9XG5cbiAgICAgIHZhciBleCAgID0gTWF0aC5mbG9vcihNYXRoLmxvZyhNYXRoLmFicyh4KSkgLyBNYXRoLmxvZygyKSkgKyAxLFxuICAgICAgICAgIGZyYWMgPSB4IC8gTWF0aC5wb3coMiwgZXgpO1xuXG4gICAgICByZXR1cm4gW2ZyYWMsIGV4XTtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBnYW1tYShuKVxuICAgIG4gPSBNYXRoLmZsb2F0IShuKVxuXG4gICAgJXh7XG4gICAgICB2YXIgaSwgdCwgeCwgdmFsdWUsIHJlc3VsdCwgdHdvTiwgdGhyZWVOLCBmb3VyTiwgZml2ZU47XG5cbiAgICAgIHZhciBHID0gNC43NDIxODc1O1xuXG4gICAgICB2YXIgUCA9IFtcbiAgICAgICAgIDAuOTk5OTk5OTk5OTk5OTk3MDkxODIsXG4gICAgICAgICA1Ny4xNTYyMzU2NjU4NjI5MjM1MTcsXG4gICAgICAgIC01OS41OTc5NjAzNTU0NzU0OTEyNDgsXG4gICAgICAgICAxNC4xMzYwOTc5NzQ3NDE3NDcxNzQsXG4gICAgICAgIC0wLjQ5MTkxMzgxNjA5NzYyMDE5OTc4LFxuICAgICAgICAgMC4zMzk5NDY0OTk4NDgxMTg4ODY5OWUtNCxcbiAgICAgICAgIDAuNDY1MjM2Mjg5MjcwNDg1NzU2NjVlLTQsXG4gICAgICAgIC0wLjk4Mzc0NDc1MzA0ODc5NTY0Njc3ZS00LFxuICAgICAgICAgMC4xNTgwODg3MDMyMjQ5MTI0ODg4NGUtMyxcbiAgICAgICAgLTAuMjEwMjY0NDQxNzI0MTA0ODgzMTllLTMsXG4gICAgICAgICAwLjIxNzQzOTYxODExNTIxMjY0MzIwZS0zLFxuICAgICAgICAtMC4xNjQzMTgxMDY1MzY3NjM4OTAyMmUtMyxcbiAgICAgICAgIDAuODQ0MTgyMjM5ODM4NTI3NDMyOTNlLTQsXG4gICAgICAgIC0wLjI2MTkwODM4NDAxNTgxNDA4NjcwZS00LFxuICAgICAgICAgMC4zNjg5OTE4MjY1OTUzMTYyMjcwNGUtNVxuICAgICAgXTtcblxuXG4gICAgICBpZiAoaXNOYU4obikpIHtcbiAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgIH1cblxuICAgICAgaWYgKG4gPT09IDAgJiYgMSAvIG4gPCAwKSB7XG4gICAgICAgIHJldHVybiAtSW5maW5pdHk7XG4gICAgICB9XG5cbiAgICAgIGlmIChuID09PSAtMSB8fCBuID09PSAtSW5maW5pdHkpIHtcbiAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSBEb21haW5FcnJvciwgJ051bWVyaWNhbCBhcmd1bWVudCBpcyBvdXQgb2YgZG9tYWluIC0gXCJnYW1tYVwiJ307XG4gICAgICB9XG5cbiAgICAgIGlmICgje0ludGVnZXIgPT09IG59KSB7XG4gICAgICAgIGlmIChuIDw9IDApIHtcbiAgICAgICAgICByZXR1cm4gaXNGaW5pdGUobikgPyBJbmZpbml0eSA6IE5hTjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuID4gMTcxKSB7XG4gICAgICAgICAgcmV0dXJuIEluZmluaXR5O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFsdWUgID0gbiAtIDI7XG4gICAgICAgIHJlc3VsdCA9IG4gLSAxO1xuXG4gICAgICAgIHdoaWxlICh2YWx1ZSA+IDEpIHtcbiAgICAgICAgICByZXN1bHQgKj0gdmFsdWU7XG4gICAgICAgICAgdmFsdWUtLTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZXN1bHQgPT0gMCkge1xuICAgICAgICAgIHJlc3VsdCA9IDE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBpZiAobiA8IDAuNSkge1xuICAgICAgICByZXR1cm4gTWF0aC5QSSAvIChNYXRoLnNpbihNYXRoLlBJICogbikgKiAjezo6TWF0aC5nYW1tYSgxIC0gbil9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKG4gPj0gMTcxLjM1KSB7XG4gICAgICAgIHJldHVybiBJbmZpbml0eTtcbiAgICAgIH1cblxuICAgICAgaWYgKG4gPiA4NS4wKSB7XG4gICAgICAgIHR3b04gICA9IG4gKiBuO1xuICAgICAgICB0aHJlZU4gPSB0d29OICogbjtcbiAgICAgICAgZm91ck4gID0gdGhyZWVOICogbjtcbiAgICAgICAgZml2ZU4gID0gZm91ck4gKiBuO1xuXG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoMiAqIE1hdGguUEkgLyBuKSAqIE1hdGgucG93KChuIC8gTWF0aC5FKSwgbikgKlxuICAgICAgICAgICgxICsgMSAvICgxMiAqIG4pICsgMSAvICgyODggKiB0d29OKSAtIDEzOSAvICg1MTg0MCAqIHRocmVlTikgLVxuICAgICAgICAgIDU3MSAvICgyNDg4MzIwICogZm91ck4pICsgMTYzODc5IC8gKDIwOTAxODg4MCAqIGZpdmVOKSArXG4gICAgICAgICAgNTI0NjgxOSAvICg3NTI0Njc5NjgwMCAqIGZpdmVOICogbikpO1xuICAgICAgfVxuXG4gICAgICBuIC09IDE7XG4gICAgICB4ICA9IFBbMF07XG5cbiAgICAgIGZvciAoaSA9IDE7IGkgPCBQLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHggKz0gUFtpXSAvIChuICsgaSk7XG4gICAgICB9XG5cbiAgICAgIHQgPSBuICsgRyArIDAuNTtcblxuICAgICAgcmV0dXJuIE1hdGguc3FydCgyICogTWF0aC5QSSkgKiBNYXRoLnBvdyh0LCBuICsgMC41KSAqIE1hdGguZXhwKC10KSAqIHg7XG4gICAgfVxuICBlbmRcblxuICBkZWYgbGRleHAobWFudGlzc2EsIGV4cG9uZW50KVxuICAgIG1hbnRpc3NhID0gTWF0aC5mbG9hdCEobWFudGlzc2EpXG4gICAgZXhwb25lbnQgPSBNYXRoLmludGVnZXIhKGV4cG9uZW50KVxuXG4gICAgJXh7XG4gICAgICBpZiAoaXNOYU4oZXhwb25lbnQpKSB7XG4gICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpSYW5nZUVycm9yLCAnZmxvYXQgTmFOIG91dCBvZiByYW5nZSBvZiBpbnRlZ2VyJ307XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtYW50aXNzYSAqIE1hdGgucG93KDIsIGV4cG9uZW50KTtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBsZ2FtbWEobilcbiAgICAleHtcbiAgICAgIGlmIChuID09IC0xKSB7XG4gICAgICAgIHJldHVybiBbSW5maW5pdHksIDFdO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBbTWF0aC5sb2coTWF0aC5hYnMoI3s6Ok1hdGguZ2FtbWEobil9KSksICN7OjpNYXRoLmdhbW1hKG4pfSA8IDAgPyAtMSA6IDFdO1xuICAgICAgfVxuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGxvZyh4LCBiYXNlID0gdW5kZWZpbmVkKVxuICAgIGlmIDo6U3RyaW5nID09PSB4XG4gICAgICA6Oktlcm5lbC5yYWlzZSBgJHR5cGVfZXJyb3IoeCwgI3s6OkZsb2F0fSlgXG4gICAgZW5kXG5cbiAgICBpZiBgYmFzZSA9PSBudWxsYFxuICAgICAgOjpNYXRoLmNoZWNrZWQgOmxvZywgOjpNYXRoLmZsb2F0ISh4KVxuICAgIGVsc2VcbiAgICAgIGlmIDo6U3RyaW5nID09PSBiYXNlXG4gICAgICAgIDo6S2VybmVsLnJhaXNlIGAkdHlwZV9lcnJvcihiYXNlLCAjezo6RmxvYXR9KWBcbiAgICAgIGVuZFxuXG4gICAgICA6Ok1hdGguY2hlY2tlZCg6bG9nLCA6Ok1hdGguZmxvYXQhKHgpKSAvIDo6TWF0aC5jaGVja2VkKDpsb2csIDo6TWF0aC5mbG9hdCEoYmFzZSkpXG4gICAgZW5kXG4gIGVuZFxuXG4gIGRlZiBsb2cxMCh4KVxuICAgIGlmIDo6U3RyaW5nID09PSB4XG4gICAgICA6Oktlcm5lbC5yYWlzZSBgJHR5cGVfZXJyb3IoeCwgI3s6OkZsb2F0fSlgXG4gICAgZW5kXG5cbiAgICA6Ok1hdGguY2hlY2tlZCA6bG9nMTAsIDo6TWF0aC5mbG9hdCEoeClcbiAgZW5kXG5cbiAgZGVmIGxvZzIoeClcbiAgICBpZiA6OlN0cmluZyA9PT0geFxuICAgICAgOjpLZXJuZWwucmFpc2UgYCR0eXBlX2Vycm9yKHgsICN7OjpGbG9hdH0pYFxuICAgIGVuZFxuXG4gICAgOjpNYXRoLmNoZWNrZWQgOmxvZzIsIDo6TWF0aC5mbG9hdCEoeClcbiAgZW5kXG5cbiAgZGVmIHRhbih4KVxuICAgIHggPSA6Ok1hdGguZmxvYXQhKHgpXG5cbiAgICBpZiB4LmluZmluaXRlP1xuICAgICAgcmV0dXJuIDo6RmxvYXQ6Ok5BTlxuICAgIGVuZFxuXG4gICAgOjpNYXRoLmNoZWNrZWQgOnRhbiwgOjpNYXRoLmZsb2F0ISh4KVxuICBlbmRcbmVuZFxuIl0sIm5hbWVzIjpbIjx0b3AgKHJlcXVpcmVkKT4iLCI8bW9kdWxlOk1hdGg+Iiwic2VsZiIsIkNsYXNzIiwibmV3IiwiU3RhbmRhcmRFcnJvciIsImNoZWNrZWQiLCJtZXRob2QiLCJLZXJuZWwiLCJyYWlzZSIsIkRvbWFpbkVycm9yIiwiZmxvYXQhIiwidmFsdWUiLCJGbG9hdCIsIkFyZ3VtZW50RXJyb3IiLCJpbnRlZ2VyISIsIkludGVnZXIiLCJtb2R1bGVfZnVuY3Rpb24iLCJlYWNoIiwiYmxvY2sgaW4gPG1vZHVsZTpNYXRoPiIsImJsb2NrICgyIGxldmVscykgaW4gPG1vZHVsZTpNYXRoPiIsImRlZmluZV9tZXRob2QiLCJ4IiwiYmxvY2sgKDMgbGV2ZWxzKSBpbiA8bW9kdWxlOk1hdGg+IiwiTWF0aCIsImF0YW4yIiwieSIsImh5cG90IiwiZnJleHAiLCJnYW1tYSIsIm4iLCI9PT0iLCItIiwiMSIsImxkZXhwIiwibWFudGlzc2EiLCJleHBvbmVudCIsIlJhbmdlRXJyb3IiLCJsZ2FtbWEiLCJsb2ciLCJiYXNlIiwiU3RyaW5nIiwiLyIsImxvZzEwIiwibG9nMiIsInRhbiIsImluZmluaXRlPyIsIkZsb2F0OjpOQU4iXSwibWFwcGluZ3MiOiJBQUFBQSwrQkFBQUEsZ0JBQUFBO0VBQUFBOztFQUFBQTtFQUVBQSxPQUFBQztFQUFBQTs7SUFBQUE7OztJQUNFLFdBQUFDLElBQUEsT0FBWUQsTUFBWjtJQUNBLFdBQUFDLElBQUEsUUFBWUQsT0FBWjtJQUVBLFdBQUFDLElBQUEsaUJBQW9CQyxNQUFPQyxLQUFBQSxDQUFLQyxvQkFBTEQsQ0FBM0I7SUFFQUUsTUFBSUosSUFBSkksY0FBQUEsbUJBQWlCQyxNQUFELEVBUmxCLEVBUUVEO0FBQUFBLE1BQUFBOzs7TUFSRjtNQVEyQjs7QUFFM0JBO0FBQ0FBO0FBQ0FBOztBQUVBQTs7QUFFQUE7QUFDQUEsUUFBVUUsT0FBUUMsT0FBQUEsQ0FBT0MsaUJBQWYsRUFBNkJKLDBDQUFELEdBQUEsQ0FBMkNDLE1BQTNDLENBQUEsR0FBa0RELElBQXRFRyxDQUEwRUg7QUFDNUZBOztBQUVBQTtBQUNBQTtJQWJFQSxDQUFBQSxJQUFBQTtJQWdCQUssTUFBSVQsSUFBSlMsYUFBQUEsNEJBQWdCQyxLQUFoQkQ7QUFBQUE7TUFDRTtRQUFBQSxPQUFBSCxPQUFRSyxPQUFBQSxDQUFPRCxLQUFQQztNQUFSO1FBQ0Ysc0JBQU8sQ0FBQUMsb0JBQUEsQ0FBUDtVQUFBO1lBQ0VILE9BQUFILE9BQVFDLE9BQUFBLENBQVFFLG1CQUFxQkUsWUFBUUYsQ0FBckNGO1VBRFY7UUFBQSxDQURFO01BQUE7SUFERkUsQ0FBQUEsR0FBQUE7SUFNQUksTUFBSWIsSUFBSmEsZUFBQUEsOEJBQWtCSCxLQUFsQkc7QUFBQUE7TUFDRTtRQUFBQSxPQUFBUCxPQUFRUSxTQUFBQSxDQUFTSixLQUFUSTtNQUFSO1FBQ0Ysc0JBQU8sQ0FBQUYsb0JBQUEsQ0FBUDtVQUFBO1lBQ0VDLE9BQUFQLE9BQVFDLE9BQUFBLENBQV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EsQ0FBSixDQUFBO1FBQ0UsT0FBT0MsSUFBQWxDLFlBQUFrQztNQURUO01BSUFGLE9BQUFyQixXQUFNbEIsU0FBQUEsQ0FBUyxLQUFmLEVBQXFCa0IsV0FBTWIsV0FBQUEsQ0FBUVcsQ0FBUlgsQ0FBckJMO0lBUFJ1QyxDQUFBQSxHQUFBQTtFQXBSRjVDLEdBQU8sSUFBUEE7QUFGQUQ7In19LHsib2Zmc2V0Ijp7ImxpbmUiOjk3NTYsImNvbHVtbiI6MH0sIm1hcCI6eyJ2ZXJzaW9uIjozLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb3JlbGliL3JhbmRvbS9mb3JtYXR0ZXIucmIiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgOjpSYW5kb21cbiAgbW9kdWxlIHNlbGY6OkZvcm1hdHRlclxuICAgIGRlZiBoZXgoY291bnQgPSBuaWwpXG4gICAgICBjb3VudCA9IDo6UmFuZG9tLl92ZXJpZnlfY291bnQoY291bnQpXG4gICAgICAleHtcbiAgICAgICAgdmFyIGJ5dGVzID0gI3tieXRlcyhjb3VudCl9O1xuICAgICAgICB2YXIgb3V0ID0gXCJcIjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAje2NvdW50fTsgaSsrKSB7XG4gICAgICAgICAgb3V0ICs9IGJ5dGVzLmNoYXJDb2RlQXQoaSkudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICN7YG91dGAuZW5jb2RlKCdVUy1BU0NJSScpfTtcbiAgICAgIH1cbiAgICBlbmRcblxuICAgIGRlZiByYW5kb21fYnl0ZXMoY291bnQgPSBuaWwpXG4gICAgICBieXRlcyhjb3VudClcbiAgICBlbmRcblxuICAgIGRlZiBiYXNlNjQoY291bnQgPSBuaWwpXG4gICAgICA6OkJhc2U2NC5zdHJpY3RfZW5jb2RlNjQocmFuZG9tX2J5dGVzKGNvdW50KSkuZW5jb2RlKCdVUy1BU0NJSScpXG4gICAgZW5kXG5cbiAgICBkZWYgdXJsc2FmZV9iYXNlNjQoY291bnQgPSBuaWwsIHBhZGRpbmcgPSBmYWxzZSlcbiAgICAgIDo6QmFzZTY0LnVybHNhZmVfZW5jb2RlNjQocmFuZG9tX2J5dGVzKGNvdW50KSwgcGFkZGluZykuZW5jb2RlKCdVUy1BU0NJSScpXG4gICAgZW5kXG5cbiAgICBkZWYgdXVpZFxuICAgICAgc3RyID0gaGV4KDE2KS5zcGxpdCgnJylcbiAgICAgIHN0clsxMl0gPSAnNCdcbiAgICAgIHN0clsxNl0gPSBgKHBhcnNlSW50KCN7c3RyWzE2XX0sIDE2KSAmIDMgfCA4KS50b1N0cmluZygxNilgXG4gICAgICBzdHIgPSBbc3RyWzAuLi44XSwgc3RyWzguLi4xMl0sIHN0clsxMi4uLjE2XSwgc3RyWzE2Li4uMjBdLCBzdHJbMjAuLi4zMl1dXG4gICAgICBzdHIgPSBzdHIubWFwKCY6am9pbilcbiAgICAgIHN0ci5qb2luKCctJylcbiAgICBlbmRcblxuICAgICMgSW1wbGVtZW50ZWQgaW4gdGVybXMgb2YgYCNieXRlc2AgZm9yIFNlY3VyZVJhbmRvbSwgYnV0IFJhbmRvbSBvdmVycmlkZXMgdGhpc1xuICAgICMgbWV0aG9kIHRvIGltcGxlbWVudCBgI2J5dGVzYCBpbiB0ZXJtcyBvZiBgI3JhbmRvbV9mbG9hdGAuIE5vdCBwYXJ0IG9mIHN0YW5kYXJkXG4gICAgIyBSdWJ5IGludGVyZmFjZSAtIHVzZSByYW5kb21fbnVtYmVyIGZvciBwb3J0YWJpbGl0eS5cbiAgICBkZWYgcmFuZG9tX2Zsb2F0XG4gICAgICBicyA9IGJ5dGVzKDQpXG4gICAgICBudW0gPSAwXG4gICAgICA0LnRpbWVzIGRvIHxpfFxuICAgICAgICBudW0gPDw9IDhcbiAgICAgICAgbnVtIHw9IGJzW2ldLm9yZFxuICAgICAgZW5kXG4gICAgICBudW0uYWJzIC8gMHg3ZmZmZmZmZlxuICAgIGVuZFxuXG4gICAgZGVmIHJhbmRvbV9udW1iZXIobGltaXQgPSB1bmRlZmluZWQpXG4gICAgICAleHtcbiAgICAgICAgZnVuY3Rpb24gcmFuZG9tRmxvYXQoKSB7XG4gICAgICAgICAgcmV0dXJuICN7cmFuZG9tX2Zsb2F0fTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJhbmRvbUludChtYXgpIHtcbiAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihyYW5kb21GbG9hdCgpICogbWF4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJhbmRvbVJhbmdlKCkge1xuICAgICAgICAgIHZhciBtaW4gPSBsaW1pdC5iZWdpbixcbiAgICAgICAgICAgICAgbWF4ID0gbGltaXQuZW5kO1xuXG4gICAgICAgICAgaWYgKG1pbiA9PT0gbmlsIHx8IG1heCA9PT0gbmlsKSB7XG4gICAgICAgICAgICByZXR1cm4gbmlsO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBsZW5ndGggPSBtYXggLSBtaW47XG5cbiAgICAgICAgICBpZiAobGVuZ3RoIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIG5pbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbWluO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChtYXggJSAxID09PSAwICYmIG1pbiAlIDEgPT09IDAgJiYgIWxpbWl0LmV4Y2wpIHtcbiAgICAgICAgICAgIGxlbmd0aCsrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiByYW5kb21JbnQobGVuZ3RoKSArIG1pbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaW1pdCA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIHJhbmRvbUZsb2F0KCk7XG4gICAgICAgIH0gZWxzZSBpZiAobGltaXQuJCRpc19yYW5nZSkge1xuICAgICAgICAgIHJldHVybiByYW5kb21SYW5nZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKGxpbWl0LiQkaXNfbnVtYmVyKSB7XG4gICAgICAgICAgaWYgKGxpbWl0IDw9IDApIHtcbiAgICAgICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCBcImludmFsaWQgYXJndW1lbnQgLSAje2xpbWl0fVwifVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChsaW1pdCAlIDEgPT09IDApIHtcbiAgICAgICAgICAgIC8vIGludGVnZXJcbiAgICAgICAgICAgIHJldHVybiByYW5kb21JbnQobGltaXQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcmFuZG9tRmxvYXQoKSAqIGxpbWl0O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsaW1pdCA9ICN7OjpPcGFsLmNvZXJjZV90byEobGltaXQsIDo6SW50ZWdlciwgOnRvX2ludCl9O1xuXG4gICAgICAgICAgaWYgKGxpbWl0IDw9IDApIHtcbiAgICAgICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCBcImludmFsaWQgYXJndW1lbnQgLSAje2xpbWl0fVwifVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiByYW5kb21JbnQobGltaXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgZW5kXG5cbiAgICBkZWYgYWxwaGFudW1lcmljKGNvdW50ID0gbmlsKVxuICAgICAgY291bnQgPSBSYW5kb20uX3ZlcmlmeV9jb3VudChjb3VudClcbiAgICAgIG1hcCA9IFsnMCcuLic5JywgJ2EnLi4neicsICdBJy4uJ1onXS5tYXAoJjp0b19hKS5mbGF0dGVuXG4gICAgICA6OkFycmF5Lm5ldyhjb3VudCkgZG8gfGl8XG4gICAgICAgIG1hcFtyYW5kb21fbnVtYmVyKG1hcC5sZW5ndGgpXVxuICAgICAgZW5kLmpvaW5cbiAgICBlbmRcbiAgZW5kXG5cbiAgaW5jbHVkZSA6OlJhbmRvbTo6Rm9ybWF0dGVyXG4gIGV4dGVuZCA6OlJhbmRvbTo6Rm9ybWF0dGVyXG5lbmRcbiJdLCJuYW1lcyI6WyI8dG9wIChyZXF1aXJlZCk+IiwiPGNsYXNzOlJhbmRvbT4iLCI8bW9kdWxlOnNlbGY6OkZvcm1hdHRlcj4iLCJoZXgiLCJjb3VudCIsIlJhbmRvbSIsIl92ZXJpZnlfY291bnQiLCJzZWxmIiwiYnl0ZXMiLCJlbmNvZGUiLCJyYW5kb21fYnl0ZXMiLCJiYXNlNjQiLCJCYXNlNjQiLCJzdHJpY3RfZW5jb2RlNjQiLCJ1cmxzYWZlX2Jhc2U2NCIsInBhZGRpbmciLCJ1cmxzYWZlX2VuY29kZTY0IiwidXVpZCIsInN0ciIsIjE2Iiwic3BsaXQiLCJbXT0iLCIxMiIsIltdIiwiMCIsIjgiLCIyMCIsIjMyIiwibWFwIiwidG9fcHJvYyIsImpvaW4iLCJyYW5kb21fZmxvYXQiLCJicyIsIjQiLCJudW0iLCJ0aW1lcyIsImJsb2NrIGluIHJhbmRvbV9mbG9hdCIsImkiLCI8PCIsImJsb2NrICgyIGxldmVscykgaW4gcmFuZG9tX2Zsb2F0IiwifCIsIm9yZCIsIi8iLCJhYnMiLCIyMTQ3NDgzNjQ3IiwicmFuZG9tX251bWJlciIsImxpbWl0IiwiS2VybmVsIiwicmFpc2UiLCJBcmd1bWVudEVycm9yIiwiT3BhbCIsImNvZXJjZV90byEiLCJJbnRlZ2VyIiwiYWxwaGFudW1lcmljIiwiZmxhdHRlbiIsIm5ldyIsIkFycmF5IiwiYmxvY2sgaW4gYWxwaGFudW1lcmljIiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiBhbHBoYW51bWVyaWMiLCJsZW5ndGgiLCJpbmNsdWRlIiwiUmFuZG9tOjpGb3JtYXR0ZXIiLCJleHRlbmQiXSwibWFwcGluZ3MiOiJBQUFBQSwyQ0FBQUEsZ0JBQUFBO0VBQUFBOztFQUFBQTtFQUFBQSxPQUFBQztFQUFBQTs7SUFBQUE7OztJQUNFQztJQUFBQTs7TUFBQUE7Ozs7QUFDRUMsTUFBQUEsbUJBQUFBLGVBQVFDLEtBQVJEO0FBQUFBLFFBQUFBOzs7UUFBUSwyQkFBUTtRQUNkQyxRQUFRQyxhQUFRQyxlQUFBQSxDQUFlRixLQUFmRTs7QUFFdEJILG9CQUFzQkksSUFBQUMsT0FBQUEsQ0FBTUosS0FBTkksQ0FBYUw7QUFDbkNBO0FBQ0FBLDRCQUE4QkMsS0FBTUQ7QUFDcENBO0FBQ0FBO0FBQ0FBLGVBQWlCQSxDQUFDQSxHQUFEQSxDQUFLTSxRQUFBQS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EsSUFBQUE7SUE3R0ZuRCxHQUFPSyxJQUFQTDtJQXNIQUssSUFBQXFELFNBQUFBLENBQVFDLElBQUF4RCxhQUFBd0QsY0FBUkQ7SUFDQTNELE9BQUFNLElBQUF1RCxRQUFBQSxDQUFPRCxJQUFBeEQsYUFBQXdELGNBQVBDO0VBeEhGN0QsR0FBTSxJQUFOQSxFQUFBQSxJQUFBQTtBQUFBRDsifX0seyJvZmZzZXQiOnsibGluZSI6OTkyNCwiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm9wYWwvbWluaS5yYiJdLCJzb3VyY2VzQ29udGVudCI6WyI6Ok9iamVjdC5yZXF1aXJlICdvcGFsL2Jhc2UnXG5cbjo6T2JqZWN0LnJlcXVpcmUgJ2NvcmVsaWIvbmlsJ1xuOjpPYmplY3QucmVxdWlyZSAnY29yZWxpYi9ib29sZWFuJ1xuOjpPYmplY3QucmVxdWlyZSAnY29yZWxpYi9zdHJpbmcnXG46Ok9iamVjdC5yZXF1aXJlICdjb3JlbGliL2NvbXBhcmFibGUnXG46Ok9iamVjdC5yZXF1aXJlICdjb3JlbGliL2VudW1lcmFibGUnXG46Ok9iamVjdC5yZXF1aXJlICdjb3JlbGliL2VudW1lcmF0b3InXG46Ok9iamVjdC5yZXF1aXJlICdjb3JlbGliL2FycmF5J1xuOjpPYmplY3QucmVxdWlyZSAnY29yZWxpYi9oYXNoJ1xuOjpPYmplY3QucmVxdWlyZSAnY29yZWxpYi9udW1iZXInXG46Ok9iamVjdC5yZXF1aXJlICdjb3JlbGliL3JhbmdlJ1xuOjpPYmplY3QucmVxdWlyZSAnY29yZWxpYi9wcm9jJ1xuOjpPYmplY3QucmVxdWlyZSAnY29yZWxpYi9tZXRob2QnXG46Ok9iamVjdC5yZXF1aXJlICdjb3JlbGliL3JlZ2V4cCdcbjo6T2JqZWN0LnJlcXVpcmUgJ2NvcmVsaWIvdmFyaWFibGVzJ1xuOjpPYmplY3QucmVxdWlyZSAnY29yZWxpYi9pbydcbjo6T2JqZWN0LnJlcXVpcmUgJ29wYWwvcmVnZXhwX2FuY2hvcnMnXG4iXSwibmFtZXMiOlsiPHRvcCAocmVxdWlyZWQpPiIsIk9iamVjdCIsInJlcXVpcmUiXSwibWFwcGluZ3MiOiJBQUFBQSw0QkFBQUEsZ0JBQUFBO0VBQUFBOztFQUFBQTs7RUFBQUMsT0FBUUMsU0FBQUEsQ0FBU0YsV0FBVEU7RUFFUkQsT0FBUUMsU0FBQUEsQ0FBU0YsYUFBVEU7RUFDUkQsT0FBUUMsU0FBQUEsQ0FBU0YsaUJBQVRFO0VBQ1JELE9BQVFDLFNBQUFBLENBQVNGLGdCQUFURTtFQUNSRCxPQUFRQyxTQUFBQSxDQUFTRixvQkFBVEU7RUFDUkQsT0FBUUMsU0FBQUEsQ0FBU0Ysb0JBQVRFO0VBQ1JELE9BQVFDLFNBQUFBLENBQVNGLG9CQUFURTtFQUNSRCxPQUFRQyxTQUFBQSxDQUFTRixlQUFURTtFQUNSRCxPQUFRQyxTQUFBQSxDQUFTRixjQUFURTtFQUNSRCxPQUFRQyxTQUFBQSxDQUFTRixnQkFBVEU7RUFDUkQsT0FBUUMsU0FBQUEsQ0FBU0YsZUFBVEU7RUFDUkQsT0FBUUMsU0FBQUEsQ0FBU0YsY0FBVEU7RUFDUkQsT0FBUUMsU0FBQUEsQ0FBU0YsZ0JBQVRFO0VBQ1JELE9BQVFDLFNBQUFBLENBQVNGLGdCQUFURTtFQUNSRCxPQUFRQyxTQUFBQSxDQUFTRixtQkFBVEU7RUFDUkQsT0FBUUMsU0FBQUEsQ0FBU0YsWUFBVEU7RUFDUkYsT0FBQUMsT0FBUUMsU0FBQUEsQ0FBU0YscUJBQVRFO0FBakJSRjsifX0seyJvZmZzZXQiOnsibGluZSI6OTk0OCwiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvcmVsaWIvZW51bWVyYWJsZS5yYiJdLCJzb3VyY2VzQ29udGVudCI6WyIjIGhlbHBlcnM6IHRydXRoeSwgY29lcmNlX3RvLCB5aWVsZDEsIHlpZWxkWCwgZGVueV9mcm96ZW5fYWNjZXNzXG5cbm1vZHVsZSA6OkVudW1lcmFibGVcbiAgJXh7XG4gICAgZnVuY3Rpb24gY29tcGFyYWJsZUZvclBhdHRlcm4odmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdmFsdWUgPSBbbmlsXTtcbiAgICAgIH1cblxuICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdmFsdWUgPSBbdmFsdWVdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgZGVmIGFsbD8ocGF0dGVybiA9IHVuZGVmaW5lZCwgJmJsb2NrKVxuICAgIGlmIGBwYXR0ZXJuICE9PSB1bmRlZmluZWRgXG4gICAgICBlYWNoIGRvIHwqdmFsdWV8XG4gICAgICAgIGNvbXBhcmFibGUgPSBgY29tcGFyYWJsZUZvclBhdHRlcm4odmFsdWUpYFxuXG4gICAgICAgIHJldHVybiBmYWxzZSB1bmxlc3MgcGF0dGVybi5wdWJsaWNfc2VuZCg6PT09LCAqY29tcGFyYWJsZSlcbiAgICAgIGVuZFxuICAgIGVsc2lmIGJsb2NrX2dpdmVuP1xuICAgICAgZWFjaCBkbyB8KnZhbHVlfFxuICAgICAgICB1bmxlc3MgeWllbGQoKnZhbHVlKVxuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICBlbmRcbiAgICAgIGVuZFxuICAgIGVsc2VcbiAgICAgIGVhY2ggZG8gfCp2YWx1ZXxcbiAgICAgICAgdW5sZXNzIDo6T3BhbC5kZXN0cnVjdHVyZSh2YWx1ZSlcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgZW5kXG4gICAgICBlbmRcbiAgICBlbmRcblxuICAgIHRydWVcbiAgZW5kXG5cbiAgZGVmIGFueT8ocGF0dGVybiA9IHVuZGVmaW5lZCwgJmJsb2NrKVxuICAgIGlmIGBwYXR0ZXJuICE9PSB1bmRlZmluZWRgXG4gICAgICBlYWNoIGRvIHwqdmFsdWV8XG4gICAgICAgIGNvbXBhcmFibGUgPSBgY29tcGFyYWJsZUZvclBhdHRlcm4odmFsdWUpYFxuXG4gICAgICAgIHJldHVybiB0cnVlIGlmIHBhdHRlcm4ucHVibGljX3NlbmQoOj09PSwgKmNvbXBhcmFibGUpXG4gICAgICBlbmRcbiAgICBlbHNpZiBibG9ja19naXZlbj9cbiAgICAgIGVhY2ggZG8gfCp2YWx1ZXxcbiAgICAgICAgaWYgeWllbGQoKnZhbHVlKVxuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIGVuZFxuICAgICAgZW5kXG4gICAgZWxzZVxuICAgICAgZWFjaCBkbyB8KnZhbHVlfFxuICAgICAgICBpZiA6Ok9wYWwuZGVzdHJ1Y3R1cmUodmFsdWUpXG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgZW5kXG4gICAgICBlbmRcbiAgICBlbmRcblxuICAgIGZhbHNlXG4gIGVuZFxuXG4gIGRlZiBjaHVuaygmYmxvY2spXG4gICAgcmV0dXJuIHRvX2VudW0oOmNodW5rKSB7IGVudW1lcmF0b3Jfc2l6ZSB9IHVubGVzcyBibG9ja19naXZlbj9cblxuICAgIDo6RW51bWVyYXRvci5uZXcgZG8gfHlpZWxkZXJ8XG4gICAgICAleHtcbiAgICAgICAgdmFyIHByZXZpb3VzID0gbmlsLCBhY2N1bXVsYXRlID0gW107XG5cbiAgICAgICAgZnVuY3Rpb24gcmVsZWFzZUFjY3VtdWxhdGUoKSB7XG4gICAgICAgICAgaWYgKGFjY3VtdWxhdGUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgI3t5aWVsZGVyLnlpZWxkKGBwcmV2aW91c2AsIGBhY2N1bXVsYXRlYCl9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi4kZWFjaC4kJHAgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHZhciBrZXkgPSAkeWllbGQxKGJsb2NrLCB2YWx1ZSk7XG5cbiAgICAgICAgICBpZiAoa2V5ID09PSBuaWwpIHtcbiAgICAgICAgICAgIHJlbGVhc2VBY2N1bXVsYXRlKCk7XG4gICAgICAgICAgICBhY2N1bXVsYXRlID0gW107XG4gICAgICAgICAgICBwcmV2aW91cyA9IG5pbDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHByZXZpb3VzID09PSBuaWwgfHwgcHJldmlvdXMgPT09IGtleSkge1xuICAgICAgICAgICAgICBhY2N1bXVsYXRlLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVsZWFzZUFjY3VtdWxhdGUoKTtcbiAgICAgICAgICAgICAgYWNjdW11bGF0ZSA9IFt2YWx1ZV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHByZXZpb3VzID0ga2V5O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGYuJGVhY2goKTtcblxuICAgICAgICByZWxlYXNlQWNjdW11bGF0ZSgpO1xuICAgICAgfVxuICAgIGVuZFxuICBlbmRcblxuICBkZWYgY2h1bmtfd2hpbGUoJmJsb2NrKVxuICAgIDo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgJ25vIGJsb2NrIGdpdmVuJyB1bmxlc3MgYmxvY2tfZ2l2ZW4/XG5cbiAgICBzbGljZV93aGVuIHsgfGJlZm9yZSwgYWZ0ZXJ8ICEoeWllbGQgYmVmb3JlLCBhZnRlcikgfVxuICBlbmRcblxuICBkZWYgY29sbGVjdCgmYmxvY2spXG4gICAgcmV0dXJuIGVudW1fZm9yKDpjb2xsZWN0KSB7IGVudW1lcmF0b3Jfc2l6ZSB9IHVubGVzcyBibG9ja19naXZlbj9cblxuICAgICV4e1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICBzZWxmLiRlYWNoLiQkcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSAkeWllbGRYKGJsb2NrLCBhcmd1bWVudHMpO1xuXG4gICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgIH07XG5cbiAgICAgIHNlbGYuJGVhY2goKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBjb2xsZWN0X2NvbmNhdCgmYmxvY2spXG4gICAgcmV0dXJuIGVudW1fZm9yKDpjb2xsZWN0X2NvbmNhdCkgeyBlbnVtZXJhdG9yX3NpemUgfSB1bmxlc3MgYmxvY2tfZ2l2ZW4/XG4gICAgbWFwKCZibG9jaykuZmxhdHRlbigxKVxuICBlbmRcblxuICBkZWYgY29tcGFjdFxuICAgIHRvX2EuY29tcGFjdFxuICBlbmRcblxuICBkZWYgY291bnQob2JqZWN0ID0gdW5kZWZpbmVkLCAmYmxvY2spXG4gICAgcmVzdWx0ID0gMFxuXG4gICAgJXh7XG4gICAgICBpZiAob2JqZWN0ICE9IG51bGwgJiYgYmxvY2sgIT09IG5pbCkge1xuICAgICAgICAje3dhcm4oJ3dhcm5pbmc6IGdpdmVuIGJsb2NrIG5vdCB1c2VkJyl9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgYG9iamVjdCAhPSBudWxsYFxuICAgICAgYmxvY2sgPSA6Oktlcm5lbC5wcm9jIGRvIHwqYXJnc3xcbiAgICAgICAgOjpPcGFsLmRlc3RydWN0dXJlKGFyZ3MpID09IG9iamVjdFxuICAgICAgZW5kXG4gICAgZWxzaWYgYmxvY2submlsP1xuICAgICAgYmxvY2sgPSA6Oktlcm5lbC5wcm9jIHsgdHJ1ZSB9XG4gICAgZW5kXG5cbiAgICBlYWNoIGRvIHwqYXJnc3xcbiAgICAgIGByZXN1bHQrK2AgaWYgYCR5aWVsZFgoYmxvY2ssIGFyZ3MpYFxuICAgIGVuZFxuXG4gICAgcmVzdWx0XG4gIGVuZFxuXG4gIGRlZiBjeWNsZShuID0gbmlsLCAmYmxvY2spXG4gICAgdW5sZXNzIGJsb2NrX2dpdmVuP1xuICAgICAgcmV0dXJuIGVudW1fZm9yKDpjeWNsZSwgbikgZG9cbiAgICAgICAgaWYgbi5uaWw/XG4gICAgICAgICAgcmVzcG9uZF90bz8oOnNpemUpID8gOjpGbG9hdDo6SU5GSU5JVFkgOiBuaWxcbiAgICAgICAgZWxzZVxuICAgICAgICAgIG4gPSA6Ok9wYWwuY29lcmNlX3RvIShuLCA6OkludGVnZXIsIDp0b19pbnQpXG4gICAgICAgICAgbiA+IDAgPyBlbnVtZXJhdG9yX3NpemUgKiBuIDogMFxuICAgICAgICBlbmRcbiAgICAgIGVuZFxuICAgIGVuZFxuXG4gICAgdW5sZXNzIG4ubmlsP1xuICAgICAgbiA9IDo6T3BhbC5jb2VyY2VfdG8hIG4sIDo6SW50ZWdlciwgOnRvX2ludFxuXG4gICAgICByZXR1cm4gaWYgYG4gPD0gMGBcbiAgICBlbmRcblxuICAgICV4e1xuICAgICAgdmFyIGFsbCA9IFtdLCBpLCBsZW5ndGgsIHZhbHVlO1xuXG4gICAgICBzZWxmLiRlYWNoLiQkcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcGFyYW0gPSAjezo6T3BhbC5kZXN0cnVjdHVyZShgYXJndW1lbnRzYCl9LFxuICAgICAgICAgICAgdmFsdWUgPSAkeWllbGQxKGJsb2NrLCBwYXJhbSk7XG5cbiAgICAgICAgYWxsLnB1c2gocGFyYW0pO1xuICAgICAgfVxuXG4gICAgICBzZWxmLiRlYWNoKCk7XG5cbiAgICAgIGlmIChhbGwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBuaWw7XG4gICAgICB9XG5cbiAgICAgIGlmIChuID09PSBuaWwpIHtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBhbGwubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhbHVlID0gJHlpZWxkMShibG9jaywgYWxsW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB3aGlsZSAobiA+IDEpIHtcbiAgICAgICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBhbGwubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhbHVlID0gJHlpZWxkMShibG9jaywgYWxsW2ldKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuLS07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBkZXRlY3QoaWZub25lID0gdW5kZWZpbmVkLCAmYmxvY2spXG4gICAgcmV0dXJuIGVudW1fZm9yIDpkZXRlY3QsIGlmbm9uZSB1bmxlc3MgYmxvY2tfZ2l2ZW4/XG5cbiAgICBlYWNoIGRvIHwqYXJnc3xcbiAgICAgIHZhbHVlID0gOjpPcGFsLmRlc3RydWN0dXJlKGFyZ3MpXG4gICAgICBpZiB5aWVsZCh2YWx1ZSlcbiAgICAgICAgcmV0dXJuIHZhbHVlXG4gICAgICBlbmRcbiAgICBlbmRcblxuICAgICV4e1xuICAgICAgaWYgKGlmbm9uZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICh0eXBlb2YoaWZub25lKSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBpZm5vbmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gaWZub25lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgbmlsXG4gIGVuZFxuXG4gIGRlZiBkcm9wKG51bWJlcilcbiAgICBudW1iZXIgPSBgJGNvZXJjZV90byhudW1iZXIsICN7OjpJbnRlZ2VyfSwgJ3RvX2ludCcpYFxuXG4gICAgaWYgYG51bWJlciA8IDBgXG4gICAgICA6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsICdhdHRlbXB0IHRvIGRyb3AgbmVnYXRpdmUgc2l6ZSdcbiAgICBlbmRcblxuICAgICV4e1xuICAgICAgdmFyIHJlc3VsdCAgPSBbXSxcbiAgICAgICAgICBjdXJyZW50ID0gMDtcblxuICAgICAgc2VsZi4kZWFjaC4kJHAgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKG51bWJlciA8PSBjdXJyZW50KSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goI3s6Ok9wYWwuZGVzdHJ1Y3R1cmUoYGFyZ3VtZW50c2ApfSk7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50Kys7XG4gICAgICB9O1xuXG4gICAgICBzZWxmLiRlYWNoKClcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBkcm9wX3doaWxlKCZibG9jaylcbiAgICByZXR1cm4gZW51bV9mb3IgOmRyb3Bfd2hpbGUgdW5sZXNzIGJsb2NrX2dpdmVuP1xuXG4gICAgJXh7XG4gICAgICB2YXIgcmVzdWx0ICAgPSBbXSxcbiAgICAgICAgICBkcm9wcGluZyA9IHRydWU7XG5cbiAgICAgIHNlbGYuJGVhY2guJCRwID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBwYXJhbSA9ICN7OjpPcGFsLmRlc3RydWN0dXJlKGBhcmd1bWVudHNgKX07XG5cbiAgICAgICAgaWYgKGRyb3BwaW5nKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gJHlpZWxkMShibG9jaywgcGFyYW0pO1xuXG4gICAgICAgICAgaWYgKCEkdHJ1dGh5KHZhbHVlKSkge1xuICAgICAgICAgICAgZHJvcHBpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHBhcmFtKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2gocGFyYW0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBzZWxmLiRlYWNoKCk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICBlbmRcblxuICBkZWYgZWFjaF9jb25zKG4sICZibG9jaylcbiAgICBpZiBgYXJndW1lbnRzLmxlbmd0aCAhPSAxYFxuICAgICAgOjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCBcIndyb25nIG51bWJlciBvZiBhcmd1bWVudHMgKCN7YGFyZ3VtZW50cy5sZW5ndGhgfSBmb3IgMSlcIlxuICAgIGVuZFxuXG4gICAgbiA9IDo6T3BhbC50cnlfY29udmVydCBuLCA6OkludGVnZXIsIDp0b19pbnRcblxuICAgIGlmIGBuIDw9IDBgXG4gICAgICA6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsICdpbnZhbGlkIHNpemUnXG4gICAgZW5kXG5cbiAgICB1bmxlc3MgYmxvY2tfZ2l2ZW4/XG4gICAgICByZXR1cm4gZW51bV9mb3IoOmVhY2hfY29ucywgbikgZG9cbiAgICAgICAgZW51bV9zaXplID0gZW51bWVyYXRvcl9zaXplXG4gICAgICAgIGlmIGVudW1fc2l6ZS5uaWw/XG4gICAgICAgICAgbmlsXG4gICAgICAgIGVsc2lmIGVudW1fc2l6ZSA9PSAwIHx8IGVudW1fc2l6ZSA8IG5cbiAgICAgICAgICAwXG4gICAgICAgIGVsc2VcbiAgICAgICAgICBlbnVtX3NpemUgLSBuICsgMVxuICAgICAgICBlbmRcbiAgICAgIGVuZFxuICAgIGVuZFxuXG4gICAgJXh7XG4gICAgICB2YXIgYnVmZmVyID0gW107XG5cbiAgICAgIHNlbGYuJGVhY2guJCRwID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gI3s6Ok9wYWwuZGVzdHJ1Y3R1cmUoYGFyZ3VtZW50c2ApfTtcbiAgICAgICAgYnVmZmVyLnB1c2goZWxlbWVudCk7XG4gICAgICAgIGlmIChidWZmZXIubGVuZ3RoID4gbikge1xuICAgICAgICAgIGJ1ZmZlci5zaGlmdCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChidWZmZXIubGVuZ3RoID09IG4pIHtcbiAgICAgICAgICAkeWllbGQxKGJsb2NrLCBidWZmZXIuc2xpY2UoMCwgbikpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHNlbGYuJGVhY2goKTtcblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfVxuICBlbmRcblxuICBkZWYgZWFjaF9lbnRyeSgqZGF0YSwgJmJsb2NrKVxuICAgIHVubGVzcyBibG9ja19naXZlbj9cbiAgICAgIHJldHVybiB0b19lbnVtKDplYWNoX2VudHJ5LCAqZGF0YSkgeyBlbnVtZXJhdG9yX3NpemUgfVxuICAgIGVuZFxuXG4gICAgJXh7XG4gICAgICBzZWxmLiRlYWNoLiQkcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaXRlbSA9ICN7OjpPcGFsLmRlc3RydWN0dXJlKGBhcmd1bWVudHNgKX07XG5cbiAgICAgICAgJHlpZWxkMShibG9jaywgaXRlbSk7XG4gICAgICB9XG5cbiAgICAgIHNlbGYuJGVhY2guYXBwbHkoc2VsZiwgZGF0YSk7XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGVhY2hfc2xpY2UobiwgJmJsb2NrKVxuICAgIG4gPSBgJGNvZXJjZV90bygje259LCAjezo6SW50ZWdlcn0sICd0b19pbnQnKWBcblxuICAgIGlmIGBuIDw9IDBgXG4gICAgICA6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsICdpbnZhbGlkIHNsaWNlIHNpemUnXG4gICAgZW5kXG5cbiAgICByZXR1cm4gZW51bV9mb3IoOmVhY2hfc2xpY2UsIG4pIHsgcmVzcG9uZF90bz8oOnNpemUpID8gKHNpemUgLyBuKS5jZWlsIDogbmlsIH0gdW5sZXNzIGJsb2NrX2dpdmVuP1xuXG4gICAgJXh7XG4gICAgICB2YXIgc2xpY2UgPSBbXVxuXG4gICAgICBzZWxmLiRlYWNoLiQkcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcGFyYW0gPSAjezo6T3BhbC5kZXN0cnVjdHVyZShgYXJndW1lbnRzYCl9O1xuXG4gICAgICAgIHNsaWNlLnB1c2gocGFyYW0pO1xuXG4gICAgICAgIGlmIChzbGljZS5sZW5ndGggPT09IG4pIHtcbiAgICAgICAgICAkeWllbGQxKGJsb2NrLCBzbGljZSk7XG4gICAgICAgICAgc2xpY2UgPSBbXTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgc2VsZi4kZWFjaCgpO1xuXG4gICAgICAvLyBvdXIgXCJsYXN0XCIgZ3JvdXAsIGlmIHNtYWxsZXIgdGhhbiBuIHRoZW4gd29uJ3QgaGF2ZSBiZWVuIHlpZWxkZWRcbiAgICAgIGlmIChzbGljZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICR5aWVsZDEoYmxvY2ssIHNsaWNlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzZWxmXG4gIGVuZFxuXG4gIGRlZiBlYWNoX3dpdGhfaW5kZXgoKmFyZ3MsICZibG9jaylcbiAgICByZXR1cm4gZW51bV9mb3IoOmVhY2hfd2l0aF9pbmRleCwgKmFyZ3MpIHsgZW51bWVyYXRvcl9zaXplIH0gdW5sZXNzIGJsb2NrX2dpdmVuP1xuXG4gICAgJXh7XG4gICAgICB2YXIgaW5kZXggPSAwO1xuXG4gICAgICBzZWxmLiRlYWNoLiQkcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcGFyYW0gPSAjezo6T3BhbC5kZXN0cnVjdHVyZShgYXJndW1lbnRzYCl9O1xuXG4gICAgICAgIGJsb2NrKHBhcmFtLCBpbmRleCk7XG5cbiAgICAgICAgaW5kZXgrKztcbiAgICAgIH07XG5cbiAgICAgIHNlbGYuJGVhY2guYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgfVxuXG4gICAgc2VsZlxuICBlbmRcblxuICBkZWYgZWFjaF93aXRoX29iamVjdChvYmplY3QsICZibG9jaylcbiAgICByZXR1cm4gZW51bV9mb3IoOmVhY2hfd2l0aF9vYmplY3QsIG9iamVjdCkgeyBlbnVtZXJhdG9yX3NpemUgfSB1bmxlc3MgYmxvY2tfZ2l2ZW4/XG5cbiAgICAleHtcbiAgICAgIHNlbGYuJGVhY2guJCRwID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBwYXJhbSA9ICN7OjpPcGFsLmRlc3RydWN0dXJlKGBhcmd1bWVudHNgKX07XG5cbiAgICAgICAgYmxvY2socGFyYW0sIG9iamVjdCk7XG4gICAgICB9O1xuXG4gICAgICBzZWxmLiRlYWNoKCk7XG4gICAgfVxuXG4gICAgb2JqZWN0XG4gIGVuZFxuXG4gIGRlZiBlbnRyaWVzKCphcmdzKVxuICAgICV4e1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICBzZWxmLiRlYWNoLiQkcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXN1bHQucHVzaCgjezo6T3BhbC5kZXN0cnVjdHVyZShgYXJndW1lbnRzYCl9KTtcbiAgICAgIH07XG5cbiAgICAgIHNlbGYuJGVhY2guYXBwbHkoc2VsZiwgYXJncyk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICBlbmRcblxuICBkZWYgZmlsdGVyX21hcCgmYmxvY2spXG4gICAgcmV0dXJuIGVudW1fZm9yKDpmaWx0ZXJfbWFwKSB7IGVudW1lcmF0b3Jfc2l6ZSB9IHVubGVzcyBibG9ja19naXZlbj9cblxuICAgIG1hcCgmYmxvY2spLnNlbGVjdCgmOml0c2VsZilcbiAgZW5kXG5cbiAgZGVmIGZpbmRfYWxsKCZibG9jaylcbiAgICByZXR1cm4gZW51bV9mb3IoOmZpbmRfYWxsKSB7IGVudW1lcmF0b3Jfc2l6ZSB9IHVubGVzcyBibG9ja19naXZlbj9cblxuICAgICV4e1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICBzZWxmLiRlYWNoLiQkcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcGFyYW0gPSAjezo6T3BhbC5kZXN0cnVjdHVyZShgYXJndW1lbnRzYCl9LFxuICAgICAgICAgICAgdmFsdWUgPSAkeWllbGQxKGJsb2NrLCBwYXJhbSk7XG5cbiAgICAgICAgaWYgKCR0cnV0aHkodmFsdWUpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2gocGFyYW0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBzZWxmLiRlYWNoKCk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICBlbmRcblxuICBkZWYgZmluZF9pbmRleChvYmplY3QgPSB1bmRlZmluZWQsICZibG9jaylcbiAgICByZXR1cm4gZW51bV9mb3IgOmZpbmRfaW5kZXggaWYgYG9iamVjdCA9PT0gdW5kZWZpbmVkICYmIGJsb2NrID09PSBuaWxgXG5cbiAgICAleHtcbiAgICAgIGlmIChvYmplY3QgIT0gbnVsbCAmJiBibG9jayAhPT0gbmlsKSB7XG4gICAgICAgICN7d2Fybignd2FybmluZzogZ2l2ZW4gYmxvY2sgbm90IHVzZWQnKX1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbmRleCA9IDBcblxuICAgIGlmIGBvYmplY3QgIT0gbnVsbGBcbiAgICAgIGVhY2ggZG8gfCp2YWx1ZXxcbiAgICAgICAgaWYgOjpPcGFsLmRlc3RydWN0dXJlKHZhbHVlKSA9PSBvYmplY3RcbiAgICAgICAgICByZXR1cm4gaW5kZXhcbiAgICAgICAgZW5kXG5cbiAgICAgICAgYGluZGV4ICs9IDFgXG4gICAgICBlbmRcbiAgICBlbHNlXG4gICAgICBlYWNoIGRvIHwqdmFsdWV8XG4gICAgICAgIGlmIHlpZWxkKCp2YWx1ZSlcbiAgICAgICAgICByZXR1cm4gaW5kZXhcbiAgICAgICAgZW5kXG5cbiAgICAgICAgYGluZGV4ICs9IDFgXG4gICAgICBlbmRcbiAgICBlbmRcblxuICAgIG5pbFxuICBlbmRcblxuICBkZWYgZmlyc3QobnVtYmVyID0gdW5kZWZpbmVkKVxuICAgIGlmIGBudW1iZXIgPT09IHVuZGVmaW5lZGBcbiAgICAgIGVhY2ggZG8gfHZhbHVlfFxuICAgICAgICByZXR1cm4gdmFsdWVcbiAgICAgIGVuZFxuICAgIGVsc2VcbiAgICAgIHJlc3VsdCA9IFtdXG4gICAgICBudW1iZXIgPSBgJGNvZXJjZV90byhudW1iZXIsICN7OjpJbnRlZ2VyfSwgJ3RvX2ludCcpYFxuXG4gICAgICBpZiBgbnVtYmVyIDwgMGBcbiAgICAgICAgOjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCAnYXR0ZW1wdCB0byB0YWtlIG5lZ2F0aXZlIHNpemUnXG4gICAgICBlbmRcblxuICAgICAgaWYgYG51bWJlciA9PSAwYFxuICAgICAgICByZXR1cm4gW11cbiAgICAgIGVuZFxuXG4gICAgICBjdXJyZW50ID0gMFxuXG4gICAgICBlYWNoIGRvIHwqYXJnc3xcbiAgICAgICAgYHJlc3VsdC5wdXNoKCN7OjpPcGFsLmRlc3RydWN0dXJlKGFyZ3MpfSlgXG5cbiAgICAgICAgaWYgYG51bWJlciA8PSArK2N1cnJlbnRgXG4gICAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICBlbmRcbiAgICAgIGVuZFxuXG4gICAgICByZXN1bHRcbiAgICBlbmRcbiAgZW5kXG5cbiAgZGVmIGdyZXAocGF0dGVybiwgJmJsb2NrKVxuICAgIHJlc3VsdCA9IFtdXG5cbiAgICBlYWNoIGRvIHwqdmFsdWV8XG4gICAgICBjbXAgPSBgY29tcGFyYWJsZUZvclBhdHRlcm4odmFsdWUpYFxuICAgICAgbmV4dCB1bmxlc3MgcGF0dGVybi5fX3NlbmRfXyg6PT09LCAqY21wKVxuICAgICAgaWYgYmxvY2tfZ2l2ZW4/XG4gICAgICAgIHZhbHVlID0gW3ZhbHVlXSBpZiB2YWx1ZS5sZW5ndGggPiAxXG4gICAgICAgIHZhbHVlID0geWllbGQoKnZhbHVlKVxuICAgICAgZWxzaWYgdmFsdWUubGVuZ3RoIDw9IDFcbiAgICAgICAgdmFsdWUgPSB2YWx1ZVswXVxuICAgICAgZW5kXG5cbiAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKVxuICAgIGVuZFxuXG4gICAgcmVzdWx0XG4gIGVuZFxuXG4gIGRlZiBncmVwX3YocGF0dGVybiwgJmJsb2NrKVxuICAgIHJlc3VsdCA9IFtdXG5cbiAgICBlYWNoIGRvIHwqdmFsdWV8XG4gICAgICBjbXAgPSBgY29tcGFyYWJsZUZvclBhdHRlcm4odmFsdWUpYFxuICAgICAgbmV4dCBpZiBwYXR0ZXJuLl9fc2VuZF9fKDo9PT0sICpjbXApXG4gICAgICBpZiBibG9ja19naXZlbj9cbiAgICAgICAgdmFsdWUgPSBbdmFsdWVdIGlmIHZhbHVlLmxlbmd0aCA+IDFcbiAgICAgICAgdmFsdWUgPSB5aWVsZCgqdmFsdWUpXG4gICAgICBlbHNpZiB2YWx1ZS5sZW5ndGggPD0gMVxuICAgICAgICB2YWx1ZSA9IHZhbHVlWzBdXG4gICAgICBlbmRcblxuICAgICAgcmVzdWx0LnB1c2godmFsdWUpXG4gICAgZW5kXG5cbiAgICByZXN1bHRcbiAgZW5kXG5cbiAgZGVmIGdyb3VwX2J5KCZibG9jaylcbiAgICByZXR1cm4gZW51bV9mb3IoOmdyb3VwX2J5KSB7IGVudW1lcmF0b3Jfc2l6ZSB9IHVubGVzcyBibG9ja19naXZlbj9cblxuICAgIGhhc2ggPSB7fVxuXG4gICAgJXh7XG4gICAgICB2YXIgcmVzdWx0O1xuXG4gICAgICBzZWxmLiRlYWNoLiQkcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcGFyYW0gPSAjezo6T3BhbC5kZXN0cnVjdHVyZShgYXJndW1lbnRzYCl9LFxuICAgICAgICAgICAgdmFsdWUgPSAkeWllbGQxKGJsb2NrLCBwYXJhbSk7XG5cbiAgICAgICAgI3soaGFzaFtgdmFsdWVgXSB8fD0gW10pIDw8IGBwYXJhbWB9O1xuICAgICAgfVxuXG4gICAgICBzZWxmLiRlYWNoKCk7XG5cbiAgICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgIH1cblxuICAgIGhhc2hcbiAgZW5kXG5cbiAgZGVmIGluY2x1ZGU/KG9iailcbiAgICBlYWNoIGRvIHwqYXJnc3xcbiAgICAgIGlmIDo6T3BhbC5kZXN0cnVjdHVyZShhcmdzKSA9PSBvYmpcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIGVuZFxuICAgIGVuZFxuXG4gICAgZmFsc2VcbiAgZW5kXG5cbiAgZGVmIGluamVjdChvYmplY3QgPSB1bmRlZmluZWQsIHN5bSA9IHVuZGVmaW5lZCwgJmJsb2NrKVxuICAgICV4e1xuICAgICAgdmFyIHJlc3VsdCA9IG9iamVjdDtcblxuICAgICAgaWYgKGJsb2NrICE9PSBuaWwgJiYgc3ltID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc2VsZi4kZWFjaC4kJHAgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSAjezo6T3BhbC5kZXN0cnVjdHVyZShgYXJndW1lbnRzYCl9O1xuXG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YWx1ZSA9ICR5aWVsZFgoYmxvY2ssIFtyZXN1bHQsIHZhbHVlXSk7XG5cbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAoc3ltID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAoISN7OjpTeW1ib2wgPT09IG9iamVjdH0pIHtcbiAgICAgICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpUeXBlRXJyb3IsIFwiI3tvYmplY3QuaW5zcGVjdH0gaXMgbm90IGEgU3ltYm9sXCJ9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHN5bSAgICA9IG9iamVjdDtcbiAgICAgICAgICByZXN1bHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBzZWxmLiRlYWNoLiQkcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciB2YWx1ZSA9ICN7OjpPcGFsLmRlc3RydWN0dXJlKGBhcmd1bWVudHNgKX07XG5cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJlc3VsdCA9ICN7YHJlc3VsdGAuX19zZW5kX18gc3ltLCBgdmFsdWVgfTtcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgc2VsZi4kZWFjaCgpO1xuXG4gICAgICByZXR1cm4gcmVzdWx0ID09IHVuZGVmaW5lZCA/IG5pbCA6IHJlc3VsdDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBsYXp5XG4gICAgOjpFbnVtZXJhdG9yOjpMYXp5Lm5ldyhzZWxmLCBlbnVtZXJhdG9yX3NpemUpIGRvIHxlbnVtLCAqYXJnc3xcbiAgICAgIGVudW0ueWllbGQoKmFyZ3MpXG4gICAgZW5kXG4gIGVuZFxuXG4gIGRlZiBlbnVtZXJhdG9yX3NpemVcbiAgICByZXNwb25kX3RvPyg6c2l6ZSkgPyBzaXplIDogbmlsXG4gIGVuZFxuXG4gIGRlZiBtYXgobiA9IHVuZGVmaW5lZCwgJmJsb2NrKVxuICAgICV4e1xuICAgICAgaWYgKG4gPT09IHVuZGVmaW5lZCB8fCBuID09PSBuaWwpIHtcbiAgICAgICAgdmFyIHJlc3VsdCwgdmFsdWU7XG5cbiAgICAgICAgc2VsZi4kZWFjaC4kJHAgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgaXRlbSA9ICN7OjpPcGFsLmRlc3RydWN0dXJlKGBhcmd1bWVudHNgKX07XG5cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGl0ZW07XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGJsb2NrICE9PSBuaWwpIHtcbiAgICAgICAgICAgIHZhbHVlID0gJHlpZWxkWChibG9jaywgW2l0ZW0sIHJlc3VsdF0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSA9ICN7YGl0ZW1gIDw9PiBgcmVzdWx0YH07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHZhbHVlID09PSBuaWwpIHtcbiAgICAgICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCAnY29tcGFyaXNvbiBmYWlsZWQnfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodmFsdWUgPiAwKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBpdGVtO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGYuJGVhY2goKTtcblxuICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm4gbmlsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbiA9ICRjb2VyY2VfdG8obiwgI3s6OkludGVnZXJ9LCAndG9faW50Jyk7XG4gICAgfVxuXG4gICAgc29ydCgmYmxvY2spLnJldmVyc2UuZmlyc3QobilcbiAgZW5kXG5cbiAgZGVmIG1heF9ieShuID0gbmlsLCAmYmxvY2spXG4gICAgcmV0dXJuIGVudW1fZm9yKDptYXhfYnksIG4pIHsgZW51bWVyYXRvcl9zaXplIH0gdW5sZXNzIGJsb2NrXG5cbiAgICB1bmxlc3Mgbi5uaWw/XG4gICAgICByZXR1cm4gc29ydF9ieSgmYmxvY2spLnJldmVyc2UudGFrZSBuXG4gICAgZW5kXG5cbiAgICAleHtcbiAgICAgIHZhciByZXN1bHQsXG4gICAgICAgICAgYnk7XG5cbiAgICAgIHNlbGYuJGVhY2guJCRwID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBwYXJhbSA9ICN7OjpPcGFsLmRlc3RydWN0dXJlKGBhcmd1bWVudHNgKX0sXG4gICAgICAgICAgICB2YWx1ZSA9ICR5aWVsZDEoYmxvY2ssIHBhcmFtKTtcblxuICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXN1bHQgPSBwYXJhbTtcbiAgICAgICAgICBieSAgICAgPSB2YWx1ZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoI3tgdmFsdWVgIDw9PiBgYnlgfSA+IDApIHtcbiAgICAgICAgICByZXN1bHQgPSBwYXJhbVxuICAgICAgICAgIGJ5ICAgICA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBzZWxmLiRlYWNoKCk7XG5cbiAgICAgIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IG5pbCA6IHJlc3VsdDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBtaW4obiA9IG5pbCwgJmJsb2NrKVxuICAgIHVubGVzcyBuLm5pbD9cbiAgICAgIGlmIGJsb2NrX2dpdmVuP1xuICAgICAgICByZXR1cm4gc29ydCB7IHxhLCBifCB5aWVsZCBhLCBiIH0udGFrZSBuXG4gICAgICBlbHNlXG4gICAgICAgIHJldHVybiBzb3J0LnRha2UgblxuICAgICAgZW5kXG4gICAgZW5kXG5cbiAgICAleHtcbiAgICAgIHZhciByZXN1bHQ7XG5cbiAgICAgIGlmIChibG9jayAhPT0gbmlsKSB7XG4gICAgICAgIHNlbGYuJGVhY2guJCRwID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHBhcmFtID0gI3s6Ok9wYWwuZGVzdHJ1Y3R1cmUoYGFyZ3VtZW50c2ApfTtcblxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gcGFyYW07XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHZhbHVlID0gYmxvY2socGFyYW0sIHJlc3VsdCk7XG5cbiAgICAgICAgICBpZiAodmFsdWUgPT09IG5pbCkge1xuICAgICAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsICdjb21wYXJpc29uIGZhaWxlZCd9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh2YWx1ZSA8IDApIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHBhcmFtO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzZWxmLiRlYWNoLiQkcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBwYXJhbSA9ICN7OjpPcGFsLmRlc3RydWN0dXJlKGBhcmd1bWVudHNgKX07XG5cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHBhcmFtO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICgjezo6T3BhbC5jb21wYXJlKGBwYXJhbWAsIGByZXN1bHRgKX0gPCAwKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBwYXJhbTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHNlbGYuJGVhY2goKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gbmlsIDogcmVzdWx0O1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIG1pbl9ieShuID0gbmlsLCAmYmxvY2spXG4gICAgcmV0dXJuIGVudW1fZm9yKDptaW5fYnksIG4pIHsgZW51bWVyYXRvcl9zaXplIH0gdW5sZXNzIGJsb2NrXG5cbiAgICB1bmxlc3Mgbi5uaWw/XG4gICAgICByZXR1cm4gc29ydF9ieSgmYmxvY2spLnRha2UgblxuICAgIGVuZFxuXG4gICAgJXh7XG4gICAgICB2YXIgcmVzdWx0LFxuICAgICAgICAgIGJ5O1xuXG4gICAgICBzZWxmLiRlYWNoLiQkcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcGFyYW0gPSAjezo6T3BhbC5kZXN0cnVjdHVyZShgYXJndW1lbnRzYCl9LFxuICAgICAgICAgICAgdmFsdWUgPSAkeWllbGQxKGJsb2NrLCBwYXJhbSk7XG5cbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmVzdWx0ID0gcGFyYW07XG4gICAgICAgICAgYnkgICAgID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCN7YHZhbHVlYCA8PT4gYGJ5YH0gPCAwKSB7XG4gICAgICAgICAgcmVzdWx0ID0gcGFyYW1cbiAgICAgICAgICBieSAgICAgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgc2VsZi4kZWFjaCgpO1xuXG4gICAgICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBuaWwgOiByZXN1bHQ7XG4gICAgfVxuICBlbmRcblxuICBkZWYgbWlubWF4KCZibG9jaylcbiAgICBibG9jayB8fD0gOjpLZXJuZWwucHJvYyB7IHxhLCBifCBhIDw9PiBiIH1cblxuICAgICV4e1xuICAgICAgdmFyIG1pbiA9IG5pbCwgbWF4ID0gbmlsLCBmaXJzdF90aW1lID0gdHJ1ZTtcblxuICAgICAgc2VsZi4kZWFjaC4kJHAgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSAjezo6T3BhbC5kZXN0cnVjdHVyZShgYXJndW1lbnRzYCl9O1xuICAgICAgICBpZiAoZmlyc3RfdGltZSkge1xuICAgICAgICAgIG1pbiA9IG1heCA9IGVsZW1lbnQ7XG4gICAgICAgICAgZmlyc3RfdGltZSA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBtaW5fY21wID0gI3tibG9jay5jYWxsKGBtaW5gLCBgZWxlbWVudGApfTtcblxuICAgICAgICAgIGlmIChtaW5fY21wID09PSBuaWwpIHtcbiAgICAgICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCAnY29tcGFyaXNvbiBmYWlsZWQnfVxuICAgICAgICAgIH0gZWxzZSBpZiAobWluX2NtcCA+IDApIHtcbiAgICAgICAgICAgIG1pbiA9IGVsZW1lbnQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIG1heF9jbXAgPSAje2Jsb2NrLmNhbGwoYG1heGAsIGBlbGVtZW50YCl9O1xuXG4gICAgICAgICAgaWYgKG1heF9jbXAgPT09IG5pbCkge1xuICAgICAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsICdjb21wYXJpc29uIGZhaWxlZCd9XG4gICAgICAgICAgfSBlbHNlIGlmIChtYXhfY21wIDwgMCkge1xuICAgICAgICAgICAgbWF4ID0gZWxlbWVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc2VsZi4kZWFjaCgpO1xuXG4gICAgICByZXR1cm4gW21pbiwgbWF4XTtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBtaW5tYXhfYnkoJmJsb2NrKVxuICAgIHJldHVybiBlbnVtX2Zvcig6bWlubWF4X2J5KSB7IGVudW1lcmF0b3Jfc2l6ZSB9IHVubGVzcyBibG9ja1xuXG4gICAgJXh7XG4gICAgICB2YXIgbWluX3Jlc3VsdCA9IG5pbCxcbiAgICAgICAgICBtYXhfcmVzdWx0ID0gbmlsLFxuICAgICAgICAgIG1pbl9ieSxcbiAgICAgICAgICBtYXhfYnk7XG5cbiAgICAgIHNlbGYuJGVhY2guJCRwID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBwYXJhbSA9ICN7OjpPcGFsLmRlc3RydWN0dXJlKGBhcmd1bWVudHNgKX0sXG4gICAgICAgICAgICB2YWx1ZSA9ICR5aWVsZDEoYmxvY2ssIHBhcmFtKTtcblxuICAgICAgICBpZiAoKG1pbl9ieSA9PT0gdW5kZWZpbmVkKSB8fCAje2B2YWx1ZWAgPD0+IGBtaW5fYnlgfSA8IDApIHtcbiAgICAgICAgICBtaW5fcmVzdWx0ID0gcGFyYW07XG4gICAgICAgICAgbWluX2J5ICAgICA9IHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKChtYXhfYnkgPT09IHVuZGVmaW5lZCkgfHwgI3tgdmFsdWVgIDw9PiBgbWF4X2J5YH0gPiAwKSB7XG4gICAgICAgICAgbWF4X3Jlc3VsdCA9IHBhcmFtO1xuICAgICAgICAgIG1heF9ieSAgICAgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgc2VsZi4kZWFjaCgpO1xuXG4gICAgICByZXR1cm4gW21pbl9yZXN1bHQsIG1heF9yZXN1bHRdO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIG5vbmU/KHBhdHRlcm4gPSB1bmRlZmluZWQsICZibG9jaylcbiAgICBpZiBgcGF0dGVybiAhPT0gdW5kZWZpbmVkYFxuICAgICAgZWFjaCBkbyB8KnZhbHVlfFxuICAgICAgICBjb21wYXJhYmxlID0gYGNvbXBhcmFibGVGb3JQYXR0ZXJuKHZhbHVlKWBcblxuICAgICAgICByZXR1cm4gZmFsc2UgaWYgcGF0dGVybi5wdWJsaWNfc2VuZCg6PT09LCAqY29tcGFyYWJsZSlcbiAgICAgIGVuZFxuICAgIGVsc2lmIGJsb2NrX2dpdmVuP1xuICAgICAgZWFjaCBkbyB8KnZhbHVlfFxuICAgICAgICBpZiB5aWVsZCgqdmFsdWUpXG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIGVuZFxuICAgICAgZW5kXG4gICAgZWxzZVxuICAgICAgZWFjaCBkbyB8KnZhbHVlfFxuICAgICAgICBpdGVtID0gOjpPcGFsLmRlc3RydWN0dXJlKHZhbHVlKVxuXG4gICAgICAgIHJldHVybiBmYWxzZSBpZiBpdGVtXG4gICAgICBlbmRcbiAgICBlbmRcblxuICAgIHRydWVcbiAgZW5kXG5cbiAgZGVmIG9uZT8ocGF0dGVybiA9IHVuZGVmaW5lZCwgJmJsb2NrKVxuICAgIGNvdW50ID0gMFxuXG4gICAgaWYgYHBhdHRlcm4gIT09IHVuZGVmaW5lZGBcbiAgICAgIGVhY2ggZG8gfCp2YWx1ZXxcbiAgICAgICAgY29tcGFyYWJsZSA9IGBjb21wYXJhYmxlRm9yUGF0dGVybih2YWx1ZSlgXG5cbiAgICAgICAgaWYgcGF0dGVybi5wdWJsaWNfc2VuZCg6PT09LCAqY29tcGFyYWJsZSlcbiAgICAgICAgICBjb3VudCArPSAxXG4gICAgICAgICAgcmV0dXJuIGZhbHNlIGlmIGNvdW50ID4gMVxuICAgICAgICBlbmRcbiAgICAgIGVuZFxuICAgIGVsc2lmIGJsb2NrX2dpdmVuP1xuICAgICAgZWFjaCBkbyB8KnZhbHVlfFxuICAgICAgICBuZXh0IHVubGVzcyB5aWVsZCgqdmFsdWUpXG4gICAgICAgIGNvdW50ICs9IDFcblxuICAgICAgICByZXR1cm4gZmFsc2UgaWYgY291bnQgPiAxXG4gICAgICBlbmRcbiAgICBlbHNlXG4gICAgICBlYWNoIGRvIHwqdmFsdWV8XG4gICAgICAgIG5leHQgdW5sZXNzIDo6T3BhbC5kZXN0cnVjdHVyZSh2YWx1ZSlcbiAgICAgICAgY291bnQgKz0gMVxuXG4gICAgICAgIHJldHVybiBmYWxzZSBpZiBjb3VudCA+IDFcbiAgICAgIGVuZFxuICAgIGVuZFxuXG4gICAgY291bnQgPT0gMVxuICBlbmRcblxuICBkZWYgcGFydGl0aW9uKCZibG9jaylcbiAgICByZXR1cm4gZW51bV9mb3IoOnBhcnRpdGlvbikgeyBlbnVtZXJhdG9yX3NpemUgfSB1bmxlc3MgYmxvY2tfZ2l2ZW4/XG5cbiAgICAleHtcbiAgICAgIHZhciB0cnV0aHkgPSBbXSwgZmFsc3kgPSBbXSwgcmVzdWx0O1xuXG4gICAgICBzZWxmLiRlYWNoLiQkcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcGFyYW0gPSAjezo6T3BhbC5kZXN0cnVjdHVyZShgYXJndW1lbnRzYCl9LFxuICAgICAgICAgICAgdmFsdWUgPSAkeWllbGQxKGJsb2NrLCBwYXJhbSk7XG5cbiAgICAgICAgaWYgKCR0cnV0aHkodmFsdWUpKSB7XG4gICAgICAgICAgdHJ1dGh5LnB1c2gocGFyYW0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGZhbHN5LnB1c2gocGFyYW0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBzZWxmLiRlYWNoKCk7XG5cbiAgICAgIHJldHVybiBbdHJ1dGh5LCBmYWxzeV07XG4gICAgfVxuICBlbmRcblxuICBkZWYgcmVqZWN0KCZibG9jaylcbiAgICByZXR1cm4gZW51bV9mb3IoOnJlamVjdCkgeyBlbnVtZXJhdG9yX3NpemUgfSB1bmxlc3MgYmxvY2tfZ2l2ZW4/XG5cbiAgICAleHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcblxuICAgICAgc2VsZi4kZWFjaC4kJHAgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHBhcmFtID0gI3s6Ok9wYWwuZGVzdHJ1Y3R1cmUoYGFyZ3VtZW50c2ApfSxcbiAgICAgICAgICAgIHZhbHVlID0gJHlpZWxkMShibG9jaywgcGFyYW0pO1xuXG4gICAgICAgIGlmICghJHRydXRoeSh2YWx1ZSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChwYXJhbSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHNlbGYuJGVhY2goKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiByZXZlcnNlX2VhY2goJmJsb2NrKVxuICAgIHJldHVybiBlbnVtX2Zvcig6cmV2ZXJzZV9lYWNoKSB7IGVudW1lcmF0b3Jfc2l6ZSB9IHVubGVzcyBibG9ja19naXZlbj9cblxuICAgICV4e1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICBzZWxmLiRlYWNoLiQkcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXN1bHQucHVzaChhcmd1bWVudHMpO1xuICAgICAgfTtcblxuICAgICAgc2VsZi4kZWFjaCgpO1xuXG4gICAgICBmb3IgKHZhciBpID0gcmVzdWx0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICR5aWVsZFgoYmxvY2ssIHJlc3VsdFtpXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICBlbmRcblxuICBkZWYgc2xpY2VfYmVmb3JlKHBhdHRlcm4gPSB1bmRlZmluZWQsICZibG9jaylcbiAgICBpZiBgcGF0dGVybiA9PT0gdW5kZWZpbmVkICYmIGJsb2NrID09PSBuaWxgXG4gICAgICA6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsICdib3RoIHBhdHRlcm4gYW5kIGJsb2NrIGFyZSBnaXZlbidcbiAgICBlbmRcblxuICAgIGlmIGBwYXR0ZXJuICE9PSB1bmRlZmluZWQgJiYgYmxvY2sgIT09IG5pbCB8fCBhcmd1bWVudHMubGVuZ3RoID4gMWBcbiAgICAgIDo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgXCJ3cm9uZyBudW1iZXIgb2YgYXJndW1lbnRzICgje2Bhcmd1bWVudHMubGVuZ3RoYH0gZXhwZWN0ZWQgMSlcIlxuICAgIGVuZFxuXG4gICAgOjpFbnVtZXJhdG9yLm5ldyBkbyB8ZXxcbiAgICAgICV4e1xuICAgICAgICB2YXIgc2xpY2UgPSBbXTtcblxuICAgICAgICBpZiAoYmxvY2sgIT09IG5pbCkge1xuICAgICAgICAgIGlmIChwYXR0ZXJuID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHNlbGYuJGVhY2guJCRwID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHZhciBwYXJhbSA9ICN7OjpPcGFsLmRlc3RydWN0dXJlKGBhcmd1bWVudHNgKX0sXG4gICAgICAgICAgICAgICAgICB2YWx1ZSA9ICR5aWVsZDEoYmxvY2ssIHBhcmFtKTtcblxuICAgICAgICAgICAgICBpZiAoJHRydXRoeSh2YWx1ZSkgJiYgc2xpY2UubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICN7ZSA8PCBgc2xpY2VgfTtcbiAgICAgICAgICAgICAgICBzbGljZSA9IFtdO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgc2xpY2UucHVzaChwYXJhbSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNlbGYuJGVhY2guJCRwID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHZhciBwYXJhbSA9ICN7OjpPcGFsLmRlc3RydWN0dXJlKGBhcmd1bWVudHNgKX0sXG4gICAgICAgICAgICAgICAgICB2YWx1ZSA9IGJsb2NrKHBhcmFtLCAje3BhdHRlcm4uZHVwfSk7XG5cbiAgICAgICAgICAgICAgaWYgKCR0cnV0aHkodmFsdWUpICYmIHNsaWNlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAje2UgPDwgYHNsaWNlYH07XG4gICAgICAgICAgICAgICAgc2xpY2UgPSBbXTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHNsaWNlLnB1c2gocGFyYW0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgc2VsZi4kZWFjaC4kJHAgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBwYXJhbSA9ICN7OjpPcGFsLmRlc3RydWN0dXJlKGBhcmd1bWVudHNgKX0sXG4gICAgICAgICAgICAgICAgdmFsdWUgPSAje3BhdHRlcm4gPT09IGBwYXJhbWB9O1xuXG4gICAgICAgICAgICBpZiAoJHRydXRoeSh2YWx1ZSkgJiYgc2xpY2UubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAje2UgPDwgYHNsaWNlYH07XG4gICAgICAgICAgICAgIHNsaWNlID0gW107XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNsaWNlLnB1c2gocGFyYW0pO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBzZWxmLiRlYWNoKCk7XG5cbiAgICAgICAgaWYgKHNsaWNlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAje2UgPDwgYHNsaWNlYH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBlbmRcbiAgZW5kXG5cbiAgZGVmIHNsaWNlX2FmdGVyKHBhdHRlcm4gPSB1bmRlZmluZWQsICZibG9jaylcbiAgICBpZiBgcGF0dGVybiA9PT0gdW5kZWZpbmVkICYmIGJsb2NrID09PSBuaWxgXG4gICAgICA6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsICdib3RoIHBhdHRlcm4gYW5kIGJsb2NrIGFyZSBnaXZlbidcbiAgICBlbmRcblxuICAgIGlmIGBwYXR0ZXJuICE9PSB1bmRlZmluZWQgJiYgYmxvY2sgIT09IG5pbCB8fCBhcmd1bWVudHMubGVuZ3RoID4gMWBcbiAgICAgIDo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgXCJ3cm9uZyBudW1iZXIgb2YgYXJndW1lbnRzICgje2Bhcmd1bWVudHMubGVuZ3RoYH0gZXhwZWN0ZWQgMSlcIlxuICAgIGVuZFxuXG4gICAgaWYgYHBhdHRlcm4gIT09IHVuZGVmaW5lZGBcbiAgICAgIGJsb2NrID0gOjpLZXJuZWwucHJvYyB7IHxlfCBwYXR0ZXJuID09PSBlIH1cbiAgICBlbmRcblxuICAgIDo6RW51bWVyYXRvci5uZXcgZG8gfHlpZWxkZXJ8XG4gICAgICAleHtcbiAgICAgICAgdmFyIGFjY3VtdWxhdGU7XG5cbiAgICAgICAgc2VsZi4kZWFjaC4kJHAgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgZWxlbWVudCA9ICN7OjpPcGFsLmRlc3RydWN0dXJlKGBhcmd1bWVudHNgKX0sXG4gICAgICAgICAgICAgIGVuZF9jaHVuayA9ICR5aWVsZDEoYmxvY2ssIGVsZW1lbnQpO1xuXG4gICAgICAgICAgaWYgKGFjY3VtdWxhdGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgYWNjdW11bGF0ZSA9IFtdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICgkdHJ1dGh5KGVuZF9jaHVuaykpIHtcbiAgICAgICAgICAgIGFjY3VtdWxhdGUucHVzaChlbGVtZW50KTtcbiAgICAgICAgICAgICN7eWllbGRlci55aWVsZChgYWNjdW11bGF0ZWApfTtcbiAgICAgICAgICAgIGFjY3VtdWxhdGUgPSBudWxsO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhY2N1bXVsYXRlLnB1c2goZWxlbWVudClcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzZWxmLiRlYWNoKCk7XG5cbiAgICAgICAgaWYgKGFjY3VtdWxhdGUgIT0gbnVsbCkge1xuICAgICAgICAgICN7eWllbGRlci55aWVsZChgYWNjdW11bGF0ZWApfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIGVuZFxuICBlbmRcblxuICBkZWYgc2xpY2Vfd2hlbigmYmxvY2spXG4gICAgOjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCAnd3JvbmcgbnVtYmVyIG9mIGFyZ3VtZW50cyAoMCBmb3IgMSknIHVubGVzcyBibG9ja19naXZlbj9cblxuICAgIDo6RW51bWVyYXRvci5uZXcgZG8gfHlpZWxkZXJ8XG4gICAgICAleHtcbiAgICAgICAgdmFyIHNsaWNlID0gbmlsLCBsYXN0X2FmdGVyID0gbmlsO1xuXG4gICAgICAgIHNlbGYuJGVhY2hfY29ucy4kJHAgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgcGFyYW1zID0gI3s6Ok9wYWwuZGVzdHJ1Y3R1cmUoYGFyZ3VtZW50c2ApfSxcbiAgICAgICAgICAgICAgYmVmb3JlID0gcGFyYW1zWzBdLFxuICAgICAgICAgICAgICBhZnRlciA9IHBhcmFtc1sxXSxcbiAgICAgICAgICAgICAgbWF0Y2ggPSAkeWllbGRYKGJsb2NrLCBbYmVmb3JlLCBhZnRlcl0pO1xuXG4gICAgICAgICAgbGFzdF9hZnRlciA9IGFmdGVyO1xuXG4gICAgICAgICAgaWYgKHNsaWNlID09PSBuaWwpIHtcbiAgICAgICAgICAgIHNsaWNlID0gW107XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCR0cnV0aHkobWF0Y2gpKSB7XG4gICAgICAgICAgICBzbGljZS5wdXNoKGJlZm9yZSk7XG4gICAgICAgICAgICAje3lpZWxkZXIueWllbGQoYHNsaWNlYCl9O1xuICAgICAgICAgICAgc2xpY2UgPSBbXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2xpY2UucHVzaChiZWZvcmUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGYuJGVhY2hfY29ucygyKTtcblxuICAgICAgICBpZiAoc2xpY2UgIT09IG5pbCkge1xuICAgICAgICAgIHNsaWNlLnB1c2gobGFzdF9hZnRlcik7XG4gICAgICAgICAgI3t5aWVsZGVyLnlpZWxkKGBzbGljZWApfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIGVuZFxuICBlbmRcblxuICBkZWYgc29ydCgmYmxvY2spXG4gICAgYXJ5ID0gdG9fYVxuICAgIGJsb2NrID0gLT4oYSwgYikgeyBhIDw9PiBiIH0gdW5sZXNzIGJsb2NrX2dpdmVuP1xuICAgIGFyeS5zb3J0KCZibG9jaylcbiAgZW5kXG5cbiAgZGVmIHNvcnRfYnkoJmJsb2NrKVxuICAgIHJldHVybiBlbnVtX2Zvcig6c29ydF9ieSkgeyBlbnVtZXJhdG9yX3NpemUgfSB1bmxlc3MgYmxvY2tfZ2l2ZW4/XG5cbiAgICBkdXAgPSBtYXAgZG9cbiAgICAgIGFyZyA9IDo6T3BhbC5kZXN0cnVjdHVyZShgYXJndW1lbnRzYClcbiAgICAgIFt5aWVsZChhcmcpLCBhcmddXG4gICAgZW5kXG4gICAgZHVwLnNvcnQhIHsgfGEsIGJ8IGBhWzBdYCA8PT4gYGJbMF1gIH1cbiAgICBkdXAubWFwISB7IHxpfCBgaVsxXWAgfVxuICBlbmRcblxuICAjIFRoaXMgbWV0aG9kIGltcGxlbWVudHMgdGhlIEthaGFuIHN1bW1hdGlvbiBhbGdvcml0aG0gaWYgaXQgaXMgcG9zc2libGUgdG8gYXBwbHkgb25lLlxuICBkZWYgc3VtKGluaXRpYWwgPSAwKVxuICAgIHJlc3VsdCA9IGluaXRpYWxcbiAgICBjb21wZW5zYXRpb24gPSAwXG5cbiAgICBlYWNoIGRvIHwqYXJnc3xcbiAgICAgIGl0ZW0gPSBpZiBibG9ja19naXZlbj9cbiAgICAgICAgICAgICAgIHlpZWxkKCphcmdzKVxuICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgIDo6T3BhbC5kZXN0cnVjdHVyZShhcmdzKVxuICAgICAgICAgICAgIGVuZFxuXG4gICAgICBpZiAhWzo6RmxvYXQ6OklORklOSVRZLCAtOjpGbG9hdDo6SU5GSU5JVFldLmluY2x1ZGU/KGl0ZW0pICYmIGl0ZW0ucmVzcG9uZF90bz8oOi0pXG4gICAgICAgIHkgPSBpdGVtIC0gY29tcGVuc2F0aW9uXG4gICAgICAgIHQgPSByZXN1bHQgKyB5XG4gICAgICAgIGNvbXBlbnNhdGlvbiA9ICh0IC0gcmVzdWx0KSAtIHlcbiAgICAgICAgcmVzdWx0ID0gdFxuICAgICAgZWxzZVxuICAgICAgICByZXN1bHQgKz0gaXRlbVxuICAgICAgZW5kXG4gICAgZW5kXG5cbiAgICByZXN1bHRcbiAgZW5kXG5cbiAgZGVmIHRha2UobnVtKVxuICAgIGZpcnN0KG51bSlcbiAgZW5kXG5cbiAgZGVmIHRha2Vfd2hpbGUoJmJsb2NrKVxuICAgIHJldHVybiBlbnVtX2ZvciA6dGFrZV93aGlsZSB1bmxlc3MgYmxvY2tcblxuICAgIHJlc3VsdCA9IFtdXG5cbiAgICBlYWNoIGRvIHwqYXJnc3xcbiAgICAgIHZhbHVlID0gOjpPcGFsLmRlc3RydWN0dXJlKGFyZ3MpXG5cbiAgICAgIHVubGVzcyB5aWVsZCh2YWx1ZSlcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgZW5kXG5cbiAgICAgIGByZXN1bHQucHVzaCh2YWx1ZSlgXG4gICAgZW5kXG4gIGVuZFxuXG4gIGRlZiB1bmlxKCZibG9jaylcbiAgICBoYXNoID0ge31cblxuICAgIGVhY2ggZG8gfCphcmdzfFxuICAgICAgdmFsdWUgPSA6Ok9wYWwuZGVzdHJ1Y3R1cmUoYXJncylcblxuICAgICAgcHJvZHVjZWQgPSBpZiBibG9ja19naXZlbj9cbiAgICAgICAgICAgICAgICAgICB5aWVsZCh2YWx1ZSlcbiAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICAgICAgIGVuZFxuXG4gICAgICB1bmxlc3MgaGFzaC5rZXk/KHByb2R1Y2VkKVxuICAgICAgICBoYXNoW3Byb2R1Y2VkXSA9IHZhbHVlXG4gICAgICBlbmRcbiAgICBlbmRcblxuICAgIGhhc2gudmFsdWVzXG4gIGVuZFxuXG4gIGRlZiB0YWxseShoYXNoID0gdW5kZWZpbmVkKVxuICAgIGBpZiAoaGFzaCAmJiBoYXNoICE9PSBuaWwpIHsgJGRlbnlfZnJvemVuX2FjY2VzcyhoYXNoKTsgfWBcblxuICAgIG91dCA9IGdyb3VwX2J5KCY6aXRzZWxmKS50cmFuc2Zvcm1fdmFsdWVzKCY6Y291bnQpXG4gICAgaWYgaGFzaFxuICAgICAgb3V0LmVhY2ggeyB8aywgdnwgaGFzaFtrXSA9IGhhc2guZmV0Y2goaywgMCkgKyB2IH1cbiAgICAgIGhhc2hcbiAgICBlbHNlXG4gICAgICBvdXRcbiAgICBlbmRcbiAgZW5kXG5cbiAgZGVmIHRvX2goKmFyZ3MsICZibG9jaylcbiAgICByZXR1cm4gbWFwKCZibG9jaykudG9faCgqYXJncykgaWYgYmxvY2tfZ2l2ZW4/XG5cbiAgICAleHtcbiAgICAgIHZhciBoYXNoID0gI3t7fX07XG5cbiAgICAgIHNlbGYuJGVhY2guJCRwID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBwYXJhbSA9ICN7OjpPcGFsLmRlc3RydWN0dXJlKGBhcmd1bWVudHNgKX07XG4gICAgICAgIHZhciBhcnkgPSAjezo6T3BhbC5jb2VyY2VfdG8/KGBwYXJhbWAsIDo6QXJyYXksIDp0b19hcnkpfSwga2V5LCB2YWw7XG4gICAgICAgIGlmICghYXJ5LiQkaXNfYXJyYXkpIHtcbiAgICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6VHlwZUVycm9yLCBcIndyb25nIGVsZW1lbnQgdHlwZSAje2BhcnlgLmNsYXNzfSAoZXhwZWN0ZWQgYXJyYXkpXCJ9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFyeS5sZW5ndGggIT09IDIpIHtcbiAgICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgXCJ3cm9uZyBhcnJheSBsZW5ndGggKGV4cGVjdGVkIDIsIHdhcyAje2BhcnlgLmxlbmd0aH0pXCJ9XG4gICAgICAgIH1cbiAgICAgICAga2V5ID0gYXJ5WzBdO1xuICAgICAgICB2YWwgPSBhcnlbMV07XG5cbiAgICAgICAgT3BhbC5oYXNoX3B1dChoYXNoLCBrZXksIHZhbCk7XG4gICAgICB9O1xuXG4gICAgICBzZWxmLiRlYWNoLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXG4gICAgICByZXR1cm4gaGFzaDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiB6aXAoKm90aGVycywgJmJsb2NrKVxuICAgIHRvX2EuemlwKCpvdGhlcnMpXG4gIGVuZFxuXG4gIGFsaWFzIGZpbmQgZGV0ZWN0XG4gIGFsaWFzIGZpbHRlciBmaW5kX2FsbFxuICBhbGlhcyBmbGF0X21hcCBjb2xsZWN0X2NvbmNhdFxuICBhbGlhcyBtYXAgY29sbGVjdFxuICBhbGlhcyBtZW1iZXI/IGluY2x1ZGU/XG4gIGFsaWFzIHJlZHVjZSBpbmplY3RcbiAgYWxpYXMgc2VsZWN0IGZpbmRfYWxsXG4gIGFsaWFzIHRvX2EgZW50cmllc1xuZW5kXG4iXSwibmFtZXMiOlsiPHRvcCAocmVxdWlyZWQpPiIsIjxtb2R1bGU6RW51bWVyYWJsZT4iLCJhbGw/IiwicGF0dGVybiIsImVhY2giLCJzZWxmIiwiYmxvY2sgaW4gYWxsPyIsImJsb2NrICgyIGxldmVscykgaW4gYWxsPyIsImNvbXBhcmFibGUiLCJwdWJsaWNfc2VuZCIsImJsb2NrX2dpdmVuPyIsInZhbHVlIiwiT3BhbCIsImRlc3RydWN0dXJlIiwiYW55PyIsImJsb2NrIGluIGFueT8iLCJibG9jayAoMiBsZXZlbHMpIGluIGFueT8iLCJjaHVuayIsInRvX2VudW0iLCJibG9jayBpbiBjaHVuayIsImJsb2NrICgyIGxldmVscykgaW4gY2h1bmsiLCJlbnVtZXJhdG9yX3NpemUiLCJuZXciLCJFbnVtZXJhdG9yIiwieWllbGRlciIsInlpZWxkIiwiY2h1bmtfd2hpbGUiLCJLZXJuZWwiLCJyYWlzZSIsIkFyZ3VtZW50RXJyb3IiLCJzbGljZV93aGVuIiwiYmxvY2sgaW4gY2h1bmtfd2hpbGUiLCJiZWZvcmUiLCJhZnRlciIsImJsb2NrICgyIGxldmVscykgaW4gY2h1bmtfd2hpbGUiLCIhIiwiY29sbGVjdCIsImVudW1fZm9yIiwiYmxvY2sgaW4gY29sbGVjdCIsImJsb2NrICgyIGxldmVscykgaW4gY29sbGVjdCIsImNvbGxlY3RfY29uY2F0IiwiYmxvY2sgaW4gY29sbGVjdF9jb25jYXQiLCJibG9jayAoMiBsZXZlbHMpIGluIGNvbGxlY3RfY29uY2F0IiwibWFwIiwiYmxvY2siLCJ0b19wcm9jIiwiZmxhdHRlbiIsIjEiLCJjb21wYWN0IiwidG9fYSIsImNvdW50Iiwib2JqZWN0IiwicmVzdWx0IiwiMCIsIndhcm4iLCJwcm9jIiwiYmxvY2sgaW4gY291bnQiLCJibG9jayAoMiBsZXZlbHMpIGluIGNvdW50IiwiYXJncyIsIj09IiwibmlsPyIsImN5Y2xlIiwibiIsImJsb2NrIGluIGN5Y2xlIiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiBjeWNsZSIsInJlc3BvbmRfdG8/IiwiRmxvYXQ6OklORklOSVRZIiwiRmxvYXQiLCJjb2VyY2VfdG8hIiwiSW50ZWdlciIsIj4iLCIqIiwiZGV0ZWN0IiwiaWZub25lIiwiYmxvY2sgaW4gZGV0ZWN0IiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiBkZXRlY3QiLCJkcm9wIiwibnVtYmVyIiwiZHJvcF93aGlsZSIsImVhY2hfY29ucyIsInRyeV9jb252ZXJ0IiwiYmxvY2sgaW4gZWFjaF9jb25zIiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiBlYWNoX2NvbnMiLCJlbnVtX3NpemUiLCI8IiwiKyIsIi0iLCJlYWNoX2VudHJ5IiwiZGF0YSIsImJsb2NrIGluIGVhY2hfZW50cnkiLCJibG9jayAoMiBsZXZlbHMpIGluIGVhY2hfZW50cnkiLCJlYWNoX3NsaWNlIiwiYmxvY2sgaW4gZWFjaF9zbGljZSIsImJsb2NrICgyIGxldmVscykgaW4gZWFjaF9zbGljZSIsIi8iLCJzaXplIiwiY2VpbCIsImVhY2hfd2l0aF9pbmRleCIsImJsb2NrIGluIGVhY2hfd2l0aF9pbmRleCIsImJsb2NrICgyIGxldmVscykgaW4gZWFjaF93aXRoX2luZGV4IiwiZWFjaF93aXRoX29iamVjdCIsImJsb2NrIGluIGVhY2hfd2l0aF9vYmplY3QiLCJibG9jayAoMiBsZXZlbHMpIGluIGVhY2hfd2l0aF9vYmplY3QiLCJlbnRyaWVzIiwiZmlsdGVyX21hcCIsImJsb2NrIGluIGZpbHRlcl9tYXAiLCJibG9jayAoMiBsZXZlbHMpIGluIGZpbHRlcl9tYXAiLCJzZWxlY3QiLCJmaW5kX2FsbCIsImJsb2NrIGluIGZpbmRfYWxsIiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiBmaW5kX2FsbCIsImZpbmRfaW5kZXgiLCJpbmRleCIsImJsb2NrIGluIGZpbmRfaW5kZXgiLCJibG9jayAoMiBsZXZlbHMpIGluIGZpbmRfaW5kZXgiLCJmaXJzdCIsImJsb2NrIGluIGZpcnN0IiwiY3VycmVudCIsImJsb2NrICgyIGxldmVscykgaW4gZmlyc3QiLCJncmVwIiwiYmxvY2sgaW4gZ3JlcCIsImJsb2NrICgyIGxldmVscykgaW4gZ3JlcCIsImNtcCIsIl9fc2VuZF9fIiwibGVuZ3RoIiwiPD0iLCJbXSIsInB1c2giLCJncmVwX3YiLCJibG9jayBpbiBncmVwX3YiLCJibG9jayAoMiBsZXZlbHMpIGluIGdyZXBfdiIsImdyb3VwX2J5IiwiYmxvY2sgaW4gZ3JvdXBfYnkiLCJibG9jayAoMiBsZXZlbHMpIGluIGdyb3VwX2J5IiwiaGFzaCIsIiRyZXRfb3JfMSIsIltdPSIsIjw8IiwiaW5jbHVkZT8iLCJvYmoiLCJibG9jayBpbiBpbmNsdWRlPyIsImJsb2NrICgyIGxldmVscykgaW4gaW5jbHVkZT8iLCJpbmplY3QiLCJzeW0iLCJTeW1ib2wiLCI9PT0iLCJUeXBlRXJyb3IiLCJpbnNwZWN0IiwibGF6eSIsIkVudW1lcmF0b3I6OkxhenkiLCJibG9jayBpbiBsYXp5IiwiZW51bSQiLCJibG9jayAoMiBsZXZlbHMpIGluIGxhenkiLCJtYXgiLCI8PT4iLCJzb3J0IiwicmV2ZXJzZSIsIm1heF9ieSIsImJsb2NrIGluIG1heF9ieSIsImJsb2NrICgyIGxldmVscykgaW4gbWF4X2J5Iiwic29ydF9ieSIsInRha2UiLCJtaW4iLCJibG9jayBpbiBtaW4iLCJhIiwiYiIsImNvbXBhcmUiLCJtaW5fYnkiLCJibG9jayBpbiBtaW5fYnkiLCJibG9jayAoMiBsZXZlbHMpIGluIG1pbl9ieSIsIm1pbm1heCIsImJsb2NrIGluIG1pbm1heCIsImJsb2NrICgyIGxldmVscykgaW4gbWlubWF4IiwiY2FsbCIsIm1pbm1heF9ieSIsImJsb2NrIGluIG1pbm1heF9ieSIsImJsb2NrICgyIGxldmVscykgaW4gbWlubWF4X2J5Iiwibm9uZT8iLCJibG9jayBpbiBub25lPyIsImJsb2NrICgyIGxldmVscykgaW4gbm9uZT8iLCJpdGVtIiwib25lPyIsImJsb2NrIGluIG9uZT8iLCJibG9jayAoMiBsZXZlbHMpIGluIG9uZT8iLCJwYXJ0aXRpb24iLCJibG9jayBpbiBwYXJ0aXRpb24iLCJibG9jayAoMiBsZXZlbHMpIGluIHBhcnRpdGlvbiIsInJlamVjdCIsImJsb2NrIGluIHJlamVjdCIsImJsb2NrICgyIGxldmVscykgaW4gcmVqZWN0IiwicmV2ZXJzZV9lYWNoIiwiYmxvY2sgaW4gcmV2ZXJzZV9lYWNoIiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiByZXZlcnNlX2VhY2giLCJzbGljZV9iZWZvcmUiLCJibG9jayBpbiBzbGljZV9iZWZvcmUiLCJlIiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiBzbGljZV9iZWZvcmUiLCJkdXAiLCJzbGljZV9hZnRlciIsImJsb2NrIGluIHNsaWNlX2FmdGVyIiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiBzbGljZV9hZnRlciIsImJsb2NrIGluIHNsaWNlX3doZW4iLCJibG9jayAoMiBsZXZlbHMpIGluIHNsaWNlX3doZW4iLCJhcnkiLCJibG9jayBpbiBzb3J0IiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiBzb3J0IiwiYmxvY2sgaW4gc29ydF9ieSIsImJsb2NrICgyIGxldmVscykgaW4gc29ydF9ieSIsImFyZyIsInNvcnQhIiwibWFwISIsImkiLCJzdW0iLCJpbml0aWFsIiwiY29tcGVuc2F0aW9uIiwiYmxvY2sgaW4gc3VtIiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiBzdW0iLCItQCIsInkiLCJ0IiwibnVtIiwidGFrZV93aGlsZSIsImJsb2NrIGluIHRha2Vfd2hpbGUiLCJibG9jayAoMiBsZXZlbHMpIGluIHRha2Vfd2hpbGUiLCJ1bmlxIiwiYmxvY2sgaW4gdW5pcSIsImJsb2NrICgyIGxldmVscykgaW4gdW5pcSIsInByb2R1Y2VkIiwia2V5PyIsInZhbHVlcyIsInRhbGx5Iiwib3V0IiwidHJhbnNmb3JtX3ZhbHVlcyIsImJsb2NrIGluIHRhbGx5IiwiayIsInYiLCJibG9jayAoMiBsZXZlbHMpIGluIHRhbGx5IiwiZmV0Y2giLCJ0b19oIiwiY29lcmNlX3RvPyIsIkFycmF5IiwiY2xhc3MiLCJ6aXAiLCJvdGhlcnMiXSwibWFwcGluZ3MiOiJBQUFBQSxxQ0FBQUEsZ0JBQUFBO0VBQUFBOztFQUFBQTtFQUVBQSxPQUFBQztFQUFBQTs7Ozs7QUFFQUE7QUFDQUE7QUFDQUE7QUFDQUE7O0FBRUFBO0FBQ0FBO0FBQ0FBOztBQUVBQTtBQUNBQTtBQUNBQTs7QUFFRUMsSUFBQUEsb0JBQUFBLGdDQUFTQyxPQUFURCxHQUFBQSxNQUFBQSxJQUFBQSw4QkFBQUE7QUFBQUEsTUFBQUE7O01BQUFBOzs7O01BQ0UsSUFBQSxRQUFJQSxxQkFBSixDQUFBO1FBQ0VFLE1BQUFDLElBQUFELFFBQUFBLEVBQUFBLEVBQUFBLEVBQUFFLGFBbkJOLEVBbUJNQSxFQUFBQzs7O1VBbkJOO1VBbUJlO1VBQ1BDLGFBQWNEO1VBRWQsSUFBQSxRQUEyQkUsTUFBUE4sT0FBT00sZUFBQUEsRUFBUCxDQU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9BQUEsYUFBTSxNQUFOLEVBQVcsU0FBWDtFQS92Q0ZBLEdBQU8sSUFBUEE7QUFGQUQ7In19LHsib2Zmc2V0Ijp7ImxpbmUiOjExNzE2LCJjb2x1bW4iOjB9LCJtYXAiOnsidmVyc2lvbiI6Mywic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29yZWxpYi9pby5yYiJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyA6OklPXG4gIHNlbGY6OlNFRUtfU0VUID0gMFxuICBzZWxmOjpTRUVLX0NVUiA9IDFcbiAgc2VsZjo6U0VFS19FTkQgPSAyXG4gIHNlbGY6OlNFRUtfREFUQSA9IDNcbiAgc2VsZjo6U0VFS19IT0xFID0gNFxuXG4gIHNlbGY6OlJFQURBQkxFID0gMVxuICBzZWxmOjpXUklUQUJMRSA9IDRcblxuICBhdHRyX3JlYWRlciA6ZW9mXG5cbiAgYXR0cl9hY2Nlc3NvciA6cmVhZF9wcm9jLCAgOnN5bmMsIDp0dHksIDp3cml0ZV9wcm9jXG5cbiAgZGVmIGluaXRpYWxpemUoZmQsIGZsYWdzID0gJ3InKVxuICAgIEBmZCA9IGZkXG4gICAgQGZsYWdzID0gZmxhZ3NcbiAgICBAZW9mID0gZmFsc2VcblxuICAgIGlmIGZsYWdzLmluY2x1ZGU/KCdyJykgJiYgIWZsYWdzLm1hdGNoPygvW3dhK10vKVxuICAgICAgQGNsb3NlZCA9IDp3cml0ZVxuICAgIGVsc2lmIGZsYWdzLm1hdGNoPygvW3dhXS8pICYmICFmbGFncy5tYXRjaD8oL1tyK10vKVxuICAgICAgQGNsb3NlZCA9IDpyZWFkXG4gICAgZW5kXG4gIGVuZFxuXG4gIGRlZiBmaWxlbm9cbiAgICBAZmRcbiAgZW5kXG5cbiAgZGVmIHR0eT9cbiAgICBgc2VsZi50dHkgPT0gdHJ1ZWBcbiAgZW5kXG5cbiAgZGVmIHdyaXRlKHN0cmluZylcbiAgICBgc2VsZi53cml0ZV9wcm9jKHN0cmluZylgXG4gICAgc3RyaW5nLnNpemVcbiAgZW5kXG5cbiAgZGVmIGZsdXNoXG4gICAgIyBub29wXG4gIGVuZFxuXG4gIGRlZiA8PChzdHJpbmcpXG4gICAgd3JpdGUoc3RyaW5nKVxuICAgIHNlbGZcbiAgZW5kXG5cbiAgZGVmIHByaW50KCphcmdzKVxuICAgICV4e1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gYXJncy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgIGFyZ3NbaV0gPSAjezo6S2VybmVsLlN0cmluZyhgYXJnc1tpXWApfVxuICAgICAgfVxuICAgICAgc2VsZi4kd3JpdGUoYXJncy5qb2luKCN7JCx9KSk7XG4gICAgfVxuICAgIG5pbFxuICBlbmRcblxuICBkZWYgcHV0cygqYXJncylcbiAgICAleHtcbiAgICAgIHZhciBsaW5lXG4gICAgICBpZiAoYXJncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgI3t3cml0ZSBcIlxcblwifTtcbiAgICAgICAgcmV0dXJuIG5pbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGFyZ3MubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgIGlmIChhcmdzW2ldLiQkaXNfYXJyYXkpe1xuICAgICAgICAgICAgdmFyIGFyeSA9ICN7YGFyZ3NbaV1gLmZsYXR0ZW59XG4gICAgICAgICAgICBpZiAoYXJ5Lmxlbmd0aCA+IDApICN7cHV0cygqYGFyeWApfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoYXJnc1tpXS4kJGlzX3N0cmluZykge1xuICAgICAgICAgICAgICBsaW5lID0gYXJnc1tpXS52YWx1ZU9mKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBsaW5lID0gI3s6Oktlcm5lbC5TdHJpbmcoYGFyZ3NbaV1gKX07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWxpbmUuZW5kc1dpdGgoXCJcXG5cIikpIGxpbmUgKz0gXCJcXG5cIlxuICAgICAgICAgICAgI3t3cml0ZSBgbGluZWB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIG5pbFxuICBlbmRcblxuICAjIFJlYWRpbmdcblxuICBkZWYgZ2V0Y1xuICAgIEByZWFkX2J1ZmZlciB8fD0gJydcbiAgICBwYXJ0cyA9ICcnXG5cbiAgICAjIFdpbGwgZXhlY3VyZSBhdCBtb3N0IHR3aWNlIC0gb25lIHRpbWUgcmVhZGluZyBmcm9tIGEgYnVmZmVyXG4gICAgIyBzZWNvbmQgdGltZSBleGVjdXRpbmcgcmVhZCBwcm9jXG4gICAgYmVnaW5cbiAgICAgIEByZWFkX2J1ZmZlciArPSBwYXJ0c1xuICAgICAgaWYgQHJlYWRfYnVmZmVyICE9ICcnXG4gICAgICAgIHJldCA9IEByZWFkX2J1ZmZlclswXVxuICAgICAgICBAcmVhZF9idWZmZXIgPSBAcmVhZF9idWZmZXJbMS4uLTFdXG4gICAgICAgIHJldHVybiByZXRcbiAgICAgIGVuZFxuICAgIGVuZCB3aGlsZSBwYXJ0cyA9IHN5c3JlYWRfbm9yYWlzZSgxKVxuXG4gICAgbmlsXG4gIGVuZFxuXG4gIGRlZiBnZXRieXRlXG4gICAgZ2V0YyYub3JkXG4gIGVuZFxuXG4gIGRlZiByZWFkYnl0ZVxuICAgIHJlYWRjaGFyLm9yZFxuICBlbmRcblxuICBkZWYgcmVhZGNoYXJcbiAgICBnZXRjIHx8IDo6S2VybmVsLnJhaXNlKDo6RU9GRXJyb3IsICdlbmQgb2YgZmlsZSByZWFjaGVkJylcbiAgZW5kXG5cbiAgZGVmIHJlYWRsaW5lKCphcmdzKVxuICAgIGdldHMoKmFyZ3MpIHx8IDo6S2VybmVsLnJhaXNlKDo6RU9GRXJyb3IsICdlbmQgb2YgZmlsZSByZWFjaGVkJylcbiAgZW5kXG5cbiAgZGVmIGdldHMoc2VwID0gZmFsc2UsIGxpbWl0ID0gbmlsLCBvcHRzID0ge30pXG4gICAgaWYgYHNlcC4kJGlzX251bWJlcmAgJiYgIWxpbWl0XG4gICAgICBzZXAsIGxpbWl0LCBvcHRzID0gZmFsc2UsIHNlcCwgbGltaXRcbiAgICBlbmRcbiAgICBpZiBgc2VwLiQkaXNfaGFzaGAgJiYgIWxpbWl0ICYmIG9wdHMgPT0ge31cbiAgICAgIHNlcCwgbGltaXQsIG9wdHMgPSBmYWxzZSwgbmlsLCBzZXBcbiAgICBlbHNpZiBgbGltaXQuJCRpc19oYXNoYCAmJiBvcHRzID09IHt9XG4gICAgICBzZXAsIGxpbWl0LCBvcHRzID0gc2VwLCBuaWwsIGxpbWl0XG4gICAgZW5kXG5cbiAgICBvcmlnX3NlcCA9IHNlcFxuXG4gICAgc2VwID0gJC8gaWYgc2VwID09IGZhbHNlXG4gICAgc2VwID0gL1xccj9cXG5cXHI/XFxuLyBpZiBzZXAgPT0gJydcbiAgICBzZXAgfHw9ICcnXG4gICAgc2VwID0gc2VwLnRvX3N0ciB1bmxlc3Mgb3JpZ19zZXAgPT0gJydcblxuICAgICMgVHJ5IHRvIGRlZHVjZSBsZW5ndGggb2YgYSByZWdleHBcbiAgICBzZXBsZW4gPSBvcmlnX3NlcCA9PSAnJyA/IDIgOiBzZXAubGVuZ3RoXG5cbiAgICBzZXAgPSAvIC8gaWYgc2VwID09ICcgJyAjIFdURiBpcyB0aGlzLCBTdHJpbmcjc3BsaXQoXCIgXCIpIG1hdGNoZXMgYWxsIHdoaXRlc3BhY2VzPz8/XG5cbiAgICBAcmVhZF9idWZmZXIgfHw9ICcnXG4gICAgZGF0YSA9ICcnXG4gICAgcmV0ID0gbmlsXG5cbiAgICBiZWdpblxuICAgICAgQHJlYWRfYnVmZmVyICs9IGRhdGFcbiAgICAgIGlmIHNlcCAhPSAnJyAmJiAoYHNlcC4kJGlzX3JlZ2V4cGAgPyBAcmVhZF9idWZmZXIubWF0Y2g/KHNlcCkgOiBAcmVhZF9idWZmZXIuaW5jbHVkZT8oc2VwKSlcbiAgICAgICAgb3JpZ19idWZmZXIgPSBAcmVhZF9idWZmZXJcbiAgICAgICAgcmV0LCBAcmVhZF9idWZmZXIgPSBAcmVhZF9idWZmZXIuc3BsaXQoc2VwLCAyKVxuICAgICAgICByZXQgKz0gb3JpZ19idWZmZXJbcmV0Lmxlbmd0aCwgc2VwbGVuXSBpZiByZXQgIT0gb3JpZ19idWZmZXJcbiAgICAgICAgYnJlYWtcbiAgICAgIGVuZFxuICAgIGVuZCB3aGlsZSBkYXRhID0gc3lzcmVhZF9ub3JhaXNlKHNlcCA9PSAnJyA/IDY1XzUzNiA6IDEpXG5cbiAgICB1bmxlc3MgcmV0XG4gICAgICByZXQsIEByZWFkX2J1ZmZlciA9IChAcmVhZF9idWZmZXIgfHwgJycpLCAnJ1xuICAgICAgcmV0ID0gbmlsIGlmIHJldCA9PSAnJ1xuICAgIGVuZFxuXG4gICAgaWYgcmV0XG4gICAgICBpZiBsaW1pdFxuICAgICAgICByZXQgPSByZXRbMC4uLmxpbWl0XVxuICAgICAgICBAcmVhZF9idWZmZXIgPSByZXRbbGltaXQuLi0xXSArIEByZWFkX2J1ZmZlclxuICAgICAgZW5kXG4gICAgICByZXQgPSByZXQuc3ViKC9cXHI/XFxuXFx6LywgJycpIGlmIG9wdHNbOmNob21wXVxuICAgICAgcmV0ID0gcmV0LnN1YigvXFxBW1xcclxcbl0rLywgJycpIGlmIG9yaWdfc2VwID09ICcnXG4gICAgZW5kXG5cbiAgICAkXyA9IHJldCBpZiBvcmlnX3NlcCA9PSBmYWxzZVxuICAgIHJldFxuICBlbmRcblxuICAjIFRoaXMgbWV0aG9kIGlzIHRvIGJlIG92ZXJsb2FkZWQsIG9yIHJlYWRfcHJvYyBjYW4gYmUgY2hhbmdlZFxuICBkZWYgc3lzcmVhZChpbnRlZ2VyKVxuICAgIGBzZWxmLnJlYWRfcHJvYyhpbnRlZ2VyKWAgfHwgYmVnaW5cbiAgICAgIEBlb2YgPSB0cnVlXG4gICAgICA6Oktlcm5lbC5yYWlzZSA6OkVPRkVycm9yLCAnZW5kIG9mIGZpbGUgcmVhY2hlZCdcbiAgICBlbmRcbiAgZW5kXG5cbiAgIyBAcHJpdmF0ZVxuICBkZWYgc3lzcmVhZF9ub3JhaXNlKGludGVnZXIpXG4gICAgc3lzcmVhZChpbnRlZ2VyKVxuICByZXNjdWUgOjpFT0ZFcnJvclxuICAgIG5pbFxuICBlbmRcblxuICBkZWYgcmVhZHBhcnRpYWwoaW50ZWdlcilcbiAgICBAcmVhZF9idWZmZXIgfHw9ICcnXG4gICAgcGFydCA9IHN5c3JlYWQoaW50ZWdlcilcbiAgICByZXQsIEByZWFkX2J1ZmZlciA9IEByZWFkX2J1ZmZlciArIChwYXJ0IHx8ICcnKSwgJydcbiAgICByZXQgPSBuaWwgaWYgcmV0ID09ICcnXG4gICAgcmV0XG4gIGVuZFxuXG4gIGRlZiByZWFkKGludGVnZXIgPSBuaWwpXG4gICAgQHJlYWRfYnVmZmVyIHx8PSAnJ1xuICAgIHBhcnRzID0gJydcbiAgICByZXQgPSBuaWxcblxuICAgIGJlZ2luXG4gICAgICBAcmVhZF9idWZmZXIgKz0gcGFydHNcbiAgICAgIGlmIGludGVnZXIgJiYgQHJlYWRfYnVmZmVyLmxlbmd0aCA+IGludGVnZXJcbiAgICAgICAgcmV0LCBAcmVhZF9idWZmZXIgPSBAcmVhZF9idWZmZXJbMC4uLmludGVnZXJdLCBAcmVhZF9idWZmZXJbaW50ZWdlci4uLTFdXG4gICAgICAgIHJldHVybiByZXRcbiAgICAgIGVuZFxuICAgIGVuZCB3aGlsZSBwYXJ0cyA9IHN5c3JlYWRfbm9yYWlzZShpbnRlZ2VyIHx8IDY1XzUzNilcblxuICAgIHJldCwgQHJlYWRfYnVmZmVyID0gQHJlYWRfYnVmZmVyLCAnJ1xuICAgIHJldFxuICBlbmRcblxuICAjIEVhY2hlc1xuXG4gIGRlZiByZWFkbGluZXMoc2VwYXJhdG9yID0gJC8pXG4gICAgZWFjaF9saW5lKHNlcGFyYXRvcikudG9fYVxuICBlbmRcblxuICBkZWYgZWFjaChzZXAgPSAkLywgKmFyZ3MsICZibG9jaylcbiAgICByZXR1cm4gZW51bV9mb3IgOmVhY2gsIHNlcCwgKmFyZ3MgdW5sZXNzIGJsb2NrX2dpdmVuP1xuXG4gICAgd2hpbGUgKHMgPSBnZXRzKHNlcCwgKmFyZ3MpKVxuICAgICAgeWllbGQocylcbiAgICBlbmRcblxuICAgIHNlbGZcbiAgZW5kXG5cbiAgZGVmIGVhY2hfYnl0ZSgmYmxvY2spXG4gICAgcmV0dXJuIGVudW1fZm9yIDplYWNoX2J5dGUgdW5sZXNzIGJsb2NrX2dpdmVuP1xuXG4gICAgd2hpbGUgKHMgPSBnZXRieXRlKVxuICAgICAgeWllbGQocylcbiAgICBlbmRcblxuICAgIHNlbGZcbiAgZW5kXG5cbiAgZGVmIGVhY2hfY2hhcigmYmxvY2spXG4gICAgcmV0dXJuIGVudW1fZm9yIDplYWNoX2NoYXIgdW5sZXNzIGJsb2NrX2dpdmVuP1xuXG4gICAgd2hpbGUgKHMgPSBnZXRjKVxuICAgICAgeWllbGQocylcbiAgICBlbmRcblxuICAgIHNlbGZcbiAgZW5kXG5cbiAgIyBDbG9zZWRuZXNzXG5cbiAgZGVmIGNsb3NlXG4gICAgQGNsb3NlZCA9IDpib3RoXG4gIGVuZFxuXG4gIGRlZiBjbG9zZV9yZWFkXG4gICAgaWYgQGNsb3NlZCA9PSA6d3JpdGVcbiAgICAgIEBjbG9zZWQgPSA6Ym90aFxuICAgIGVsc2VcbiAgICAgIEBjbG9zZWQgPSA6cmVhZFxuICAgIGVuZFxuICBlbmRcblxuICBkZWYgY2xvc2Vfd3JpdGVcbiAgICBpZiBAY2xvc2VkID09IDpyZWFkXG4gICAgICBAY2xvc2VkID0gOmJvdGhcbiAgICBlbHNlXG4gICAgICBAY2xvc2VkID0gOndyaXRlXG4gICAgZW5kXG4gIGVuZFxuXG4gIGRlZiBjbG9zZWQ/XG4gICAgQGNsb3NlZCA9PSA6Ym90aFxuICBlbmRcblxuICBkZWYgY2xvc2VkX3JlYWQ/XG4gICAgQGNsb3NlZCA9PSA6cmVhZCB8fCBAY2xvc2VkID09IDpib3RoXG4gIGVuZFxuXG4gIGRlZiBjbG9zZWRfd3JpdGU/XG4gICAgQGNsb3NlZCA9PSA6d3JpdGUgfHwgQGNsb3NlZCA9PSA6Ym90aFxuICBlbmRcblxuICAjIEBwcml2YXRlXG4gIGRlZiBjaGVja193cml0YWJsZVxuICAgIGlmIGNsb3NlZF93cml0ZT9cbiAgICAgIDo6S2VybmVsLnJhaXNlIDo6SU9FcnJvciwgJ25vdCBvcGVuZWQgZm9yIHdyaXRpbmcnXG4gICAgZW5kXG4gIGVuZFxuXG4gICMgQHByaXZhdGVcbiAgZGVmIGNoZWNrX3JlYWRhYmxlXG4gICAgaWYgY2xvc2VkX3JlYWQ/XG4gICAgICA6Oktlcm5lbC5yYWlzZSA6OklPRXJyb3IsICdub3Qgb3BlbmVkIGZvciByZWFkaW5nJ1xuICAgIGVuZFxuICBlbmRcblxuICBhbGlhcyBlYWNoX2xpbmUgZWFjaFxuICBhbGlhcyBlb2Y/IGVvZlxuZW5kXG5cbjo6U1RESU4gID0gJHN0ZGluICA9IDo6SU8ubmV3KDAsICdyJylcbjo6U1RET1VUID0gJHN0ZG91dCA9IDo6SU8ubmV3KDEsICd3Jylcbjo6U1RERVJSID0gJHN0ZGVyciA9IDo6SU8ubmV3KDIsICd3JylcblxuYHZhciBjb25zb2xlID0gT3BhbC5nbG9iYWwuY29uc29sZWBcbjo6U1RET1VULndyaXRlX3Byb2MgPSBgdHlwZW9mKHByb2Nlc3MpID09PSAnb2JqZWN0JyAmJiB0eXBlb2YocHJvY2Vzcy5zdGRvdXQpID09PSAnb2JqZWN0JyA/IGZ1bmN0aW9uKHMpe3Byb2Nlc3Muc3Rkb3V0LndyaXRlKHMpfSA6IGZ1bmN0aW9uKHMpe2NvbnNvbGUubG9nKHMpfWBcbjo6U1RERVJSLndyaXRlX3Byb2MgPSBgdHlwZW9mKHByb2Nlc3MpID09PSAnb2JqZWN0JyAmJiB0eXBlb2YocHJvY2Vzcy5zdGRlcnIpID09PSAnb2JqZWN0JyA/IGZ1bmN0aW9uKHMpe3Byb2Nlc3Muc3RkZXJyLndyaXRlKHMpfSA6IGZ1bmN0aW9uKHMpe2NvbnNvbGUud2FybihzKX1gXG5cbjo6U1RESU4ucmVhZF9wcm9jID0gYGZ1bmN0aW9uKHMpIHsgdmFyIHAgPSBwcm9tcHQoKTsgaWYgKHAgIT09IG51bGwpIHJldHVybiBwICsgXCJcXG5cIjsgcmV0dXJuIG5pbDsgfWBcbiJdLCJuYW1lcyI6WyI8dG9wIChyZXF1aXJlZCk+IiwiPGNsYXNzOklPPiIsInNlbGYiLCIwIiwiMSIsIjIiLCIzIiwiNCIsImF0dHJfcmVhZGVyIiwiYXR0cl9hY2Nlc3NvciIsImluaXRpYWxpemUiLCJmZCIsImZsYWdzIiwiQGZkIiwiQGZsYWdzIiwiQGVvZiIsImluY2x1ZGU/IiwibWF0Y2g/IiwiQGNsb3NlZCIsImZpbGVubyIsInR0eT8iLCJ3cml0ZSIsInN0cmluZyIsInNpemUiLCJmbHVzaCIsIjw8IiwicHJpbnQiLCJLZXJuZWwiLCJTdHJpbmciLCIkLCIsInB1dHMiLCJmbGF0dGVuIiwiZ2V0YyIsIkByZWFkX2J1ZmZlciIsIiRyZXRfb3JfMSIsInBhcnRzIiwiKyIsInJldCIsIltdIiwiLTEiLCJzeXNyZWFkX25vcmFpc2UiLCJnZXRieXRlIiwicmVhZGJ5dGUiLCJyZWFkY2hhciIsIm9yZCIsInJhaXNlIiwiRU9GRXJyb3IiLCJyZWFkbGluZSIsImdldHMiLCJhcmdzIiwic2VwIiwibGltaXQiLCJvcHRzIiwib3JpZ19zZXAiLCIkLyIsInRvX3N0ciIsInNlcGxlbiIsImxlbmd0aCIsImRhdGEiLCJvcmlnX2J1ZmZlciIsInNwbGl0IiwiNjU1MzYiLCJzdWIiLCIkXyIsInN5c3JlYWQiLCJpbnRlZ2VyIiwicmVhZHBhcnRpYWwiLCJwYXJ0IiwicmVhZCIsIj4iLCJyZWFkbGluZXMiLCJzZXBhcmF0b3IiLCJlYWNoX2xpbmUiLCJ0b19hIiwiZWFjaCIsImJsb2NrX2dpdmVuPyIsImVudW1fZm9yIiwicyIsImVhY2hfYnl0ZSIsImVhY2hfY2hhciIsImNsb3NlIiwiY2xvc2VfcmVhZCIsImNsb3NlX3dyaXRlIiwiY2xvc2VkPyIsIj09IiwiY2xvc2VkX3JlYWQ/IiwiY2xvc2VkX3dyaXRlPyIsImNoZWNrX3dyaXRhYmxlIiwiSU9FcnJvciIsImNoZWNrX3JlYWRhYmxlIiwiJHN0ZGluIiwiSU8iLCJuZXciLCIkc3Rkb3V0IiwiJHN0ZGVyciIsIlNURE9VVCIsIndyaXRlX3Byb2M9IiwiU1RERVJSIiwicmVhZF9wcm9jPSIsIlNURElOIl0sIm1hcHBpbmdzIjoiQUFBQUEsNkJBQUFBLGdCQUFBQTtFQUFBQTs7RUFBQUE7O0VBQUFDO0VBQUFBOztJQUFBQTs7QUFBQUE7O0lBQ0UsV0FBQUMsSUFBQSxjQUFpQkMsQ0FBakI7SUFDQSxXQUFBRCxJQUFBLGNBQWlCRSxDQUFqQjtJQUNBLFdBQUFGLElBQUEsY0FBaUJHLENBQWpCO0lBQ0EsV0FBQUgsSUFBQSxlQUFrQkksQ0FBbEI7SUFDQSxXQUFBSixJQUFBLGVBQWtCSyxDQUFsQjtJQUVBLFdBQUFMLElBQUEsY0FBaUJFLENBQWpCO0lBQ0EsV0FBQUYsSUFBQSxjQUFpQkssQ0FBakI7SUFFQUwsSUFBQU0sYU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FBQSxFQUFBQTtBQXRUUGxHOyJ9fSx7Im9mZnNldCI6eyJsaW5lIjoxMjE1NCwiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvcmVsaWIvbWV0aG9kLnJiIl0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIDo6TWV0aG9kXG4gIGF0dHJfcmVhZGVyIDpvd25lciwgOnJlY2VpdmVyLCA6bmFtZVxuXG4gIGRlZiBpbml0aWFsaXplKHJlY2VpdmVyLCBvd25lciwgbWV0aG9kLCBuYW1lKVxuICAgIEByZWNlaXZlciA9IHJlY2VpdmVyXG4gICAgQG93bmVyICAgID0gb3duZXJcbiAgICBAbmFtZSAgICAgPSBuYW1lXG4gICAgQG1ldGhvZCAgID0gbWV0aG9kXG4gIGVuZFxuXG4gIGRlZiBhcml0eVxuICAgIEBtZXRob2QuYXJpdHlcbiAgZW5kXG5cbiAgZGVmIHBhcmFtZXRlcnNcbiAgICBgI3tAbWV0aG9kfS4kJHBhcmFtZXRlcnNgXG4gIGVuZFxuXG4gIGRlZiBzb3VyY2VfbG9jYXRpb25cbiAgICBgI3tAbWV0aG9kfS4kJHNvdXJjZV9sb2NhdGlvbmAgfHwgWycoZXZhbCknLCAwXVxuICBlbmRcblxuICBkZWYgY29tbWVudHNcbiAgICBgI3tAbWV0aG9kfS4kJGNvbW1lbnRzYCB8fCBbXVxuICBlbmRcblxuICBkZWYgY2FsbCgqYXJncywgJmJsb2NrKVxuICAgICV4e1xuICAgICAgI3tAbWV0aG9kfS4kJHAgPSBibG9jaztcblxuICAgICAgcmV0dXJuICN7QG1ldGhvZH0uYXBwbHkoI3tAcmVjZWl2ZXJ9LCBhcmdzKTtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBjdXJyeShhcml0eSA9IHVuZGVmaW5lZClcbiAgICBAbWV0aG9kLmN1cnJ5KGFyaXR5KVxuICBlbmRcblxuICBkZWYgPj4ob3RoZXIpXG4gICAgQG1ldGhvZCA+PiBvdGhlclxuICBlbmRcblxuICBkZWYgPDwob3RoZXIpXG4gICAgQG1ldGhvZCA8PCBvdGhlclxuICBlbmRcblxuICBkZWYgdW5iaW5kXG4gICAgOjpVbmJvdW5kTWV0aG9kLm5ldyhAcmVjZWl2ZXIuY2xhc3MsIEBvd25lciwgQG1ldGhvZCwgQG5hbWUpXG4gIGVuZFxuXG4gIGRlZiB0b19wcm9jXG4gICAgJXh7XG4gICAgICB2YXIgcHJvYyA9IHNlbGYuJGNhbGwuYmluZChzZWxmKTtcbiAgICAgIHByb2MuJCR1bmJvdW5kID0gI3tAbWV0aG9kfTtcbiAgICAgIHByb2MuJCRpc19sYW1iZGEgPSB0cnVlO1xuICAgICAgcHJvYy4kJGFyaXR5ID0gI3tAbWV0aG9kfS4kJGFyaXR5O1xuICAgICAgcHJvYy4kJHBhcmFtZXRlcnMgPSAje0BtZXRob2R9LiQkcGFyYW1ldGVycztcbiAgICAgIHJldHVybiBwcm9jO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGluc3BlY3RcbiAgICBcIiM8I3tzZWxmLmNsYXNzfTogI3tAcmVjZWl2ZXIuY2xhc3N9IyN7QG5hbWV9IChkZWZpbmVkIGluICN7QG93bmVyfSBpbiAje3NvdXJjZV9sb2NhdGlvbi5qb2luKCc6Jyl9KT5cIlxuICBlbmRcblxuICBhbGlhcyBbXSBjYWxsXG4gIGFsaWFzID09PSBjYWxsXG5lbmRcblxuY2xhc3MgOjpVbmJvdW5kTWV0aG9kXG4gIGF0dHJfcmVhZGVyIDpzb3VyY2UsIDpvd25lciwgOm5hbWVcblxuICBkZWYgaW5pdGlhbGl6ZShzb3VyY2UsIG93bmVyLCBtZXRob2QsIG5hbWUpXG4gICAgQHNvdXJjZSA9IHNvdXJjZVxuICAgIEBvd25lciAgPSBvd25lclxuICAgIEBtZXRob2QgPSBtZXRob2RcbiAgICBAbmFtZSAgID0gbmFtZVxuICBlbmRcblxuICBkZWYgYXJpdHlcbiAgICBAbWV0aG9kLmFyaXR5XG4gIGVuZFxuXG4gIGRlZiBwYXJhbWV0ZXJzXG4gICAgYCN7QG1ldGhvZH0uJCRwYXJhbWV0ZXJzYFxuICBlbmRcblxuICBkZWYgc291cmNlX2xvY2F0aW9uXG4gICAgYCN7QG1ldGhvZH0uJCRzb3VyY2VfbG9jYXRpb25gIHx8IFsnKGV2YWwpJywgMF1cbiAgZW5kXG5cbiAgZGVmIGNvbW1lbnRzXG4gICAgYCN7QG1ldGhvZH0uJCRjb21tZW50c2AgfHwgW11cbiAgZW5kXG5cbiAgZGVmIGJpbmQob2JqZWN0KVxuICAgICV4e1xuICAgICAgaWYgKCN7QG93bmVyfS4kJGlzX21vZHVsZSB8fCBPcGFsLmlzX2EoI3tvYmplY3R9LCAje0Bvd25lcn0pKSB7XG4gICAgICAgIHJldHVybiAjezo6TWV0aG9kLm5ldyhvYmplY3QsIEBvd25lciwgQG1ldGhvZCwgQG5hbWUpfTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6VHlwZUVycm9yLCBcImNhbid0IGJpbmQgc2luZ2xldG9uIG1ldGhvZCB0byBhIGRpZmZlcmVudCBjbGFzcyAoZXhwZWN0ZWQgI3tvYmplY3R9LmtpbmRfb2Y/KCN7QG93bmVyfSB0byBiZSB0cnVlKVwifTtcbiAgICAgIH1cbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBiaW5kX2NhbGwob2JqZWN0LCAqYXJncywgJmJsb2NrKVxuICAgIGJpbmQob2JqZWN0KS5jYWxsKCphcmdzLCAmYmxvY2spXG4gIGVuZFxuXG4gIGRlZiBpbnNwZWN0XG4gICAgXCIjPCN7c2VsZi5jbGFzc306ICN7QHNvdXJjZX0jI3tAbmFtZX0gKGRlZmluZWQgaW4gI3tAb3duZXJ9IGluICN7c291cmNlX2xvY2F0aW9uLmpvaW4oJzonKX0pPlwiXG4gIGVuZFxuZW5kXG4iXSwibmFtZXMiOlsiPHRvcCAocmVxdWlyZWQpPiIsIjxjbGFzczpNZXRob2Q+Iiwic2VsZiIsImF0dHJfcmVhZGVyIiwiaW5pdGlhbGl6ZSIsInJlY2VpdmVyIiwib3duZXIiLCJtZXRob2QiLCJuYW1lIiwiQHJlY2VpdmVyIiwiQG93bmVyIiwiQG5hbWUiLCJAbWV0aG9kIiwiYXJpdHkiLCJwYXJhbWV0ZXJzIiwic291cmNlX2xvY2F0aW9uIiwiJHJldF9vcl8xIiwiMCIsImNvbW1lbnRzIiwiY2FsbCIsImN1cnJ5IiwiPj4iLCJvdGhlciIsIjw8IiwidW5iaW5kIiwiVW5ib3VuZE1ldGhvZCIsIm5ldyIsImNsYXNzIiwidG9fcHJvYyIsImluc3BlY3QiLCJqb2luIiwiPGNsYXNzOlVuYm91bmRNZXRob2Q+Iiwic291cmNlIiwiQHNvdXJjZSIsImJpbmQiLCJvYmplY3QiLCJNZXRob2QiLCJLZXJuZWwiLCJyYWlzZSIsIlR5cGVFcnJvciIsImJpbmRfY2FsbCIsImFyZ3MiLCJibG9jayJdLCJtYXBwaW5ncyI6IkFBQUFBLGlDQUFBQSxnQkFBQUE7RUFBQUE7O0VBQUFBOztFQUFBQztFQUFBQTs7SUFBQUE7O0FBQUFBOztJQUNFQyxJQUFBQyxhQUFBQSxDQUFZLE9BQVosRUFBb0IsVUFBcEIsRUFBK0IsTUFBL0JBOztBQUVBQyxJQUFBQSwwQkFBQUEsc0JBQWVDLFFBQUQsRUFBV0MsS0FBWCxFQUFrQkMsTUFBbEIsRUFBMEJDLElBQXhDSjtBQUFBQSxNQUFBQTs7O01BQ0VLLGdCQUFZSjtNQUNaSyxhQUFZSjtNQUNaSyxZQUFZSDtNQUNaSixPQUFBUSxDQUFBQSxjQUFZTCxNQUFaSztJQUpGUixDQUFBQSxHQUFBQTs7QUFPQVMsSUFBQUEscUJBQUFBLGlCQUFBQTtBQUFBQSxNQUFBQTs7TUFDRUEsT0FBQUQsV0FBT0MsT0FBQUEsQ0FBQUE7SUFEVEEsQ0FBQUEsR0FBQUE7O0FBSUFDLElBQUFBLDBCQUFBQSxzQkFBQUE7QUFBQUEsTUFBQUE7O01BQ0VBLE9BQUdGLFdBQVFFO0lBRGJBLENBQUFBLEdBQUFBOztBQUlBQyxJQUFBQSwrQkFBQUEsMkJBQUFBO0FBQUFBLE1BQUFBOztNQUNFLElBQUEsUUFBQUMsQ0FBQUEsWUFBR0osV0FBUUcsa0JBQVhDLENBQUEsQ0FBQTtRQUFBRCxPQUFBO01BQUE7UUFBa0NBLE9BQUEsQ0FBQ0EsUUFBRCxFQUFXRSxDQUFYO01BQWxDO0lBREZGLENBQUFBLEdBQUFBOztBQUlBRyxJQUFBQSx3QkFBQUEsb0JBQUFBO0FBQUFBLE1BQUFBOztNQUNFLElBQUEsUUFBQUYsQ0FBQUEsWUFBR0osV0FBUU0sV0FBWEYsQ0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IsQ0FBQSxHQUFxQ2tCLGVBQXJDLEdBQUEsQ0FBb0RuQixVQUFwRCxDQUFBLEdBQTJEbUIsTUFBM0QsR0FBQSxDQUFpRTNCLElBQUFhLGlCQUFBQSxDQUFBQSxDQUFlZSxNQUFBQSxDQUFNRCxHQUFOQyxDQUFoRixDQUFBLEdBQTJGRDtJQUQ3RkEsQ0FBQUEsR0FBQUE7RUF6Q0ZFLEdBQU0sSUFBTkEsRUFBQUEsSUFBQUE7QUFyRUEvQjsifX0seyJvZmZzZXQiOnsibGluZSI6MTIzNTQsImNvbHVtbiI6MH0sIm1hcCI6eyJ2ZXJzaW9uIjozLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb3JlbGliL3ZhcmlhYmxlcy5yYiJdLCJzb3VyY2VzQ29udGVudCI6WyIjIHJlZ2V4cCBtYXRjaGVzXG4leHskZ3ZhcnNbJyYnXSA9ICRndmFyc1snfiddID0gJGd2YXJzWydgJ10gPSAkZ3ZhcnNbXCInXCJdID0gbmlsfVxuXG4jIHJlcXVpcmVzXG4kTE9BREVEX0ZFQVRVUkVTID0gJFwiID0gYE9wYWwubG9hZGVkX2ZlYXR1cmVzYFxuJExPQURfUEFUSCAgICAgICA9ICQ6ID0gW11cblxuIyBzcGxpdCBsaW5lc1xuJC8gPSBcIlxcblwiXG4kLCA9IG5pbFxuXG46OkFSR1YgPSBbXVxuOjpBUkdGID0gOjpPYmplY3QubmV3XG46OkVOViAgPSB7fVxuXG4kVkVSQk9TRSA9IGZhbHNlXG4kREVCVUcgICA9IGZhbHNlXG4kU0FGRSAgICA9IDBcbiJdLCJuYW1lcyI6WyI8dG9wIChyZXF1aXJlZCk+IiwiJExPQURFRF9GRUFUVVJFUyIsIiRcIiIsIiRMT0FEX1BBVEgiLCIkOiIsIiQvIiwiJCwiLCJPYmplY3QiLCJuZXciLCIkVkVSQk9TRSIsIiRERUJVRyIsIiRTQUZFIiwiMCJdLCJtYXBwaW5ncyI6IkFBQUFBLG9DQUFBQSxnQkFBQUE7RUFBQUE7O0VBQUFBOztFQUNHQTtFQUdIQyx5QkFBbUJDLENBQUFBLGVBQU1GLG9CQUFORTtFQUNuQkMsbUJBQW1CQyxDQUFBQSxjQUFLLEVBQUxBO0VBR25CQyxjQUFLTDtFQUNMTSxjQUFLO0VBRUwsV0FBQSxJQUFBLFVBQVMsRUFBVDtFQUNBLFdBQUEsSUFBQSxVQUFTQyxPQUFRQyxLQUFBQSxDQUFBQSxDQUFqQjtFQUNBLFdBQUEsSUFBQSxTQUFTLFlBQUEsRUFBVDtFQUVBQyxpQkFBVztFQUNYQyxlQUFXO0VBQ1hWLE9BQUFXLENBQUFBLGNBQVdDLENBQVhEO0FBakJBWDsifX0seyJvZmZzZXQiOnsibGluZSI6MTIzNzIsImNvbHVtbiI6MH0sIm1hcCI6eyJ2ZXJzaW9uIjozLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb3JlbGliL2NvbXBhcmFibGUucmIiXSwic291cmNlc0NvbnRlbnQiOlsiIyBoZWxwZXJzOiB0cnV0aHlcblxubW9kdWxlIDo6Q29tcGFyYWJsZVxuICAleHtcbiAgICBmdW5jdGlvbiBub3JtYWxpemUod2hhdCkge1xuICAgICAgaWYgKE9wYWwuaXNfYSh3aGF0LCBPcGFsLkludGVnZXIpKSB7IHJldHVybiB3aGF0OyB9XG5cbiAgICAgIGlmICgje2B3aGF0YCA+IDB9KSB7IHJldHVybiAxOyB9XG4gICAgICBpZiAoI3tgd2hhdGAgPCAwfSkgeyByZXR1cm4gLTE7IH1cbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZhaWxfY29tcGFyaXNvbihsaHMsIHJocykge1xuICAgICAgdmFyIGNsYXNzX25hbWU7XG4gICAgICAje1xuICAgICAgICBjYXNlIGByaHNgXG4gICAgICAgIHdoZW4gbmlsLCB0cnVlLCBmYWxzZSwgOjpJbnRlZ2VyLCA6OkZsb2F0XG4gICAgICAgICAgYGNsYXNzX25hbWUgPSByaHMuJGluc3BlY3QoKWBcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGBjbGFzc19uYW1lID0gcmhzLiQkY2xhc3NgXG4gICAgICAgIGVuZFxuICAgICAgfVxuICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsIFwiY29tcGFyaXNvbiBvZiAje2BsaHNgLmNsYXNzfSB3aXRoICN7YGNsYXNzX25hbWVgfSBmYWlsZWRcIn1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbXBfb3JfZmFpbChsaHMsIHJocykge1xuICAgICAgdmFyIGNtcCA9ICN7YGxoc2AgPD0+IGByaHNgfTtcbiAgICAgIGlmICghJHRydXRoeShjbXApKSBmYWlsX2NvbXBhcmlzb24obGhzLCByaHMpO1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZShjbXApO1xuICAgIH1cbiAgfVxuXG4gIGRlZiA9PShvdGhlcilcbiAgICByZXR1cm4gdHJ1ZSBpZiBlcXVhbD8ob3RoZXIpXG5cbiAgICAleHtcbiAgICAgIGlmIChzZWxmW1wiJDw9PlwiXSA9PSBPcGFsLktlcm5lbFtcIiQ8PT5cIl0pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyBjaGVjayBmb3IgaW5maW5pdGUgcmVjdXJzaW9uXG4gICAgICBpZiAoc2VsZi4kJGNvbXBhcmFibGUpIHtcbiAgICAgICAgc2VsZi4kJGNvbXBhcmFibGUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZSB1bmxlc3MgY21wID0gKHNlbGYgPD0+IG90aGVyKVxuXG4gICAgYG5vcm1hbGl6ZShjbXApID09IDBgXG4gIGVuZFxuXG4gIGRlZiA+KG90aGVyKVxuICAgIGBjbXBfb3JfZmFpbChzZWxmLCBvdGhlcikgPiAwYFxuICBlbmRcblxuICBkZWYgPj0ob3RoZXIpXG4gICAgYGNtcF9vcl9mYWlsKHNlbGYsIG90aGVyKSA+PSAwYFxuICBlbmRcblxuICBkZWYgPChvdGhlcilcbiAgICBgY21wX29yX2ZhaWwoc2VsZiwgb3RoZXIpIDwgMGBcbiAgZW5kXG5cbiAgZGVmIDw9KG90aGVyKVxuICAgIGBjbXBfb3JfZmFpbChzZWxmLCBvdGhlcikgPD0gMGBcbiAgZW5kXG5cbiAgZGVmIGJldHdlZW4/KG1pbiwgbWF4KVxuICAgIHJldHVybiBmYWxzZSBpZiBzZWxmIDwgbWluXG4gICAgcmV0dXJuIGZhbHNlIGlmIHNlbGYgPiBtYXhcbiAgICB0cnVlXG4gIGVuZFxuXG4gIGRlZiBjbGFtcChtaW4sIG1heCA9IG5pbClcbiAgICAleHtcbiAgICAgIHZhciBjLCBleGNsO1xuXG4gICAgICBpZiAobWF4ID09PSBuaWwpIHtcbiAgICAgICAgLy8gV2UgYXJlIGRlYWxpbmcgd2l0aCBhIG5ldyBSdWJ5IDIuNyBiZWhhdmlvdXIgdGhhdCB3ZSBhcmUgYWJsZSB0b1xuICAgICAgICAvLyBwcm92aWRlIGEgc2luZ2xlIFJhbmdlIGFyZ3VtZW50IGluc3RlYWQgb2YgMiBDb21wYXJhYmxlcy5cblxuICAgICAgICBpZiAoIU9wYWwuaXNfYShtaW4sIE9wYWwuUmFuZ2UpKSB7XG4gICAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OlR5cGVFcnJvciwgXCJ3cm9uZyBhcmd1bWVudCB0eXBlICN7bWluLmNsYXNzfSAoZXhwZWN0ZWQgUmFuZ2UpXCJ9XG4gICAgICAgIH1cblxuICAgICAgICBleGNsID0gbWluLmV4Y2w7XG4gICAgICAgIG1heCA9IG1pbi5lbmQ7XG4gICAgICAgIG1pbiA9IG1pbi5iZWdpbjtcblxuICAgICAgICBpZiAobWF4ICE9PSBuaWwgJiYgZXhjbCkge1xuICAgICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCAnY2Fubm90IGNsYW1wIHdpdGggYW4gZXhjbHVzaXZlIHJhbmdlJ31cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWluICE9PSBuaWwgJiYgbWF4ICE9PSBuaWwgJiYgY21wX29yX2ZhaWwobWluLCBtYXgpID4gMCkge1xuICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgJ21pbiBhcmd1bWVudCBtdXN0IGJlIHNtYWxsZXIgdGhhbiBtYXggYXJndW1lbnQnfVxuICAgICAgfVxuXG4gICAgICBpZiAobWluICE9PSBuaWwpIHtcbiAgICAgICAgYyA9IGNtcF9vcl9mYWlsKHNlbGYsIG1pbik7XG5cbiAgICAgICAgaWYgKGMgPT0gMCkgcmV0dXJuIHNlbGY7XG4gICAgICAgIGlmIChjIDwgMCkgcmV0dXJuIG1pbjtcbiAgICAgIH1cblxuICAgICAgaWYgKG1heCAhPT0gbmlsKSB7XG4gICAgICAgIGMgPSBjbXBfb3JfZmFpbChzZWxmLCBtYXgpO1xuXG4gICAgICAgIGlmIChjID4gMCkgcmV0dXJuIG1heDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfVxuICBlbmRcbmVuZFxuIl0sIm5hbWVzIjpbIjx0b3AgKHJlcXVpcmVkKT4iLCI8bW9kdWxlOkNvbXBhcmFibGU+IiwiPiIsIjAiLCI8IiwiJHJldF9vcl8xIiwiSW50ZWdlciIsIkZsb2F0IiwiS2VybmVsIiwicmFpc2UiLCJBcmd1bWVudEVycm9yIiwiY2xhc3MiLCI8PT4iLCI9PSIsIm90aGVyIiwic2VsZiIsImVxdWFsPyIsImNtcCIsIj49IiwiPD0iLCJiZXR3ZWVuPyIsIm1pbiIsIm1heCIsImNsYW1wIiwiVHlwZUVycm9yIl0sIm1hcHBpbmdzIjoiQUFBQUEscUNBQUFBLGdCQUFBQTtFQUFBQTs7RUFBQUE7RUFFQUEsT0FBQUM7RUFBQUE7O0lBQUFBOzs7O0FBRUFBO0FBQ0FBOztBQUVBQSxVQUFtQkMsT0FBTkQsSUFBTUMsRUFBRUMsQ0FBRkQsQ0FBSUQ7QUFDdkJBLFVBQW1CRyxPQUFOSCxJQUFNRyxFQUFFRCxDQUFGQyxDQUFJSDtBQUN2QkE7QUFDQUE7O0FBRUFBO0FBQ0FBO0FBQ0FBLE1BRVEsQ0FoQlIsQ0FBQSxRQWdCYSxHQWhCYixFQWVRSSxDQUFBQSxZQUFNSixHQUFOSSxDQWZSLENBQUEsSUFBQSxDQUFBLENBQUEsUUFnQmtCLElBaEJsQixFQUFBLFNBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxRQWdCd0IsS0FoQnhCLEVBQUEsU0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLFFBZ0IrQkMsY0FoQi9CLEVBQUEsU0FBQSxDQUFBLElBQUEsQ0FBQSxRQWdCMENDLFlBaEIxQyxFQUFBLFNBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLENBZ0JRLEdBQUEsQ0FDR04sMkJBREgsSUFBQSxDQUdHQSx3QkFISCxDQUFBO0FBTVJBLE1BQVFPLE9BQVFDLE9BQUFBLENBQU9DLG9CQUFmLEVBQWlDVCxnQkFBRCxHQUFBLENBQWlCQSxDQUFDQSxHQUFEQSxDQUFLVSxPQUFBQSxDQUFBQSxDQUF0QixDQUFBLEdBQTZCVixRQUE3QixHQUFBLENBQXNDQSxVQUF0QyxDQUFBLEdBQWtEQSxTQUExRVE7QUFDaEJSOztBQUVBQTtBQUNBQSxnQkFBa0JBLENBQUNBLEdBQURBLENBQU1XLFFBQUFBLENBQUtYLEdBQUxXLENBQVVYO0FBQ2xDQTtBQUNBQTtBQUNBQTtBQUNBQTs7QUFFRVksSUFBQUEsa0JBQUFBLDhCQUFPQyxLQUFQRDtBQUFBQSxNQUFBQTs7O01BQ0UsSUFBQSxRQUFlRSxJQUFBQyxXQUFBQSxDQUFPRixLQUFQRSxDQUFmLENBQUE7UUFBQSxPQUFPO01BQVA7O0FBR0pIO0FBQ0FBO0FBQ0FBOztBQUVBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtNQUVJLEtBQUEsUUFBb0JJLENBQUFBLE1BQU9GLElBQUtILFFBQUFBLENBQUlFLEtBQUpGLENBQVpLLENBQXBCLENBQUE7UUFBQSxPQUFPO01BQVA7TUFFQUosT0FBQ0EsbUJBQURBO0lBakJGQSxDQUFBQSxHQUFBQTs7QUFvQkFYLElBQUFBLGlCQUFBQSwyQkFBTVksS0FBTlo7QUFBQUEsTUFBQUE7O01BQ0VBLE9BQUNBLDRCQUFEQTtJQURGQSxDQUFBQSxHQUFBQTs7QUFJQWdCLElBQUFBLGtCQUFBQSw4QkFBT0osS0FBUEk7QUFBQUEsTUFBQUE7O01BQ0VBLE9BQUNBLDZCQUFEQTtJQURGQSxDQUFBQSxHQUFBQTs7QUFJQWQsSUFBQUEsaUJBQUFBLDJCQUFNVSxLQUFOVjtBQUFBQSxNQUFBQTs7TUFDRUEsT0FBQ0EsNEJBQURBO0lBREZBLENBQUFBLEdBQUFBOztBQUlBZSxJQUFBQSxrQkFBQUEsOEJBQU9MLEtBQVBLO0FBQUFBLE1BQUFBOztNQUNFQSxPQUFDQSw2QkFBREE7SUFERkEsQ0FBQUEsR0FBQUE7O0FBSUFDLElBQUFBLHdCQUFBQSxvQ0FBYUMsR0FBRCxFQUFNQyxHQUFsQkY7QUFBQUEsTUFBQUE7OztNQUNFLElBQXFCaEIsT0FBTFcsSUFBS1gsRUFBRWlCLEdBQUZqQixDQUFyQjtRQUFBLE9BQU87TUFBUDtNQUNBLElBQXFCRixPQUFMYSxJQUFLYixFQUFFb0IsR0FBRnBCLENBQXJCO1FBQUEsT0FBTztNQUFQO01BQ0FrQixPQUFBO0lBSEZBLENBQUFBLEdBQUFBO0lBTUFuQixPQUFBc0IscUJBQUFBLGlCQUFVRixHQUFELEVBQU1DLEdBQWZDO0FBQUFBLE1BQUFBOzs7TUFBZSx1QkFBTTs7QUFFdkJBOztBQUVBQTtBQUNBQTtBQUNBQTs7QUFFQUE7QUFDQUEsVUFBWWYsT0FBUUMsT0FBQUEsQ0FBT2UsZ0JBQWYsRUFBNkJELHNCQUFELEdBQUEsQ0FBdUJGLEdBQUdWLE9BQUFBLENBQUFBLENBQTFCLENBQUEsR0FBaUNZLG1CQUFyRGQ7QUFDcEJjOztBQUVBQTtBQUNBQTtBQUNBQTs7QUFFQUE7QUFDQUEsVUFBWWYsT0FBUUMsT0FBQUEsQ0FBT0Msb0JBQWYsRUFBZ0NhLHNDQUF4QmQ7QUFDcEJjO0FBQ0FBOztBQUVBQTtBQUNBQSxRQUFVZixPQUFRQyxPQUFBQSxDQUFPQyxvQkFBZixFQUFnQ2EsZ0RBQXhCZDtBQUNsQmM7O0FBRUFBO0FBQ0FBOztBQUVBQTtBQUNBQTtBQUNBQTs7QUFFQUE7QUFDQUE7O0FBRUFBO0FBQ0FBOztBQUVBQTtBQUNBQTtJQXZDRUEsQ0FBQUEsSUFBQUE7RUF4RUZ0QixHQUFPLElBQVBBO0FBRkFEOyJ9fSx7Im9mZnNldCI6eyJsaW5lIjoxMjUxMiwiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvcmVsaWIvcmVnZXhwLnJiIl0sInNvdXJjZXNDb250ZW50IjpbIiMgaGVscGVyczogY29lcmNlX3RvLCBwcm9wLCBmcmVlemVcblxuY2xhc3MgOjpSZWdleHBFcnJvciA8IDo6U3RhbmRhcmRFcnJvcjsgZW5kXG5cbmNsYXNzIDo6UmVnZXhwIDwgYFJlZ0V4cGBcbiAgc2VsZjo6SUdOT1JFQ0FTRSA9IDFcbiAgc2VsZjo6RVhURU5ERUQgPSAyXG4gIHNlbGY6Ok1VTFRJTElORSA9IDRcblxuICBgT3BhbC5wcm9wKHNlbGYuJCRwcm90b3R5cGUsICckJGlzX3JlZ2V4cCcsIHRydWUpYFxuXG4gIGNsYXNzIDw8IHNlbGZcbiAgICBkZWYgYWxsb2NhdGVcbiAgICAgIGFsbG9jYXRlZCA9IHN1cGVyXG4gICAgICBgI3thbGxvY2F0ZWR9LnVuaW5pdGlhbGl6ZWQgPSB0cnVlYFxuICAgICAgYWxsb2NhdGVkXG4gICAgZW5kXG5cbiAgICBkZWYgZXNjYXBlKHN0cmluZylcbiAgICAgIGBPcGFsLmVzY2FwZV9yZWdleHAoc3RyaW5nKWBcbiAgICBlbmRcblxuICAgIGRlZiBsYXN0X21hdGNoKG4gPSBuaWwpXG4gICAgICBpZiBuLm5pbD9cbiAgICAgICAgJH5cbiAgICAgIGVsc2lmICR+XG4gICAgICAgICR+W25dXG4gICAgICBlbmRcbiAgICBlbmRcblxuICAgIGRlZiB1bmlvbigqcGFydHMpXG4gICAgICAleHtcbiAgICAgICAgdmFyIGlzX2ZpcnN0X3BhcnRfYXJyYXksIHF1b3RlZF92YWxpZGF0ZWQsIHBhcnQsIG9wdGlvbnMsIGVhY2hfcGFydF9vcHRpb25zO1xuICAgICAgICBpZiAocGFydHMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICByZXR1cm4gLyg/ISkvO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJldHVybiBmYXN0IGlmIHRoZXJlJ3Mgb25seSBvbmUgZWxlbWVudFxuICAgICAgICBpZiAocGFydHMubGVuZ3RoID09IDEgJiYgcGFydHNbMF0uJCRpc19yZWdleHApIHtcbiAgICAgICAgICByZXR1cm4gcGFydHNbMF07XG4gICAgICAgIH1cbiAgICAgICAgLy8gY292ZXIgdGhlIDIgYXJyYXlzIHBhc3NlZCBhcyBhcmd1bWVudHMgY2FzZVxuICAgICAgICBpc19maXJzdF9wYXJ0X2FycmF5ID0gcGFydHNbMF0uJCRpc19hcnJheTtcbiAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCA+IDEgJiYgaXNfZmlyc3RfcGFydF9hcnJheSkge1xuICAgICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpUeXBlRXJyb3IsICdubyBpbXBsaWNpdCBjb252ZXJzaW9uIG9mIEFycmF5IGludG8gU3RyaW5nJ31cbiAgICAgICAgfVxuICAgICAgICAvLyBkZWFsIHdpdGggc3BsYXQgaXNzdWVzIChyZWxhdGVkIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9vcGFsL29wYWwvaXNzdWVzLzg1OClcbiAgICAgICAgaWYgKGlzX2ZpcnN0X3BhcnRfYXJyYXkpIHtcbiAgICAgICAgICBwYXJ0cyA9IHBhcnRzWzBdO1xuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHF1b3RlZF92YWxpZGF0ZWQgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaT0wOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBwYXJ0ID0gcGFydHNbaV07XG4gICAgICAgICAgaWYgKHBhcnQuJCRpc19zdHJpbmcpIHtcbiAgICAgICAgICAgIHF1b3RlZF92YWxpZGF0ZWQucHVzaCgje2VzY2FwZShgcGFydGApfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKHBhcnQuJCRpc19yZWdleHApIHtcbiAgICAgICAgICAgIGVhY2hfcGFydF9vcHRpb25zID0gI3tgcGFydGAub3B0aW9uc307XG4gICAgICAgICAgICBpZiAob3B0aW9ucyAhPSB1bmRlZmluZWQgJiYgb3B0aW9ucyAhPSBlYWNoX3BhcnRfb3B0aW9ucykge1xuICAgICAgICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6VHlwZUVycm9yLCAnQWxsIGV4cHJlc3Npb25zIG11c3QgdXNlIHRoZSBzYW1lIG9wdGlvbnMnfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3B0aW9ucyA9IGVhY2hfcGFydF9vcHRpb25zO1xuICAgICAgICAgICAgcXVvdGVkX3ZhbGlkYXRlZC5wdXNoKCcoJytwYXJ0LnNvdXJjZSsnKScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHF1b3RlZF92YWxpZGF0ZWQucHVzaCgje2VzY2FwZShgcGFydGAudG9fc3RyKX0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgIyBUYWtlIGFkdmFudGFnZSBvZiBsb2dpYyB0aGF0IGNhbiBwYXJzZSBvcHRpb25zIGZyb20gSlMgUmVnZXhcbiAgICAgIG5ldyhgcXVvdGVkX3ZhbGlkYXRlZGAuam9pbignfCcpLCBgb3B0aW9uc2ApXG4gICAgZW5kXG5cbiAgICBkZWYgbmV3KHJlZ2V4cCwgb3B0aW9ucyA9IHVuZGVmaW5lZClcbiAgICAgICV4e1xuICAgICAgICBpZiAocmVnZXhwLiQkaXNfcmVnZXhwKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAocmVnZXhwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZ2V4cCA9ICN7OjpPcGFsLmNvZXJjZV90byEocmVnZXhwLCA6OlN0cmluZywgOnRvX3N0cil9O1xuXG4gICAgICAgIGlmIChyZWdleHAuY2hhckF0KHJlZ2V4cC5sZW5ndGggLSAxKSA9PT0gJ1xcXFwnICYmIHJlZ2V4cC5jaGFyQXQocmVnZXhwLmxlbmd0aCAtIDIpICE9PSAnXFxcXCcpIHtcbiAgICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6UmVnZXhwRXJyb3IsIFwidG9vIHNob3J0IGVzY2FwZSBzZXF1ZW5jZTogLyN7cmVnZXhwfS9cIn1cbiAgICAgICAgfVxuXG4gICAgICAgIHJlZ2V4cCA9IHJlZ2V4cC5yZXBsYWNlKCdcXFxcQScsICdeJykucmVwbGFjZSgnXFxcXHonLCAnJCcpXG5cbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCB8fCAjeyFvcHRpb25zfSkge1xuICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKHJlZ2V4cCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy4kJGlzX251bWJlcikge1xuICAgICAgICAgIHZhciB0ZW1wID0gJyc7XG4gICAgICAgICAgaWYgKCN7SUdOT1JFQ0FTRX0gJiBvcHRpb25zKSB7IHRlbXAgKz0gJ2knOyB9XG4gICAgICAgICAgaWYgKCN7TVVMVElMSU5FfSAgJiBvcHRpb25zKSB7IHRlbXAgKz0gJ20nOyB9XG4gICAgICAgICAgb3B0aW9ucyA9IHRlbXA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgb3B0aW9ucyA9ICdpJztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgUmVnRXhwKHJlZ2V4cCwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgZW5kXG5cbiAgICBhbGlhcyBjb21waWxlIG5ld1xuICAgIGFsaWFzIHF1b3RlIGVzY2FwZVxuICBlbmRcblxuICBkZWYgPT0ob3RoZXIpXG4gICAgYG90aGVyIGluc3RhbmNlb2YgUmVnRXhwICYmIHNlbGYudG9TdHJpbmcoKSA9PT0gb3RoZXIudG9TdHJpbmcoKWBcbiAgZW5kXG5cbiAgZGVmID09PShzdHJpbmcpXG4gICAgYCN7bWF0Y2goOjpPcGFsLmNvZXJjZV90bz8oc3RyaW5nLCA6OlN0cmluZywgOnRvX3N0cikpfSAhPT0gbmlsYFxuICBlbmRcblxuICBkZWYgPX4oc3RyaW5nKVxuICAgIG1hdGNoKHN0cmluZykgJiYgJH4uYmVnaW4oMClcbiAgZW5kXG5cbiAgZGVmIGZyZWV6ZVxuICAgICMgU3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBmcmVlemUsIGJlY2F1c2UgdGhlICQkZ20gYW5kICQkZyBwcm9wZXJ0aWVzIG5lZWQgdG8gYmUgc2V0XG4gICAgIyBlc3BlY2lhbGx5IGZvciBSZWdFeHAuXG5cbiAgICByZXR1cm4gc2VsZiBpZiBmcm96ZW4/XG5cbiAgICAleHtcbiAgICAgIGlmICghc2VsZi5oYXNPd25Qcm9wZXJ0eSgnJCRnJykpIHsgJHByb3Aoc2VsZiwgJyQkZycsIG51bGwpOyB9XG4gICAgICBpZiAoIXNlbGYuaGFzT3duUHJvcGVydHkoJyQkZ20nKSkgeyAkcHJvcChzZWxmLCAnJCRnbScsIG51bGwpOyB9XG5cbiAgICAgIHJldHVybiAkZnJlZXplKHNlbGYpO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGluc3BlY3RcbiAgICAjIFVzZSBhIHJlZ2V4cCB0byBleHRyYWN0IHRoZSByZWd1bGFyIGV4cHJlc3Npb24gYW5kIHRoZSBvcHRpb25hbCBtb2RlIG1vZGlmaWVycyBmcm9tIHRoZSBzdHJpbmcuXG4gICAgIyBJbiB0aGUgcmVndWxhciBleHByZXNzaW9uLCBlc2NhcGUgYW55IGZyb250IHNsYXNoIChub3QgYWxyZWFkeSBlc2NhcGVkKSB3aXRoIGEgYmFja3NsYXNoLlxuICAgICV4e1xuICAgICAgdmFyIHJlZ2V4cF9mb3JtYXQgPSAvXlxcLyguKilcXC8oW15cXC9dKikkLztcbiAgICAgIHZhciB2YWx1ZSA9IHNlbGYudG9TdHJpbmcoKTtcbiAgICAgIHZhciBtYXRjaGVzID0gcmVnZXhwX2Zvcm1hdC5leGVjKHZhbHVlKTtcbiAgICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICAgIHZhciByZWdleHBfcGF0dGVybiA9IG1hdGNoZXNbMV07XG4gICAgICAgIHZhciByZWdleHBfZmxhZ3MgPSBtYXRjaGVzWzJdO1xuICAgICAgICB2YXIgY2hhcnMgPSByZWdleHBfcGF0dGVybi5zcGxpdCgnJyk7XG4gICAgICAgIHZhciBjaGFyc19sZW5ndGggPSBjaGFycy5sZW5ndGg7XG4gICAgICAgIHZhciBjaGFyX2VzY2FwZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIHJlZ2V4cF9wYXR0ZXJuX2VzY2FwZWQgPSAnJztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGFyc19sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBjdXJyZW50X2NoYXIgPSBjaGFyc1tpXTtcbiAgICAgICAgICBpZiAoIWNoYXJfZXNjYXBlZCAmJiBjdXJyZW50X2NoYXIgPT0gJy8nKSB7XG4gICAgICAgICAgICByZWdleHBfcGF0dGVybl9lc2NhcGVkID0gcmVnZXhwX3BhdHRlcm5fZXNjYXBlZC5jb25jYXQoJ1xcXFwnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVnZXhwX3BhdHRlcm5fZXNjYXBlZCA9IHJlZ2V4cF9wYXR0ZXJuX2VzY2FwZWQuY29uY2F0KGN1cnJlbnRfY2hhcik7XG4gICAgICAgICAgaWYgKGN1cnJlbnRfY2hhciA9PSAnXFxcXCcpIHtcbiAgICAgICAgICAgIGlmIChjaGFyX2VzY2FwZWQpIHtcbiAgICAgICAgICAgICAgLy8gZG9lcyBub3Qgb3ZlciBlc2NhcGVcbiAgICAgICAgICAgICAgY2hhcl9lc2NhcGVkID0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjaGFyX2VzY2FwZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjaGFyX2VzY2FwZWQgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcvJyArIHJlZ2V4cF9wYXR0ZXJuX2VzY2FwZWQgKyAnLycgKyByZWdleHBfZmxhZ3M7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICBlbmRcblxuICBkZWYgbWF0Y2goc3RyaW5nLCBwb3MgPSB1bmRlZmluZWQsICZibG9jaylcbiAgICAleHtcbiAgICAgIGlmIChzZWxmLnVuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OlR5cGVFcnJvciwgJ3VuaW5pdGlhbGl6ZWQgUmVnZXhwJ31cbiAgICAgIH1cblxuICAgICAgaWYgKHBvcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChzdHJpbmcgPT09IG5pbCkgcmV0dXJuICN7JH4gPSBuaWx9O1xuICAgICAgICB2YXIgbSA9IHNlbGYuZXhlYygkY29lcmNlX3RvKHN0cmluZywgI3s6OlN0cmluZ30sICd0b19zdHInKSk7XG4gICAgICAgIGlmIChtKSB7XG4gICAgICAgICAgI3skfiA9IDo6TWF0Y2hEYXRhLm5ldyhgc2VsZmAsIGBtYCl9O1xuICAgICAgICAgIHJldHVybiBibG9jayA9PT0gbmlsID8gI3skfn0gOiAje3lpZWxkICR+fTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gI3skfiA9IG5pbH07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcG9zID0gJGNvZXJjZV90byhwb3MsICN7OjpJbnRlZ2VyfSwgJ3RvX2ludCcpO1xuXG4gICAgICBpZiAoc3RyaW5nID09PSBuaWwpIHtcbiAgICAgICAgcmV0dXJuICN7JH4gPSBuaWx9O1xuICAgICAgfVxuXG4gICAgICBzdHJpbmcgPSAkY29lcmNlX3RvKHN0cmluZywgI3s6OlN0cmluZ30sICd0b19zdHInKTtcblxuICAgICAgaWYgKHBvcyA8IDApIHtcbiAgICAgICAgcG9zICs9IHN0cmluZy5sZW5ndGg7XG4gICAgICAgIGlmIChwb3MgPCAwKSB7XG4gICAgICAgICAgcmV0dXJuICN7JH4gPSBuaWx9O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIGdsb2JhbCBSZWdFeHAgbWFpbnRhaW5zIHN0YXRlLCBzbyBub3QgdXNpbmcgc2VsZi90aGlzXG4gICAgICB2YXIgbWQsIHJlID0gT3BhbC5nbG9iYWxfcmVnZXhwKHNlbGYpO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBtZCA9IHJlLmV4ZWMoc3RyaW5nKTtcbiAgICAgICAgaWYgKG1kID09PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuICN7JH4gPSBuaWx9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZC5pbmRleCA+PSBwb3MpIHtcbiAgICAgICAgICAjeyR+ID0gOjpNYXRjaERhdGEubmV3KGByZWAsIGBtZGApfTtcbiAgICAgICAgICByZXR1cm4gYmxvY2sgPT09IG5pbCA/ICN7JH59IDogI3t5aWVsZCAkfn07XG4gICAgICAgIH1cbiAgICAgICAgcmUubGFzdEluZGV4ID0gbWQuaW5kZXggKyAxO1xuICAgICAgfVxuICAgIH1cbiAgZW5kXG5cbiAgZGVmIG1hdGNoPyhzdHJpbmcsIHBvcyA9IHVuZGVmaW5lZClcbiAgICAleHtcbiAgICAgIGlmIChzZWxmLnVuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OlR5cGVFcnJvciwgJ3VuaW5pdGlhbGl6ZWQgUmVnZXhwJ31cbiAgICAgIH1cblxuICAgICAgaWYgKHBvcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcgPT09IG5pbCA/IGZhbHNlIDogc2VsZi50ZXN0KCRjb2VyY2VfdG8oc3RyaW5nLCAjezo6U3RyaW5nfSwgJ3RvX3N0cicpKTtcbiAgICAgIH1cblxuICAgICAgcG9zID0gJGNvZXJjZV90byhwb3MsICN7OjpJbnRlZ2VyfSwgJ3RvX2ludCcpO1xuXG4gICAgICBpZiAoc3RyaW5nID09PSBuaWwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBzdHJpbmcgPSAkY29lcmNlX3RvKHN0cmluZywgI3s6OlN0cmluZ30sICd0b19zdHInKTtcblxuICAgICAgaWYgKHBvcyA8IDApIHtcbiAgICAgICAgcG9zICs9IHN0cmluZy5sZW5ndGg7XG4gICAgICAgIGlmIChwb3MgPCAwKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIGdsb2JhbCBSZWdFeHAgbWFpbnRhaW5zIHN0YXRlLCBzbyBub3QgdXNpbmcgc2VsZi90aGlzXG4gICAgICB2YXIgbWQsIHJlID0gT3BhbC5nbG9iYWxfcmVnZXhwKHNlbGYpO1xuXG4gICAgICBtZCA9IHJlLmV4ZWMoc3RyaW5nKTtcbiAgICAgIGlmIChtZCA9PT0gbnVsbCB8fCBtZC5pbmRleCA8IHBvcykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBuYW1lc1xuICAgIHNvdXJjZS5zY2FuKC9cXCg/PChcXHcrKT4vLCBub19tYXRjaGRhdGE6IHRydWUpLm1hcCgmOmZpcnN0KS51bmlxXG4gIGVuZFxuXG4gIGRlZiBuYW1lZF9jYXB0dXJlc1xuICAgIHNvdXJjZS5zY2FuKC9cXCg/PChcXHcrKT4vLCBub19tYXRjaGRhdGE6IHRydWUpICMgU2NhbiBmb3IgY2FwdHVyZSBncm91cHNcbiAgICAgICAgICAubWFwKCY6Zmlyc3QpICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBHZXQgdGhlIGZpcnN0IHJlZ2V4cCBtYXRjaCAoXFx3KylcbiAgICAgICAgICAuZWFjaF93aXRoX2luZGV4ICAgICAgICAgICAgICAgICAgICAgICAgIyBBZGQgaW5kZXggdG8gYW4gaXRlcmF0b3JcbiAgICAgICAgICAuZ3JvdXBfYnkoJjpmaXJzdCkgICAgICAgICAgICAgICAgICAgICAgIyBHcm91cCBieSB0aGUgY2FwdHVyZSBncm91cCBuYW1lc1xuICAgICAgICAgIC50cmFuc2Zvcm1fdmFsdWVzIGRvIHxpfCAgICAgICAgICAgICAgICAjIENvbnZlcnQgaGFzaCB2YWx1ZXNcbiAgICAgICAgICAgIGkubWFwIHsgfGp8IGoubGFzdCArIDEgfSAgICAgICAgICAgICAgIyBEcm9wIHRoZSBjYXB0dXJlIGdyb3VwIG5hbWVzOyBpbmNyZWFzZSBpbmRleGVzIGJ5IDFcbiAgICAgICAgICBlbmRcbiAgZW5kXG5cbiAgZGVmIH5cbiAgICBzZWxmID1+ICRfXG4gIGVuZFxuXG4gIGRlZiBzb3VyY2VcbiAgICBgc2VsZi5zb3VyY2VgXG4gIGVuZFxuXG4gIGRlZiBvcHRpb25zXG4gICAgIyBGbGFncyB3b3VsZCBiZSBuaWNlIHRvIHVzZSB3aXRoIHRoaXMsIGJ1dCBzdGlsbCBleHBlcmltZW50YWwgLSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9SZWdFeHAvZmxhZ3NcbiAgICAleHtcbiAgICAgIGlmIChzZWxmLnVuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OlR5cGVFcnJvciwgJ3VuaW5pdGlhbGl6ZWQgUmVnZXhwJ31cbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSAwO1xuICAgICAgLy8gc2hvdWxkIGJlIHN1cHBvcnRlZCBpbiBJRTYgYWNjb3JkaW5nIHRvIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvN2Y1ejI2dzQodj12cy45NCkuYXNweFxuICAgICAgaWYgKHNlbGYubXVsdGlsaW5lKSB7XG4gICAgICAgIHJlc3VsdCB8PSAje01VTFRJTElORX07XG4gICAgICB9XG4gICAgICBpZiAoc2VsZi5pZ25vcmVDYXNlKSB7XG4gICAgICAgIHJlc3VsdCB8PSAje0lHTk9SRUNBU0V9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBjYXNlZm9sZD9cbiAgICBgc2VsZi5pZ25vcmVDYXNlYFxuICBlbmRcblxuICBhbGlhcyBlcWw/ID09XG4gIGFsaWFzIHRvX3Mgc291cmNlXG5lbmRcblxuY2xhc3MgTWF0Y2hEYXRhXG4gIGF0dHJfcmVhZGVyIDpwb3N0X21hdGNoLCA6cHJlX21hdGNoLCA6cmVnZXhwLCA6c3RyaW5nXG5cbiAgZGVmIGluaXRpYWxpemUocmVnZXhwLCBtYXRjaF9ncm91cHMsIG5vX21hdGNoZGF0YTogZmFsc2UpXG4gICAgJH4gICAgICAgICAgPSBzZWxmIHVubGVzcyBub19tYXRjaGRhdGFcbiAgICBAcmVnZXhwICAgICA9IHJlZ2V4cFxuICAgIEBiZWdpbiAgICAgID0gYG1hdGNoX2dyb3Vwcy5pbmRleGBcbiAgICBAc3RyaW5nICAgICA9IGBtYXRjaF9ncm91cHMuaW5wdXRgXG4gICAgQHByZV9tYXRjaCAgPSBgbWF0Y2hfZ3JvdXBzLmlucHV0LnNsaWNlKDAsIG1hdGNoX2dyb3Vwcy5pbmRleClgXG4gICAgQHBvc3RfbWF0Y2ggPSBgbWF0Y2hfZ3JvdXBzLmlucHV0LnNsaWNlKG1hdGNoX2dyb3Vwcy5pbmRleCArIG1hdGNoX2dyb3Vwc1swXS5sZW5ndGgpYFxuICAgIEBtYXRjaGVzICAgID0gW11cblxuICAgICV4e1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IG1hdGNoX2dyb3Vwcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZ3JvdXAgPSBtYXRjaF9ncm91cHNbaV07XG5cbiAgICAgICAgaWYgKGdyb3VwID09IG51bGwpIHtcbiAgICAgICAgICAje0BtYXRjaGVzfS5wdXNoKG5pbCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgI3tAbWF0Y2hlc30ucHVzaChncm91cCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBtYXRjaChpZHgpXG4gICAgaWYgKG1hdGNoID0gc2VsZltpZHhdKVxuICAgICAgbWF0Y2hcbiAgICBlbHNpZiBpZHguaXNfYT8oSW50ZWdlcikgJiYgaWR4ID49IGxlbmd0aFxuICAgICAgOjpLZXJuZWwucmFpc2UgOjpJbmRleEVycm9yLCBcImluZGV4ICN7aWR4fSBvdXQgb2YgbWF0Y2hlc1wiXG4gICAgZW5kXG4gIGVuZFxuXG4gIGRlZiBtYXRjaF9sZW5ndGgoaWR4KVxuICAgIG1hdGNoKGlkeCkmLmxlbmd0aFxuICBlbmRcblxuICBkZWYgW10oKmFyZ3MpXG4gICAgJXh7XG4gICAgICBpZiAoYXJnc1swXS4kJGlzX3N0cmluZykge1xuICAgICAgICBpZiAoI3shcmVnZXhwLm5hbWVzLmluY2x1ZGU/KGFyZ3NbMF0pfSkge1xuICAgICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpJbmRleEVycm9yLCBcInVuZGVmaW5lZCBncm91cCBuYW1lIHJlZmVyZW5jZTogI3thcmdzWzBdfVwifVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAje25hbWVkX2NhcHR1cmVzW2FyZ3NbMF1dfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJldHVybiAje0BtYXRjaGVzWyphcmdzXX1cbiAgICAgIH1cbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBvZmZzZXQobilcbiAgICAleHtcbiAgICAgIGlmIChuICE9PSAwKSB7XG4gICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCAnTWF0Y2hEYXRhI29mZnNldCBvbmx5IHN1cHBvcnRzIDB0aCBlbGVtZW50J31cbiAgICAgIH1cbiAgICAgIHJldHVybiBbc2VsZi5iZWdpbiwgc2VsZi5iZWdpbiArIHNlbGYubWF0Y2hlc1tuXS5sZW5ndGhdO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmID09KG90aGVyKVxuICAgIHJldHVybiBmYWxzZSB1bmxlc3MgOjpNYXRjaERhdGEgPT09IG90aGVyXG5cbiAgICBgc2VsZi5zdHJpbmcgPT0gb3RoZXIuc3RyaW5nYCAmJlxuICAgICAgYHNlbGYucmVnZXhwLnRvU3RyaW5nKCkgPT0gb3RoZXIucmVnZXhwLnRvU3RyaW5nKClgICYmXG4gICAgICBgc2VsZi5wcmVfbWF0Y2ggPT0gb3RoZXIucHJlX21hdGNoYCAmJlxuICAgICAgYHNlbGYucG9zdF9tYXRjaCA9PSBvdGhlci5wb3N0X21hdGNoYCAmJlxuICAgICAgYHNlbGYuYmVnaW4gPT0gb3RoZXIuYmVnaW5gXG4gIGVuZFxuXG4gIGRlZiBiZWdpbihuKVxuICAgICV4e1xuICAgICAgaWYgKG4gIT09IDApIHtcbiAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsICdNYXRjaERhdGEjYmVnaW4gb25seSBzdXBwb3J0cyAwdGggZWxlbWVudCd9XG4gICAgICB9XG4gICAgICByZXR1cm4gc2VsZi5iZWdpbjtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBlbmQobilcbiAgICAleHtcbiAgICAgIGlmIChuICE9PSAwKSB7XG4gICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCAnTWF0Y2hEYXRhI2VuZCBvbmx5IHN1cHBvcnRzIDB0aCBlbGVtZW50J31cbiAgICAgIH1cbiAgICAgIHJldHVybiBzZWxmLmJlZ2luICsgc2VsZi5tYXRjaGVzW25dLmxlbmd0aDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBjYXB0dXJlc1xuICAgIGAje0BtYXRjaGVzfS5zbGljZSgxKWBcbiAgZW5kXG5cbiAgZGVmIG5hbWVkX2NhcHR1cmVzXG4gICAgbWF0Y2hlcyA9IGNhcHR1cmVzXG4gICAgcmVnZXhwLm5hbWVkX2NhcHR1cmVzLnRyYW5zZm9ybV92YWx1ZXMgZG8gfGl8XG4gICAgICBtYXRjaGVzW2kubGFzdCAtIDFdXG4gICAgZW5kXG4gIGVuZFxuXG4gIGRlZiBuYW1lc1xuICAgIHJlZ2V4cC5uYW1lc1xuICBlbmRcblxuICBkZWYgaW5zcGVjdFxuICAgICV4e1xuICAgICAgdmFyIHN0ciA9IFwiIzxNYXRjaERhdGEgXCIgKyAje2Aje0BtYXRjaGVzfVswXWAuaW5zcGVjdH07XG5cbiAgICAgIGlmICgje3JlZ2V4cC5uYW1lcy5lbXB0eT99KSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxLCBsZW5ndGggPSAje0BtYXRjaGVzfS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgIHN0ciArPSBcIiBcIiArIGkgKyBcIjpcIiArICN7YCN7QG1hdGNoZXN9W2ldYC5pbnNwZWN0fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgICN7IG5hbWVkX2NhcHR1cmVzLmVhY2ggZG8gfGssIHZ8XG4gICAgICAgICAgICAgJXh7XG4gICAgICAgICAgICAgICBzdHIgKz0gXCIgXCIgKyAje2t9ICsgXCI6XCIgKyAje3YuaW5zcGVjdH1cbiAgICAgICAgICAgICB9XG4gICAgICAgICAgIGVuZCB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHIgKyBcIj5cIjtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBsZW5ndGhcbiAgICBgI3tAbWF0Y2hlc30ubGVuZ3RoYFxuICBlbmRcblxuICBkZWYgdG9fYVxuICAgIEBtYXRjaGVzXG4gIGVuZFxuXG4gIGRlZiB0b19zXG4gICAgYCN7QG1hdGNoZXN9WzBdYFxuICBlbmRcblxuICBkZWYgdmFsdWVzX2F0KCphcmdzKVxuICAgICV4e1xuICAgICAgdmFyIGksIGEsIGluZGV4LCB2YWx1ZXMgPSBbXTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICBpZiAoYXJnc1tpXS4kJGlzX3JhbmdlKSB7XG4gICAgICAgICAgYSA9ICN7YGFyZ3NbaV1gLnRvX2F9O1xuICAgICAgICAgIGEudW5zaGlmdChpLCAxKTtcbiAgICAgICAgICBBcnJheS5wcm90b3R5cGUuc3BsaWNlLmFwcGx5KGFyZ3MsIGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5kZXggPSAjezo6T3BhbC5jb2VyY2VfdG8hKGBhcmdzW2ldYCwgOjpJbnRlZ2VyLCA6dG9faW50KX07XG5cbiAgICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICAgIGluZGV4ICs9ICN7QG1hdGNoZXN9Lmxlbmd0aDtcbiAgICAgICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgICAgICB2YWx1ZXMucHVzaChuaWwpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFsdWVzLnB1c2goI3tAbWF0Y2hlc31baW5kZXhdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9XG4gIGVuZFxuXG4gIGFsaWFzIGVxbD8gPT1cbiAgYWxpYXMgc2l6ZSBsZW5ndGhcbmVuZFxuIl0sIm5hbWVzIjpbIjx0b3AgKHJlcXVpcmVkKT4iLCI8Y2xhc3M6UmVnZXhwRXJyb3I+IiwiU3RhbmRhcmRFcnJvciIsIjxjbGFzczpSZWdleHA+Iiwic2VsZiIsIjEiLCIyIiwiNCIsImFsbG9jYXRlIiwiYWxsb2NhdGVkIiwiZXNjYXBlIiwic3RyaW5nIiwibGFzdF9tYXRjaCIsIm4iLCJuaWw/IiwiJH4iLCJbXSIsInVuaW9uIiwiS2VybmVsIiwicmFpc2UiLCJUeXBlRXJyb3IiLCJvcHRpb25zIiwidG9fc3RyIiwibmV3Iiwiam9pbiIsInJlZ2V4cCIsIk9wYWwiLCJjb2VyY2VfdG8hIiwiU3RyaW5nIiwiUmVnZXhwRXJyb3IiLCIhIiwiSUdOT1JFQ0FTRSIsIk1VTFRJTElORSIsIj09Iiwib3RoZXIiLCI9PT0iLCJtYXRjaCIsImNvZXJjZV90bz8iLCI9fiIsIiRyZXRfb3JfMSIsImJlZ2luIiwiMCIsImZyZWV6ZSIsImZyb3plbj8iLCJpbnNwZWN0IiwicG9zIiwiTWF0Y2hEYXRhIiwiSW50ZWdlciIsIm1hdGNoPyIsIm5hbWVzIiwibWFwIiwic291cmNlIiwic2NhbiIsInRvX3Byb2MiLCJ1bmlxIiwibmFtZWRfY2FwdHVyZXMiLCJ0cmFuc2Zvcm1fdmFsdWVzIiwiZ3JvdXBfYnkiLCJlYWNoX3dpdGhfaW5kZXgiLCJibG9jayBpbiBuYW1lZF9jYXB0dXJlcyIsImkiLCJibG9jayAoMiBsZXZlbHMpIGluIG5hbWVkX2NhcHR1cmVzIiwiaiIsImJsb2NrICgzIGxldmVscykgaW4gbmFtZWRfY2FwdHVyZXMiLCIrIiwibGFzdCIsIn4iLCIkXyIsImNhc2Vmb2xkPyIsIjxjbGFzczpNYXRjaERhdGE+IiwiYXR0cl9yZWFkZXIiLCJpbml0aWFsaXplIiwibWF0Y2hfZ3JvdXBzIiwiJGt3YXJncyIsIm5vX21hdGNoZGF0YSIsIkByZWdleHAiLCJAYmVnaW4iLCJAc3RyaW5nIiwiQHByZV9tYXRjaCIsIkBwb3N0X21hdGNoIiwiQG1hdGNoZXMiLCJpZHgiLCJpc19hPyIsIj49IiwibGVuZ3RoIiwiSW5kZXhFcnJvciIsIm1hdGNoX2xlbmd0aCIsImluY2x1ZGU/IiwiYXJncyIsIm9mZnNldCIsIkFyZ3VtZW50RXJyb3IiLCIkcmV0X29yXzIiLCIkcmV0X29yXzMiLCIkcmV0X29yXzQiLCJlbmQiLCJjYXB0dXJlcyIsIm1hdGNoZXMiLCItIiwiZW1wdHk/IiwiZWFjaCIsImJsb2NrIGluIGluc3BlY3QiLCJrIiwidiIsImJsb2NrICgyIGxldmVscykgaW4gaW5zcGVjdCIsInRvX2EiLCJ0b19zIiwidmFsdWVzX2F0Il0sIm1hcHBpbmdzIjoiQUFBQUEsaUNBQUFBLGdCQUFBQTtFQUFBQTs7RUFBQUE7O0VBRUFDLE9BQU0sSUFBTkEsRUFBc0JDLG9CQUF0QkQ7RUFFQUU7RUFBQUE7O0lBQUFBOzs7SUFDRSxXQUFBQyxJQUFBLGdCQUFtQkMsQ0FBbkI7SUFDQSxXQUFBRCxJQUFBLGNBQWlCRSxDQUFqQjtJQUNBLFdBQUFGLElBQUEsZUFBa0JHLENBQWxCO0lBRUNKO0lBRUQ7TUFBQTs7OztBQUNFSyxNQUFBQSx3QkFBQUEsb0JBQUFBO0FBQUFBLFFBQUFBOztRQUFBQTs7UUFDRUMsWUFBWSxPQUFBTCxJQUFBLEVBQUEsc0RBQUEsWUFBQSxFQUFBLEVBQUEsRUFBQSxNQUFBO1FBQ1RLLFNBQVVEO1FBQ2JBLE9BQUFDO01BSEZELENBQUFBLEdBQUFBOztBQU1BRSxNQUFBQSxzQkFBQUEsa0JBQVdDLE1BQVhEO0FBQUFBO1FBQ0VBLE9BQUNBLDBCQUFEQTtNQURGQSxDQUFBQSxHQUFBQTs7QUFJQUUsTUFBQUEsMEJBQUFBLHNCQUFlQyxDQUFmRDtBQUFBQSxRQUFBQTs7O1FBQWUsbUJBQUk7UUFDakIsSUFBQSxRQUFHQyxDQUFDQyxTQUFBQSxDQUFBQSxDQUFKLENBQUE7VUFDRUYsT0FBQUc7UUFERixPQUVBLElBQUEsUUFBTUEsV0FBTixDQUFBO1VBQ0VILE9BQUFHLFdBQUVDLE9BQUFBLENBQUNILENBQURHO1FBREo7VUF6Qk5KLE9BQUE7UUF5Qk07TUFIRkEsQ0FBQUEsSUFBQUE7O0FBUUFLLE1BQUFBLHFCQUFBQSxpQkE5QkosRUE4QklBO0FBQUFBLFFBQUFBOzs7UUE5Qko7UUE4QmM7O0FBRWRBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBLFVBQVlDLE9BQVFDLE9BQUFBLENBQU9DLGdCQUFmLEVBQTRCSCw2Q0FBcEJFO0FBQ3BCRjtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQSxrQ0FBb0NiLElBQUFNLFFBQUFBLENBQVFPLElBQVJQLENBQWVPO0FBQ25EQTtBQUNBQTtBQUNBQSxnQ0FBa0NBLENBQUNBLElBQURBLENBQU1JLFNBQUFBLENBQUFBLENBQVNKO0FBQ2pEQTtBQUNBQSxjQUFnQkMsT0FBUUMsT0FBQUEsQ0FBT0MsZ0JBQWYsRUFBNEJILDJDQUFwQkU7QUFDeEJGO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBLGtDQUFvQ2IsSUFBQU0sUUFBQUEsQ0FBT08sQ0FBQ0EsSUFBREEsQ0FBTUssUUFBQUEsQ0FBQUEsQ0FBYlosQ0FBc0JPO0FBQzFEQTtBQUNBQTtBQUNBQTtRQUVNQSxPQUFBYixJQUFBbUIsS0FBQUEsQ0FBSU4sQ0FBQ0EsZ0JBQURBLENBQWtCTyxNQUFBQSxDQUFNUCxHQUFOTyxDQUF0QixFQUFtQ1AsT0FBbkNNO01BeENGTixDQUFBQSxJQUFBQTs7QUEyQ0FNLE1BQUFBLG1CQUFBQSxnQkFBUUUsTUFBRCxFQUFTSixPQUFoQkU7QUFBQUE7Ozs7QUFFSkE7QUFDQUE7QUFDQUE7O0FBRUFBLGlCQUFtQkcsS0FBTUMsZUFBQUEsQ0FBWUYsTUFBbEIsRUFBMEJHLGFBQTFCLEVBQW9DLFFBQTlCRCxDQUF1Q0o7O0FBRWhFQTtBQUNBQSxVQUFZTCxPQUFRQyxPQUFBQSxDQUFPVSxrQkFBZixFQUErQk4sOEJBQUQsR0FBQSxDQUErQkUsTUFBL0IsQ0FBQSxHQUFzQ0YsR0FBNURKO0FBQ3BCSTs7QUFFQUE7O0FBRUFBLHFDQUF3Q0YsT0FBRFMsTUFBQUEsQ0FBQUEsQ0FBU1A7QUFDaERBO0FBQ0FBOztBQUVBQTtBQUNBQTtBQUNBQSxjQUFnQlEsZ0JBQVdSO0FBQzNCQSxjQUFnQlMsZUFBVVQ7QUFDMUJBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBOztBQUVBQTtBQUNBQTtNQTdCSUEsQ0FBQUEsSUFBQUE7TUFnQ0EsYUFBTSxTQUFOLEVBQWMsS0FBZDtNQUNBLE9BQUEsYUFBTSxPQUFOLEVBQVksUUFBWjtJQS9GRiw0QkFBU25CLElBQVQ7O0FBa0dBNkIsSUFBQUEsa0JBQUFBLDBCQUFPQyxLQUFQRDtBQUFBQSxNQUFBQTs7TUFDRUEsT0FBQ0EsK0RBQURBO0lBREZBLENBQUFBLEdBQUFBOztBQUlBRSxJQUFBQSxtQkFBQUEsNkJBQVF4QixNQUFSd0I7QUFBQUEsTUFBQUE7O01BQ0VBLE9BQUcvQixJQUFBZ0MsT0FBQUEsQ0FBTVYsS0FBTVcsZUFBQUEsQ0FBWTFCLE1BQWxCLEVBQTBCaUIsYUFBMUIsRUFBb0MsUUFBOUJTLENBQVpELENBQW9ERDtJQUR6REEsQ0FBQUEsR0FBQUE7O0FBSUFHLElBQUFBLGtCQUFBQSw2QkFBTzNCLE1BQVAyQjtBQUFBQSxNQUFBQTtBQUFBQTs7TUFDRSxJQUFBLFFBQUFDLENBQUFBLFlBQUFuQyxJQUFBZ0MsT0FBQUEsQ0FBTXpCLE1BQU55QixDQUFBRyxDQUFBLENBQUE7UUFBaUJELE9BQUF2QixXQUFFeUIsT0FBQUEsQ0FBT0MsQ0FBUEQ7TUFBbkI7UUFBQUYsT0FBQTtNQUFBO0lBREZBLENBQUFBLEdBQUFBOztBQUlBSSxJQUFBQSxzQkFBQUEsa0JBQUFBO0FBQUFBLE1BQUFBOzs7TUFJRSxJQUFBLFFBQWV0QyxJQUFBdUMsWUFBQUEsQ0FBQUEsQ0FBZixDQUFBO1FBQUEsT0FBT3ZDO01BQVA7O0FBR0pzQztBQUNBQTs7QUFFQUE7QUFDQUE7SUFYRUEsQ0FBQUEsR0FBQUE7O0FBY0FFLElBQUFBLHVCQUFBQSxtQkFBQUE7QUFBQUEsTUFBQUE7OztBQUlGQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtJQW5DRUEsQ0FBQUEsR0FBQUE7O0FBc0NBUixJQUFBQSxxQkFBQUEsaUJBQVV6QixNQUFELEVBQVNrQyxHQUFsQlQ7QUFBQUEsTUFBQUE7QUFBQUE7O01BQUFBOzs7OztBQUVGQTtBQUNBQSxRQUFVbEIsT0FBUUMsT0FBQUEsQ0FBT0MsZ0JBQWYsRUFBNEJnQixzQkFBcEJqQjtBQUNsQmlCOztBQUVBQTtBQUNBQSxtQ0FBcUNyQixDQUFBQSxjQUFLLEdBQUxBLENBQVNxQjtBQUM5Q0EsNkNBQStDUixhQUFTUTtBQUN4REE7QUFDQUEsVUFBWXJCLENBQUFBLGNBQUsrQixnQkFBV3ZCLEtBQUFBLENBQU1hLElBQWpCLEVBQXlCQSxDQUFkYixDQUFoQlIsQ0FBa0NxQjtBQUM5Q0EsaUNBQW1DckIsV0FBR3FCLEdBQUssbUJBQU1yQixXQUFOLENBQVNxQjtBQUNwREE7QUFDQUEsaUJBQW1CckIsQ0FBQUEsY0FBSyxHQUFMQSxDQUFTcUI7QUFDNUJBO0FBQ0FBOztBQUVBQSw0QkFBOEJXLGNBQVVYOztBQUV4Q0E7QUFDQUEsZUFBaUJyQixDQUFBQSxjQUFLLEdBQUxBLENBQVNxQjtBQUMxQkE7O0FBRUFBLGtDQUFvQ1IsYUFBU1E7O0FBRTdDQTtBQUNBQTtBQUNBQTtBQUNBQSxpQkFBbUJyQixDQUFBQSxjQUFLLEdBQUxBLENBQVNxQjtBQUM1QkE7QUFDQUE7O0FBRUFBO0FBQ0FBOztBQUVBQTtBQUNBQTtBQUNBQTtBQUNBQSxpQkFBbUJyQixDQUFBQSxjQUFLLEdBQUxBLENBQVNxQjtBQUM1QkE7QUFDQUE7QUFDQUEsVUFBWXJCLENBQUFBLGNBQUsrQixnQkFBV3ZCLEtBQUFBLENBQU1hLEVBQWpCLEVBQXVCQSxFQUFaYixDQUFoQlIsQ0FBaUNxQjtBQUM3Q0EsaUNBQW1DckIsV0FBR3FCLEdBQUssbUJBQU1yQixXQUFOLENBQVNxQjtBQUNwREE7QUFDQUE7QUFDQUE7QUFDQUE7SUE5Q0VBLENBQUFBLElBQUFBOztBQWlEQVksSUFBQUEsc0JBQUFBLDhCQUFXckMsTUFBRCxFQUFTa0MsR0FBbkJHO0FBQUFBLE1BQUFBOzs7OztBQUVGQTtBQUNBQSxRQUFVOUIsT0FBUUMsT0FBQUEsQ0FBT0MsZ0JBQWYsRUFBNEI0QixzQkFBcEI3QjtBQUNsQjZCOztBQUVBQTtBQUNBQSxxRUFBdUVwQixhQUFTb0I7QUFDaEZBOztBQUVBQSw0QkFBOEJELGNBQVVDOztBQUV4Q0E7QUFDQUE7QUFDQUE7O0FBRUFBLGtDQUFvQ3BCLGFBQVNvQjs7QUFFN0NBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBOztBQUVBQTtBQUNBQTs7QUFFQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7SUFsQ0VBLENBQUFBLElBQUFBOztBQXFDQUMsSUFBQUEscUJBQUFBLGlCQUFBQTtBQUFBQSxNQUFBQTs7TUFDRUEsT0FBNkNDLE1BQTdDOUMsSUFBQStDLFFBQUFBLENBQUFBLENBQU1DLE1BQUFBLENBQU0sWUFBWixFQUEwQiwwQkFBQSxnQkFBYyxJQUFkLEVBQXBCQSxDQUF1Q0YsT0FBQUEsRUFBQUEsRUFBQUEsRUFBTSxPQUFERyxTQUFBQSxDQUFBQSxDQUFMSCxDQUFhSSxNQUFBQSxDQUFBQTtJQUQ1REwsQ0FBQUEsR0FBQUE7O0FBSUFNLElBQUFBLDhCQUFBQSwwQkFBQUE7QUFBQUEsTUFBQUE7O01BQ0VBLE9BSU1DLE1BREFDLE1BRkFQLE1BRE45QyxJQUFBK0MsUUFBQUEsQ0FBQUEsQ0FBTUMsTUFBQUEsQ0FBTSxZQUFaLEVBQTBCLDBCQUFBLGdCQUFjLElBQWQsRUFBcEJBLENBQ0FGLE9BQUFBLEVBQUFBLEVBQUFBLEVBQU0sT0FBREcsU0FBQUEsQ0FBQUEsQ0FBTEgsQ0FDQVEsaUJBQUFBLENBQUFBLENBQ0FELFlBQUFBLEVBQUFBLEVBQUFBLEVBQVcsT0FBREosU0FBQUEsQ0FBQUEsQ0FBVkksQ0FDQUQsb0JBQUFBLEVBQUFBLEVBQUFBLEVBSk5HLGFBSTRCQyxDQUo1QkQ7O1FBSTRCO1FBQ3BCRSxPQUFDWCxNQUFEVSxDQUFDVixPQUFBQSxFQUFBQSxFQUFBQSxFQUFEVyxhQUFTQyxDQUFURDs7VUFBUztVQUFHRSxPQUFPQyxTQUFQRixDQUFDRyxNQUFBQSxDQUFBQSxDQUFNRCxFQUFFM0QsQ0FBRjJELEVBQW5CSCxDQUFBQSxHQUFDWCxFQUxUUyxDQUFBQSxHQUlNSDtJQUxSRCxDQUFBQSxHQUFBQTs7QUFVQVcsSUFBQUEsaUJBQUFBLHFCQUFBQTtBQUFBQSxNQUFBQTtBQUFBQTs7TUFDRUEsT0FBQTlELElBQUtrQyxPQUFBQSxDQUFHNkIsUUFBSDdCO0lBRFA0QixDQUFBQSxHQUFBQTs7QUFJQWYsSUFBQUEsc0JBQUFBLGtCQUFBQTtBQUFBQSxNQUFBQTs7TUFDRUEsT0FBQ0EsV0FBREE7SUFERkEsQ0FBQUEsR0FBQUE7O0FBSUE5QixJQUFBQSx1QkFBQUEsbUJBQUFBO0FBQUFBLE1BQUFBOzs7QUFHRkE7QUFDQUEsUUFBVUgsT0FBUUMsT0FBQUEsQ0FBT0MsZ0JBQWYsRUFBNEJDLHNCQUFwQkY7QUFDbEJFO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBLGtCQUFvQlcsZUFBVVg7QUFDOUJBO0FBQ0FBO0FBQ0FBLGtCQUFvQlUsZ0JBQVdWO0FBQy9CQTtBQUNBQTtBQUNBQTtJQWZFQSxDQUFBQSxHQUFBQTs7QUFrQkErQyxJQUFBQSx5QkFBQUEsaUNBQUFBO0FBQUFBLE1BQUFBOztNQUNFQSxPQUFDQSxlQUFEQTtJQURGQSxDQUFBQSxHQUFBQTtJQUlBLGFBQU0sTUFBTixFQUFXLElBQVg7SUFDQWpFLE9BQUEsYUFBTSxNQUFOLEVBQVcsUUFBWDtFQTVTRkEsR0FBTSxJQUFOQSxFQUFrQkgsTUFBbEJHO0VBK1NBSCxPQUFBcUU7RUFBQUE7O0lBQUFBOztBQUFBQTs7SUFDRWpFLElBQUFrRSxhQUFBQSxDQUFZLFlBQVosRUFBeUIsV0FBekIsRUFBcUMsUUFBckMsRUFBOEMsUUFBOUNBOztBQUVBQyxJQUFBQSwwQkFBQUEsc0JBQWU5QyxNQUFELEVBQVMrQyxZQUFULEVBdFRoQkMsT0FzVEVGO0FBQUFBLE1BQUFBOzs7TUF0VEY7O01Bc1R1Qyw4Q0FBQSx5Q0FBYztNQUNqRCxLQUFBLFFBQTBCRyxZQUExQixDQUFBO1FBQUEzRCxjQUFjWDtNQUFkO01BQ0F1RSxjQUFjbEQ7TUFDZG1ELGFBQWVMO01BQ2ZNLGNBQWVOO01BQ2ZPLGlCQUFlUDtNQUNmUSxrQkFBZVI7TUFDZlMsZUFBYzs7QUFHbEJUO0FBQ0FBOztBQUVBQTtBQUNBQSxVQUFZUyxZQUFTVDtBQUNyQkE7QUFDQUE7QUFDQUEsVUFBWVMsWUFBU1Q7QUFDckJBO0FBQ0FBO0FBQ0FBO0lBcEJFQSxDQUFBQSxJQUFBQTs7QUF1QkFuQyxJQUFBQSxxQkFBQUEsaUJBQVU2QyxHQUFWN0M7QUFBQUEsTUFBQUE7O01BQ0UsSUFBQSxRQUFJQSxDQUFBQSxRQUFRaEMsSUFBSVksT0FBQUEsQ0FBQ2lFLEdBQURqRSxDQUFab0IsQ0FBSixDQUFBO1FBQ0VBLE9BQUFBO01BREYsT0FFQSxJQUFNLENBQUEsUUFBQTZDLEdBQUdDLFVBQUFBLENBQU9uQyxhQUFQbUMsQ0FBSCxDQUFBLElBQUEsQ0FBQSxRQUEwQkMsT0FBSkYsR0FBSUUsRUFBRy9FLElBQUFnRixRQUFBQSxDQUFBQSxDQUFIRCxDQUExQixDQUFBLENBQUEsQ0FBTjtRQUNFL0MsT0FBQWxCLE9BQVFDLE9BQUFBLENBQU9rRSxpQkFBZixFQUE4QmpELFFBQUQsR0FBQSxDQUFTNkMsR0FBVCxDQUFBLEdBQWE3QyxpQkFBbENqQjtNQURWO1FBaFZKaUIsT0FBQTtNQWdWSTtJQUhGQSxDQUFBQSxHQUFBQTs7QUFRQWtELElBQUFBLDRCQUFBQSx3QkFBaUJMLEdBQWpCSztBQUFBQSxNQUFBQTs7TUFDRUEsT0FBQSxDQUFBLEtBQUFsRixJQUFBZ0MsT0FBQUEsQ0FBTTZDLEdBQU43QyxDQUFBLHFDQUFBLEVBQUEsUUFBQSxDQUFBLENBQUE7SUFERmtELENBQUFBLEdBQUFBOztBQUlBdEUsSUFBQUEsa0JBQUFBLDBCQXpWRixFQXlWRUE7QUFBQUEsTUFBQUE7OztNQXpWRjtNQXlWUzs7QUFFVEE7QUFDQUEsWUFBZVosSUFBQXFCLFFBQUFBLENBQUFBLENBQU13QixPQUFBQSxDQUFBQSxDQUFNc0MsYUFBQUEsQ0FBVUMsSUFBSXhFLE9BQUFBLENBQUN5QixDQUFEekIsQ0FBZHVFLENBQWJ6RCxNQUFBQSxDQUFBQSxDQUFnQ2Q7QUFDOUNBLFVBQVlFLE9BQVFDLE9BQUFBLENBQU9rRSxpQkFBZixFQUE4QnJFLGtDQUFELEdBQUEsQ0FBbUN3RSxJQUFJeEUsT0FBQUEsQ0FBQ3lCLENBQUR6QixDQUF2QyxDQUFyQkc7QUFDcEJIO0FBQ0FBLGVBQWlCWixJQUFBbUQsZ0JBQUFBLENBQUFBLENBQWN2QyxPQUFBQSxDQUFDd0UsSUFBSXhFLE9BQUFBLENBQUN5QixDQUFEekIsQ0FBTEE7QUFDL0JBO0FBQ0FBO0FBQ0FBLGVBQXlCQSxNQUFSZ0UsWUFBUWhFLE1BQUFBLEVBQUMsTUFBQ3dFLElBQUQsQ0FBRHhFO0FBQ3pCQTtBQUNBQTtJQVhFQSxDQUFBQSxJQUFBQTs7QUFjQXlFLElBQUFBLHNCQUFBQSxrQkFBVzVFLENBQVg0RTtBQUFBQSxNQUFBQTs7O0FBRUZBO0FBQ0FBLFFBQVV2RSxPQUFRQyxPQUFBQSxDQUFPdUUsb0JBQWYsRUFBZ0NELDRDQUF4QnRFO0FBQ2xCc0U7QUFDQUE7QUFDQUE7SUFORUEsQ0FBQUEsR0FBQUE7O0FBU0F4RCxJQUFBQSxrQkFBQUEsOEJBQU9DLEtBQVBEO0FBQUFBLE1BQUFBOzs7TUFDRSxLQUFBLFFBQW9CYSxnQkFBcEIsRUFBb0NaLEtBQXBDLENBQUE7UUFBQSxPQUFPO01BQVA7TUFFQSxJQUFBLFFBQUFLLENBQUFBLFlBQUEsQ0FBQSxRQUFBb0QsQ0FBQUEsWUFBQSxDQUFBLFFBQUFDLENBQUFBLFlBQUEsQ0FBQSxRQUFBQyxDQUFBQSxZQUFDNUQsMkJBQUQ0RCxDQUFBLENBQUEsR0FBQSxDQUNHNUQsaURBREgsSUFBQSxDQUFBLFNBQUEsQ0FBQSxDQUFBMkQsQ0FBQSxDQUFBLEdBQUEsQ0FFRzNELGlDQUZILElBQUEsQ0FBQSxTQUFBLENBQUEsQ0FBQTBELENBQUEsQ0FBQSxHQUFBLENBR0cxRCxtQ0FISCxJQUFBLENBQUEsU0FBQSxDQUFBLENBQUFNLENBQUEsQ0FBQTtRQUlFTixPQUFDQSx5QkFBREE7TUFKRjtRQUFBQSxPQUFBO01BQUE7SUFIRkEsQ0FBQUEsR0FBQUE7O0FBVUFPLElBQUFBLHFCQUFBQSxpQkFBVTNCLENBQVYyQjtBQUFBQSxNQUFBQTs7O0FBRUZBO0FBQ0FBLFFBQVV0QixPQUFRQyxPQUFBQSxDQUFPdUUsb0JBQWYsRUFBZ0NsRCwyQ0FBeEJyQjtBQUNsQnFCO0FBQ0FBO0FBQ0FBO0lBTkVBLENBQUFBLEdBQUFBOztBQVNBc0QsSUFBQUEsbUJBQUFBLGVBQVFqRixDQUFSaUY7QUFBQUEsTUFBQUE7OztBQUVGQTtBQUNBQSxRQUFVNUUsT0FBUUMsT0FBQUEsQ0FBT3VFLG9CQUFmLEVBQWdDSSx5Q0FBeEIzRTtBQUNsQjJFO0FBQ0FBO0FBQ0FBO0lBTkVBLENBQUFBLEdBQUFBOztBQVNBQyxJQUFBQSx3QkFBQUEsb0JBQUFBO0FBQUFBLE1BQUFBOztNQUNFQSxPQUFHZixZQUFTZTtJQURkQSxDQUFBQSxHQUFBQTs7QUFJQXhDLElBQUFBLDhCQUFBQSwwQkFBQUE7QUFBQUEsTUFBQUE7OztNQUNFeUMsVUFBVTVGLElBQUEyRixVQUFBQSxDQUFBQTtNQUNWeEMsT0FBcUJDLE1BQXJCcEQsSUFBQXFCLFFBQUFBLENBQUFBLENBQU04QixnQkFBQUEsQ0FBQUEsQ0FBZUMsb0JBQUFBLEVBQUFBLEVBQUFBLEVBQXJCRyxjQUEyQ0MsQ0FBM0NEOztRQUEyQztRQUN6Q0UsT0FBQW1DLE9BQU9oRixPQUFBQSxDQUFRaUYsVUFBUHJDLENBQUNLLE1BQUFBLENBQUFBLENBQU1nQyxFQUFFNUYsQ0FBRjRGLENBQVJqRixFQURUMkMsQ0FBQUEsR0FBcUJIO0lBRnZCRCxDQUFBQSxHQUFBQTs7QUFPQU4sSUFBQUEscUJBQUFBLGlCQUFBQTtBQUFBQSxNQUFBQTs7TUFDRUEsT0FBQTdDLElBQUFxQixRQUFBQSxDQUFBQSxDQUFNd0IsT0FBQUEsQ0FBQUE7SUFEUkEsQ0FBQUEsR0FBQUE7O0FBSUFMLElBQUFBLHVCQUFBQSxtQkFBQUE7QUFBQUEsTUFBQUE7OztBQUVGQSxpQ0FBbUNBLENBQUdvQyxZQUFTcEMsR0FBWkEsQ0FBZ0JBLFNBQUFBLENBQUFBLENBQVNBOztBQUU1REEsVUFBWXhDLElBQUFxQixRQUFBQSxDQUFBQSxDQUFNd0IsT0FBQUEsQ0FBQUEsQ0FBTWlELFdBQUFBLENBQUFBLENBQVF0RDtBQUNoQ0EsaUNBQW1Db0MsWUFBU3BDO0FBQzVDQSxpQ0FBbUNBLENBQUdvQyxZQUFTcEMsR0FBWkEsQ0FBZ0JBLFNBQUFBLENBQUFBLENBQVNBO0FBQzVEQTtBQUNBQTtBQUNBQTtBQUNBQSxRQUF5QnVELE1BQWQvRixJQUFBbUQsZ0JBQUFBLENBQUFBLENBQWM0QyxRQUFBQSxFQUFBQSxFQUFBQSxFQUFkQyxjQUF3QkMsQ0FBRCxFQUFJQyxDQUEzQkY7O1FBQXdCO1FBQUc7UUFDekJHLE9BQ2JBLDRCQUE4QkYsQ0FBRUUsU0FBV0QsQ0FBQzFELFNBQUFBLENBQUFBLEVBRmpDd0QsQ0FBQUEsR0FBY0Q7QUFLekJ2RDs7QUFFQUE7QUFDQUE7SUFsQkVBLENBQUFBLEdBQUFBOztBQXFCQXdDLElBQUFBLHNCQUFBQSxrQkFBQUE7QUFBQUEsTUFBQUE7O01BQ0VBLE9BQUdKLFlBQVNJO0lBRGRBLENBQUFBLEdBQUFBOztBQUlBb0IsSUFBQUEsb0JBQUFBLGFBQ0UsU0FERkEsQ0FBQUEsR0FBQUE7O0FBSUFDLElBQUFBLG9CQUFBQSxnQkFBQUE7QUFBQUEsTUFBQUE7O01BQ0VBLE9BQUd6QixZQUFTeUI7SUFEZEEsQ0FBQUEsR0FBQUE7O0FBSUFDLElBQUFBLHlCQUFBQSxxQkE1YkYsRUE0YkVBO0FBQUFBLE1BQUFBOzs7TUE1YkY7TUE0YmdCOztBQUVoQkE7O0FBRUFBOztBQUVBQTtBQUNBQSxjQUFnQkEsQ0FBQ0EsT0FBREEsQ0FBU0YsTUFBQUEsQ0FBQUEsQ0FBTUU7QUFDL0JBO0FBQ0FBO0FBQ0FBOztBQUVBQSxnQkFBa0JoRixLQUFNQyxlQUFBQSxDQUFhK0UsT0FBbkIsRUFBNkIzRCxjQUE3QixFQUF3QyxRQUFsQ3BCLENBQTJDK0U7O0FBRW5FQTtBQUNBQSxtQkFBcUIxQixZQUFTMEI7QUFDOUJBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBOztBQUVBQSxvQkFBc0IxQixZQUFTMEI7QUFDL0JBOztBQUVBQTtBQUNBQTtJQTFCRUEsQ0FBQUEsSUFBQUE7SUE2QkEsYUFBTSxNQUFOLEVBQVcsSUFBWDtJQUNBckMsT0FBQSxhQUFNLE1BQU4sRUFBVyxRQUFYO0VBdktGQSxHQUFBQSxXQUFBQSxFQUFBQSxJQUFBQTtBQW5UQXJFOyJ9fSx7Im9mZnNldCI6eyJsaW5lIjoxMzA5OSwiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvcmVsaWIvcmFuZ2UucmIiXSwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSAnY29yZWxpYi9lbnVtZXJhYmxlJ1xuXG5jbGFzcyA6OlJhbmdlXG4gIGluY2x1ZGUgOjpFbnVtZXJhYmxlXG5cbiAgYHNlbGYuJCRwcm90b3R5cGUuJCRpc19yYW5nZSA9IHRydWVgXG5cbiAgYXR0cl9yZWFkZXIgOmJlZ2luLCA6ZW5kXG5cbiAgZGVmIGluaXRpYWxpemUoZmlyc3QsIGxhc3QsIGV4Y2x1ZGUgPSBmYWxzZSlcbiAgICA6Oktlcm5lbC5yYWlzZSA6Ok5hbWVFcnJvciwgXCInaW5pdGlhbGl6ZScgY2FsbGVkIHR3aWNlXCIgaWYgQGJlZ2luXG4gICAgOjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCAnYmFkIHZhbHVlIGZvciByYW5nZScgdW5sZXNzIGZpcnN0IDw9PiBsYXN0IHx8IGZpcnN0Lm5pbD8gfHwgbGFzdC5uaWw/XG5cbiAgICBAYmVnaW4gPSBmaXJzdFxuICAgIEBlbmQgICA9IGxhc3RcbiAgICBAZXhjbCAgPSBleGNsdWRlXG4gIGVuZFxuXG4gIGRlZiA9PT0odmFsdWUpXG4gICAgaW5jbHVkZT8gdmFsdWVcbiAgZW5kXG5cbiAgJXh7XG4gICAgZnVuY3Rpb24gaXNfaW5maW5pdGUoc2VsZikge1xuICAgICAgaWYgKHNlbGYuYmVnaW4gPT09IG5pbCB8fCBzZWxmLmVuZCA9PT0gbmlsIHx8XG4gICAgICAgICAgc2VsZi5iZWdpbiA9PT0gLUluZmluaXR5IHx8IHNlbGYuZW5kID09PSBJbmZpbml0eSB8fFxuICAgICAgICAgIHNlbGYuYmVnaW4gPT09IEluZmluaXR5IHx8IHNlbGYuZW5kID09PSAtSW5maW5pdHkpIHJldHVybiB0cnVlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGRlZiBjb3VudCgmYmxvY2spXG4gICAgaWYgIWJsb2NrX2dpdmVuPyAmJiBgaXNfaW5maW5pdGUoc2VsZilgXG4gICAgICByZXR1cm4gOjpGbG9hdDo6SU5GSU5JVFlcbiAgICBlbmRcbiAgICBzdXBlclxuICBlbmRcblxuICBkZWYgdG9fYVxuICAgIDo6S2VybmVsLnJhaXNlIDo6VHlwZUVycm9yLCAnY2Fubm90IGNvbnZlcnQgZW5kbGVzcyByYW5nZSB0byBhbiBhcnJheScgaWYgYGlzX2luZmluaXRlKHNlbGYpYFxuICAgIHN1cGVyXG4gIGVuZFxuXG4gIGRlZiBjb3Zlcj8odmFsdWUpXG4gICAgYmVnX2NtcCA9IChAYmVnaW4ubmlsPyAmJiAtMSkgfHwgKEBiZWdpbiA8PT4gdmFsdWUpIHx8IGZhbHNlXG4gICAgZW5kX2NtcCA9IChAZW5kLm5pbD8gJiYgLTEpIHx8ICh2YWx1ZSA8PT4gQGVuZCkgfHwgZmFsc2VcbiAgICBpZiBAZXhjbFxuICAgICAgZW5kX2NtcCAmJiBlbmRfY21wIDwgMFxuICAgIGVsc2VcbiAgICAgIGVuZF9jbXAgJiYgZW5kX2NtcCA8PSAwXG4gICAgZW5kICYmIGJlZ19jbXAgJiYgYmVnX2NtcCA8PSAwXG4gIGVuZFxuXG4gIGRlZiBlYWNoKCZibG9jaylcbiAgICByZXR1cm4gZW51bV9mb3IoOmVhY2gpIHsgc2l6ZSB9IHVubGVzcyBibG9ja19naXZlbj9cblxuICAgICV4e1xuICAgICAgdmFyIGksIGxpbWl0O1xuXG4gICAgICBpZiAoI3tAYmVnaW59LiQkaXNfbnVtYmVyICYmICN7QGVuZH0uJCRpc19udW1iZXIpIHtcbiAgICAgICAgaWYgKCN7QGJlZ2lufSAlIDEgIT09IDAgfHwgI3tAZW5kfSAlIDEgIT09IDApIHtcbiAgICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6VHlwZUVycm9yLCBcImNhbid0IGl0ZXJhdGUgZnJvbSBGbG9hdFwifVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gI3tAYmVnaW59LCBsaW1pdCA9ICN7QGVuZH0gKyAje0BleGNsID8gMCA6IDF9OyBpIDwgbGltaXQ7IGkrKykge1xuICAgICAgICAgIGJsb2NrKGkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICB9XG5cbiAgICAgIGlmICgje0BiZWdpbn0uJCRpc19zdHJpbmcgJiYgI3tAZW5kfS4kJGlzX3N0cmluZykge1xuICAgICAgICAje0BiZWdpbi51cHRvKEBlbmQsIEBleGNsLCAmYmxvY2spfVxuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjdXJyZW50ID0gQGJlZ2luXG4gICAgbGFzdCAgICA9IEBlbmRcblxuICAgIHVubGVzcyBjdXJyZW50LnJlc3BvbmRfdG8/KDpzdWNjKVxuICAgICAgOjpLZXJuZWwucmFpc2UgOjpUeXBlRXJyb3IsIFwiY2FuJ3QgaXRlcmF0ZSBmcm9tICN7Y3VycmVudC5jbGFzc31cIlxuICAgIGVuZFxuXG4gICAgd2hpbGUgQGVuZC5uaWw/IHx8IChjdXJyZW50IDw9PiBsYXN0KSA8IDBcbiAgICAgIHlpZWxkIGN1cnJlbnRcblxuICAgICAgY3VycmVudCA9IGN1cnJlbnQuc3VjY1xuICAgIGVuZFxuXG4gICAgeWllbGQgY3VycmVudCBpZiAhQGV4Y2wgJiYgY3VycmVudCA9PSBsYXN0XG5cbiAgICBzZWxmXG4gIGVuZFxuXG4gIGRlZiBlcWw/KG90aGVyKVxuICAgIHJldHVybiBmYWxzZSB1bmxlc3MgOjpSYW5nZSA9PT0gb3RoZXJcblxuICAgIEBleGNsID09PSBvdGhlci5leGNsdWRlX2VuZD8gJiZcbiAgICAgIEBiZWdpbi5lcWw/KG90aGVyLmJlZ2luKSAmJlxuICAgICAgQGVuZC5lcWw/KG90aGVyLmVuZClcbiAgZW5kXG5cbiAgZGVmIGV4Y2x1ZGVfZW5kP1xuICAgIEBleGNsXG4gIGVuZFxuXG4gIGRlZiBmaXJzdChuID0gdW5kZWZpbmVkKVxuICAgIDo6S2VybmVsLnJhaXNlIDo6UmFuZ2VFcnJvciwgJ2Nhbm5vdCBnZXQgdGhlIG1pbmltdW0gb2YgYmVnaW5sZXNzIHJhbmdlJyBpZiBAYmVnaW4ubmlsP1xuICAgIHJldHVybiBAYmVnaW4gaWYgYG4gPT0gbnVsbGBcbiAgICBzdXBlclxuICBlbmRcblxuICBkZWYgbGFzdChuID0gdW5kZWZpbmVkKVxuICAgIDo6S2VybmVsLnJhaXNlIDo6UmFuZ2VFcnJvciwgJ2Nhbm5vdCBnZXQgdGhlIG1heGltdW0gb2YgZW5kbGVzcyByYW5nZScgaWYgQGVuZC5uaWw/XG4gICAgcmV0dXJuIEBlbmQgaWYgYG4gPT0gbnVsbGBcbiAgICB0b19hLmxhc3QobilcbiAgZW5kXG5cbiAgIyBGSVhNRTogY3VycmVudGx5IGhhcmRjb2RlZCB0byBhc3N1bWUgcmFuZ2UgaG9sZHMgbnVtZXJpY3NcbiAgZGVmIG1heFxuICAgIGlmIEBlbmQubmlsP1xuICAgICAgOjpLZXJuZWwucmFpc2UgOjpSYW5nZUVycm9yLCAnY2Fubm90IGdldCB0aGUgbWF4aW11bSBvZiBlbmRsZXNzIHJhbmdlJ1xuICAgIGVsc2lmIGJsb2NrX2dpdmVuP1xuICAgICAgc3VwZXJcbiAgICBlbHNpZiAhQGJlZ2luLm5pbD8gJiYgKEBiZWdpbiA+IEBlbmQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIEBleGNsICYmIEBiZWdpbiA9PSBAZW5kKVxuICAgICAgbmlsXG4gICAgZWxzZVxuICAgICAgYCN7QGV4Y2x9ID8gI3tAZW5kfSAtIDEgOiAje0BlbmR9YFxuICAgIGVuZFxuICBlbmRcblxuICBkZWYgbWluXG4gICAgaWYgQGJlZ2luLm5pbD9cbiAgICAgIDo6S2VybmVsLnJhaXNlIDo6UmFuZ2VFcnJvciwgJ2Nhbm5vdCBnZXQgdGhlIG1pbmltdW0gb2YgYmVnaW5sZXNzIHJhbmdlJ1xuICAgIGVsc2lmIGJsb2NrX2dpdmVuP1xuICAgICAgc3VwZXJcbiAgICBlbHNpZiAhQGVuZC5uaWw/ICYmIChAYmVnaW4gPiBAZW5kIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgQGV4Y2wgJiYgQGJlZ2luID09IEBlbmQpXG4gICAgICBuaWxcbiAgICBlbHNlXG4gICAgICBAYmVnaW5cbiAgICBlbmRcbiAgZW5kXG5cbiAgZGVmIHNpemVcbiAgICBpbmZpbml0eSA9IDo6RmxvYXQ6OklORklOSVRZXG5cbiAgICByZXR1cm4gMCBpZiAoQGJlZ2luID09IGluZmluaXR5ICYmICFAZW5kLm5pbD8pIHx8IChAZW5kID09IC1pbmZpbml0eSAmJiAhQGJlZ2luLm5pbD8pXG4gICAgcmV0dXJuIGluZmluaXR5IGlmIGBpc19pbmZpbml0ZShzZWxmKWBcbiAgICByZXR1cm4gbmlsIHVubGVzcyA6Ok51bWVyaWMgPT09IEBiZWdpbiAmJiA6Ok51bWVyaWMgPT09IEBlbmRcblxuICAgIHJhbmdlX2JlZ2luID0gQGJlZ2luXG4gICAgcmFuZ2VfZW5kICAgPSBAZW5kXG4gICAgcmFuZ2VfZW5kICAtPSAxIGlmIEBleGNsXG5cbiAgICByZXR1cm4gMCBpZiByYW5nZV9lbmQgPCByYW5nZV9iZWdpblxuXG4gICAgYE1hdGguYWJzKHJhbmdlX2VuZCAtIHJhbmdlX2JlZ2luKSArIDFgLnRvX2lcbiAgZW5kXG5cbiAgZGVmIHN0ZXAobiA9IHVuZGVmaW5lZClcbiAgICAleHtcbiAgICAgIGZ1bmN0aW9uIGNvZXJjZVN0ZXBTaXplKCkge1xuICAgICAgICBpZiAobiA9PSBudWxsKSB7XG4gICAgICAgICAgbiA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIW4uJCRpc19udW1iZXIpIHtcbiAgICAgICAgICBuID0gI3s6Ok9wYWwuY29lcmNlX3RvIShuLCA6OkludGVnZXIsIDp0b19pbnQpfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG4gPCAwKSB7XG4gICAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsIFwic3RlcCBjYW4ndCBiZSBuZWdhdGl2ZVwifVxuICAgICAgICB9IGVsc2UgaWYgKG4gPT09IDApIHtcbiAgICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgXCJzdGVwIGNhbid0IGJlIDBcIn1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBlbnVtZXJhdG9yU2l6ZSgpIHtcbiAgICAgICAgaWYgKCEje0BiZWdpbi5yZXNwb25kX3RvPyg6c3VjYyl9KSB7XG4gICAgICAgICAgcmV0dXJuIG5pbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgje0BiZWdpbn0uJCRpc19zdHJpbmcgJiYgI3tAZW5kfS4kJGlzX3N0cmluZykge1xuICAgICAgICAgIHJldHVybiBuaWw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobiAlIDEgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gI3soc2l6ZSAvIG4pLmNlaWx9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIG4gaXMgYSBmbG9hdFxuICAgICAgICAgIHZhciBiZWdpbiA9IHNlbGYuYmVnaW4sIGVuZCA9IHNlbGYuZW5kLFxuICAgICAgICAgICAgICBhYnMgPSBNYXRoLmFicywgZmxvb3IgPSBNYXRoLmZsb29yLFxuICAgICAgICAgICAgICBlcnIgPSAoYWJzKGJlZ2luKSArIGFicyhlbmQpICsgYWJzKGVuZCAtIGJlZ2luKSkgLyBhYnMobikgKiAjezo6RmxvYXQ6OkVQU0lMT059LFxuICAgICAgICAgICAgICBzaXplO1xuXG4gICAgICAgICAgaWYgKGVyciA+IDAuNSkge1xuICAgICAgICAgICAgZXJyID0gMC41O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWxmLmV4Y2wpIHtcbiAgICAgICAgICAgIHNpemUgPSBmbG9vcigoZW5kIC0gYmVnaW4pIC8gbiAtIGVycik7XG4gICAgICAgICAgICBpZiAoc2l6ZSAqIG4gKyBiZWdpbiA8IGVuZCkge1xuICAgICAgICAgICAgICBzaXplKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNpemUgPSBmbG9vcigoZW5kIC0gYmVnaW4pIC8gbiArIGVycikgKyAxXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB1bmxlc3MgYmxvY2tfZ2l2ZW4/XG4gICAgICBpZiAoQGJlZ2luLmlzX2E/KE51bWVyaWMpIHx8IEBiZWdpbi5uaWw/KSAmJlxuICAgICAgICAgKEBlbmQuaXNfYT8oTnVtZXJpYykgfHwgQGVuZC5uaWw/KSAmJlxuICAgICAgICAgIShAYmVnaW4ubmlsPyAmJiBAZW5kLm5pbD8pXG5cbiAgICAgICAgcmV0dXJuIDo6RW51bWVyYXRvcjo6QXJpdGhtZXRpY1NlcXVlbmNlLm5ldyhzZWxmLCBuLCA6c3RlcClcbiAgICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIGVudW1fZm9yKDpzdGVwLCBuKSBkb1xuICAgICAgICAgICV4e1xuICAgICAgICAgICAgY29lcmNlU3RlcFNpemUoKTtcbiAgICAgICAgICAgIHJldHVybiBlbnVtZXJhdG9yU2l6ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgZW5kXG4gICAgICBlbmRcbiAgICBlbmRcblxuICAgIGBjb2VyY2VTdGVwU2l6ZSgpYFxuXG4gICAgaWYgYHNlbGYuYmVnaW4uJCRpc19udW1iZXIgJiYgc2VsZi5lbmQuJCRpc19udW1iZXJgXG4gICAgICBpID0gMFxuICAgICAgbG9vcCBkb1xuICAgICAgICBjdXJyZW50ID0gQGJlZ2luICsgaSAqIG5cbiAgICAgICAgaWYgQGV4Y2xcbiAgICAgICAgICBicmVhayBpZiBjdXJyZW50ID49IEBlbmRcbiAgICAgICAgZWxzaWYgY3VycmVudCA+IEBlbmRcbiAgICAgICAgICBicmVha1xuICAgICAgICBlbmRcbiAgICAgICAgeWllbGQoY3VycmVudClcbiAgICAgICAgaSArPSAxXG4gICAgICBlbmRcbiAgICBlbHNlXG4gICAgICAleHtcbiAgICAgICAgaWYgKCN7QGJlZ2lufS4kJGlzX3N0cmluZyAmJiAje0BlbmR9LiQkaXNfc3RyaW5nICYmIG4gJSAxICE9PSAwKSB7XG4gICAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OlR5cGVFcnJvciwgJ25vIGltcGxpY2l0IGNvbnZlcnNpb24gdG8gZmxvYXQgZnJvbSBzdHJpbmcnfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlYWNoX3dpdGhfaW5kZXggZG8gfHZhbHVlLCBpZHh8XG4gICAgICAgIHlpZWxkKHZhbHVlKSBpZiBpZHggJSBuID09IDBcbiAgICAgIGVuZFxuICAgIGVuZFxuICAgIHNlbGZcbiAgZW5kXG5cbiAgZGVmICUobilcbiAgICBpZiBAYmVnaW4uaXNfYT8oTnVtZXJpYykgJiYgQGVuZC5pc19hPyhOdW1lcmljKVxuICAgICAgOjpFbnVtZXJhdG9yOjpBcml0aG1ldGljU2VxdWVuY2UubmV3KHNlbGYsIG4sIDolKVxuICAgIGVsc2VcbiAgICAgIHN0ZXAobilcbiAgICBlbmRcbiAgZW5kXG5cbiAgZGVmIGJzZWFyY2goJmJsb2NrKVxuICAgIHJldHVybiBlbnVtX2Zvcig6YnNlYXJjaCkgdW5sZXNzIGJsb2NrX2dpdmVuP1xuXG4gICAgaWYgYGlzX2luZmluaXRlKHNlbGYpICYmIChzZWxmLmJlZ2luLiQkaXNfbnVtYmVyIHx8IHNlbGYuZW5kLiQkaXNfbnVtYmVyKWBcbiAgICAgIDo6S2VybmVsLnJhaXNlIDo6Tm90SW1wbGVtZW50ZWRFcnJvciwgXCJDYW4ndCAjYnNlYXJjaCBhbiBpbmZpbml0ZSByYW5nZVwiXG4gICAgZW5kXG5cbiAgICB1bmxlc3MgYHNlbGYuYmVnaW4uJCRpc19udW1iZXIgJiYgc2VsZi5lbmQuJCRpc19udW1iZXJgXG4gICAgICA6Oktlcm5lbC5yYWlzZSA6OlR5cGVFcnJvciwgXCJjYW4ndCBkbyBiaW5hcnkgc2VhcmNoIGZvciAje0BiZWdpbi5jbGFzc31cIlxuICAgIGVuZFxuXG4gICAgdG9fYS5ic2VhcmNoKCZibG9jaylcbiAgZW5kXG5cbiAgZGVmIHRvX3NcbiAgICBcIiN7QGJlZ2luIHx8ICcnfSN7QGV4Y2wgPyAnLi4uJyA6ICcuLid9I3tAZW5kIHx8ICcnfVwiXG4gIGVuZFxuXG4gIGRlZiBpbnNwZWN0XG4gICAgXCIje0BiZWdpbiAmJiBAYmVnaW4uaW5zcGVjdH0je0BleGNsID8gJy4uLicgOiAnLi4nfSN7QGVuZCAmJiBAZW5kLmluc3BlY3R9XCJcbiAgZW5kXG5cbiAgZGVmIG1hcnNoYWxfbG9hZChhcmdzKVxuICAgIEBiZWdpbiA9IGFyZ3NbOmJlZ2luXVxuICAgIEBlbmQgPSBhcmdzWzplbmRdXG4gICAgQGV4Y2wgPSBhcmdzWzpleGNsXVxuICBlbmRcblxuICBkZWYgaGFzaFxuICAgIFtAYmVnaW4sIEBlbmQsIEBleGNsXS5oYXNoXG4gIGVuZFxuXG4gIGFsaWFzID09IGVxbD9cbiAgYWxpYXMgaW5jbHVkZT8gY292ZXI/XG4gIGFsaWFzIG1lbWJlcj8gY292ZXI/XG5lbmRcbiJdLCJuYW1lcyI6WyI8dG9wIChyZXF1aXJlZCk+Iiwic2VsZiIsInJlcXVpcmUiLCI8Y2xhc3M6UmFuZ2U+IiwiaW5jbHVkZSIsIkVudW1lcmFibGUiLCJhdHRyX3JlYWRlciIsImluaXRpYWxpemUiLCJmaXJzdCIsImxhc3QiLCJleGNsdWRlIiwiQGJlZ2luIiwiS2VybmVsIiwicmFpc2UiLCJOYW1lRXJyb3IiLCI8PT4iLCJuaWw/IiwiQXJndW1lbnRFcnJvciIsIkBlbmQiLCJAZXhjbCIsIj09PSIsInZhbHVlIiwiaW5jbHVkZT8iLCJjb3VudCIsImJsb2NrX2dpdmVuPyIsIkZsb2F0OjpJTkZJTklUWSIsIkZsb2F0IiwidG9fYSIsIlR5cGVFcnJvciIsImNvdmVyPyIsImJlZ19jbXAiLCIkcmV0X29yXzEiLCIkcmV0X29yXzIiLCIkcmV0X29yXzMiLCItMSIsImVuZF9jbXAiLCI8IiwiMCIsIjw9IiwiZWFjaCIsImVudW1fZm9yIiwiYmxvY2sgaW4gZWFjaCIsImJsb2NrICgyIGxldmVscykgaW4gZWFjaCIsInNpemUiLCIxIiwidXB0byIsImJsb2NrIiwidG9fcHJvYyIsImN1cnJlbnQiLCJyZXNwb25kX3RvPyIsImNsYXNzIiwic3VjYyIsImVxbD8iLCJvdGhlciIsIlJhbmdlIiwiZXhjbHVkZV9lbmQ/IiwiYmVnaW4iLCJlbmQiLCJuIiwiUmFuZ2VFcnJvciIsIm1heCIsIj4iLCJtaW4iLCJpbmZpbml0eSIsIi1AIiwiTnVtZXJpYyIsInJhbmdlX2JlZ2luIiwicmFuZ2VfZW5kIiwiLSIsInRvX2kiLCJzdGVwIiwiT3BhbCIsImNvZXJjZV90byEiLCJJbnRlZ2VyIiwiLyIsImNlaWwiLCJGbG9hdDo6RVBTSUxPTiIsImlzX2E/IiwiRW51bWVyYXRvcjo6QXJpdGhtZXRpY1NlcXVlbmNlIiwiRW51bWVyYXRvciIsIm5ldyIsImJsb2NrIGluIHN0ZXAiLCJibG9jayAoMiBsZXZlbHMpIGluIHN0ZXAiLCJpIiwibG9vcCIsIisiLCIqIiwiPj0iLCJlYWNoX3dpdGhfaW5kZXgiLCJpZHgiLCIlIiwiYnNlYXJjaCIsIk5vdEltcGxlbWVudGVkRXJyb3IiLCJ0b19zIiwiaW5zcGVjdCIsIm1hcnNoYWxfbG9hZCIsImFyZ3MiLCJbXSIsImhhc2giXSwibWFwcGluZ3MiOiJBQUFBQSxnQ0FBQUEsZ0JBQUFBO0VBQUFBOztFQUFBQTs7RUFBQUMsSUFBQUMsU0FBQUEsQ0FBUUYsb0JBQVJFO0VBRUFGLE9BQUFHO0VBQUFBOztJQUFBQTs7QUFBQUE7O0lBQ0VGLElBQUFHLFNBQUFBLENBQVFDLGlCQUFSRDtJQUVDRDtJQUVERixJQUFBSyxhQUFBQSxDQUFZLE9BQVosRUFBb0IsS0FBcEJBOztBQUVBQyxJQUFBQSwwQkFBQUEsc0JBQWVDLEtBQUQsRUFBUUMsSUFBUixFQUFjQyxPQUE1Qkg7QUFBQUEsTUFBQUE7OztNQUE0QiwrQkFBVTtNQUNwQyxJQUFBLFFBQTJESS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dBQUFBO0lBSUEsYUFBTSxJQUFOLEVBQVMsTUFBVDtJQUNBLGFBQU0sVUFBTixFQUFlLFFBQWY7SUFDQS9GLE9BQUEsYUFBTSxTQUFOLEVBQWMsUUFBZDtFQTFTRkEsR0FBTSxJQUFOQSxFQUFBQSxJQUFBQTtBQUZBSDsifX0seyJvZmZzZXQiOnsibGluZSI6MTM1MDAsImNvbHVtbiI6MH0sIm1hcCI6eyJ2ZXJzaW9uIjozLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb3JlbGliL3N0cmluZy5yYiJdLCJzb3VyY2VzQ29udGVudCI6WyIjIGhlbHBlcnM6IGNvZXJjZV90bywgcmVzcG9uZF90bywgZ2xvYmFsX211bHRpbGluZV9yZWdleHAsIHByb3BcblxucmVxdWlyZSAnY29yZWxpYi9jb21wYXJhYmxlJ1xucmVxdWlyZSAnY29yZWxpYi9yZWdleHAnXG5cbmNsYXNzIDo6U3RyaW5nIDwgYFN0cmluZ2BcbiAgaW5jbHVkZSA6OkNvbXBhcmFibGVcblxuICAleHtcbiAgICBPcGFsLnByb3AoI3tzZWxmfS4kJHByb3RvdHlwZSwgJyQkaXNfc3RyaW5nJywgdHJ1ZSk7XG4gIH1cblxuICBkZWYgX19pZF9fXG4gICAgYHNlbGYudG9TdHJpbmcoKWBcbiAgZW5kXG5cbiAgZGVmIHNlbGYudHJ5X2NvbnZlcnQod2hhdClcbiAgICA6Ok9wYWwuY29lcmNlX3RvPyh3aGF0LCA6OlN0cmluZywgOnRvX3N0cilcbiAgZW5kXG5cbiAgZGVmIHNlbGYubmV3KCphcmdzKVxuICAgICV4e1xuICAgICAgdmFyIHN0ciA9IGFyZ3NbMF0gfHwgXCJcIjtcbiAgICAgIHZhciBvcHRzID0gYXJnc1thcmdzLmxlbmd0aC0xXTtcbiAgICAgIHN0ciA9ICRjb2VyY2VfdG8oc3RyLCAjezo6U3RyaW5nfSwgJ3RvX3N0cicpO1xuICAgICAgaWYgKG9wdHMgJiYgb3B0cy4kJGlzX2hhc2gpIHtcbiAgICAgICAgaWYgKG9wdHMuJCRzbWFwLmVuY29kaW5nKSBzdHIgPSBzdHIuJGZvcmNlX2VuY29kaW5nKG9wdHMuJCRzbWFwLmVuY29kaW5nKTtcbiAgICAgIH1cbiAgICAgIHN0ciA9IG5ldyBzZWxmLiQkY29uc3RydWN0b3Ioc3RyKTtcbiAgICAgIGlmICghc3RyLiRpbml0aWFsaXplLiQkcHJpc3RpbmUpICN7YHN0cmAuaW5pdGlhbGl6ZSgqYXJncyl9O1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gIGVuZFxuXG4gICMgT3VyIGluaXRpYWxpemUgbWV0aG9kIGRvZXMgbm90aGluZywgdGhlIHN0cmluZyB2YWx1ZSBzZXR1cCBpcyBiZWluZ1xuICAjIGRvbmUgYnkgU3RyaW5nLm5ldy4gVGhlcmVmb3JlIG5vdCBhbGwga2luZHMgb2Ygc3ViY2xhc3Npbmcgd2lsbCB3b3JrLlxuICAjIEFzIGEgcnVsZSBvZiB0aHVtYiwgd2hlbiBzdWJjbGFzc2luZyBTdHJpbmcsIGVpdGhlciBtYWtlIHN1cmUgdG8gb3ZlcnJpZGVcbiAgIyAubmV3IG9yIG1ha2Ugc3VyZSB0aGF0IHRoZSBmaXJzdCBhcmd1bWVudCBnaXZlbiB0byBhIGNvbnN0cnVjdG9yIGlzXG4gICMgYSBzdHJpbmcgd2Ugd2FudCBvdXIgc3ViY2xhc3Mtc3RyaW5nIHRvIGhvbGQuXG4gIGRlZiBpbml0aWFsaXplKHN0ciA9IHVuZGVmaW5lZCwgZW5jb2Rpbmc6IG5pbCwgY2FwYWNpdHk6IG5pbClcbiAgZW5kXG5cbiAgZGVmICUoZGF0YSlcbiAgICBpZiA6OkFycmF5ID09PSBkYXRhXG4gICAgICBmb3JtYXQoc2VsZiwgKmRhdGEpXG4gICAgZWxzZVxuICAgICAgZm9ybWF0KHNlbGYsIGRhdGEpXG4gICAgZW5kXG4gIGVuZFxuXG4gIGRlZiAqKGNvdW50KVxuICAgICV4e1xuICAgICAgY291bnQgPSAkY29lcmNlX3RvKGNvdW50LCAjezo6SW50ZWdlcn0sICd0b19pbnQnKTtcblxuICAgICAgaWYgKGNvdW50IDwgMCkge1xuICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgJ25lZ2F0aXZlIGFyZ3VtZW50J31cbiAgICAgIH1cblxuICAgICAgaWYgKGNvdW50ID09PSAwKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cblxuICAgICAgdmFyIHJlc3VsdCA9ICcnLFxuICAgICAgICAgIHN0cmluZyA9IHNlbGYudG9TdHJpbmcoKTtcblxuICAgICAgLy8gQWxsIGNyZWRpdCBmb3IgdGhlIGJpdC10d2lkZGxpbmcgbWFnaWMgY29kZSBiZWxvdyBnb2VzIHRvIE1vemlsbGFcbiAgICAgIC8vIHBvbHlmaWxsIGltcGxlbWVudGF0aW9uIG9mIFN0cmluZy5wcm90b3R5cGUucmVwZWF0KCkgcG9zdGVkIGhlcmU6XG4gICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvcmVwZWF0XG5cbiAgICAgIGlmIChzdHJpbmcubGVuZ3RoICogY291bnQgPj0gMSA8PCAyOCkge1xuICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6UmFuZ2VFcnJvciwgJ211bHRpcGx5IGNvdW50IG11c3Qgbm90IG92ZXJmbG93IG1heGltdW0gc3RyaW5nIHNpemUnfVxuICAgICAgfVxuXG4gICAgICBmb3IgKDs7KSB7XG4gICAgICAgIGlmICgoY291bnQgJiAxKSA9PT0gMSkge1xuICAgICAgICAgIHJlc3VsdCArPSBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgICAgY291bnQgPj4+PSAxO1xuICAgICAgICBpZiAoY291bnQgPT09IDApIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzdHJpbmcgKz0gc3RyaW5nO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmICsob3RoZXIpXG4gICAgb3RoZXIgPSBgJGNvZXJjZV90bygje290aGVyfSwgI3s6OlN0cmluZ30sICd0b19zdHInKWBcblxuICAgICV4e1xuICAgICAgaWYgKG90aGVyID09IFwiXCIgJiYgc2VsZi4kJGNsYXNzID09PSBPcGFsLlN0cmluZykgcmV0dXJuICN7c2VsZn07XG4gICAgICBpZiAoc2VsZiA9PSBcIlwiICYmIG90aGVyLiQkY2xhc3MgPT09IE9wYWwuU3RyaW5nKSByZXR1cm4gI3tvdGhlcn07XG4gICAgICB2YXIgb3V0ID0gc2VsZiArIG90aGVyO1xuICAgICAgaWYgKHNlbGYuZW5jb2RpbmcgPT09IG91dC5lbmNvZGluZyAmJiBvdGhlci5lbmNvZGluZyA9PT0gb3V0LmVuY29kaW5nKSByZXR1cm4gb3V0O1xuICAgICAgaWYgKHNlbGYuZW5jb2RpbmcubmFtZSA9PT0gXCJVVEYtOFwiIHx8IG90aGVyLmVuY29kaW5nLm5hbWUgPT09IFwiVVRGLThcIikgcmV0dXJuIG91dDtcbiAgICAgIHJldHVybiBPcGFsLmVuYyhvdXQsIHNlbGYuZW5jb2RpbmcpO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIDw9PihvdGhlcilcbiAgICBpZiBvdGhlci5yZXNwb25kX3RvPyA6dG9fc3RyXG4gICAgICBvdGhlciA9IG90aGVyLnRvX3N0ci50b19zXG5cbiAgICAgIGBzZWxmID4gb3RoZXIgPyAxIDogKHNlbGYgPCBvdGhlciA/IC0xIDogMClgXG4gICAgZWxzZVxuICAgICAgJXh7XG4gICAgICAgIHZhciBjbXAgPSAje290aGVyIDw9PiBzZWxmfTtcblxuICAgICAgICBpZiAoY21wID09PSBuaWwpIHtcbiAgICAgICAgICByZXR1cm4gbmlsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHJldHVybiBjbXAgPiAwID8gLTEgOiAoY21wIDwgMCA/IDEgOiAwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIGVuZFxuICBlbmRcblxuICBkZWYgPT0ob3RoZXIpXG4gICAgJXh7XG4gICAgICBpZiAob3RoZXIuJCRpc19zdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYudG9TdHJpbmcoKSA9PT0gb3RoZXIudG9TdHJpbmcoKTtcbiAgICAgIH1cbiAgICAgIGlmICgkcmVzcG9uZF90byhvdGhlciwgJyR0b19zdHInKSkge1xuICAgICAgICByZXR1cm4gI3tvdGhlciA9PSBzZWxmfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiA9fihvdGhlcilcbiAgICAleHtcbiAgICAgIGlmIChvdGhlci4kJGlzX3N0cmluZykge1xuICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6VHlwZUVycm9yLCAndHlwZSBtaXNtYXRjaDogU3RyaW5nIGdpdmVuJ307XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAje290aGVyID1+IHNlbGZ9O1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIFtdKGluZGV4LCBsZW5ndGggPSB1bmRlZmluZWQpXG4gICAgJXh7XG4gICAgICB2YXIgc2l6ZSA9IHNlbGYubGVuZ3RoLCBleGNsdWRlLCByYW5nZTtcblxuICAgICAgaWYgKGluZGV4LiQkaXNfcmFuZ2UpIHtcbiAgICAgICAgZXhjbHVkZSA9IGluZGV4LmV4Y2w7XG4gICAgICAgIHJhbmdlICAgPSBpbmRleDtcbiAgICAgICAgbGVuZ3RoICA9IGluZGV4LmVuZCA9PT0gbmlsID8gLTEgOiAkY29lcmNlX3RvKGluZGV4LmVuZCwgI3s6OkludGVnZXJ9LCAndG9faW50Jyk7XG4gICAgICAgIGluZGV4ICAgPSBpbmRleC5iZWdpbiA9PT0gbmlsID8gMCA6ICRjb2VyY2VfdG8oaW5kZXguYmVnaW4sICN7OjpJbnRlZ2VyfSwgJ3RvX2ludCcpO1xuXG4gICAgICAgIGlmIChNYXRoLmFicyhpbmRleCkgPiBzaXplKSB7XG4gICAgICAgICAgcmV0dXJuIG5pbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgICBpbmRleCArPSBzaXplO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxlbmd0aCA8IDApIHtcbiAgICAgICAgICBsZW5ndGggKz0gc2l6ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZXhjbHVkZSB8fCByYW5nZS5lbmQgPT09IG5pbCkge1xuICAgICAgICAgIGxlbmd0aCArPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgbGVuZ3RoID0gbGVuZ3RoIC0gaW5kZXg7XG5cbiAgICAgICAgaWYgKGxlbmd0aCA8IDApIHtcbiAgICAgICAgICBsZW5ndGggPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNlbGYuc3Vic3RyKGluZGV4LCBsZW5ndGgpO1xuICAgICAgfVxuXG5cbiAgICAgIGlmIChpbmRleC4kJGlzX3N0cmluZykge1xuICAgICAgICBpZiAobGVuZ3RoICE9IG51bGwpIHtcbiAgICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6VHlwZUVycm9yfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZWxmLmluZGV4T2YoaW5kZXgpICE9PSAtMSA/IGluZGV4IDogbmlsO1xuICAgICAgfVxuXG5cbiAgICAgIGlmIChpbmRleC4kJGlzX3JlZ2V4cCkge1xuICAgICAgICB2YXIgbWF0Y2ggPSBzZWxmLm1hdGNoKGluZGV4KTtcblxuICAgICAgICBpZiAobWF0Y2ggPT09IG51bGwpIHtcbiAgICAgICAgICAjeyR+ID0gbmlsfVxuICAgICAgICAgIHJldHVybiBuaWw7XG4gICAgICAgIH1cblxuICAgICAgICAjeyR+ID0gOjpNYXRjaERhdGEubmV3KGBpbmRleGAsIGBtYXRjaGApfVxuXG4gICAgICAgIGlmIChsZW5ndGggPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBtYXRjaFswXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxlbmd0aCA9ICRjb2VyY2VfdG8obGVuZ3RoLCAjezo6SW50ZWdlcn0sICd0b19pbnQnKTtcblxuICAgICAgICBpZiAobGVuZ3RoIDwgMCAmJiAtbGVuZ3RoIDwgbWF0Y2gubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIG1hdGNoW2xlbmd0aCArPSBtYXRjaC5sZW5ndGhdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxlbmd0aCA+PSAwICYmIGxlbmd0aCA8IG1hdGNoLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiBtYXRjaFtsZW5ndGhdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5pbDtcbiAgICAgIH1cblxuXG4gICAgICBpbmRleCA9ICRjb2VyY2VfdG8oaW5kZXgsICN7OjpJbnRlZ2VyfSwgJ3RvX2ludCcpO1xuXG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIGluZGV4ICs9IHNpemU7XG4gICAgICB9XG5cbiAgICAgIGlmIChsZW5ndGggPT0gbnVsbCkge1xuICAgICAgICBpZiAoaW5kZXggPj0gc2l6ZSB8fCBpbmRleCA8IDApIHtcbiAgICAgICAgICByZXR1cm4gbmlsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZWxmLnN1YnN0cihpbmRleCwgMSk7XG4gICAgICB9XG5cbiAgICAgIGxlbmd0aCA9ICRjb2VyY2VfdG8obGVuZ3RoLCAjezo6SW50ZWdlcn0sICd0b19pbnQnKTtcblxuICAgICAgaWYgKGxlbmd0aCA8IDApIHtcbiAgICAgICAgcmV0dXJuIG5pbDtcbiAgICAgIH1cblxuICAgICAgaWYgKGluZGV4ID4gc2l6ZSB8fCBpbmRleCA8IDApIHtcbiAgICAgICAgcmV0dXJuIG5pbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGYuc3Vic3RyKGluZGV4LCBsZW5ndGgpO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGJcbiAgICBgbmV3IFN0cmluZygje3NlbGZ9KWAuZm9yY2VfZW5jb2RpbmcoJ2JpbmFyeScpXG4gIGVuZFxuXG4gIGRlZiBjYXBpdGFsaXplXG4gICAgYHNlbGYuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzZWxmLnN1YnN0cigxKS50b0xvd2VyQ2FzZSgpYFxuICBlbmRcblxuICBkZWYgY2FzZWNtcChvdGhlcilcbiAgICByZXR1cm4gbmlsIHVubGVzcyBvdGhlci5yZXNwb25kX3RvPyg6dG9fc3RyKVxuICAgIG90aGVyID0gYCRjb2VyY2VfdG8ob3RoZXIsICN7OjpTdHJpbmd9LCAndG9fc3RyJylgLnRvX3NcbiAgICAleHtcbiAgICAgIHZhciBhc2NpaV9vbmx5ID0gL15bXFx4MDAtXFx4N0ZdKiQvO1xuICAgICAgaWYgKGFzY2lpX29ubHkudGVzdChzZWxmKSAmJiBhc2NpaV9vbmx5LnRlc3Qob3RoZXIpKSB7XG4gICAgICAgIHNlbGYgPSBzZWxmLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIG90aGVyID0gb3RoZXIudG9Mb3dlckNhc2UoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc2VsZiA8PT4gb3RoZXJcbiAgZW5kXG5cbiAgZGVmIGNhc2VjbXA/KG90aGVyKVxuICAgICV4e1xuICAgICAgdmFyIGNtcCA9ICN7Y2FzZWNtcChvdGhlcil9O1xuICAgICAgaWYgKGNtcCA9PT0gbmlsKSB7XG4gICAgICAgIHJldHVybiBuaWw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY21wID09PSAwO1xuICAgICAgfVxuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGNlbnRlcih3aWR0aCwgcGFkc3RyID0gJyAnKVxuICAgIHdpZHRoICA9IGAkY29lcmNlX3RvKCN7d2lkdGh9LCAjezo6SW50ZWdlcn0sICd0b19pbnQnKWBcbiAgICBwYWRzdHIgPSBgJGNvZXJjZV90bygje3BhZHN0cn0sICN7OjpTdHJpbmd9LCAndG9fc3RyJylgLnRvX3NcblxuICAgIGlmIHBhZHN0ci5lbXB0eT9cbiAgICAgIDo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgJ3plcm8gd2lkdGggcGFkZGluZydcbiAgICBlbmRcblxuICAgIHJldHVybiBzZWxmIGlmIGB3aWR0aCA8PSBzZWxmLmxlbmd0aGBcblxuICAgICV4e1xuICAgICAgdmFyIGxqdXN0aWZpZWQgPSAje2xqdXN0ICgod2lkdGggKyBgc2VsZi5sZW5ndGhgKSAvIDIpLmNlaWwsIHBhZHN0cn0sXG4gICAgICAgICAgcmp1c3RpZmllZCA9ICN7cmp1c3QgKCh3aWR0aCArIGBzZWxmLmxlbmd0aGApIC8gMikuZmxvb3IsIHBhZHN0cn07XG5cbiAgICAgIHJldHVybiByanVzdGlmaWVkICsgbGp1c3RpZmllZC5zbGljZShzZWxmLmxlbmd0aCk7XG4gICAgfVxuICBlbmRcblxuICBkZWYgY2hvbXAoc2VwYXJhdG9yID0gJC8pXG4gICAgcmV0dXJuIHNlbGYgaWYgYHNlcGFyYXRvciA9PT0gbmlsIHx8IHNlbGYubGVuZ3RoID09PSAwYFxuXG4gICAgc2VwYXJhdG9yID0gOjpPcGFsLmNvZXJjZV90byEoc2VwYXJhdG9yLCA6OlN0cmluZywgOnRvX3N0cikudG9fc1xuXG4gICAgJXh7XG4gICAgICB2YXIgcmVzdWx0O1xuXG4gICAgICBpZiAoc2VwYXJhdG9yID09PSBcIlxcblwiKSB7XG4gICAgICAgIHJlc3VsdCA9IHNlbGYucmVwbGFjZSgvXFxyP1xcbj8kLywgJycpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoc2VwYXJhdG9yID09PSBcIlwiKSB7XG4gICAgICAgIHJlc3VsdCA9IHNlbGYucmVwbGFjZSgvKFxccj9cXG4pKyQvLCAnJyk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChzZWxmLmxlbmd0aCA+PSBzZXBhcmF0b3IubGVuZ3RoKSB7XG4gICAgICAgIHZhciB0YWlsID0gc2VsZi5zdWJzdHIoc2VsZi5sZW5ndGggLSBzZXBhcmF0b3IubGVuZ3RoLCBzZXBhcmF0b3IubGVuZ3RoKTtcblxuICAgICAgICBpZiAodGFpbCA9PT0gc2VwYXJhdG9yKSB7XG4gICAgICAgICAgcmVzdWx0ID0gc2VsZi5zdWJzdHIoMCwgc2VsZi5sZW5ndGggLSBzZXBhcmF0b3IubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocmVzdWx0ICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzZWxmXG4gIGVuZFxuXG4gIGRlZiBjaG9wXG4gICAgJXh7XG4gICAgICB2YXIgbGVuZ3RoID0gc2VsZi5sZW5ndGgsIHJlc3VsdDtcblxuICAgICAgaWYgKGxlbmd0aCA8PSAxKSB7XG4gICAgICAgIHJlc3VsdCA9IFwiXCI7XG4gICAgICB9IGVsc2UgaWYgKHNlbGYuY2hhckF0KGxlbmd0aCAtIDEpID09PSBcIlxcblwiICYmIHNlbGYuY2hhckF0KGxlbmd0aCAtIDIpID09PSBcIlxcclwiKSB7XG4gICAgICAgIHJlc3VsdCA9IHNlbGYuc3Vic3RyKDAsIGxlbmd0aCAtIDIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gc2VsZi5zdWJzdHIoMCwgbGVuZ3RoIC0gMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICBlbmRcblxuICBkZWYgY2hyXG4gICAgYHNlbGYuY2hhckF0KDApYFxuICBlbmRcblxuICBkZWYgY2xvbmUoZnJlZXplOiBuaWwpXG4gICAgdW5sZXNzIGZyZWV6ZS5uaWw/IHx8IGZyZWV6ZSA9PSB0cnVlIHx8IGZyZWV6ZSA9PSBmYWxzZVxuICAgICAgcmFpc2UgQXJndW1lbnRFcnJvciwgXCJ1bmV4cGVjdGVkIHZhbHVlIGZvciBmcmVlemU6ICN7ZnJlZXplLmNsYXNzfVwiXG4gICAgZW5kXG5cbiAgICBjb3B5ID0gYG5ldyBTdHJpbmcoc2VsZilgXG4gICAgY29weS5jb3B5X3NpbmdsZXRvbl9tZXRob2RzKHNlbGYpXG4gICAgY29weS5pbml0aWFsaXplX2Nsb25lKHNlbGYsIGZyZWV6ZTogZnJlZXplKVxuXG4gICAgaWYgZnJlZXplID09IHRydWVcbiAgICAgIGBpZiAoIWNvcHkuJCRmcm96ZW4pIHsgY29weS4kJGZyb3plbiA9IHRydWU7IH1gXG4gICAgZWxzaWYgZnJlZXplLm5pbD9cbiAgICAgIGBpZiAoc2VsZi4kJGZyb3plbikgeyBjb3B5LiQkZnJvemVuID0gdHJ1ZTsgfWBcbiAgICBlbmRcblxuICAgIGNvcHlcbiAgZW5kXG5cbiAgZGVmIGR1cFxuICAgIGNvcHkgPSBgbmV3IFN0cmluZyhzZWxmKWBcbiAgICBjb3B5LmluaXRpYWxpemVfZHVwKHNlbGYpXG4gICAgY29weVxuICBlbmRcblxuICBkZWYgY291bnQoKnNldHMpXG4gICAgJXh7XG4gICAgICBpZiAoc2V0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsICdBcmd1bWVudEVycm9yOiB3cm9uZyBudW1iZXIgb2YgYXJndW1lbnRzICgwIGZvciAxKyknfVxuICAgICAgfVxuICAgICAgdmFyIGNoYXJfY2xhc3MgPSBjaGFyX2NsYXNzX2Zyb21fY2hhcl9zZXRzKHNldHMpO1xuICAgICAgaWYgKGNoYXJfY2xhc3MgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2VsZi5sZW5ndGggLSBzZWxmLnJlcGxhY2UobmV3IFJlZ0V4cChjaGFyX2NsYXNzLCAnZycpLCAnJykubGVuZ3RoO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGRlbGV0ZSgqc2V0cylcbiAgICAleHtcbiAgICAgIGlmIChzZXRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgJ0FyZ3VtZW50RXJyb3I6IHdyb25nIG51bWJlciBvZiBhcmd1bWVudHMgKDAgZm9yIDErKSd9XG4gICAgICB9XG4gICAgICB2YXIgY2hhcl9jbGFzcyA9IGNoYXJfY2xhc3NfZnJvbV9jaGFyX3NldHMoc2V0cyk7XG4gICAgICBpZiAoY2hhcl9jbGFzcyA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZWxmLnJlcGxhY2UobmV3IFJlZ0V4cChjaGFyX2NsYXNzLCAnZycpLCAnJyk7XG4gICAgfVxuICBlbmRcblxuICBkZWYgZGVsZXRlX3ByZWZpeChwcmVmaXgpXG4gICAgJXh7XG4gICAgICBpZiAoIXByZWZpeC4kJGlzX3N0cmluZykge1xuICAgICAgICBwcmVmaXggPSAkY29lcmNlX3RvKHByZWZpeCwgI3s6OlN0cmluZ30sICd0b19zdHInKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNlbGYuc2xpY2UoMCwgcHJlZml4Lmxlbmd0aCkgPT09IHByZWZpeCkge1xuICAgICAgICByZXR1cm4gc2VsZi5zbGljZShwcmVmaXgubGVuZ3RoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgICAgfVxuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGRlbGV0ZV9zdWZmaXgoc3VmZml4KVxuICAgICV4e1xuICAgICAgaWYgKCFzdWZmaXguJCRpc19zdHJpbmcpIHtcbiAgICAgICAgc3VmZml4ID0gJGNvZXJjZV90byhzdWZmaXgsICN7OjpTdHJpbmd9LCAndG9fc3RyJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxmLnNsaWNlKHNlbGYubGVuZ3RoIC0gc3VmZml4Lmxlbmd0aCkgPT09IHN1ZmZpeCkge1xuICAgICAgICByZXR1cm4gc2VsZi5zbGljZSgwLCBzZWxmLmxlbmd0aCAtIHN1ZmZpeC5sZW5ndGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICB9XG4gICAgfVxuICBlbmRcblxuICBkZWYgZG93bmNhc2VcbiAgICBgc2VsZi50b0xvd2VyQ2FzZSgpYFxuICBlbmRcblxuICBkZWYgZWFjaF9saW5lKHNlcGFyYXRvciA9ICQvLCBjaG9tcDogZmFsc2UsICZibG9jaylcbiAgICByZXR1cm4gZW51bV9mb3IgOmVhY2hfbGluZSwgc2VwYXJhdG9yLCBjaG9tcDogY2hvbXAgdW5sZXNzIGJsb2NrX2dpdmVuP1xuXG4gICAgJXh7XG4gICAgICBpZiAoc2VwYXJhdG9yID09PSBuaWwpIHtcbiAgICAgICAgT3BhbC55aWVsZDEoYmxvY2ssIHNlbGYpO1xuXG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgICAgfVxuXG4gICAgICBzZXBhcmF0b3IgPSAkY29lcmNlX3RvKHNlcGFyYXRvciwgI3s6OlN0cmluZ30sICd0b19zdHInKTtcblxuICAgICAgdmFyIGEsIGksIG4sIGxlbmd0aCwgY2hvbXBlZCwgdHJhaWxpbmcsIHNwbGl0dGVkLCB2YWx1ZTtcblxuICAgICAgaWYgKHNlcGFyYXRvci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgZm9yIChhID0gc2VsZi5zcGxpdCgvKCg/Olxccj9cXG4pezJ9KSg/Oig/Olxccj9cXG4pKikvKSwgaSA9IDAsIG4gPSBhLmxlbmd0aDsgaSA8IG47IGkgKz0gMikge1xuICAgICAgICAgIGlmIChhW2ldIHx8IGFbaSArIDFdKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IChhW2ldIHx8IFwiXCIpICsgKGFbaSArIDFdIHx8IFwiXCIpO1xuICAgICAgICAgICAgaWYgKGNob21wKSB7XG4gICAgICAgICAgICAgIHZhbHVlID0gI3tgdmFsdWVgLmNob21wKFwiXFxuXCIpfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIE9wYWwueWllbGQxKGJsb2NrLCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICB9XG5cbiAgICAgIGNob21wZWQgID0gI3tjaG9tcChzZXBhcmF0b3IpfTtcbiAgICAgIHRyYWlsaW5nID0gc2VsZi5sZW5ndGggIT0gY2hvbXBlZC5sZW5ndGg7XG4gICAgICBzcGxpdHRlZCA9IGNob21wZWQuc3BsaXQoc2VwYXJhdG9yKTtcblxuICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gc3BsaXR0ZWQubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFsdWUgPSBzcGxpdHRlZFtpXTtcbiAgICAgICAgaWYgKGkgPCBsZW5ndGggLSAxIHx8IHRyYWlsaW5nKSB7XG4gICAgICAgICAgdmFsdWUgKz0gc2VwYXJhdG9yO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaG9tcCkge1xuICAgICAgICAgIHZhbHVlID0gI3tgdmFsdWVgLmNob21wKHNlcGFyYXRvcil9O1xuICAgICAgICB9XG4gICAgICAgIE9wYWwueWllbGQxKGJsb2NrLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2VsZlxuICBlbmRcblxuICBkZWYgZW1wdHk/XG4gICAgYHNlbGYubGVuZ3RoID09PSAwYFxuICBlbmRcblxuICBkZWYgZW5kX3dpdGg/KCpzdWZmaXhlcylcbiAgICAleHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBzdWZmaXhlcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgc3VmZml4ID0gJGNvZXJjZV90byhzdWZmaXhlc1tpXSwgI3s6OlN0cmluZ30sICd0b19zdHInKS4kdG9fcygpO1xuXG4gICAgICAgIGlmIChzZWxmLmxlbmd0aCA+PSBzdWZmaXgubGVuZ3RoICYmXG4gICAgICAgICAgICBzZWxmLnN1YnN0cihzZWxmLmxlbmd0aCAtIHN1ZmZpeC5sZW5ndGgsIHN1ZmZpeC5sZW5ndGgpID09IHN1ZmZpeCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZmFsc2VcbiAgZW5kXG5cbiAgZGVmIGdzdWIocGF0dGVybiwgcmVwbGFjZW1lbnQgPSB1bmRlZmluZWQsICZibG9jaylcbiAgICAleHtcbiAgICAgIGlmIChyZXBsYWNlbWVudCA9PT0gdW5kZWZpbmVkICYmIGJsb2NrID09PSBuaWwpIHtcbiAgICAgICAgcmV0dXJuICN7ZW51bV9mb3IgOmdzdWIsIHBhdHRlcm59O1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVzdWx0ID0gJycsIG1hdGNoX2RhdGEgPSBuaWwsIGluZGV4ID0gMCwgbWF0Y2gsIF9yZXBsYWNlbWVudDtcblxuICAgICAgaWYgKHBhdHRlcm4uJCRpc19yZWdleHApIHtcbiAgICAgICAgcGF0dGVybiA9ICRnbG9iYWxfbXVsdGlsaW5lX3JlZ2V4cChwYXR0ZXJuKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhdHRlcm4gPSAkY29lcmNlX3RvKHBhdHRlcm4sICN7OjpTdHJpbmd9LCAndG9fc3RyJyk7XG4gICAgICAgIHBhdHRlcm4gPSBuZXcgUmVnRXhwKHBhdHRlcm4ucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xcXVxcXFxdL2csICdcXFxcJCYnKSwgJ2dtJyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBsYXN0SW5kZXg7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBtYXRjaCA9IHBhdHRlcm4uZXhlYyhzZWxmKTtcblxuICAgICAgICBpZiAobWF0Y2ggPT09IG51bGwpIHtcbiAgICAgICAgICAjeyR+ID0gbmlsfVxuICAgICAgICAgIHJlc3VsdCArPSBzZWxmLnNsaWNlKGluZGV4KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIG1hdGNoX2RhdGEgPSAjezo6TWF0Y2hEYXRhLm5ldyBgcGF0dGVybmAsIGBtYXRjaGB9O1xuXG4gICAgICAgIGlmIChyZXBsYWNlbWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbGFzdEluZGV4ID0gcGF0dGVybi5sYXN0SW5kZXg7XG4gICAgICAgICAgX3JlcGxhY2VtZW50ID0gYmxvY2sobWF0Y2hbMF0pO1xuICAgICAgICAgIHBhdHRlcm4ubGFzdEluZGV4ID0gbGFzdEluZGV4OyAvLyBzYXZlIGFuZCByZXN0b3JlIGxhc3RJbmRleFxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHJlcGxhY2VtZW50LiQkaXNfaGFzaCkge1xuICAgICAgICAgIF9yZXBsYWNlbWVudCA9ICN7YHJlcGxhY2VtZW50YFtgbWF0Y2hbMF1gXS50b19zfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBpZiAoIXJlcGxhY2VtZW50LiQkaXNfc3RyaW5nKSB7XG4gICAgICAgICAgICByZXBsYWNlbWVudCA9ICRjb2VyY2VfdG8ocmVwbGFjZW1lbnQsICN7OjpTdHJpbmd9LCAndG9fc3RyJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIF9yZXBsYWNlbWVudCA9IHJlcGxhY2VtZW50LnJlcGxhY2UoLyhbXFxcXF0rKShbMC05KyZgJ10pL2csIGZ1bmN0aW9uIChvcmlnaW5hbCwgc2xhc2hlcywgY29tbWFuZCkge1xuICAgICAgICAgICAgaWYgKHNsYXNoZXMubGVuZ3RoICUgMiA9PT0gMCkge1xuICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKGNvbW1hbmQpIHtcbiAgICAgICAgICAgIGNhc2UgXCIrXCI6XG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSBtYXRjaC5sZW5ndGggLSAxOyBpID4gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoW2ldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBzbGFzaGVzLnNsaWNlKDEpICsgbWF0Y2hbaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIGNhc2UgXCImXCI6IHJldHVybiBzbGFzaGVzLnNsaWNlKDEpICsgbWF0Y2hbMF07XG4gICAgICAgICAgICBjYXNlIFwiYFwiOiByZXR1cm4gc2xhc2hlcy5zbGljZSgxKSArIHNlbGYuc2xpY2UoMCwgbWF0Y2guaW5kZXgpO1xuICAgICAgICAgICAgY2FzZSBcIidcIjogcmV0dXJuIHNsYXNoZXMuc2xpY2UoMSkgKyBzZWxmLnNsaWNlKG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6ICByZXR1cm4gc2xhc2hlcy5zbGljZSgxKSArIChtYXRjaFtjb21tYW5kXSB8fCAnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkucmVwbGFjZSgvXFxcXFxcXFwvZywgJ1xcXFwnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXR0ZXJuLmxhc3RJbmRleCA9PT0gbWF0Y2guaW5kZXgpIHtcbiAgICAgICAgICByZXN1bHQgKz0gKHNlbGYuc2xpY2UoaW5kZXgsIG1hdGNoLmluZGV4KSArIF9yZXBsYWNlbWVudCArIChzZWxmW21hdGNoLmluZGV4XSB8fCBcIlwiKSk7XG4gICAgICAgICAgcGF0dGVybi5sYXN0SW5kZXggKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICByZXN1bHQgKz0gKHNlbGYuc2xpY2UoaW5kZXgsIG1hdGNoLmluZGV4KSArIF9yZXBsYWNlbWVudClcbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IHBhdHRlcm4ubGFzdEluZGV4O1xuICAgICAgfVxuXG4gICAgICAjeyR+ID0gYG1hdGNoX2RhdGFgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBoYXNoXG4gICAgYHNlbGYudG9TdHJpbmcoKWBcbiAgZW5kXG5cbiAgZGVmIGhleFxuICAgIHRvX2kgMTZcbiAgZW5kXG5cbiAgZGVmIGluY2x1ZGU/KG90aGVyKVxuICAgICV4e1xuICAgICAgaWYgKCFvdGhlci4kJGlzX3N0cmluZykge1xuICAgICAgICBvdGhlciA9ICRjb2VyY2VfdG8ob3RoZXIsICN7OjpTdHJpbmd9LCAndG9fc3RyJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2VsZi5pbmRleE9mKG90aGVyKSAhPT0gLTE7XG4gICAgfVxuICBlbmRcblxuICBkZWYgaW5kZXgoc2VhcmNoLCBvZmZzZXQgPSB1bmRlZmluZWQpXG4gICAgJXh7XG4gICAgICB2YXIgaW5kZXgsXG4gICAgICAgICAgbWF0Y2gsXG4gICAgICAgICAgcmVnZXg7XG5cbiAgICAgIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBvZmZzZXQgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2Zmc2V0ID0gJGNvZXJjZV90byhvZmZzZXQsICN7OjpJbnRlZ2VyfSwgJ3RvX2ludCcpO1xuICAgICAgICBpZiAob2Zmc2V0IDwgMCkge1xuICAgICAgICAgIG9mZnNldCArPSBzZWxmLmxlbmd0aDtcbiAgICAgICAgICBpZiAob2Zmc2V0IDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIG5pbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHNlYXJjaC4kJGlzX3JlZ2V4cCkge1xuICAgICAgICByZWdleCA9ICRnbG9iYWxfbXVsdGlsaW5lX3JlZ2V4cChzZWFyY2gpO1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgIG1hdGNoID0gcmVnZXguZXhlYyhzZWxmKTtcbiAgICAgICAgICBpZiAobWF0Y2ggPT09IG51bGwpIHtcbiAgICAgICAgICAgICN7JH4gPSBuaWx9O1xuICAgICAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobWF0Y2guaW5kZXggPj0gb2Zmc2V0KSB7XG4gICAgICAgICAgICAjeyR+ID0gOjpNYXRjaERhdGEubmV3KGByZWdleGAsIGBtYXRjaGApfVxuICAgICAgICAgICAgaW5kZXggPSBtYXRjaC5pbmRleDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZWdleC5sYXN0SW5kZXggPSBtYXRjaC5pbmRleCArIDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlYXJjaCA9ICRjb2VyY2VfdG8oc2VhcmNoLCAjezo6U3RyaW5nfSwgJ3RvX3N0cicpO1xuICAgICAgICBpZiAoc2VhcmNoLmxlbmd0aCA9PT0gMCAmJiBvZmZzZXQgPiBzZWxmLmxlbmd0aCkge1xuICAgICAgICAgIGluZGV4ID0gLTE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5kZXggPSBzZWxmLmluZGV4T2Yoc2VhcmNoLCBvZmZzZXQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpbmRleCA9PT0gLTEgPyBuaWwgOiBpbmRleDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBpbnNwZWN0XG4gICAgJXh7XG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1taXNsZWFkaW5nLWNoYXJhY3Rlci1jbGFzcyAqL1xuICAgICAgdmFyIGVzY2FwYWJsZSA9IC9bXFxcXFxcXCJcXHgwMC1cXHgxZlxcdTAwN0YtXFx1MDA5RlxcdTA2MDAtXFx1MDYwNFxcdTA3MGZcXHUxN2I0XFx1MTdiNVxcdTIwMGMtXFx1MjAwZlxcdTIwMjgtXFx1MjAyZlxcdTIwNjAtXFx1MjA2ZlxcdWZlZmZcXHVmZmYwLVxcdWZmZmZdL2csXG4gICAgICAgICAgbWV0YSA9IHtcbiAgICAgICAgICAgICdcXHUwMDA3JzogJ1xcXFxhJyxcbiAgICAgICAgICAgICdcXHUwMDFiJzogJ1xcXFxlJyxcbiAgICAgICAgICAgICdcXGInOiAnXFxcXGInLFxuICAgICAgICAgICAgJ1xcdCc6ICdcXFxcdCcsXG4gICAgICAgICAgICAnXFxuJzogJ1xcXFxuJyxcbiAgICAgICAgICAgICdcXGYnOiAnXFxcXGYnLFxuICAgICAgICAgICAgJ1xccic6ICdcXFxccicsXG4gICAgICAgICAgICAnXFx2JzogJ1xcXFx2JyxcbiAgICAgICAgICAgICdcIicgOiAnXFxcXFwiJyxcbiAgICAgICAgICAgICdcXFxcJzogJ1xcXFxcXFxcJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZXNjYXBlZCA9IHNlbGYucmVwbGFjZShlc2NhcGFibGUsIGZ1bmN0aW9uIChjaHIpIHtcbiAgICAgICAgICAgIGlmIChtZXRhW2Nocl0pIHJldHVybiBtZXRhW2Nocl07XG4gICAgICAgICAgICBjaHIgPSBjaHIuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgIGlmIChjaHIgPD0gMHhmZiAmJiAoc2VsZi5lbmNvZGluZ1tcIiRiaW5hcnk/XCJdKCkgfHwgc2VsZi5pbnRlcm5hbF9lbmNvZGluZ1tcIiRiaW5hcnk/XCJdKCkpKSB7XG4gICAgICAgICAgICAgIHJldHVybiAnXFxcXHgnICsgKCcwMCcgKyBjaHIudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkpLnNsaWNlKC0yKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiAnXFxcXHUnICsgKCcwMDAwJyArIGNoci50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSkuc2xpY2UoLTQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgcmV0dXJuICdcIicgKyBlc2NhcGVkLnJlcGxhY2UoL1xcI1tcXCRcXEBcXHtdL2csICdcXFxcJCYnKSArICdcIic7XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLW1pc2xlYWRpbmctY2hhcmFjdGVyLWNsYXNzICovXG4gICAgfVxuICBlbmRcblxuICBkZWYgaW50ZXJuXG4gICAgYHNlbGYudG9TdHJpbmcoKWBcbiAgZW5kXG5cbiAgZGVmIGxlbmd0aFxuICAgIGBzZWxmLmxlbmd0aGBcbiAgZW5kXG5cbiAgYWxpYXMgc2l6ZSBsZW5ndGhcblxuICBkZWYgbGluZXMoc2VwYXJhdG9yID0gJC8sIGNob21wOiBmYWxzZSwgJmJsb2NrKVxuICAgIGUgPSBlYWNoX2xpbmUoc2VwYXJhdG9yLCBjaG9tcDogY2hvbXAsICZibG9jaylcbiAgICBibG9jayA/IHNlbGYgOiBlLnRvX2FcbiAgZW5kXG5cbiAgZGVmIGxqdXN0KHdpZHRoLCBwYWRzdHIgPSAnICcpXG4gICAgd2lkdGggID0gYCRjb2VyY2VfdG8oI3t3aWR0aH0sICN7OjpJbnRlZ2VyfSwgJ3RvX2ludCcpYFxuICAgIHBhZHN0ciA9IGAkY29lcmNlX3RvKCN7cGFkc3RyfSwgI3s6OlN0cmluZ30sICd0b19zdHInKWAudG9fc1xuXG4gICAgaWYgcGFkc3RyLmVtcHR5P1xuICAgICAgOjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCAnemVybyB3aWR0aCBwYWRkaW5nJ1xuICAgIGVuZFxuXG4gICAgcmV0dXJuIHNlbGYgaWYgYHdpZHRoIDw9IHNlbGYubGVuZ3RoYFxuXG4gICAgJXh7XG4gICAgICB2YXIgaW5kZXggID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gXCJcIjtcblxuICAgICAgd2lkdGggLT0gc2VsZi5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgd2lkdGgpIHtcbiAgICAgICAgcmVzdWx0ICs9IHBhZHN0cjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGYgKyByZXN1bHQuc2xpY2UoMCwgd2lkdGgpO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGxzdHJpcFxuICAgIGBzZWxmLnJlcGxhY2UoL15bXFx1MDAwMFxcc10qLywgJycpYFxuICBlbmRcblxuICBkZWYgYXNjaWlfb25seT9cbiAgICAjIG5vbi1BU0NJSS1jb21wYXRpYmxlIGVuY29kaW5nIG11c3QgcmV0dXJuIGZhbHNlXG4gICAgJXh7XG4gICAgICBpZiAoIXNlbGYuZW5jb2RpbmcuYXNjaWkpIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiAvXltcXHgwMC1cXHg3Rl0qJC8udGVzdChzZWxmKTtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBtYXRjaChwYXR0ZXJuLCBwb3MgPSB1bmRlZmluZWQsICZibG9jaylcbiAgICBpZiBTdHJpbmcgPT09IHBhdHRlcm4gfHwgcGF0dGVybi5yZXNwb25kX3RvPyg6dG9fc3RyKVxuICAgICAgcGF0dGVybiA9IDo6UmVnZXhwLm5ldyhwYXR0ZXJuLnRvX3N0cilcbiAgICBlbmRcblxuICAgIHVubGVzcyA6OlJlZ2V4cCA9PT0gcGF0dGVyblxuICAgICAgOjpLZXJuZWwucmFpc2UgOjpUeXBlRXJyb3IsIFwid3JvbmcgYXJndW1lbnQgdHlwZSAje3BhdHRlcm4uY2xhc3N9IChleHBlY3RlZCBSZWdleHApXCJcbiAgICBlbmRcblxuICAgIHBhdHRlcm4ubWF0Y2goc2VsZiwgcG9zLCAmYmxvY2spXG4gIGVuZFxuXG4gIGRlZiBtYXRjaD8ocGF0dGVybiwgcG9zID0gdW5kZWZpbmVkKVxuICAgIGlmIFN0cmluZyA9PT0gcGF0dGVybiB8fCBwYXR0ZXJuLnJlc3BvbmRfdG8/KDp0b19zdHIpXG4gICAgICBwYXR0ZXJuID0gOjpSZWdleHAubmV3KHBhdHRlcm4udG9fc3RyKVxuICAgIGVuZFxuXG4gICAgdW5sZXNzIDo6UmVnZXhwID09PSBwYXR0ZXJuXG4gICAgICA6Oktlcm5lbC5yYWlzZSA6OlR5cGVFcnJvciwgXCJ3cm9uZyBhcmd1bWVudCB0eXBlICN7cGF0dGVybi5jbGFzc30gKGV4cGVjdGVkIFJlZ2V4cClcIlxuICAgIGVuZFxuXG4gICAgcGF0dGVybi5tYXRjaD8oc2VsZiwgcG9zKVxuICBlbmRcblxuICBkZWYgbmV4dFxuICAgICV4e1xuICAgICAgdmFyIGkgPSBzZWxmLmxlbmd0aDtcbiAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBzZWxmO1xuICAgICAgdmFyIGZpcnN0X2FscGhhbnVtX2NoYXJfaW5kZXggPSBzZWxmLnNlYXJjaCgvW2EtekEtWjAtOV0vKTtcbiAgICAgIHZhciBjYXJyeSA9IGZhbHNlO1xuICAgICAgdmFyIGNvZGU7XG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGNvZGUgPSBzZWxmLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIGlmICgoY29kZSA+PSA0OCAmJiBjb2RlIDw9IDU3KSB8fFxuICAgICAgICAgIChjb2RlID49IDY1ICYmIGNvZGUgPD0gOTApIHx8XG4gICAgICAgICAgKGNvZGUgPj0gOTcgJiYgY29kZSA8PSAxMjIpKSB7XG4gICAgICAgICAgc3dpdGNoIChjb2RlKSB7XG4gICAgICAgICAgY2FzZSA1NzpcbiAgICAgICAgICAgIGNhcnJ5ID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvZGUgPSA0ODtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgOTA6XG4gICAgICAgICAgICBjYXJyeSA9IHRydWU7XG4gICAgICAgICAgICBjb2RlID0gNjU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDEyMjpcbiAgICAgICAgICAgIGNhcnJ5ID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvZGUgPSA5NztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjYXJyeSA9IGZhbHNlO1xuICAgICAgICAgICAgY29kZSArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoZmlyc3RfYWxwaGFudW1fY2hhcl9pbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIGlmIChjb2RlID09PSAyNTUpIHtcbiAgICAgICAgICAgICAgY2FycnkgPSB0cnVlO1xuICAgICAgICAgICAgICBjb2RlID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNhcnJ5ID0gZmFsc2U7XG4gICAgICAgICAgICAgIGNvZGUgKz0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FycnkgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwgaSkgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpICsgcmVzdWx0LnNsaWNlKGkgKyAxKTtcbiAgICAgICAgaWYgKGNhcnJ5ICYmIChpID09PSAwIHx8IGkgPT09IGZpcnN0X2FscGhhbnVtX2NoYXJfaW5kZXgpKSB7XG4gICAgICAgICAgc3dpdGNoIChjb2RlKSB7XG4gICAgICAgICAgY2FzZSA2NTpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgOTc6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY29kZSArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKSArIHJlc3VsdDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnNsaWNlKDAsIGkpICsgU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKSArIHJlc3VsdC5zbGljZShpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FycnkgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNhcnJ5KSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICBlbmRcblxuICBkZWYgb2N0XG4gICAgJXh7XG4gICAgICB2YXIgcmVzdWx0LFxuICAgICAgICAgIHN0cmluZyA9IHNlbGYsXG4gICAgICAgICAgcmFkaXggPSA4O1xuXG4gICAgICBpZiAoL15cXHMqXy8udGVzdChzdHJpbmcpKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuXG4gICAgICBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZSgvXihcXHMqWystXT8pKDBbYm9keF0/KSguKykkL2ksIGZ1bmN0aW9uIChvcmlnaW5hbCwgaGVhZCwgZmxhZywgdGFpbCkge1xuICAgICAgICBzd2l0Y2ggKHRhaWwuY2hhckF0KDApKSB7XG4gICAgICAgIGNhc2UgJysnOlxuICAgICAgICBjYXNlICctJzpcbiAgICAgICAgICByZXR1cm4gb3JpZ2luYWw7XG4gICAgICAgIGNhc2UgJzAnOlxuICAgICAgICAgIGlmICh0YWlsLmNoYXJBdCgxKSA9PT0gJ3gnICYmIGZsYWcgPT09ICcweCcpIHtcbiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChmbGFnKSB7XG4gICAgICAgIGNhc2UgJzBiJzpcbiAgICAgICAgICByYWRpeCA9IDI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJzAnOlxuICAgICAgICBjYXNlICcwbyc6XG4gICAgICAgICAgcmFkaXggPSA4O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICcwZCc6XG4gICAgICAgICAgcmFkaXggPSAxMDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnMHgnOlxuICAgICAgICAgIHJhZGl4ID0gMTY7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhlYWQgKyB0YWlsO1xuICAgICAgfSk7XG5cbiAgICAgIHJlc3VsdCA9IHBhcnNlSW50KHN0cmluZy5yZXBsYWNlKC9fKD8hXykvZywgJycpLCByYWRpeCk7XG4gICAgICByZXR1cm4gaXNOYU4ocmVzdWx0KSA/IDAgOiByZXN1bHQ7XG4gICAgfVxuICBlbmRcblxuICBkZWYgb3JkXG4gICAgJXh7XG4gICAgICBpZiAodHlwZW9mIHNlbGYuY29kZVBvaW50QXQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gc2VsZi5jb2RlUG9pbnRBdCgwKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gc2VsZi5jaGFyQ29kZUF0KDApO1xuICAgICAgfVxuICAgIH1cbiAgZW5kXG5cbiAgZGVmIHBhcnRpdGlvbihzZXApXG4gICAgJXh7XG4gICAgICB2YXIgaSwgbTtcblxuICAgICAgaWYgKHNlcC4kJGlzX3JlZ2V4cCkge1xuICAgICAgICBtID0gc2VwLmV4ZWMoc2VsZik7XG4gICAgICAgIGlmIChtID09PSBudWxsKSB7XG4gICAgICAgICAgaSA9IC0xO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICN7OjpNYXRjaERhdGEubmV3IGBzZXBgLCBgbWB9O1xuICAgICAgICAgIHNlcCA9IG1bMF07XG4gICAgICAgICAgaSA9IG0uaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlcCA9ICRjb2VyY2VfdG8oc2VwLCAjezo6U3RyaW5nfSwgJ3RvX3N0cicpO1xuICAgICAgICBpID0gc2VsZi5pbmRleE9mKHNlcCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpID09PSAtMSkge1xuICAgICAgICByZXR1cm4gW3NlbGYsICcnLCAnJ107XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBbXG4gICAgICAgIHNlbGYuc2xpY2UoMCwgaSksXG4gICAgICAgIHNlbGYuc2xpY2UoaSwgaSArIHNlcC5sZW5ndGgpLFxuICAgICAgICBzZWxmLnNsaWNlKGkgKyBzZXAubGVuZ3RoKVxuICAgICAgXTtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiByZXZlcnNlXG4gICAgYHNlbGYuc3BsaXQoJycpLnJldmVyc2UoKS5qb2luKCcnKWBcbiAgZW5kXG5cbiAgZGVmIHJpbmRleChzZWFyY2gsIG9mZnNldCA9IHVuZGVmaW5lZClcbiAgICAleHtcbiAgICAgIHZhciBpLCBtLCByLCBfbTtcblxuICAgICAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG9mZnNldCA9IHNlbGYubGVuZ3RoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2Zmc2V0ID0gJGNvZXJjZV90byhvZmZzZXQsICN7OjpJbnRlZ2VyfSwgJ3RvX2ludCcpO1xuICAgICAgICBpZiAob2Zmc2V0IDwgMCkge1xuICAgICAgICAgIG9mZnNldCArPSBzZWxmLmxlbmd0aDtcbiAgICAgICAgICBpZiAob2Zmc2V0IDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIG5pbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHNlYXJjaC4kJGlzX3JlZ2V4cCkge1xuICAgICAgICBtID0gbnVsbDtcbiAgICAgICAgciA9ICRnbG9iYWxfbXVsdGlsaW5lX3JlZ2V4cChzZWFyY2gpO1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgIF9tID0gci5leGVjKHNlbGYpO1xuICAgICAgICAgIGlmIChfbSA9PT0gbnVsbCB8fCBfbS5pbmRleCA+IG9mZnNldCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIG0gPSBfbTtcbiAgICAgICAgICByLmxhc3RJbmRleCA9IG0uaW5kZXggKyAxO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtID09PSBudWxsKSB7XG4gICAgICAgICAgI3skfiA9IG5pbH1cbiAgICAgICAgICBpID0gLTE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgI3s6Ok1hdGNoRGF0YS5uZXcgYHJgLCBgbWB9O1xuICAgICAgICAgIGkgPSBtLmluZGV4O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWFyY2ggPSAkY29lcmNlX3RvKHNlYXJjaCwgI3s6OlN0cmluZ30sICd0b19zdHInKTtcbiAgICAgICAgaSA9IHNlbGYubGFzdEluZGV4T2Yoc2VhcmNoLCBvZmZzZXQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaSA9PT0gLTEgPyBuaWwgOiBpO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIHJqdXN0KHdpZHRoLCBwYWRzdHIgPSAnICcpXG4gICAgd2lkdGggID0gYCRjb2VyY2VfdG8oI3t3aWR0aH0sICN7OjpJbnRlZ2VyfSwgJ3RvX2ludCcpYFxuICAgIHBhZHN0ciA9IGAkY29lcmNlX3RvKCN7cGFkc3RyfSwgI3s6OlN0cmluZ30sICd0b19zdHInKWAudG9fc1xuXG4gICAgaWYgcGFkc3RyLmVtcHR5P1xuICAgICAgOjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCAnemVybyB3aWR0aCBwYWRkaW5nJ1xuICAgIGVuZFxuXG4gICAgcmV0dXJuIHNlbGYgaWYgYHdpZHRoIDw9IHNlbGYubGVuZ3RoYFxuXG4gICAgJXh7XG4gICAgICB2YXIgY2hhcnMgICAgID0gTWF0aC5mbG9vcih3aWR0aCAtIHNlbGYubGVuZ3RoKSxcbiAgICAgICAgICBwYXR0ZXJucyAgPSBNYXRoLmZsb29yKGNoYXJzIC8gcGFkc3RyLmxlbmd0aCksXG4gICAgICAgICAgcmVzdWx0ICAgID0gQXJyYXkocGF0dGVybnMgKyAxKS5qb2luKHBhZHN0ciksXG4gICAgICAgICAgcmVtYWluaW5nID0gY2hhcnMgLSByZXN1bHQubGVuZ3RoO1xuXG4gICAgICByZXR1cm4gcmVzdWx0ICsgcGFkc3RyLnNsaWNlKDAsIHJlbWFpbmluZykgKyBzZWxmO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIHJwYXJ0aXRpb24oc2VwKVxuICAgICV4e1xuICAgICAgdmFyIGksIG0sIHIsIF9tO1xuXG4gICAgICBpZiAoc2VwLiQkaXNfcmVnZXhwKSB7XG4gICAgICAgIG0gPSBudWxsO1xuICAgICAgICByID0gJGdsb2JhbF9tdWx0aWxpbmVfcmVnZXhwKHNlcCk7XG5cbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICBfbSA9IHIuZXhlYyhzZWxmKTtcbiAgICAgICAgICBpZiAoX20gPT09IG51bGwpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBtID0gX207XG4gICAgICAgICAgci5sYXN0SW5kZXggPSBtLmluZGV4ICsgMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtID09PSBudWxsKSB7XG4gICAgICAgICAgaSA9IC0xO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICN7OjpNYXRjaERhdGEubmV3IGByYCwgYG1gfTtcbiAgICAgICAgICBzZXAgPSBtWzBdO1xuICAgICAgICAgIGkgPSBtLmluZGV4O1xuICAgICAgICB9XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlcCA9ICRjb2VyY2VfdG8oc2VwLCAjezo6U3RyaW5nfSwgJ3RvX3N0cicpO1xuICAgICAgICBpID0gc2VsZi5sYXN0SW5kZXhPZihzZXApO1xuICAgICAgfVxuXG4gICAgICBpZiAoaSA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIFsnJywgJycsIHNlbGZdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gW1xuICAgICAgICBzZWxmLnNsaWNlKDAsIGkpLFxuICAgICAgICBzZWxmLnNsaWNlKGksIGkgKyBzZXAubGVuZ3RoKSxcbiAgICAgICAgc2VsZi5zbGljZShpICsgc2VwLmxlbmd0aClcbiAgICAgIF07XG4gICAgfVxuICBlbmRcblxuICBkZWYgcnN0cmlwXG4gICAgYHNlbGYucmVwbGFjZSgvW1xcc1xcdTAwMDBdKiQvLCAnJylgXG4gIGVuZFxuXG4gIGRlZiBzY2FuKHBhdHRlcm4sIG5vX21hdGNoZGF0YTogZmFsc2UsICZibG9jaylcbiAgICAleHtcbiAgICAgIHZhciByZXN1bHQgPSBbXSxcbiAgICAgICAgICBtYXRjaF9kYXRhID0gbmlsLFxuICAgICAgICAgIG1hdGNoO1xuXG4gICAgICBpZiAocGF0dGVybi4kJGlzX3JlZ2V4cCkge1xuICAgICAgICBwYXR0ZXJuID0gJGdsb2JhbF9tdWx0aWxpbmVfcmVnZXhwKHBhdHRlcm4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGF0dGVybiA9ICRjb2VyY2VfdG8ocGF0dGVybiwgI3s6OlN0cmluZ30sICd0b19zdHInKTtcbiAgICAgICAgcGF0dGVybiA9IG5ldyBSZWdFeHAocGF0dGVybi5yZXBsYWNlKC9bLiorP14ke30oKXxbXFxdXFxcXF0vZywgJ1xcXFwkJicpLCAnZ20nKTtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKChtYXRjaCA9IHBhdHRlcm4uZXhlYyhzZWxmKSkgIT0gbnVsbCkge1xuICAgICAgICBtYXRjaF9kYXRhID0gI3s6Ok1hdGNoRGF0YS5uZXcgYHBhdHRlcm5gLCBgbWF0Y2hgLCBub19tYXRjaGRhdGE6IG5vX21hdGNoZGF0YX07XG4gICAgICAgIGlmIChibG9jayA9PT0gbmlsKSB7XG4gICAgICAgICAgbWF0Y2gubGVuZ3RoID09IDEgPyByZXN1bHQucHVzaChtYXRjaFswXSkgOiByZXN1bHQucHVzaCgje2BtYXRjaF9kYXRhYC5jYXB0dXJlc30pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1hdGNoLmxlbmd0aCA9PSAxID8gT3BhbC55aWVsZDEoYmxvY2ssIG1hdGNoWzBdKSA6IE9wYWwueWllbGQxKGJsb2NrLCAje2BtYXRjaF9kYXRhYC5jYXB0dXJlc30pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXR0ZXJuLmxhc3RJbmRleCA9PT0gbWF0Y2guaW5kZXgpIHtcbiAgICAgICAgICBwYXR0ZXJuLmxhc3RJbmRleCArPSAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghbm9fbWF0Y2hkYXRhKSAjeyR+ID0gYG1hdGNoX2RhdGFgfTtcblxuICAgICAgcmV0dXJuIChibG9jayAhPT0gbmlsID8gc2VsZiA6IHJlc3VsdCk7XG4gICAgfVxuICBlbmRcblxuICAjIFdlIHJlZGVmaW5lIHRoaXMgbWV0aG9kIG9uIFN0cmluZywgYXMga2VybmVsLnJiIGlzIGluIHN0cmljdCBtb2RlXG4gICMgc28gdGhhdCB0aGluZ3MgbGlrZSBCb29sZWFuIGRvbid0IGdldCBib3hlZC4gRm9yIFN0cmluZyB0aG91Z2ggLVxuICAjIHdlIGVpdGhlciBuZWVkIHRvIGJveCBpdCB0byBkZWZpbmUgcHJvcGVydGllcyBvbiBpdCwgb3IgcnVuIGl0IGluXG4gICMgbm9uLXN0cmljdCBtb2RlLiBUaGlzIGlzIGEgbWVzcyBhbmQgd2UgbmVlZCB0byBjb21lIGJhY2sgdG8gaXRcbiAgIyBhdCBhIGxhdGVyIHRpbWUuXG4gIGRlZiBzaW5nbGV0b25fY2xhc3NcbiAgICBgT3BhbC5nZXRfc2luZ2xldG9uX2NsYXNzKHNlbGYpYFxuICBlbmRcblxuICBkZWYgc3BsaXQocGF0dGVybiA9IHVuZGVmaW5lZCwgbGltaXQgPSB1bmRlZmluZWQpXG4gICAgJXh7XG4gICAgICBpZiAoc2VsZi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuXG4gICAgICBpZiAobGltaXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsaW1pdCA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaW1pdCA9ICN7OjpPcGFsLmNvZXJjZV90byEobGltaXQsIDo6SW50ZWdlciwgOnRvX2ludCl9O1xuICAgICAgICBpZiAobGltaXQgPT09IDEpIHtcbiAgICAgICAgICByZXR1cm4gW3NlbGZdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXR0ZXJuID09PSB1bmRlZmluZWQgfHwgcGF0dGVybiA9PT0gbmlsKSB7XG4gICAgICAgIHBhdHRlcm4gPSAjeyQ7IHx8ICcgJ307XG4gICAgICB9XG5cbiAgICAgIHZhciByZXN1bHQgPSBbXSxcbiAgICAgICAgICBzdHJpbmcgPSBzZWxmLnRvU3RyaW5nKCksXG4gICAgICAgICAgaW5kZXggPSAwLFxuICAgICAgICAgIG1hdGNoLFxuICAgICAgICAgIGksIGlpO1xuXG4gICAgICBpZiAocGF0dGVybi4kJGlzX3JlZ2V4cCkge1xuICAgICAgICBwYXR0ZXJuID0gJGdsb2JhbF9tdWx0aWxpbmVfcmVnZXhwKHBhdHRlcm4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGF0dGVybiA9ICRjb2VyY2VfdG8ocGF0dGVybiwgI3s6OlN0cmluZ30sICd0b19zdHInKS4kdG9fcygpO1xuICAgICAgICBpZiAocGF0dGVybiA9PT0gJyAnKSB7XG4gICAgICAgICAgcGF0dGVybiA9IC9cXHMrL2dtO1xuICAgICAgICAgIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKC9eXFxzKy8sICcnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXR0ZXJuID0gbmV3IFJlZ0V4cChwYXR0ZXJuLnJlcGxhY2UoL1suKis/XiR7fSgpfFtcXF1cXFxcXS9nLCAnXFxcXCQmJyksICdnbScpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdCA9IHN0cmluZy5zcGxpdChwYXR0ZXJuKTtcblxuICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPT09IDEgJiYgcmVzdWx0WzBdID09PSBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIFtyZXN1bHRbMF1dO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAoKGkgPSByZXN1bHQuaW5kZXhPZih1bmRlZmluZWQpKSAhPT0gLTEpIHtcbiAgICAgICAgcmVzdWx0LnNwbGljZShpLCAxKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGxpbWl0ID09PSAwKSB7XG4gICAgICAgIHdoaWxlIChyZXN1bHRbcmVzdWx0Lmxlbmd0aCAtIDFdID09PSAnJykge1xuICAgICAgICAgIHJlc3VsdC5sZW5ndGggLT0gMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBtYXRjaCA9IHBhdHRlcm4uZXhlYyhzdHJpbmcpO1xuXG4gICAgICBpZiAobGltaXQgPCAwKSB7XG4gICAgICAgIGlmIChtYXRjaCAhPT0gbnVsbCAmJiBtYXRjaFswXSA9PT0gJycgJiYgcGF0dGVybi5zb3VyY2UuaW5kZXhPZignKD89JykgPT09IC0xKSB7XG4gICAgICAgICAgZm9yIChpID0gMCwgaWkgPSBtYXRjaC5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCgnJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChtYXRjaCAhPT0gbnVsbCAmJiBtYXRjaFswXSA9PT0gJycpIHtcbiAgICAgICAgcmVzdWx0LnNwbGljZShsaW1pdCAtIDEsIHJlc3VsdC5sZW5ndGggLSAxLCByZXN1bHQuc2xpY2UobGltaXQgLSAxKS5qb2luKCcnKSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChsaW1pdCA+PSByZXN1bHQubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGkgPSAwO1xuICAgICAgd2hpbGUgKG1hdGNoICE9PSBudWxsKSB7XG4gICAgICAgIGkrKztcbiAgICAgICAgaW5kZXggPSBwYXR0ZXJuLmxhc3RJbmRleDtcbiAgICAgICAgaWYgKGkgKyAxID09PSBsaW1pdCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG1hdGNoID0gcGF0dGVybi5leGVjKHN0cmluZyk7XG4gICAgICB9XG4gICAgICByZXN1bHQuc3BsaWNlKGxpbWl0IC0gMSwgcmVzdWx0Lmxlbmd0aCAtIDEsIHN0cmluZy5zbGljZShpbmRleCkpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBzcXVlZXplKCpzZXRzKVxuICAgICV4e1xuICAgICAgaWYgKHNldHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBzZWxmLnJlcGxhY2UoLyguKVxcMSsvZywgJyQxJyk7XG4gICAgICB9XG4gICAgICB2YXIgY2hhcl9jbGFzcyA9IGNoYXJfY2xhc3NfZnJvbV9jaGFyX3NldHMoc2V0cyk7XG4gICAgICBpZiAoY2hhcl9jbGFzcyA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZWxmLnJlcGxhY2UobmV3IFJlZ0V4cCgnKCcgKyBjaGFyX2NsYXNzICsgJylcXFxcMSsnLCAnZycpLCAnJDEnKTtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBzdGFydF93aXRoPygqcHJlZml4ZXMpXG4gICAgJXh7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gcHJlZml4ZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHByZWZpeGVzW2ldLiQkaXNfcmVnZXhwKSB7XG4gICAgICAgICAgdmFyIHJlZ2V4cCA9IHByZWZpeGVzW2ldO1xuICAgICAgICAgIHZhciBtYXRjaCA9IHJlZ2V4cC5leGVjKHNlbGYpO1xuXG4gICAgICAgICAgaWYgKG1hdGNoICE9IG51bGwgJiYgbWF0Y2guaW5kZXggPT09IDApIHtcbiAgICAgICAgICAgICN7JH4gPSA6Ok1hdGNoRGF0YS5uZXcoYHJlZ2V4cGAsIGBtYXRjaGApfTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAjeyR+ID0gbmlsfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJlZml4ID0gJGNvZXJjZV90byhwcmVmaXhlc1tpXSwgI3s6OlN0cmluZ30sICd0b19zdHInKS4kdG9fcygpO1xuXG4gICAgICAgICAgaWYgKHNlbGYuaW5kZXhPZihwcmVmaXgpID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIHN0cmlwXG4gICAgYHNlbGYucmVwbGFjZSgvXltcXHNcXHUwMDAwXSp8W1xcc1xcdTAwMDBdKiQvZywgJycpYFxuICBlbmRcblxuICBkZWYgc3ViKHBhdHRlcm4sIHJlcGxhY2VtZW50ID0gdW5kZWZpbmVkLCAmYmxvY2spXG4gICAgJXh7XG4gICAgICBpZiAoIXBhdHRlcm4uJCRpc19yZWdleHApIHtcbiAgICAgICAgcGF0dGVybiA9ICRjb2VyY2VfdG8ocGF0dGVybiwgI3s6OlN0cmluZ30sICd0b19zdHInKTtcbiAgICAgICAgcGF0dGVybiA9IG5ldyBSZWdFeHAocGF0dGVybi5yZXBsYWNlKC9bLiorP14ke30oKXxbXFxdXFxcXF0vZywgJ1xcXFwkJicpKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlc3VsdCwgbWF0Y2ggPSBwYXR0ZXJuLmV4ZWMoc2VsZik7XG5cbiAgICAgIGlmIChtYXRjaCA9PT0gbnVsbCkge1xuICAgICAgICAjeyR+ID0gbmlsfVxuICAgICAgICByZXN1bHQgPSBzZWxmLnRvU3RyaW5nKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAjezo6TWF0Y2hEYXRhLm5ldyBgcGF0dGVybmAsIGBtYXRjaGB9XG5cbiAgICAgICAgaWYgKHJlcGxhY2VtZW50ID09PSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgIGlmIChibG9jayA9PT0gbmlsKSB7XG4gICAgICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgJ3dyb25nIG51bWJlciBvZiBhcmd1bWVudHMgKDEgZm9yIDIpJ31cbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gc2VsZi5zbGljZSgwLCBtYXRjaC5pbmRleCkgKyBibG9jayhtYXRjaFswXSkgKyBzZWxmLnNsaWNlKG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoKTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlcGxhY2VtZW50LiQkaXNfaGFzaCkge1xuXG4gICAgICAgICAgcmVzdWx0ID0gc2VsZi5zbGljZSgwLCBtYXRjaC5pbmRleCkgKyAje2ByZXBsYWNlbWVudGBbYG1hdGNoWzBdYF0udG9fc30gKyBzZWxmLnNsaWNlKG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoKTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgcmVwbGFjZW1lbnQgPSAkY29lcmNlX3RvKHJlcGxhY2VtZW50LCAjezo6U3RyaW5nfSwgJ3RvX3N0cicpO1xuXG4gICAgICAgICAgcmVwbGFjZW1lbnQgPSByZXBsYWNlbWVudC5yZXBsYWNlKC8oW1xcXFxdKykoWzAtOSsmYCddKS9nLCBmdW5jdGlvbiAob3JpZ2luYWwsIHNsYXNoZXMsIGNvbW1hbmQpIHtcbiAgICAgICAgICAgIGlmIChzbGFzaGVzLmxlbmd0aCAlIDIgPT09IDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3dpdGNoIChjb21tYW5kKSB7XG4gICAgICAgICAgICBjYXNlIFwiK1wiOlxuICAgICAgICAgICAgICBmb3IgKHZhciBpID0gbWF0Y2gubGVuZ3RoIC0gMTsgaSA+IDA7IGktLSkge1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaFtpXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gc2xhc2hlcy5zbGljZSgxKSArIG1hdGNoW2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICBjYXNlIFwiJlwiOiByZXR1cm4gc2xhc2hlcy5zbGljZSgxKSArIG1hdGNoWzBdO1xuICAgICAgICAgICAgY2FzZSBcImBcIjogcmV0dXJuIHNsYXNoZXMuc2xpY2UoMSkgKyBzZWxmLnNsaWNlKDAsIG1hdGNoLmluZGV4KTtcbiAgICAgICAgICAgIGNhc2UgXCInXCI6IHJldHVybiBzbGFzaGVzLnNsaWNlKDEpICsgc2VsZi5zbGljZShtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgICAgICBkZWZhdWx0OiAgcmV0dXJuIHNsYXNoZXMuc2xpY2UoMSkgKyAobWF0Y2hbY29tbWFuZF0gfHwgJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLnJlcGxhY2UoL1xcXFxcXFxcL2csICdcXFxcJyk7XG5cbiAgICAgICAgICByZXN1bHQgPSBzZWxmLnNsaWNlKDAsIG1hdGNoLmluZGV4KSArIHJlcGxhY2VtZW50ICsgc2VsZi5zbGljZShtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBzdW0obiA9IDE2KVxuICAgICV4e1xuICAgICAgbiA9ICRjb2VyY2VfdG8obiwgI3s6OkludGVnZXJ9LCAndG9faW50Jyk7XG5cbiAgICAgIHZhciByZXN1bHQgPSAwLFxuICAgICAgICAgIGxlbmd0aCA9IHNlbGYubGVuZ3RoLFxuICAgICAgICAgIGkgPSAwO1xuXG4gICAgICBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCArPSBzZWxmLmNoYXJDb2RlQXQoaSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChuIDw9IDApIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdCAmIChNYXRoLnBvdygyLCBuKSAtIDEpO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIHN3YXBjYXNlXG4gICAgJXh7XG4gICAgICB2YXIgc3RyID0gc2VsZi5yZXBsYWNlKC8oW2Etel0rKXwoW0EtWl0rKS9nLCBmdW5jdGlvbigkMCwkMSwkMikge1xuICAgICAgICByZXR1cm4gJDEgPyAkMC50b1VwcGVyQ2FzZSgpIDogJDAudG9Mb3dlckNhc2UoKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIHRvX2ZcbiAgICAleHtcbiAgICAgIGlmIChzZWxmLmNoYXJBdCgwKSA9PT0gJ18nKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVzdWx0ID0gcGFyc2VGbG9hdChzZWxmLnJlcGxhY2UoL18vZywgJycpKTtcblxuICAgICAgaWYgKGlzTmFOKHJlc3VsdCkgfHwgcmVzdWx0ID09IEluZmluaXR5IHx8IHJlc3VsdCA9PSAtSW5maW5pdHkpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICB9XG4gIGVuZFxuXG4gIGRlZiB0b19pKGJhc2UgPSAxMClcbiAgICAleHtcbiAgICAgIHZhciByZXN1bHQsXG4gICAgICAgICAgc3RyaW5nID0gc2VsZi50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgIHJhZGl4ID0gJGNvZXJjZV90byhiYXNlLCAjezo6SW50ZWdlcn0sICd0b19pbnQnKTtcblxuICAgICAgaWYgKHJhZGl4ID09PSAxIHx8IHJhZGl4IDwgMCB8fCByYWRpeCA+IDM2KSB7XG4gICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCBcImludmFsaWQgcmFkaXggI3tgcmFkaXhgfVwifVxuICAgICAgfVxuXG4gICAgICBpZiAoL15cXHMqXy8udGVzdChzdHJpbmcpKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuXG4gICAgICBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZSgvXihcXHMqWystXT8pKDBbYm9keF0/KSguKykkLywgZnVuY3Rpb24gKG9yaWdpbmFsLCBoZWFkLCBmbGFnLCB0YWlsKSB7XG4gICAgICAgIHN3aXRjaCAodGFpbC5jaGFyQXQoMCkpIHtcbiAgICAgICAgY2FzZSAnKyc6XG4gICAgICAgIGNhc2UgJy0nOlxuICAgICAgICAgIHJldHVybiBvcmlnaW5hbDtcbiAgICAgICAgY2FzZSAnMCc6XG4gICAgICAgICAgaWYgKHRhaWwuY2hhckF0KDEpID09PSAneCcgJiYgZmxhZyA9PT0gJzB4JyAmJiAocmFkaXggPT09IDAgfHwgcmFkaXggPT09IDE2KSkge1xuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKGZsYWcpIHtcbiAgICAgICAgY2FzZSAnMGInOlxuICAgICAgICAgIGlmIChyYWRpeCA9PT0gMCB8fCByYWRpeCA9PT0gMikge1xuICAgICAgICAgICAgcmFkaXggPSAyO1xuICAgICAgICAgICAgcmV0dXJuIGhlYWQgKyB0YWlsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnMCc6XG4gICAgICAgIGNhc2UgJzBvJzpcbiAgICAgICAgICBpZiAocmFkaXggPT09IDAgfHwgcmFkaXggPT09IDgpIHtcbiAgICAgICAgICAgIHJhZGl4ID0gODtcbiAgICAgICAgICAgIHJldHVybiBoZWFkICsgdGFpbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJzBkJzpcbiAgICAgICAgICBpZiAocmFkaXggPT09IDAgfHwgcmFkaXggPT09IDEwKSB7XG4gICAgICAgICAgICByYWRpeCA9IDEwO1xuICAgICAgICAgICAgcmV0dXJuIGhlYWQgKyB0YWlsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnMHgnOlxuICAgICAgICAgIGlmIChyYWRpeCA9PT0gMCB8fCByYWRpeCA9PT0gMTYpIHtcbiAgICAgICAgICAgIHJhZGl4ID0gMTY7XG4gICAgICAgICAgICByZXR1cm4gaGVhZCArIHRhaWw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcmlnaW5hbFxuICAgICAgfSk7XG5cbiAgICAgIHJlc3VsdCA9IHBhcnNlSW50KHN0cmluZy5yZXBsYWNlKC9fKD8hXykvZywgJycpLCByYWRpeCk7XG4gICAgICByZXR1cm4gaXNOYU4ocmVzdWx0KSA/IDAgOiByZXN1bHQ7XG4gICAgfVxuICBlbmRcblxuICBkZWYgdG9fcHJvY1xuICAgIG1ldGhvZF9uYW1lID0gYHNlbGYudmFsdWVPZigpYFxuXG4gICAgcHJvYyA9IDo6S2VybmVsLnByb2MgZG8gfCphcmdzLCAmYmxvY2t8XG4gICAgICAleHtcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsICdubyByZWNlaXZlciBnaXZlbid9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVjdiA9IGFyZ3NbMF07XG5cbiAgICAgICAgaWYgKHJlY3YgPT0gbnVsbCkgcmVjdiA9IG5pbDtcblxuICAgICAgICB2YXIgYm9keSA9IHJlY3ZbJyQnICsgI3ttZXRob2RfbmFtZX1dO1xuXG4gICAgICAgIGlmICghYm9keSkge1xuICAgICAgICAgIGJvZHkgPSByZWN2LiRtZXRob2RfbWlzc2luZztcbiAgICAgICAgICBhcmdzWzBdID0gI3ttZXRob2RfbmFtZX07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXJncyA9IGFyZ3Muc2xpY2UoMSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGJsb2NrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgYm9keS4kJHAgPSBibG9jaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBib2R5LmNhbGwocmVjdik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGJvZHkuYXBwbHkocmVjdiwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBlbmRcblxuICAgIGBwcm9jLiQkc291cmNlX2xvY2F0aW9uID0gbmlsYFxuXG4gICAgcHJvY1xuICBlbmRcblxuICBkZWYgdG9fc1xuICAgIGBzZWxmLnRvU3RyaW5nKClgXG4gIGVuZFxuXG4gIGRlZiB0cihmcm9tLCB0bylcbiAgICAleHtcbiAgICAgIGZyb20gPSAkY29lcmNlX3RvKGZyb20sICN7OjpTdHJpbmd9LCAndG9fc3RyJykuJHRvX3MoKTtcbiAgICAgIHRvID0gJGNvZXJjZV90byh0bywgI3s6OlN0cmluZ30sICd0b19zdHInKS4kdG9fcygpO1xuXG4gICAgICBpZiAoZnJvbS5sZW5ndGggPT0gMCB8fCBmcm9tID09PSB0bykge1xuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgIH1cblxuICAgICAgdmFyIGksIGluX3JhbmdlLCBjLCBjaCwgc3RhcnQsIGVuZCwgbGVuZ3RoO1xuICAgICAgdmFyIHN1YnMgPSB7fTtcbiAgICAgIHZhciBmcm9tX2NoYXJzID0gZnJvbS5zcGxpdCgnJyk7XG4gICAgICB2YXIgZnJvbV9sZW5ndGggPSBmcm9tX2NoYXJzLmxlbmd0aDtcbiAgICAgIHZhciB0b19jaGFycyA9IHRvLnNwbGl0KCcnKTtcbiAgICAgIHZhciB0b19sZW5ndGggPSB0b19jaGFycy5sZW5ndGg7XG5cbiAgICAgIHZhciBpbnZlcnNlID0gZmFsc2U7XG4gICAgICB2YXIgZ2xvYmFsX3N1YiA9IG51bGw7XG4gICAgICBpZiAoZnJvbV9jaGFyc1swXSA9PT0gJ14nICYmIGZyb21fY2hhcnMubGVuZ3RoID4gMSkge1xuICAgICAgICBpbnZlcnNlID0gdHJ1ZTtcbiAgICAgICAgZnJvbV9jaGFycy5zaGlmdCgpO1xuICAgICAgICBnbG9iYWxfc3ViID0gdG9fY2hhcnNbdG9fbGVuZ3RoIC0gMV1cbiAgICAgICAgZnJvbV9sZW5ndGggLT0gMTtcbiAgICAgIH1cblxuICAgICAgdmFyIGZyb21fY2hhcnNfZXhwYW5kZWQgPSBbXTtcbiAgICAgIHZhciBsYXN0X2Zyb20gPSBudWxsO1xuICAgICAgaW5fcmFuZ2UgPSBmYWxzZTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBmcm9tX2xlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNoID0gZnJvbV9jaGFyc1tpXTtcbiAgICAgICAgaWYgKGxhc3RfZnJvbSA9PSBudWxsKSB7XG4gICAgICAgICAgbGFzdF9mcm9tID0gY2g7XG4gICAgICAgICAgZnJvbV9jaGFyc19leHBhbmRlZC5wdXNoKGNoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjaCA9PT0gJy0nKSB7XG4gICAgICAgICAgaWYgKGxhc3RfZnJvbSA9PT0gJy0nKSB7XG4gICAgICAgICAgICBmcm9tX2NoYXJzX2V4cGFuZGVkLnB1c2goJy0nKTtcbiAgICAgICAgICAgIGZyb21fY2hhcnNfZXhwYW5kZWQucHVzaCgnLScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpID09IGZyb21fbGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgZnJvbV9jaGFyc19leHBhbmRlZC5wdXNoKCctJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaW5fcmFuZ2UgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpbl9yYW5nZSkge1xuICAgICAgICAgIHN0YXJ0ID0gbGFzdF9mcm9tLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgICAgZW5kID0gY2guY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICBpZiAoc3RhcnQgPiBlbmQpIHtcbiAgICAgICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCBcImludmFsaWQgcmFuZ2UgXFxcIiN7YFN0cmluZy5mcm9tQ2hhckNvZGUoc3RhcnQpYH0tI3tgU3RyaW5nLmZyb21DaGFyQ29kZShlbmQpYH1cXFwiIGluIHN0cmluZyB0cmFuc2xpdGVyYXRpb25cIn1cbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChjID0gc3RhcnQgKyAxOyBjIDwgZW5kOyBjKyspIHtcbiAgICAgICAgICAgIGZyb21fY2hhcnNfZXhwYW5kZWQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGMpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnJvbV9jaGFyc19leHBhbmRlZC5wdXNoKGNoKTtcbiAgICAgICAgICBpbl9yYW5nZSA9IG51bGw7XG4gICAgICAgICAgbGFzdF9mcm9tID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBmcm9tX2NoYXJzX2V4cGFuZGVkLnB1c2goY2gpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZyb21fY2hhcnMgPSBmcm9tX2NoYXJzX2V4cGFuZGVkO1xuICAgICAgZnJvbV9sZW5ndGggPSBmcm9tX2NoYXJzLmxlbmd0aDtcblxuICAgICAgaWYgKGludmVyc2UpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGZyb21fbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBzdWJzW2Zyb21fY2hhcnNbaV1dID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGlmICh0b19sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdmFyIHRvX2NoYXJzX2V4cGFuZGVkID0gW107XG4gICAgICAgICAgdmFyIGxhc3RfdG8gPSBudWxsO1xuICAgICAgICAgIGluX3JhbmdlID0gZmFsc2U7XG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRvX2xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjaCA9IHRvX2NoYXJzW2ldO1xuICAgICAgICAgICAgaWYgKGxhc3RfdG8gPT0gbnVsbCkge1xuICAgICAgICAgICAgICBsYXN0X3RvID0gY2g7XG4gICAgICAgICAgICAgIHRvX2NoYXJzX2V4cGFuZGVkLnB1c2goY2gpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2ggPT09ICctJykge1xuICAgICAgICAgICAgICBpZiAobGFzdF90byA9PT0gJy0nKSB7XG4gICAgICAgICAgICAgICAgdG9fY2hhcnNfZXhwYW5kZWQucHVzaCgnLScpO1xuICAgICAgICAgICAgICAgIHRvX2NoYXJzX2V4cGFuZGVkLnB1c2goJy0nKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbHNlIGlmIChpID09IHRvX2xlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICB0b19jaGFyc19leHBhbmRlZC5wdXNoKCctJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaW5fcmFuZ2UgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpbl9yYW5nZSkge1xuICAgICAgICAgICAgICBzdGFydCA9IGxhc3RfdG8uY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgICAgZW5kID0gY2guY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgICAgaWYgKHN0YXJ0ID4gZW5kKSB7XG4gICAgICAgICAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsIFwiaW52YWxpZCByYW5nZSBcXFwiI3tgU3RyaW5nLmZyb21DaGFyQ29kZShzdGFydClgfS0je2BTdHJpbmcuZnJvbUNoYXJDb2RlKGVuZClgfVxcXCIgaW4gc3RyaW5nIHRyYW5zbGl0ZXJhdGlvblwifVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGZvciAoYyA9IHN0YXJ0ICsgMTsgYyA8IGVuZDsgYysrKSB7XG4gICAgICAgICAgICAgICAgdG9fY2hhcnNfZXhwYW5kZWQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGMpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB0b19jaGFyc19leHBhbmRlZC5wdXNoKGNoKTtcbiAgICAgICAgICAgICAgaW5fcmFuZ2UgPSBudWxsO1xuICAgICAgICAgICAgICBsYXN0X3RvID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICB0b19jaGFyc19leHBhbmRlZC5wdXNoKGNoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0b19jaGFycyA9IHRvX2NoYXJzX2V4cGFuZGVkO1xuICAgICAgICAgIHRvX2xlbmd0aCA9IHRvX2NoYXJzLmxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsZW5ndGhfZGlmZiA9IGZyb21fbGVuZ3RoIC0gdG9fbGVuZ3RoO1xuICAgICAgICBpZiAobGVuZ3RoX2RpZmYgPiAwKSB7XG4gICAgICAgICAgdmFyIHBhZF9jaGFyID0gKHRvX2xlbmd0aCA+IDAgPyB0b19jaGFyc1t0b19sZW5ndGggLSAxXSA6ICcnKTtcbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoX2RpZmY7IGkrKykge1xuICAgICAgICAgICAgdG9fY2hhcnMucHVzaChwYWRfY2hhcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGZyb21fbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBzdWJzW2Zyb21fY2hhcnNbaV1dID0gdG9fY2hhcnNbaV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIG5ld19zdHIgPSAnJ1xuICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gc2VsZi5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBjaCA9IHNlbGYuY2hhckF0KGkpO1xuICAgICAgICB2YXIgc3ViID0gc3Vic1tjaF07XG4gICAgICAgIGlmIChpbnZlcnNlKSB7XG4gICAgICAgICAgbmV3X3N0ciArPSAoc3ViID09IG51bGwgPyBnbG9iYWxfc3ViIDogY2gpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIG5ld19zdHIgKz0gKHN1YiAhPSBudWxsID8gc3ViIDogY2gpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3X3N0cjtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiB0cl9zKGZyb20sIHRvKVxuICAgICV4e1xuICAgICAgZnJvbSA9ICRjb2VyY2VfdG8oZnJvbSwgI3s6OlN0cmluZ30sICd0b19zdHInKS4kdG9fcygpO1xuICAgICAgdG8gPSAkY29lcmNlX3RvKHRvLCAjezo6U3RyaW5nfSwgJ3RvX3N0cicpLiR0b19zKCk7XG5cbiAgICAgIGlmIChmcm9tLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgICAgfVxuXG4gICAgICB2YXIgaSwgaW5fcmFuZ2UsIGMsIGNoLCBzdGFydCwgZW5kLCBsZW5ndGg7XG4gICAgICB2YXIgc3VicyA9IHt9O1xuICAgICAgdmFyIGZyb21fY2hhcnMgPSBmcm9tLnNwbGl0KCcnKTtcbiAgICAgIHZhciBmcm9tX2xlbmd0aCA9IGZyb21fY2hhcnMubGVuZ3RoO1xuICAgICAgdmFyIHRvX2NoYXJzID0gdG8uc3BsaXQoJycpO1xuICAgICAgdmFyIHRvX2xlbmd0aCA9IHRvX2NoYXJzLmxlbmd0aDtcblxuICAgICAgdmFyIGludmVyc2UgPSBmYWxzZTtcbiAgICAgIHZhciBnbG9iYWxfc3ViID0gbnVsbDtcbiAgICAgIGlmIChmcm9tX2NoYXJzWzBdID09PSAnXicgJiYgZnJvbV9jaGFycy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGludmVyc2UgPSB0cnVlO1xuICAgICAgICBmcm9tX2NoYXJzLnNoaWZ0KCk7XG4gICAgICAgIGdsb2JhbF9zdWIgPSB0b19jaGFyc1t0b19sZW5ndGggLSAxXVxuICAgICAgICBmcm9tX2xlbmd0aCAtPSAxO1xuICAgICAgfVxuXG4gICAgICB2YXIgZnJvbV9jaGFyc19leHBhbmRlZCA9IFtdO1xuICAgICAgdmFyIGxhc3RfZnJvbSA9IG51bGw7XG4gICAgICBpbl9yYW5nZSA9IGZhbHNlO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGZyb21fbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2ggPSBmcm9tX2NoYXJzW2ldO1xuICAgICAgICBpZiAobGFzdF9mcm9tID09IG51bGwpIHtcbiAgICAgICAgICBsYXN0X2Zyb20gPSBjaDtcbiAgICAgICAgICBmcm9tX2NoYXJzX2V4cGFuZGVkLnB1c2goY2gpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNoID09PSAnLScpIHtcbiAgICAgICAgICBpZiAobGFzdF9mcm9tID09PSAnLScpIHtcbiAgICAgICAgICAgIGZyb21fY2hhcnNfZXhwYW5kZWQucHVzaCgnLScpO1xuICAgICAgICAgICAgZnJvbV9jaGFyc19leHBhbmRlZC5wdXNoKCctJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGkgPT0gZnJvbV9sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICBmcm9tX2NoYXJzX2V4cGFuZGVkLnB1c2goJy0nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpbl9yYW5nZSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGluX3JhbmdlKSB7XG4gICAgICAgICAgc3RhcnQgPSBsYXN0X2Zyb20uY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICBlbmQgPSBjaC5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgIGlmIChzdGFydCA+IGVuZCkge1xuICAgICAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsIFwiaW52YWxpZCByYW5nZSBcXFwiI3tgU3RyaW5nLmZyb21DaGFyQ29kZShzdGFydClgfS0je2BTdHJpbmcuZnJvbUNoYXJDb2RlKGVuZClgfVxcXCIgaW4gc3RyaW5nIHRyYW5zbGl0ZXJhdGlvblwifVxuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKGMgPSBzdGFydCArIDE7IGMgPCBlbmQ7IGMrKykge1xuICAgICAgICAgICAgZnJvbV9jaGFyc19leHBhbmRlZC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoYykpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmcm9tX2NoYXJzX2V4cGFuZGVkLnB1c2goY2gpO1xuICAgICAgICAgIGluX3JhbmdlID0gbnVsbDtcbiAgICAgICAgICBsYXN0X2Zyb20gPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGZyb21fY2hhcnNfZXhwYW5kZWQucHVzaChjaCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnJvbV9jaGFycyA9IGZyb21fY2hhcnNfZXhwYW5kZWQ7XG4gICAgICBmcm9tX2xlbmd0aCA9IGZyb21fY2hhcnMubGVuZ3RoO1xuXG4gICAgICBpZiAoaW52ZXJzZSkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZnJvbV9sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHN1YnNbZnJvbV9jaGFyc1tpXV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgaWYgKHRvX2xlbmd0aCA+IDApIHtcbiAgICAgICAgICB2YXIgdG9fY2hhcnNfZXhwYW5kZWQgPSBbXTtcbiAgICAgICAgICB2YXIgbGFzdF90byA9IG51bGw7XG4gICAgICAgICAgaW5fcmFuZ2UgPSBmYWxzZTtcbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdG9fbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNoID0gdG9fY2hhcnNbaV07XG4gICAgICAgICAgICBpZiAobGFzdF9mcm9tID09IG51bGwpIHtcbiAgICAgICAgICAgICAgbGFzdF9mcm9tID0gY2g7XG4gICAgICAgICAgICAgIHRvX2NoYXJzX2V4cGFuZGVkLnB1c2goY2gpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2ggPT09ICctJykge1xuICAgICAgICAgICAgICBpZiAobGFzdF90byA9PT0gJy0nKSB7XG4gICAgICAgICAgICAgICAgdG9fY2hhcnNfZXhwYW5kZWQucHVzaCgnLScpO1xuICAgICAgICAgICAgICAgIHRvX2NoYXJzX2V4cGFuZGVkLnB1c2goJy0nKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbHNlIGlmIChpID09IHRvX2xlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICB0b19jaGFyc19leHBhbmRlZC5wdXNoKCctJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaW5fcmFuZ2UgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpbl9yYW5nZSkge1xuICAgICAgICAgICAgICBzdGFydCA9IGxhc3RfZnJvbS5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgICBlbmQgPSBjaC5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgICBpZiAoc3RhcnQgPiBlbmQpIHtcbiAgICAgICAgICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgXCJpbnZhbGlkIHJhbmdlIFxcXCIje2BTdHJpbmcuZnJvbUNoYXJDb2RlKHN0YXJ0KWB9LSN7YFN0cmluZy5mcm9tQ2hhckNvZGUoZW5kKWB9XFxcIiBpbiBzdHJpbmcgdHJhbnNsaXRlcmF0aW9uXCJ9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZm9yIChjID0gc3RhcnQgKyAxOyBjIDwgZW5kOyBjKyspIHtcbiAgICAgICAgICAgICAgICB0b19jaGFyc19leHBhbmRlZC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoYykpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRvX2NoYXJzX2V4cGFuZGVkLnB1c2goY2gpO1xuICAgICAgICAgICAgICBpbl9yYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgIGxhc3RfZnJvbSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgdG9fY2hhcnNfZXhwYW5kZWQucHVzaChjaCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdG9fY2hhcnMgPSB0b19jaGFyc19leHBhbmRlZDtcbiAgICAgICAgICB0b19sZW5ndGggPSB0b19jaGFycy5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbGVuZ3RoX2RpZmYgPSBmcm9tX2xlbmd0aCAtIHRvX2xlbmd0aDtcbiAgICAgICAgaWYgKGxlbmd0aF9kaWZmID4gMCkge1xuICAgICAgICAgIHZhciBwYWRfY2hhciA9ICh0b19sZW5ndGggPiAwID8gdG9fY2hhcnNbdG9fbGVuZ3RoIC0gMV0gOiAnJyk7XG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aF9kaWZmOyBpKyspIHtcbiAgICAgICAgICAgIHRvX2NoYXJzLnB1c2gocGFkX2NoYXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBmcm9tX2xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgc3Vic1tmcm9tX2NoYXJzW2ldXSA9IHRvX2NoYXJzW2ldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgbmV3X3N0ciA9ICcnXG4gICAgICB2YXIgbGFzdF9zdWJzdGl0dXRlID0gbnVsbFxuICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gc2VsZi5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBjaCA9IHNlbGYuY2hhckF0KGkpO1xuICAgICAgICB2YXIgc3ViID0gc3Vic1tjaF1cbiAgICAgICAgaWYgKGludmVyc2UpIHtcbiAgICAgICAgICBpZiAoc3ViID09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChsYXN0X3N1YnN0aXR1dGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICBuZXdfc3RyICs9IGdsb2JhbF9zdWI7XG4gICAgICAgICAgICAgIGxhc3Rfc3Vic3RpdHV0ZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbmV3X3N0ciArPSBjaDtcbiAgICAgICAgICAgIGxhc3Rfc3Vic3RpdHV0ZSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGlmIChzdWIgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGxhc3Rfc3Vic3RpdHV0ZSA9PSBudWxsIHx8IGxhc3Rfc3Vic3RpdHV0ZSAhPT0gc3ViKSB7XG4gICAgICAgICAgICAgIG5ld19zdHIgKz0gc3ViO1xuICAgICAgICAgICAgICBsYXN0X3N1YnN0aXR1dGUgPSBzdWI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbmV3X3N0ciArPSBjaDtcbiAgICAgICAgICAgIGxhc3Rfc3Vic3RpdHV0ZSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3X3N0cjtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiB1cGNhc2VcbiAgICBgc2VsZi50b1VwcGVyQ2FzZSgpYFxuICBlbmRcblxuICBkZWYgdXB0byhzdG9wLCBleGNsID0gZmFsc2UsICZibG9jaylcbiAgICByZXR1cm4gZW51bV9mb3IgOnVwdG8sIHN0b3AsIGV4Y2wgdW5sZXNzIGJsb2NrX2dpdmVuP1xuICAgICV4e1xuICAgICAgdmFyIGEsIGIsIHMgPSBzZWxmLnRvU3RyaW5nKCk7XG5cbiAgICAgIHN0b3AgPSAkY29lcmNlX3RvKHN0b3AsICN7OjpTdHJpbmd9LCAndG9fc3RyJyk7XG5cbiAgICAgIGlmIChzLmxlbmd0aCA9PT0gMSAmJiBzdG9wLmxlbmd0aCA9PT0gMSkge1xuXG4gICAgICAgIGEgPSBzLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgIGIgPSBzdG9wLmNoYXJDb2RlQXQoMCk7XG5cbiAgICAgICAgd2hpbGUgKGEgPD0gYikge1xuICAgICAgICAgIGlmIChleGNsICYmIGEgPT09IGIpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJsb2NrKFN0cmluZy5mcm9tQ2hhckNvZGUoYSkpO1xuXG4gICAgICAgICAgYSArPSAxO1xuICAgICAgICB9XG5cbiAgICAgIH0gZWxzZSBpZiAocGFyc2VJbnQocywgMTApLnRvU3RyaW5nKCkgPT09IHMgJiYgcGFyc2VJbnQoc3RvcCwgMTApLnRvU3RyaW5nKCkgPT09IHN0b3ApIHtcblxuICAgICAgICBhID0gcGFyc2VJbnQocywgMTApO1xuICAgICAgICBiID0gcGFyc2VJbnQoc3RvcCwgMTApO1xuXG4gICAgICAgIHdoaWxlIChhIDw9IGIpIHtcbiAgICAgICAgICBpZiAoZXhjbCAmJiBhID09PSBiKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBibG9jayhhLnRvU3RyaW5nKCkpO1xuXG4gICAgICAgICAgYSArPSAxO1xuICAgICAgICB9XG5cbiAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgd2hpbGUgKHMubGVuZ3RoIDw9IHN0b3AubGVuZ3RoICYmIHMgPD0gc3RvcCkge1xuICAgICAgICAgIGlmIChleGNsICYmIHMgPT09IHN0b3ApIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJsb2NrKHMpO1xuXG4gICAgICAgICAgcyA9ICN7YHNgLnN1Y2N9O1xuICAgICAgICB9XG5cbiAgICAgIH1cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cbiAgZW5kXG5cbiAgJXh7XG4gICAgZnVuY3Rpb24gY2hhcl9jbGFzc19mcm9tX2NoYXJfc2V0cyhzZXRzKSB7XG4gICAgICBmdW5jdGlvbiBleHBsb2RlX3NlcXVlbmNlc19pbl9jaGFyYWN0ZXJfc2V0KHNldCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gJycsXG4gICAgICAgICAgICBpLCBsZW4gPSBzZXQubGVuZ3RoLFxuICAgICAgICAgICAgY3Vycl9jaGFyLFxuICAgICAgICAgICAgc2tpcF9uZXh0X2Rhc2gsXG4gICAgICAgICAgICBjaGFyX2NvZGVfZnJvbSxcbiAgICAgICAgICAgIGNoYXJfY29kZV91cHRvLFxuICAgICAgICAgICAgY2hhcl9jb2RlO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBjdXJyX2NoYXIgPSBzZXQuY2hhckF0KGkpO1xuICAgICAgICAgIGlmIChjdXJyX2NoYXIgPT09ICctJyAmJiBpID4gMCAmJiBpIDwgKGxlbiAtIDEpICYmICFza2lwX25leHRfZGFzaCkge1xuICAgICAgICAgICAgY2hhcl9jb2RlX2Zyb20gPSBzZXQuY2hhckNvZGVBdChpIC0gMSk7XG4gICAgICAgICAgICBjaGFyX2NvZGVfdXB0byA9IHNldC5jaGFyQ29kZUF0KGkgKyAxKTtcbiAgICAgICAgICAgIGlmIChjaGFyX2NvZGVfZnJvbSA+IGNoYXJfY29kZV91cHRvKSB7XG4gICAgICAgICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCBcImludmFsaWQgcmFuZ2UgXFxcIiN7YGNoYXJfY29kZV9mcm9tYH0tI3tgY2hhcl9jb2RlX3VwdG9gfVxcXCIgaW4gc3RyaW5nIHRyYW5zbGl0ZXJhdGlvblwifVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjaGFyX2NvZGUgPSBjaGFyX2NvZGVfZnJvbSArIDE7IGNoYXJfY29kZSA8IGNoYXJfY29kZV91cHRvICsgMTsgY2hhcl9jb2RlKyspIHtcbiAgICAgICAgICAgICAgcmVzdWx0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhcl9jb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNraXBfbmV4dF9kYXNoID0gdHJ1ZTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2tpcF9uZXh0X2Rhc2ggPSAoY3Vycl9jaGFyID09PSAnXFxcXCcpO1xuICAgICAgICAgICAgcmVzdWx0ICs9IGN1cnJfY2hhcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gaW50ZXJzZWN0aW9uKHNldEEsIHNldEIpIHtcbiAgICAgICAgaWYgKHNldEEubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIHNldEI7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3VsdCA9ICcnLFxuICAgICAgICAgICAgaSwgbGVuID0gc2V0QS5sZW5ndGgsXG4gICAgICAgICAgICBjaHI7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIGNociA9IHNldEEuY2hhckF0KGkpO1xuICAgICAgICAgIGlmIChzZXRCLmluZGV4T2YoY2hyKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBjaHI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIHZhciBpLCBsZW4sIHNldCwgbmVnLCBjaHIsIHRtcCxcbiAgICAgICAgICBwb3NfaW50ZXJzZWN0aW9uID0gJycsXG4gICAgICAgICAgbmVnX2ludGVyc2VjdGlvbiA9ICcnO1xuXG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSBzZXRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHNldCA9ICRjb2VyY2VfdG8oc2V0c1tpXSwgI3s6OlN0cmluZ30sICd0b19zdHInKTtcbiAgICAgICAgbmVnID0gKHNldC5jaGFyQXQoMCkgPT09ICdeJyAmJiBzZXQubGVuZ3RoID4gMSk7XG4gICAgICAgIHNldCA9IGV4cGxvZGVfc2VxdWVuY2VzX2luX2NoYXJhY3Rlcl9zZXQobmVnID8gc2V0LnNsaWNlKDEpIDogc2V0KTtcbiAgICAgICAgaWYgKG5lZykge1xuICAgICAgICAgIG5lZ19pbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3Rpb24obmVnX2ludGVyc2VjdGlvbiwgc2V0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwb3NfaW50ZXJzZWN0aW9uID0gaW50ZXJzZWN0aW9uKHBvc19pbnRlcnNlY3Rpb24sIHNldCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHBvc19pbnRlcnNlY3Rpb24ubGVuZ3RoID4gMCAmJiBuZWdfaW50ZXJzZWN0aW9uLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdG1wID0gJyc7XG4gICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHBvc19pbnRlcnNlY3Rpb24ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBjaHIgPSBwb3NfaW50ZXJzZWN0aW9uLmNoYXJBdChpKTtcbiAgICAgICAgICBpZiAobmVnX2ludGVyc2VjdGlvbi5pbmRleE9mKGNocikgPT09IC0xKSB7XG4gICAgICAgICAgICB0bXAgKz0gY2hyO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwb3NfaW50ZXJzZWN0aW9uID0gdG1wO1xuICAgICAgICBuZWdfaW50ZXJzZWN0aW9uID0gJyc7XG4gICAgICB9XG5cbiAgICAgIGlmIChwb3NfaW50ZXJzZWN0aW9uLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuICdbJyArICN7OjpSZWdleHAuZXNjYXBlKGBwb3NfaW50ZXJzZWN0aW9uYCl9ICsgJ10nO1xuICAgICAgfVxuXG4gICAgICBpZiAobmVnX2ludGVyc2VjdGlvbi5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiAnW14nICsgI3s6OlJlZ2V4cC5lc2NhcGUoYG5lZ19pbnRlcnNlY3Rpb25gKX0gKyAnXSc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGRlZiBpbnN0YW5jZV92YXJpYWJsZXNcbiAgICBbXVxuICBlbmRcblxuICBkZWYgc2VsZi5fbG9hZCgqYXJncylcbiAgICBuZXcoKmFyZ3MpXG4gIGVuZFxuXG4gIGRlZiB1bmljb2RlX25vcm1hbGl6ZShmb3JtID0gOm5mYylcbiAgICA6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsIFwiSW52YWxpZCBub3JtYWxpemF0aW9uIGZvcm0gI3tmb3JtfVwiIHVubGVzcyAlaVtuZmMgbmZkIG5ma2MgbmZrZF0uaW5jbHVkZT8oZm9ybSlcbiAgICBgc2VsZi5ub3JtYWxpemUoI3tmb3JtLnVwY2FzZX0pYFxuICBlbmRcblxuICBkZWYgdW5pY29kZV9ub3JtYWxpemVkPyhmb3JtID0gOm5mYylcbiAgICB1bmljb2RlX25vcm1hbGl6ZShmb3JtKSA9PSBzZWxmXG4gIGVuZFxuXG4gIGRlZiB1bnBhY2soZm9ybWF0KVxuICAgIDo6S2VybmVsLnJhaXNlIFwiVG8gdXNlIFN0cmluZyN1bnBhY2ssIHlvdSBtdXN0IGZpcnN0IHJlcXVpcmUgJ2NvcmVsaWIvc3RyaW5nL3VucGFjaycuXCJcbiAgZW5kXG5cbiAgZGVmIHVucGFjazEoZm9ybWF0KVxuICAgIDo6S2VybmVsLnJhaXNlIFwiVG8gdXNlIFN0cmluZyN1bnBhY2sxLCB5b3UgbXVzdCBmaXJzdCByZXF1aXJlICdjb3JlbGliL3N0cmluZy91bnBhY2snLlwiXG4gIGVuZFxuXG4gIGRlZiBmcmVlemVcbiAgICAleHtcbiAgICAgIGlmICh0eXBlb2Ygc2VsZiA9PT0gJ3N0cmluZycpIHsgcmV0dXJuIHNlbGY7IH1cbiAgICAgICRwcm9wKHNlbGYsIFwiJCRmcm96ZW5cIiwgdHJ1ZSk7XG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiAtQFxuICAgICV4e1xuICAgICAgaWYgKHR5cGVvZiBzZWxmID09PSAnc3RyaW5nJykgcmV0dXJuIHNlbGY7XG4gICAgICBpZiAoc2VsZi4kJGZyb3plbikgcmV0dXJuIHNlbGY7XG4gICAgICBpZiAoc2VsZi5lbmNvZGluZy5uYW1lID09ICdVVEYtOCcgJiYgc2VsZi5pbnRlcm5hbF9lbmNvZGluZy5uYW1lID09ICdVVEYtOCcpIHJldHVybiBzZWxmLnRvU3RyaW5nKCk7XG4gICAgICByZXR1cm4gc2VsZi4kZHVwKCkuJGZyZWV6ZSgpO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGZyb3plbj9cbiAgICBgdHlwZW9mIHNlbGYgPT09ICdzdHJpbmcnIHx8IHNlbGYuJCRmcm96ZW4gPT09IHRydWVgXG4gIGVuZFxuXG4gIGFsaWFzICtAIGR1cFxuICBhbGlhcyA9PT0gPT1cbiAgYWxpYXMgYnl0ZXNsaWNlIFtdXG4gIGFsaWFzIGVxbD8gPT1cbiAgYWxpYXMgZXF1YWw/ID09PVxuICBhbGlhcyBvYmplY3RfaWQgX19pZF9fXG4gIGFsaWFzIHNsaWNlIFtdXG4gIGFsaWFzIHN1Y2MgbmV4dFxuICBhbGlhcyB0b19zdHIgdG9fc1xuICBhbGlhcyB0b19zeW0gaW50ZXJuXG5cbiAgOjpPcGFsLnByaXN0aW5lIHNlbGYsIDppbml0aWFsaXplXG5lbmRcblxuU3ltYm9sID0gU3RyaW5nXG4iXSwibmFtZXMiOlsiPHRvcCAocmVxdWlyZWQpPiIsInNlbGYiLCJyZXF1aXJlIiwiPGNsYXNzOlN0cmluZz4iLCJpbmNsdWRlIiwiQ29tcGFyYWJsZSIsIl9faWRfXyIsInRyeV9jb252ZXJ0Iiwid2hhdCIsIk9wYWwiLCJjb2VyY2VfdG8/IiwiU3RyaW5nIiwibmV3IiwiaW5pdGlhbGl6ZSIsImFyZ3MiLCIlIiwiZGF0YSIsIkFycmF5IiwiZm9ybWF0IiwiKiIsImNvdW50IiwiSW50ZWdlciIsIktlcm5lbCIsInJhaXNlIiwiQXJndW1lbnRFcnJvciIsIlJhbmdlRXJyb3IiLCIrIiwib3RoZXIiLCI8PT4iLCJyZXNwb25kX3RvPyIsInRvX3N0ciIsInRvX3MiLCI9PSIsIj1+IiwiVHlwZUVycm9yIiwiW10iLCJpbmRleCIsImxlbmd0aCIsIiR+IiwiTWF0Y2hEYXRhIiwiYiIsImZvcmNlX2VuY29kaW5nIiwiY2FwaXRhbGl6ZSIsImNhc2VjbXAiLCJjYXNlY21wPyIsImNlbnRlciIsIndpZHRoIiwicGFkc3RyIiwiZW1wdHk/IiwibGp1c3QiLCIvIiwiMiIsImNlaWwiLCJyanVzdCIsImZsb29yIiwiY2hvbXAiLCJzZXBhcmF0b3IiLCIkLyIsImNvZXJjZV90byEiLCJjaG9wIiwiY2hyIiwiY2xvbmUiLCIka3dhcmdzIiwiZnJlZXplIiwibmlsPyIsImNsYXNzIiwiY29weSIsImNvcHlfc2luZ2xldG9uX21ldGhvZHMiLCJpbml0aWFsaXplX2Nsb25lIiwiZHVwIiwiaW5pdGlhbGl6ZV9kdXAiLCJkZWxldGUiLCJkZWxldGVfcHJlZml4IiwicHJlZml4IiwiZGVsZXRlX3N1ZmZpeCIsInN1ZmZpeCIsImRvd25jYXNlIiwiZWFjaF9saW5lIiwiYmxvY2tfZ2l2ZW4/IiwiZW51bV9mb3IiLCJlbmRfd2l0aD8iLCJnc3ViIiwicGF0dGVybiIsInJlcGxhY2VtZW50IiwiaGFzaCIsImhleCIsInRvX2kiLCIxNiIsImluY2x1ZGU/Iiwic2VhcmNoIiwib2Zmc2V0IiwiaW5zcGVjdCIsImludGVybiIsImxpbmVzIiwiZSIsImJsb2NrIiwidG9fcHJvYyIsInRvX2EiLCJsc3RyaXAiLCJhc2NpaV9vbmx5PyIsIm1hdGNoIiwicG9zIiwiUmVnZXhwIiwibWF0Y2g/IiwibmV4dCIsIm9jdCIsIm9yZCIsInBhcnRpdGlvbiIsInNlcCIsInJldmVyc2UiLCJyaW5kZXgiLCJycGFydGl0aW9uIiwicnN0cmlwIiwic2NhbiIsIm5vX21hdGNoZGF0YSIsImNhcHR1cmVzIiwic2luZ2xldG9uX2NsYXNzIiwic3BsaXQiLCJsaW1pdCIsIiRyZXRfb3JfMSIsIiQ7Iiwic3F1ZWV6ZSIsInN0YXJ0X3dpdGg/Iiwic3RyaXAiLCJzdWIiLCJzdW0iLCJuIiwic3dhcGNhc2UiLCJ0b19mIiwiYmFzZSIsIjEwIiwibWV0aG9kX25hbWUiLCJwcm9jIiwiYmxvY2sgaW4gdG9fcHJvYyIsImJsb2NrICgyIGxldmVscykgaW4gdG9fcHJvYyIsInRyIiwiZnJvbSIsInRvIiwidHJfcyIsInVwY2FzZSIsInVwdG8iLCJzdG9wIiwiZXhjbCIsInN1Y2MiLCJlc2NhcGUiLCJpbnN0YW5jZV92YXJpYWJsZXMiLCJfbG9hZCIsInVuaWNvZGVfbm9ybWFsaXplIiwiZm9ybSIsInVuaWNvZGVfbm9ybWFsaXplZD8iLCJ1bnBhY2siLCJ1bnBhY2sxIiwiLUAiLCJmcm96ZW4/IiwicHJpc3RpbmUiXSwibWFwcGluZ3MiOiJBQUFBQSxpQ0FBQUEsZ0JBQU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ztBQUVBQTtBQUNBQTtBQUNBQTs7QUFFQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7O0FBRUFBO0FBQ0FBO0FBQ0FBO0lBeENFQSxDQUFBQSxHQUFBQTs7QUEyQ0FDLElBQUFBLG1CQUFBQSxlQUFBQTtBQUFBQSxNQUFBQTs7O0FBRUZBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0lBUkVBLENBQUFBLEdBQUFBOztBQVdBQyxJQUFBQSx5QkFBQUEscUJBQWNDLEdBQWREO0FBQUFBLE1BQUFBOzs7QUFFRkE7O0FBRUFBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBLFVBQVlwRSxnQkFBVzNCLEtBQUFBLENBQU0rRixHQUFqQixFQUF3QkEsQ0FBYi9GLENBQWdCK0Y7QUFDdkNBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBLDhCQUFnQ2hHLGFBQVNnRztBQUN6Q0E7QUFDQUE7O0FBRUFBO0FBQ0FBO0FBQ0FBOztBQUVBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtJQTNCRUEsQ0FBQUEsR0FBQUE7O0FBOEJBRSxJQUFBQSx1QkFBQUEsbUJBQUFBO0FBQUFBLE1BQUFBOztNQUNFQSxPQUFDQSxpQ0FBREE7SUFERkEsQ0FBQUEsR0FBQUE7O0FBSUFDLElBQUFBLHNCQUFBQSxrQkFBV3JCLE1BQUQsRUFBU0MsTUFBbkJvQjtBQUFBQSxNQUFBQTs7Ozs7QUFFRkE7O0FBRUFBO0FBQ0FBO0FBQ0FBO0FBQ0FBLG9DQUFzQ3pGLGNBQVV5RjtBQUNoREE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7O0FBRUFBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO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UE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUEsZ0JBQWtCakgsT0FBUUMsT0FBQUEsQ0FBT0Msb0JBQWYsRUFBaUMrRyxrQkFBRCxHQUFBLENBQW9CQSwwQkFBcEIsQ0FBQSxHQUFnREEsR0FBaEQsR0FBQSxDQUFvREEsd0JBQXBELENBQUEsR0FBOEVBLDhCQUF0R2hIO0FBQzFCZ0g7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7O0FBRUFBO0FBQ0FBO0FBQ0FBOztBQUVBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTs7QUFFQUE7QUFDQUE7QUFDQUE7QUFDQUE7O0FBRUFBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0lBOUlFQSxDQUFBQSxHQUFBQTs7QUFpSkFHLElBQUFBLG9CQUFBQSxnQkFBU0YsSUFBRCxFQUFPQyxFQUFmQztBQUFBQSxNQUFBQTs7O0FBRUZBLDhCQUFnQy9ILGFBQVMrSDtBQUN6Q0EsMEJBQTRCL0gsYUFBUytIOztBQUVyQ0E7QUFDQUE7QUFDQUE7O0FBRUFBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBOztBQUVBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTs7QUFFQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUEsWUFBY3BILE9BQVFDLE9BQUFBLENBQU9DLG9CQUFmLEVBQWlDa0gsa0JBQUQsR0FBQSxDQUFvQkEsMEJBQXBCLENBQUEsR0FBZ0RBLEdBQWhELEdBQUEsQ0FBb0RBLHdCQUFwRCxDQUFBLEdBQThFQSw4QkFBdEduSDtBQUN0Qm1IO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBOztBQUVBQTtBQUNBQTs7QUFFQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUEsZ0JBQWtCcEgsT0FBUUMsT0FBQUEsQ0FBT0Msb0JBQWYsRUFBaUNrSCxrQkFBRCxHQUFBLENBQW9CQSwwQkFBcEIsQ0FBQSxHQUFnREEsR0FBaEQsR0FBQSxDQUFvREEsd0JBQXBELENBQUEsR0FBOEVBLDhCQUF0R25IO0FBQzFCbUg7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7O0FBRUFBO0FBQ0FBO0FBQ0FBOztBQUVBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTs7QUFFQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7SUFoS0VBLENBQUFBLEdBQUFBOztBQW1LQUMsSUFBQUEsc0JBQUFBLGtCQUFBQTtBQUFBQSxNQUFBQTs7TUFDRUEsT0FBQ0Esa0JBQURBO0lBREZBLENBQUFBLEdBQUFBOztBQUlBQyxJQUFBQSxvQkFBQUEsZ0JBQVNDLElBQUQsRUFBT0MsSUFBZkY7QUFBQUEsTUFBQUE7O01BQUFBOzs7TUFBZSx5QkFBTztNQUNwQixLQUF5QzlELGVBQXpDO1FBQUEsT0FBTzdFLElBQUE4RSxVQUFBQSxDQUFTLE1BQVQsRUFBZ0I4RCxJQUFoQixFQUFzQkMsSUFBdEIvRDtNQUFQOztBQUVKNkQ7O0FBRUFBLDhCQUFnQ2pJLGFBQVNpSTs7QUFFekNBOztBQUVBQTtBQUNBQTs7QUFFQUE7QUFDQUE7QUFDQUE7QUFDQUE7O0FBRUFBOztBQUVBQTtBQUNBQTs7QUFFQUE7O0FBRUFBO0FBQ0FBOztBQUVBQTtBQUNBQTtBQUNBQTtBQUNBQTs7QUFFQUE7O0FBRUFBO0FBQ0FBOztBQUVBQTs7QUFFQUE7QUFDQUE7QUFDQUE7QUFDQUE7O0FBRUFBOztBQUVBQSxjQUFnQkEsQ0FBQ0EsQ0FBREEsQ0FBR0csTUFBQUEsQ0FBQUEsQ0FBTUg7QUFDekJBOztBQUVBQTtBQUNBQTtBQUNBQTtJQW5ERUEsQ0FBQUEsSUFBQUE7O0FBdURGekk7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUEsY0FBZ0JtQixPQUFRQyxPQUFBQSxDQUFPQyxvQkFBZixFQUFpQ3JCLGtCQUFELEdBQUEsQ0FBb0JBLGNBQXBCLENBQUEsR0FBb0NBLEdBQXBDLEdBQUEsQ0FBd0NBLGNBQXhDLENBQUEsR0FBd0RBLDhCQUFoRm9CO0FBQ3hCcEI7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7O0FBRUFBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBOztBQUVBQTtBQUNBQTtBQUNBQTs7QUFFQUE7QUFDQUEsa0NBQW9DUSxhQUFTUjtBQUM3Q0E7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7O0FBRUFBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBOztBQUVBQTtBQUNBQSxxQkFBdUJtRyxhQUFRMEMsUUFBQUEsQ0FBUzdJLGdCQUFUNkksQ0FBNEI3STtBQUMzREE7O0FBRUFBO0FBQ0FBLHNCQUF3Qm1HLGFBQVEwQyxRQUFBQSxDQUFTN0ksZ0JBQVQ2SSxDQUE0QjdJO0FBQzVEQTs7QUFFQUE7QUFDQUE7QUFDQUE7O0FBRUU4SSxJQUFBQSxrQ0FBQUEsOEJBQUFBO0FBQUFBO01BQ0VBLE9BQUE7SUFERkEsQ0FBQUEsR0FBQUE7SUFJQUMsTUFBSWpKLElBQUppSixZQUFBQSxpQkF4eURGLEVBd3lERUE7QUFBQUEsTUFBQUE7OztNQXh5REY7TUF3eURpQjtNQUNiQSxPQUFBdEksTUFBQVgsSUFBQVcsT0FBQUEsRUFBSSxNQUFDRSxJQUFELENBQUpGO0lBREZzSSxDQUFBQSxJQUFBQTs7QUFJQUMsSUFBQUEsaUNBQUFBLDZCQUFzQkMsSUFBdEJEO0FBQUFBLE1BQUFBOzs7TUFBc0IseUJBQU87TUFDM0IsS0FBQSxRQUE0RSxDQUFHLEtBQUgsRUFBTyxLQUFQLEVBQVcsTUFBWCxFQUFnQixNQUFoQixDQUFxQjNELGFBQUFBLENBQVU0RCxJQUFWNUQsQ0FBakcsQ0FBQTtRQUFBbEUsT0FBUUMsT0FBQUEsQ0FBT0Msb0JBQWYsRUFBaUMySCw2QkFBRCxHQUFBLENBQThCQyxJQUE5QixDQUF4QjdIO01BQVI7TUFDQTRILE9BQUNBLGVBQWlCQyxJQUFJVCxRQUFBQSxDQUFBQSxDQUFRUTtJQUZoQ0EsQ0FBQUEsSUFBQUE7O0FBS0FFLElBQUFBLG1DQUFBQSw0Q0FBd0JELElBQXhCQztBQUFBQSxNQUFBQTs7O01BQXdCLHlCQUFPO01BQzdCQSxPQUFBcEosSUFBQWtKLG1CQUFBQSxDQUFrQkMsSUFBbEJELENBQXdCbkgsT0FBQUEsQ0FBRy9CLElBQUgrQjtJQUQxQnFILENBQUFBLElBQUFBOztBQUlBQyxJQUFBQSxzQkFBQUEsa0JBQVdwSSxNQUFYb0k7QUFBQUE7TUFDRUEsT0FBQWhJLE9BQVFDLE9BQUFBLENBQU8rSCx1RUFBUC9IO0lBRFYrSCxDQUFBQSxHQUFBQTs7QUFJQUMsSUFBQUEsdUJBQUFBLG1CQUFZckksTUFBWnFJO0FBQUFBO01BQ0VBLE9BQUFqSSxPQUFRQyxPQUFBQSxDQUFPZ0ksd0VBQVBoSTtJQURWZ0ksQ0FBQUEsR0FBQUE7O0FBSUF4RixJQUFBQSxzQkFBQUEsa0JBQUFBO0FBQUFBLE1BQUFBOzs7QUFFRkE7QUFDQUE7QUFDQUE7QUFDQUE7SUFMRUEsQ0FBQUEsR0FBQUE7O0FBUUF5RixJQUFBQSxrQkFBQUEsNEJBQUFBO0FBQUFBLE1BQUFBOzs7QUFFRkE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7SUFORUEsQ0FBQUEsR0FBQUE7O0FBU0FDLElBQUFBLHVCQUFBQSxnQ0FBQUE7QUFBQUEsTUFBQUE7O01BQ0VBLE9BQUNBLGtEQUFEQTtJQURGQSxDQUFBQSxHQUFBQTtJQUlBLGFBQU0sSUFBTixFQUFTLEtBQVQ7SUFDQSxhQUFNLEtBQU4sRUFBVSxJQUFWO0lBQ0EsYUFBTSxXQUFOLEVBQWdCLElBQWhCO0lBQ0EsYUFBTSxNQUFOLEVBQVcsSUFBWDtJQUNBLGFBQU0sUUFBTixFQUFhLEtBQWI7SUFDQSxhQUFNLFdBQU4sRUFBZ0IsUUFBaEI7SUFDQSxhQUFNLE9BQU4sRUFBWSxJQUFaO0lBQ0EsYUFBTSxNQUFOLEVBQVcsTUFBWDtJQUNBLGFBQU0sUUFBTixFQUFhLE1BQWI7SUFDQSxhQUFNLFFBQU4sRUFBYSxRQUFiO0lBRUF0SixPQUFBTSxLQUFNaUosVUFBQUEsQ0FBVXpKLElBQWhCLEVBQXNCLFlBQWhCeUo7RUF4MURSdkosR0FBTSxJQUFOQSxFQUFrQkgsTUFBbEJHO0VBMjFEQUgsT0FBQSxrQ0FBU1csWUFBVDtBQWgyREFYOyJ9fSx7Im9mZnNldCI6eyJsaW5lIjoxNTY0MywiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvcmVsaWIvaGFzaC5yYiJdLCJzb3VyY2VzQ29udGVudCI6WyIjIGhlbHBlcnM6IHlpZWxkMSwgaGFzaCwgaGFzaF9pbml0LCBoYXNoX2dldCwgaGFzaF9wdXQsIGhhc2hfZGVsZXRlLCBkZW55X2Zyb3plbl9hY2Nlc3MsIGZyZWV6ZVxuXG5yZXF1aXJlICdjb3JlbGliL2VudW1lcmFibGUnXG5cbiMgLS0tXG4jIEludGVybmFsIHByb3BlcnRpZXM6XG4jXG4jIC0gJCRtYXAgICAgICAgICBbSlM6Ok9iamVjdDxTdHJpbmcgPT4gaGFzaC1idWNrZXQ+XSB0aGUgaGFzaCB0YWJsZSBmb3Igb3JkaW5hcnkga2V5c1xuIyAtICQkc21hcCAgICAgICAgW0pTOjpPYmplY3Q8U3RyaW5nID0+IGhhc2gtYnVja2V0Pl0gdGhlIGhhc2ggdGFibGUgZm9yIHN0cmluZyBrZXlzXG4jIC0gJCRrZXlzICAgICAgICBbQXJyYXk8aGFzaC1idWNrZXQ+XSB0aGUgbGlzdCBvZiBhbGwga2V5c1xuIyAtICQkcHJvYyAgICAgICAgW1Byb2MsbnVsbCxuaWxdIHRoZSBkZWZhdWx0IHByb2MgdXNlZCBmb3IgbWlzc2luZyBrZXlzXG4jIC0gaGFzaC1idWNrZXQgICBbSlM6Ok9iamVjdF0gYW4gZWxlbWVudCBvZiBhIGxpbmtlZCBsaXN0IHRoYXQgaG9sZHMgaGFzaCB2YWx1ZXMsIGtleXMgYXJlIGB7a2V5OixrZXlfaGFzaDosdmFsdWU6LG5leHQ6fWBcbmNsYXNzIDo6SGFzaFxuICBpbmNsdWRlIDo6RW51bWVyYWJsZVxuXG4gICMgTWFyayBhbGwgaGFzaCBpbnN0YW5jZXMgYXMgdmFsaWQgaGFzaGVzICh1c2VkIHRvIGNoZWNrIGtleXdvcmQgYXJncywgZXRjKVxuICBgc2VsZi4kJHByb3RvdHlwZS4kJGlzX2hhc2ggPSB0cnVlYFxuXG4gIGRlZiBzZWxmLltdKCphcmd2KVxuICAgICV4e1xuICAgICAgdmFyIGhhc2gsIGFyZ2MgPSBhcmd2Lmxlbmd0aCwgaTtcblxuICAgICAgaWYgKGFyZ2MgPT09IDEpIHtcbiAgICAgICAgaGFzaCA9ICN7OjpPcGFsLmNvZXJjZV90bz8oYXJndlswXSwgOjpIYXNoLCA6dG9faGFzaCl9O1xuICAgICAgICBpZiAoaGFzaCAhPT0gbmlsKSB7XG4gICAgICAgICAgcmV0dXJuICN7YWxsb2NhdGUubWVyZ2UhKGBoYXNoYCl9O1xuICAgICAgICB9XG5cbiAgICAgICAgYXJndiA9ICN7OjpPcGFsLmNvZXJjZV90bz8oYXJndlswXSwgOjpBcnJheSwgOnRvX2FyeSl9O1xuICAgICAgICBpZiAoYXJndiA9PT0gbmlsKSB7XG4gICAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsICdvZGQgbnVtYmVyIG9mIGFyZ3VtZW50cyBmb3IgSGFzaCd9XG4gICAgICAgIH1cblxuICAgICAgICBhcmdjID0gYXJndi5sZW5ndGg7XG4gICAgICAgIGhhc2ggPSAje2FsbG9jYXRlfTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYXJnYzsgaSsrKSB7XG4gICAgICAgICAgaWYgKCFhcmd2W2ldLiQkaXNfYXJyYXkpIGNvbnRpbnVlO1xuICAgICAgICAgIHN3aXRjaChhcmd2W2ldLmxlbmd0aCkge1xuICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGhhc2guJHN0b3JlKGFyZ3ZbaV1bMF0sIG5pbCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBoYXNoLiRzdG9yZShhcmd2W2ldWzBdLCBhcmd2W2ldWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgXCJpbnZhbGlkIG51bWJlciBvZiBlbGVtZW50cyAoI3tgYXJndltpXS5sZW5ndGhgfSBmb3IgMS4uMilcIn1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaGFzaDtcbiAgICAgIH1cblxuICAgICAgaWYgKGFyZ2MgJSAyICE9PSAwKSB7XG4gICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCAnb2RkIG51bWJlciBvZiBhcmd1bWVudHMgZm9yIEhhc2gnfVxuICAgICAgfVxuXG4gICAgICBoYXNoID0gI3thbGxvY2F0ZX07XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBhcmdjOyBpICs9IDIpIHtcbiAgICAgICAgaGFzaC4kc3RvcmUoYXJndltpXSwgYXJndltpICsgMV0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaGFzaDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBzZWxmLmFsbG9jYXRlXG4gICAgJXh7XG4gICAgICB2YXIgaGFzaCA9IG5ldyBzZWxmLiQkY29uc3RydWN0b3IoKTtcblxuICAgICAgJGhhc2hfaW5pdChoYXNoKTtcblxuICAgICAgaGFzaC4kJG5vbmUgPSBuaWw7XG4gICAgICBoYXNoLiQkcHJvYyA9IG5pbDtcblxuICAgICAgcmV0dXJuIGhhc2g7XG4gICAgfVxuICBlbmRcblxuICBkZWYgc2VsZi50cnlfY29udmVydChvYmopXG4gICAgOjpPcGFsLmNvZXJjZV90bz8ob2JqLCA6Okhhc2gsIDp0b19oYXNoKVxuICBlbmRcblxuICBkZWYgaW5pdGlhbGl6ZShkZWZhdWx0cyA9IHVuZGVmaW5lZCwgJmJsb2NrKVxuICAgICV4e1xuICAgICAgJGRlbnlfZnJvemVuX2FjY2VzcyhzZWxmKTtcblxuICAgICAgaWYgKGRlZmF1bHRzICE9PSB1bmRlZmluZWQgJiYgYmxvY2sgIT09IG5pbCkge1xuICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgJ3dyb25nIG51bWJlciBvZiBhcmd1bWVudHMgKDEgZm9yIDApJ31cbiAgICAgIH1cbiAgICAgIHNlbGYuJCRub25lID0gKGRlZmF1bHRzID09PSB1bmRlZmluZWQgPyBuaWwgOiBkZWZhdWx0cyk7XG4gICAgICBzZWxmLiQkcHJvYyA9IGJsb2NrO1xuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiA9PShvdGhlcilcbiAgICAleHtcbiAgICAgIGlmIChzZWxmID09PSBvdGhlcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFvdGhlci4kJGlzX2hhc2gpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2VsZi4kJGtleXMubGVuZ3RoICE9PSBvdGhlci4kJGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGtleXMgPSBzZWxmLiQka2V5cywgbGVuZ3RoID0ga2V5cy5sZW5ndGgsIGtleSwgdmFsdWUsIG90aGVyX3ZhbHVlOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAga2V5ID0ga2V5c1tpXTtcblxuICAgICAgICBpZiAoa2V5LiQkaXNfc3RyaW5nKSB7XG4gICAgICAgICAgdmFsdWUgPSBzZWxmLiQkc21hcFtrZXldO1xuICAgICAgICAgIG90aGVyX3ZhbHVlID0gb3RoZXIuJCRzbWFwW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWUgPSBrZXkudmFsdWU7XG4gICAgICAgICAgb3RoZXJfdmFsdWUgPSAkaGFzaF9nZXQob3RoZXIsIGtleS5rZXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG90aGVyX3ZhbHVlID09PSB1bmRlZmluZWQgfHwgIXZhbHVlWyckZXFsPyddKG90aGVyX3ZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiA+PShvdGhlcilcbiAgICBvdGhlciA9IDo6T3BhbC5jb2VyY2VfdG8hKG90aGVyLCA6Okhhc2gsIDp0b19oYXNoKVxuXG4gICAgJXh7XG4gICAgICBpZiAoc2VsZi4kJGtleXMubGVuZ3RoIDwgb3RoZXIuJCRrZXlzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXN1bHQgPSB0cnVlXG5cbiAgICBvdGhlci5lYWNoIGRvIHxvdGhlcl9rZXksIG90aGVyX3ZhbHxcbiAgICAgIHZhbCA9IGZldGNoKG90aGVyX2tleSwgYG51bGxgKVxuXG4gICAgICAleHtcbiAgICAgICAgaWYgKHZhbCA9PSBudWxsIHx8IHZhbCAhPT0gb3RoZXJfdmFsKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgZW5kXG5cbiAgICByZXN1bHRcbiAgZW5kXG5cbiAgZGVmID4ob3RoZXIpXG4gICAgb3RoZXIgPSA6Ok9wYWwuY29lcmNlX3RvIShvdGhlciwgOjpIYXNoLCA6dG9faGFzaClcblxuICAgICV4e1xuICAgICAgaWYgKHNlbGYuJCRrZXlzLmxlbmd0aCA8PSBvdGhlci4kJGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cblxuICAgIHNlbGYgPj0gb3RoZXJcbiAgZW5kXG5cbiAgZGVmIDwob3RoZXIpXG4gICAgb3RoZXIgPSA6Ok9wYWwuY29lcmNlX3RvIShvdGhlciwgOjpIYXNoLCA6dG9faGFzaClcbiAgICBvdGhlciA+IHNlbGZcbiAgZW5kXG5cbiAgZGVmIDw9KG90aGVyKVxuICAgIG90aGVyID0gOjpPcGFsLmNvZXJjZV90byEob3RoZXIsIDo6SGFzaCwgOnRvX2hhc2gpXG4gICAgb3RoZXIgPj0gc2VsZlxuICBlbmRcblxuICBkZWYgW10oa2V5KVxuICAgICV4e1xuICAgICAgdmFyIHZhbHVlID0gJGhhc2hfZ2V0KHNlbGYsIGtleSk7XG5cbiAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGYuJGRlZmF1bHQoa2V5KTtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBbXT0oa2V5LCB2YWx1ZSlcbiAgICAleHtcbiAgICAgICRkZW55X2Zyb3plbl9hY2Nlc3Moc2VsZik7XG5cbiAgICAgICRoYXNoX3B1dChzZWxmLCBrZXksIHZhbHVlKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBhc3NvYyhvYmplY3QpXG4gICAgJXh7XG4gICAgICBmb3IgKHZhciBpID0gMCwga2V5cyA9IHNlbGYuJCRrZXlzLCBsZW5ndGggPSBrZXlzLmxlbmd0aCwga2V5OyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAga2V5ID0ga2V5c1tpXTtcblxuICAgICAgICBpZiAoa2V5LiQkaXNfc3RyaW5nKSB7XG4gICAgICAgICAgaWYgKCN7YGtleWAgPT0gb2JqZWN0fSkge1xuICAgICAgICAgICAgcmV0dXJuIFtrZXksIHNlbGYuJCRzbWFwW2tleV1dO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoI3tga2V5LmtleWAgPT0gb2JqZWN0fSkge1xuICAgICAgICAgICAgcmV0dXJuIFtrZXkua2V5LCBrZXkudmFsdWVdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmlsO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGNsZWFyXG4gICAgJXh7XG4gICAgICAkZGVueV9mcm96ZW5fYWNjZXNzKHNlbGYpO1xuXG4gICAgICAkaGFzaF9pbml0KHNlbGYpO1xuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfVxuICBlbmRcblxuICBkZWYgY2xvbmVcbiAgICAleHtcbiAgICAgIHZhciBoYXNoID0gbmV3IHNlbGYuJCRjbGFzcygpO1xuXG4gICAgICAkaGFzaF9pbml0KGhhc2gpO1xuICAgICAgT3BhbC5oYXNoX2Nsb25lKHNlbGYsIGhhc2gpO1xuXG4gICAgICByZXR1cm4gaGFzaDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBjb21wYWN0XG4gICAgJXh7XG4gICAgICB2YXIgaGFzaCA9ICRoYXNoKCk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBrZXlzID0gc2VsZi4kJGtleXMsIGxlbmd0aCA9IGtleXMubGVuZ3RoLCBrZXksIHZhbHVlLCBvYmo7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICAgIGlmIChrZXkuJCRpc19zdHJpbmcpIHtcbiAgICAgICAgICB2YWx1ZSA9IHNlbGYuJCRzbWFwW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWUgPSBrZXkudmFsdWU7XG4gICAgICAgICAga2V5ID0ga2V5LmtleTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gbmlsKSB7XG4gICAgICAgICAgJGhhc2hfcHV0KGhhc2gsIGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoYXNoO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGNvbXBhY3QhXG4gICAgJXh7XG4gICAgICAkZGVueV9mcm96ZW5fYWNjZXNzKHNlbGYpO1xuXG4gICAgICB2YXIgY2hhbmdlc193ZXJlX21hZGUgPSBmYWxzZTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGtleXMgPSBzZWxmLiQka2V5cywgbGVuZ3RoID0ga2V5cy5sZW5ndGgsIGtleSwgdmFsdWUsIG9iajsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGtleSA9IGtleXNbaV07XG5cbiAgICAgICAgaWYgKGtleS4kJGlzX3N0cmluZykge1xuICAgICAgICAgIHZhbHVlID0gc2VsZi4kJHNtYXBba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZSA9IGtleS52YWx1ZTtcbiAgICAgICAgICBrZXkgPSBrZXkua2V5O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlID09PSBuaWwpIHtcbiAgICAgICAgICBpZiAoJGhhc2hfZGVsZXRlKHNlbGYsIGtleSkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY2hhbmdlc193ZXJlX21hZGUgPSB0cnVlO1xuICAgICAgICAgICAgbGVuZ3RoLS07XG4gICAgICAgICAgICBpLS07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjaGFuZ2VzX3dlcmVfbWFkZSA/IHNlbGYgOiBuaWw7XG4gICAgfVxuICBlbmRcblxuICBkZWYgY29tcGFyZV9ieV9pZGVudGl0eVxuICAgICV4e1xuICAgICAgJGRlbnlfZnJvemVuX2FjY2VzcyhzZWxmKTtcblxuICAgICAgdmFyIGksIGlpLCBrZXksIGtleXMgPSBzZWxmLiQka2V5cywgaWRlbnRpdHlfaGFzaDtcblxuICAgICAgaWYgKHNlbGYuJCRieV9pZGVudGl0eSkgcmV0dXJuIHNlbGY7XG4gICAgICBpZiAoc2VsZi4kJGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHNlbGYuJCRieV9pZGVudGl0eSA9IHRydWVcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICB9XG5cbiAgICAgIGlkZW50aXR5X2hhc2ggPSAjeyB7fS5jb21wYXJlX2J5X2lkZW50aXR5IH07XG4gICAgICBmb3IoaSA9IDAsIGlpID0ga2V5cy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgIGlmICgha2V5LiQkaXNfc3RyaW5nKSBrZXkgPSBrZXkua2V5O1xuICAgICAgICAkaGFzaF9wdXQoaWRlbnRpdHlfaGFzaCwga2V5LCAkaGFzaF9nZXQoc2VsZiwga2V5KSk7XG4gICAgICB9XG5cbiAgICAgIHNlbGYuJCRieV9pZGVudGl0eSA9IHRydWU7XG4gICAgICBzZWxmLiQkbWFwID0gaWRlbnRpdHlfaGFzaC4kJG1hcDtcbiAgICAgIHNlbGYuJCRzbWFwID0gaWRlbnRpdHlfaGFzaC4kJHNtYXA7XG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBjb21wYXJlX2J5X2lkZW50aXR5P1xuICAgIGBzZWxmLiQkYnlfaWRlbnRpdHkgPT09IHRydWVgXG4gIGVuZFxuXG4gIGRlZiBkZWZhdWx0KGtleSA9IHVuZGVmaW5lZClcbiAgICAleHtcbiAgICAgIGlmIChrZXkgIT09IHVuZGVmaW5lZCAmJiBzZWxmLiQkcHJvYyAhPT0gbmlsICYmIHNlbGYuJCRwcm9jICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYuJCRwcm9jLiRjYWxsKHNlbGYsIGtleSk7XG4gICAgICB9XG4gICAgICBpZiAoc2VsZi4kJG5vbmUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbmlsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNlbGYuJCRub25lO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGRlZmF1bHQ9KG9iamVjdClcbiAgICAleHtcbiAgICAgICRkZW55X2Zyb3plbl9hY2Nlc3Moc2VsZik7XG5cbiAgICAgIHNlbGYuJCRwcm9jID0gbmlsO1xuICAgICAgc2VsZi4kJG5vbmUgPSBvYmplY3Q7XG5cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuICBlbmRcblxuICBkZWYgZGVmYXVsdF9wcm9jXG4gICAgJXh7XG4gICAgICBpZiAoc2VsZi4kJHByb2MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gc2VsZi4kJHByb2M7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmlsO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGRlZmF1bHRfcHJvYz0oZGVmYXVsdF9wcm9jKVxuICAgICV4e1xuICAgICAgJGRlbnlfZnJvemVuX2FjY2VzcyhzZWxmKTtcblxuICAgICAgdmFyIHByb2MgPSBkZWZhdWx0X3Byb2M7XG5cbiAgICAgIGlmIChwcm9jICE9PSBuaWwpIHtcbiAgICAgICAgcHJvYyA9ICN7OjpPcGFsLmNvZXJjZV90byEoYHByb2NgLCA6OlByb2MsIDp0b19wcm9jKX07XG5cbiAgICAgICAgaWYgKCN7YHByb2NgLmxhbWJkYT99ICYmICN7YHByb2NgLmFyaXR5LmFic30gIT09IDIpIHtcbiAgICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6VHlwZUVycm9yLCAnZGVmYXVsdF9wcm9jIHRha2VzIHR3byBhcmd1bWVudHMnfTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzZWxmLiQkbm9uZSA9IG5pbDtcbiAgICAgIHNlbGYuJCRwcm9jID0gcHJvYztcblxuICAgICAgcmV0dXJuIGRlZmF1bHRfcHJvYztcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBkZWxldGUoa2V5LCAmYmxvY2spXG4gICAgJXh7XG4gICAgICAkZGVueV9mcm96ZW5fYWNjZXNzKHNlbGYpO1xuICAgICAgdmFyIHZhbHVlID0gJGhhc2hfZGVsZXRlKHNlbGYsIGtleSk7XG5cbiAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGJsb2NrICE9PSBuaWwpIHtcbiAgICAgICAgcmV0dXJuICN7eWllbGQga2V5fTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5pbDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBkZWxldGVfaWYoJmJsb2NrKVxuICAgIHJldHVybiBlbnVtX2Zvcig6ZGVsZXRlX2lmKSB7IHNpemUgfSB1bmxlc3MgYmxvY2tcblxuICAgICV4e1xuICAgICAgJGRlbnlfZnJvemVuX2FjY2VzcyhzZWxmKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGtleXMgPSBzZWxmLiQka2V5cywgbGVuZ3RoID0ga2V5cy5sZW5ndGgsIGtleSwgdmFsdWUsIG9iajsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGtleSA9IGtleXNbaV07XG5cbiAgICAgICAgaWYgKGtleS4kJGlzX3N0cmluZykge1xuICAgICAgICAgIHZhbHVlID0gc2VsZi4kJHNtYXBba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZSA9IGtleS52YWx1ZTtcbiAgICAgICAgICBrZXkgPSBrZXkua2V5O1xuICAgICAgICB9XG5cbiAgICAgICAgb2JqID0gYmxvY2soa2V5LCB2YWx1ZSk7XG5cbiAgICAgICAgaWYgKG9iaiAhPT0gZmFsc2UgJiYgb2JqICE9PSBuaWwpIHtcbiAgICAgICAgICBpZiAoJGhhc2hfZGVsZXRlKHNlbGYsIGtleSkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbGVuZ3RoLS07XG4gICAgICAgICAgICBpLS07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGRpZyhrZXksICprZXlzKVxuICAgIGl0ZW0gPSBzZWxmW2tleV1cblxuICAgICV4e1xuICAgICAgaWYgKGl0ZW0gPT09IG5pbCB8fCBrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB1bmxlc3MgaXRlbS5yZXNwb25kX3RvPyg6ZGlnKVxuICAgICAgOjpLZXJuZWwucmFpc2UgOjpUeXBlRXJyb3IsIFwiI3tpdGVtLmNsYXNzfSBkb2VzIG5vdCBoYXZlICNkaWcgbWV0aG9kXCJcbiAgICBlbmRcblxuICAgIGl0ZW0uZGlnKCprZXlzKVxuICBlbmRcblxuICBkZWYgZWFjaCgmYmxvY2spXG4gICAgcmV0dXJuIGVudW1fZm9yKDplYWNoKSB7IHNpemUgfSB1bmxlc3MgYmxvY2tcblxuICAgICV4e1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGtleXMgPSBzZWxmLiQka2V5cy5zbGljZSgpLCBsZW5ndGggPSBrZXlzLmxlbmd0aCwga2V5LCB2YWx1ZTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGtleSA9IGtleXNbaV07XG5cbiAgICAgICAgaWYgKGtleS4kJGlzX3N0cmluZykge1xuICAgICAgICAgIHZhbHVlID0gc2VsZi4kJHNtYXBba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZSA9IGtleS52YWx1ZTtcbiAgICAgICAgICBrZXkgPSBrZXkua2V5O1xuICAgICAgICB9XG5cbiAgICAgICAgJHlpZWxkMShibG9jaywgW2tleSwgdmFsdWVdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfVxuICBlbmRcblxuICBkZWYgZWFjaF9rZXkoJmJsb2NrKVxuICAgIHJldHVybiBlbnVtX2Zvcig6ZWFjaF9rZXkpIHsgc2l6ZSB9IHVubGVzcyBibG9ja1xuXG4gICAgJXh7XG4gICAgICBmb3IgKHZhciBpID0gMCwga2V5cyA9IHNlbGYuJCRrZXlzLnNsaWNlKCksIGxlbmd0aCA9IGtleXMubGVuZ3RoLCBrZXk7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICAgIGJsb2NrKGtleS4kJGlzX3N0cmluZyA/IGtleSA6IGtleS5rZXkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBlYWNoX3ZhbHVlKCZibG9jaylcbiAgICByZXR1cm4gZW51bV9mb3IoOmVhY2hfdmFsdWUpIHsgc2l6ZSB9IHVubGVzcyBibG9ja1xuXG4gICAgJXh7XG4gICAgICBmb3IgKHZhciBpID0gMCwga2V5cyA9IHNlbGYuJCRrZXlzLnNsaWNlKCksIGxlbmd0aCA9IGtleXMubGVuZ3RoLCBrZXk7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICAgIGJsb2NrKGtleS4kJGlzX3N0cmluZyA/IHNlbGYuJCRzbWFwW2tleV0gOiBrZXkudmFsdWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBlbXB0eT9cbiAgICBgc2VsZi4kJGtleXMubGVuZ3RoID09PSAwYFxuICBlbmRcblxuICBkZWYgZXhjZXB0KCprZXlzKVxuICAgIGR1cC5leGNlcHQhKCprZXlzKVxuICBlbmRcblxuICBkZWYgZXhjZXB0ISgqa2V5cylcbiAgICBrZXlzLmVhY2ggeyB8a2V5fCBkZWxldGUoa2V5KSB9XG4gICAgc2VsZlxuICBlbmRcblxuICBkZWYgZmV0Y2goa2V5LCBkZWZhdWx0cyA9IHVuZGVmaW5lZCwgJmJsb2NrKVxuICAgICV4e1xuICAgICAgdmFyIHZhbHVlID0gJGhhc2hfZ2V0KHNlbGYsIGtleSk7XG5cbiAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGJsb2NrICE9PSBuaWwpIHtcbiAgICAgICAgcmV0dXJuIGJsb2NrKGtleSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkZWZhdWx0cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0cztcbiAgICAgIH1cbiAgICB9XG5cbiAgICA6Oktlcm5lbC5yYWlzZSA6OktleUVycm9yLm5ldyhcImtleSBub3QgZm91bmQ6ICN7a2V5Lmluc3BlY3R9XCIsIGtleToga2V5LCByZWNlaXZlcjogc2VsZilcbiAgZW5kXG5cbiAgZGVmIGZldGNoX3ZhbHVlcygqa2V5cywgJmJsb2NrKVxuICAgIGtleXMubWFwIHsgfGtleXwgZmV0Y2goa2V5LCAmYmxvY2spIH1cbiAgZW5kXG5cbiAgZGVmIGZsYXR0ZW4obGV2ZWwgPSAxKVxuICAgIGxldmVsID0gOjpPcGFsLmNvZXJjZV90byEobGV2ZWwsIDo6SW50ZWdlciwgOnRvX2ludClcblxuICAgICV4e1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwga2V5cyA9IHNlbGYuJCRrZXlzLCBsZW5ndGggPSBrZXlzLmxlbmd0aCwga2V5LCB2YWx1ZTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGtleSA9IGtleXNbaV07XG5cbiAgICAgICAgaWYgKGtleS4kJGlzX3N0cmluZykge1xuICAgICAgICAgIHZhbHVlID0gc2VsZi4kJHNtYXBba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZSA9IGtleS52YWx1ZTtcbiAgICAgICAgICBrZXkgPSBrZXkua2V5O1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcblxuICAgICAgICBpZiAodmFsdWUuJCRpc19hcnJheSkge1xuICAgICAgICAgIGlmIChsZXZlbCA9PT0gMSkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LmNvbmNhdCgje2B2YWx1ZWAuZmxhdHRlbihgbGV2ZWwgLSAyYCl9KTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBmcmVlemVcbiAgICByZXR1cm4gc2VsZiBpZiBmcm96ZW4/XG5cbiAgICBgJGZyZWV6ZShzZWxmKWBcbiAgZW5kXG5cbiAgZGVmIGhhc19rZXk/KGtleSlcbiAgICBgJGhhc2hfZ2V0KHNlbGYsIGtleSkgIT09IHVuZGVmaW5lZGBcbiAgZW5kXG5cbiAgZGVmIGhhc192YWx1ZT8odmFsdWUpXG4gICAgJXh7XG4gICAgICBmb3IgKHZhciBpID0gMCwga2V5cyA9IHNlbGYuJCRrZXlzLCBsZW5ndGggPSBrZXlzLmxlbmd0aCwga2V5OyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAga2V5ID0ga2V5c1tpXTtcblxuICAgICAgICBpZiAoI3tgKGtleS4kJGlzX3N0cmluZyA/IHNlbGYuJCRzbWFwW2tleV0gOiBrZXkudmFsdWUpYCA9PSB2YWx1ZX0pIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICBlbmRcblxuICBkZWYgaGFzaFxuICAgICV4e1xuICAgICAgdmFyIHRvcCA9IChPcGFsLmhhc2hfaWRzID09PSB1bmRlZmluZWQpLFxuICAgICAgICAgIGhhc2hfaWQgPSBzZWxmLiRvYmplY3RfaWQoKSxcbiAgICAgICAgICByZXN1bHQgPSBbJ0hhc2gnXSxcbiAgICAgICAgICBrZXksIGl0ZW07XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICh0b3ApIHtcbiAgICAgICAgICBPcGFsLmhhc2hfaWRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChPcGFsW2hhc2hfaWRdKSB7XG4gICAgICAgICAgcmV0dXJuICdzZWxmJztcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoa2V5IGluIE9wYWwuaGFzaF9pZHMpIHtcbiAgICAgICAgICBpdGVtID0gT3BhbC5oYXNoX2lkc1trZXldO1xuICAgICAgICAgIGlmICgje2VxbD8oYGl0ZW1gKX0pIHtcbiAgICAgICAgICAgIHJldHVybiAnc2VsZic7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgT3BhbC5oYXNoX2lkc1toYXNoX2lkXSA9IHNlbGY7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGtleXMgPSBzZWxmLiQka2V5cywgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgIGtleSA9IGtleXNbaV07XG5cbiAgICAgICAgICBpZiAoa2V5LiQkaXNfc3RyaW5nKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChba2V5LCBzZWxmLiQkc21hcFtrZXldLiRoYXNoKCldKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goW2tleS5rZXlfaGFzaCwga2V5LnZhbHVlLiRoYXNoKCldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0LnNvcnQoKS5qb2luKCk7XG5cbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmICh0b3ApIHtcbiAgICAgICAgICBPcGFsLmhhc2hfaWRzID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICBlbmRcblxuICBkZWYgaW5kZXgob2JqZWN0KVxuICAgICV4e1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGtleXMgPSBzZWxmLiQka2V5cywgbGVuZ3RoID0ga2V5cy5sZW5ndGgsIGtleSwgdmFsdWU7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICAgIGlmIChrZXkuJCRpc19zdHJpbmcpIHtcbiAgICAgICAgICB2YWx1ZSA9IHNlbGYuJCRzbWFwW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWUgPSBrZXkudmFsdWU7XG4gICAgICAgICAga2V5ID0ga2V5LmtleTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgje2B2YWx1ZWAgPT0gb2JqZWN0fSkge1xuICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5pbDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBpbmRleGVzKCphcmdzKVxuICAgICV4e1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gYXJncy5sZW5ndGgsIGtleSwgdmFsdWU7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBrZXkgPSBhcmdzW2ldO1xuICAgICAgICB2YWx1ZSA9ICRoYXNoX2dldChzZWxmLCBrZXkpO1xuXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goI3tkZWZhdWx0fSk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICBlbmRcblxuICBgdmFyIGluc3BlY3RfaWRzYFxuXG4gIGRlZiBpbnNwZWN0XG4gICAgJXh7XG4gICAgICB2YXIgdG9wID0gKGluc3BlY3RfaWRzID09PSB1bmRlZmluZWQpLFxuICAgICAgICAgIGhhc2hfaWQgPSBzZWxmLiRvYmplY3RfaWQoKSxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcbiAgICB9XG5cbiAgICBiZWdpblxuICAgICAgJXh7XG4gICAgICAgIGlmICh0b3ApIHtcbiAgICAgICAgICBpbnNwZWN0X2lkcyA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluc3BlY3RfaWRzLmhhc093blByb3BlcnR5KGhhc2hfaWQpKSB7XG4gICAgICAgICAgcmV0dXJuICd7Li4ufSc7XG4gICAgICAgIH1cblxuICAgICAgICBpbnNwZWN0X2lkc1toYXNoX2lkXSA9IHRydWU7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGtleXMgPSBzZWxmLiQka2V5cywgbGVuZ3RoID0ga2V5cy5sZW5ndGgsIGtleSwgdmFsdWU7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgIGtleSA9IGtleXNbaV07XG5cbiAgICAgICAgICBpZiAoa2V5LiQkaXNfc3RyaW5nKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHNlbGYuJCRzbWFwW2tleV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0ga2V5LnZhbHVlO1xuICAgICAgICAgICAga2V5ID0ga2V5LmtleTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBrZXkgPSAje09wYWwuaW5zcGVjdChga2V5YCl9XG4gICAgICAgICAgdmFsdWUgPSAje09wYWwuaW5zcGVjdChgdmFsdWVgKX1cblxuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSArICc9PicgKyB2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJ3snICsgcmVzdWx0LmpvaW4oJywgJykgKyAnfSc7XG4gICAgICB9XG4gICAgICBuaWxcbiAgICBlbnN1cmVcbiAgICAgIGBpZiAodG9wKSBpbnNwZWN0X2lkcyA9IHVuZGVmaW5lZGBcbiAgICBlbmRcbiAgZW5kXG5cbiAgZGVmIGludmVydFxuICAgICV4e1xuICAgICAgdmFyIGhhc2ggPSAkaGFzaCgpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwga2V5cyA9IHNlbGYuJCRrZXlzLCBsZW5ndGggPSBrZXlzLmxlbmd0aCwga2V5LCB2YWx1ZTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGtleSA9IGtleXNbaV07XG5cbiAgICAgICAgaWYgKGtleS4kJGlzX3N0cmluZykge1xuICAgICAgICAgIHZhbHVlID0gc2VsZi4kJHNtYXBba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZSA9IGtleS52YWx1ZTtcbiAgICAgICAgICBrZXkgPSBrZXkua2V5O1xuICAgICAgICB9XG5cbiAgICAgICAgJGhhc2hfcHV0KGhhc2gsIHZhbHVlLCBrZXkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaGFzaDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBrZWVwX2lmKCZibG9jaylcbiAgICByZXR1cm4gZW51bV9mb3IoOmtlZXBfaWYpIHsgc2l6ZSB9IHVubGVzcyBibG9ja1xuXG4gICAgJXh7XG4gICAgICAkZGVueV9mcm96ZW5fYWNjZXNzKHNlbGYpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwga2V5cyA9IHNlbGYuJCRrZXlzLCBsZW5ndGggPSBrZXlzLmxlbmd0aCwga2V5LCB2YWx1ZSwgb2JqOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAga2V5ID0ga2V5c1tpXTtcblxuICAgICAgICBpZiAoa2V5LiQkaXNfc3RyaW5nKSB7XG4gICAgICAgICAgdmFsdWUgPSBzZWxmLiQkc21hcFtrZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlID0ga2V5LnZhbHVlO1xuICAgICAgICAgIGtleSA9IGtleS5rZXk7XG4gICAgICAgIH1cblxuICAgICAgICBvYmogPSBibG9jayhrZXksIHZhbHVlKTtcblxuICAgICAgICBpZiAob2JqID09PSBmYWxzZSB8fCBvYmogPT09IG5pbCkge1xuICAgICAgICAgIGlmICgkaGFzaF9kZWxldGUoc2VsZiwga2V5KSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBsZW5ndGgtLTtcbiAgICAgICAgICAgIGktLTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfVxuICBlbmRcblxuICBkZWYga2V5c1xuICAgICV4e1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwga2V5cyA9IHNlbGYuJCRrZXlzLCBsZW5ndGggPSBrZXlzLmxlbmd0aCwga2V5OyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAga2V5ID0ga2V5c1tpXTtcblxuICAgICAgICBpZiAoa2V5LiQkaXNfc3RyaW5nKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkua2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGxlbmd0aFxuICAgIGBzZWxmLiQka2V5cy5sZW5ndGhgXG4gIGVuZFxuXG4gIGRlZiBtZXJnZSgqb3RoZXJzLCAmYmxvY2spXG4gICAgZHVwLm1lcmdlISgqb3RoZXJzLCAmYmxvY2spXG4gIGVuZFxuXG4gIGRlZiBtZXJnZSEoKm90aGVycywgJmJsb2NrKVxuICAgICV4e1xuICAgICAgJGRlbnlfZnJvemVuX2FjY2VzcyhzZWxmKTtcbiAgICAgIHZhciBpLCBqLCBvdGhlciwgb3RoZXJfa2V5cywgbGVuZ3RoLCBrZXksIHZhbHVlLCBvdGhlcl92YWx1ZTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBvdGhlcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgb3RoZXIgPSAjezo6T3BhbC5jb2VyY2VfdG8hKGBvdGhlcnNbaV1gLCA6Okhhc2gsIDp0b19oYXNoKX07XG4gICAgICAgIG90aGVyX2tleXMgPSBvdGhlci4kJGtleXMsIGxlbmd0aCA9IG90aGVyX2tleXMubGVuZ3RoO1xuXG4gICAgICAgIGlmIChibG9jayA9PT0gbmlsKSB7XG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IGxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBrZXkgPSBvdGhlcl9rZXlzW2pdO1xuXG4gICAgICAgICAgICBpZiAoa2V5LiQkaXNfc3RyaW5nKSB7XG4gICAgICAgICAgICAgIG90aGVyX3ZhbHVlID0gb3RoZXIuJCRzbWFwW2tleV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBvdGhlcl92YWx1ZSA9IGtleS52YWx1ZTtcbiAgICAgICAgICAgICAga2V5ID0ga2V5LmtleTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJGhhc2hfcHV0KHNlbGYsIGtleSwgb3RoZXJfdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgbGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGtleSA9IG90aGVyX2tleXNbal07XG5cbiAgICAgICAgICAgIGlmIChrZXkuJCRpc19zdHJpbmcpIHtcbiAgICAgICAgICAgICAgb3RoZXJfdmFsdWUgPSBvdGhlci4kJHNtYXBba2V5XTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG90aGVyX3ZhbHVlID0ga2V5LnZhbHVlO1xuICAgICAgICAgICAgICBrZXkgPSBrZXkua2V5O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YWx1ZSA9ICRoYXNoX2dldChzZWxmLCBrZXkpO1xuXG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAkaGFzaF9wdXQoc2VsZiwga2V5LCBvdGhlcl92YWx1ZSk7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkaGFzaF9wdXQoc2VsZiwga2V5LCBibG9jayhrZXksIHZhbHVlLCBvdGhlcl92YWx1ZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiByYXNzb2Mob2JqZWN0KVxuICAgICV4e1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGtleXMgPSBzZWxmLiQka2V5cywgbGVuZ3RoID0ga2V5cy5sZW5ndGgsIGtleSwgdmFsdWU7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICAgIGlmIChrZXkuJCRpc19zdHJpbmcpIHtcbiAgICAgICAgICB2YWx1ZSA9IHNlbGYuJCRzbWFwW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWUgPSBrZXkudmFsdWU7XG4gICAgICAgICAga2V5ID0ga2V5LmtleTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgje2B2YWx1ZWAgPT0gb2JqZWN0fSkge1xuICAgICAgICAgIHJldHVybiBba2V5LCB2YWx1ZV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5pbDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiByZWhhc2hcbiAgICAleHtcbiAgICAgICRkZW55X2Zyb3plbl9hY2Nlc3Moc2VsZik7XG4gICAgICBPcGFsLmhhc2hfcmVoYXNoKHNlbGYpO1xuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfVxuICBlbmRcblxuICBkZWYgcmVqZWN0KCZibG9jaylcbiAgICByZXR1cm4gZW51bV9mb3IoOnJlamVjdCkgeyBzaXplIH0gdW5sZXNzIGJsb2NrXG5cbiAgICAleHtcbiAgICAgIHZhciBoYXNoID0gJGhhc2goKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGtleXMgPSBzZWxmLiQka2V5cywgbGVuZ3RoID0ga2V5cy5sZW5ndGgsIGtleSwgdmFsdWUsIG9iajsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGtleSA9IGtleXNbaV07XG5cbiAgICAgICAgaWYgKGtleS4kJGlzX3N0cmluZykge1xuICAgICAgICAgIHZhbHVlID0gc2VsZi4kJHNtYXBba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZSA9IGtleS52YWx1ZTtcbiAgICAgICAgICBrZXkgPSBrZXkua2V5O1xuICAgICAgICB9XG5cbiAgICAgICAgb2JqID0gYmxvY2soa2V5LCB2YWx1ZSk7XG5cbiAgICAgICAgaWYgKG9iaiA9PT0gZmFsc2UgfHwgb2JqID09PSBuaWwpIHtcbiAgICAgICAgICAkaGFzaF9wdXQoaGFzaCwga2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGhhc2g7XG4gICAgfVxuICBlbmRcblxuICBkZWYgcmVqZWN0ISgmYmxvY2spXG4gICAgcmV0dXJuIGVudW1fZm9yKDpyZWplY3QhKSB7IHNpemUgfSB1bmxlc3MgYmxvY2tcblxuICAgICV4e1xuICAgICAgJGRlbnlfZnJvemVuX2FjY2VzcyhzZWxmKTtcblxuICAgICAgdmFyIGNoYW5nZXNfd2VyZV9tYWRlID0gZmFsc2U7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBrZXlzID0gc2VsZi4kJGtleXMsIGxlbmd0aCA9IGtleXMubGVuZ3RoLCBrZXksIHZhbHVlLCBvYmo7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICAgIGlmIChrZXkuJCRpc19zdHJpbmcpIHtcbiAgICAgICAgICB2YWx1ZSA9IHNlbGYuJCRzbWFwW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWUgPSBrZXkudmFsdWU7XG4gICAgICAgICAga2V5ID0ga2V5LmtleTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9iaiA9IGJsb2NrKGtleSwgdmFsdWUpO1xuXG4gICAgICAgIGlmIChvYmogIT09IGZhbHNlICYmIG9iaiAhPT0gbmlsKSB7XG4gICAgICAgICAgaWYgKCRoYXNoX2RlbGV0ZShzZWxmLCBrZXkpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNoYW5nZXNfd2VyZV9tYWRlID0gdHJ1ZTtcbiAgICAgICAgICAgIGxlbmd0aC0tO1xuICAgICAgICAgICAgaS0tO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2hhbmdlc193ZXJlX21hZGUgPyBzZWxmIDogbmlsO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIHJlcGxhY2Uob3RoZXIpXG4gICAgYCRkZW55X2Zyb3plbl9hY2Nlc3Moc2VsZik7YFxuXG4gICAgb3RoZXIgPSA6Ok9wYWwuY29lcmNlX3RvIShvdGhlciwgOjpIYXNoLCA6dG9faGFzaClcblxuICAgICV4e1xuICAgICAgJGhhc2hfaW5pdChzZWxmKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIG90aGVyX2tleXMgPSBvdGhlci4kJGtleXMsIGxlbmd0aCA9IG90aGVyX2tleXMubGVuZ3RoLCBrZXksIHZhbHVlLCBvdGhlcl92YWx1ZTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGtleSA9IG90aGVyX2tleXNbaV07XG5cbiAgICAgICAgaWYgKGtleS4kJGlzX3N0cmluZykge1xuICAgICAgICAgIG90aGVyX3ZhbHVlID0gb3RoZXIuJCRzbWFwW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3RoZXJfdmFsdWUgPSBrZXkudmFsdWU7XG4gICAgICAgICAga2V5ID0ga2V5LmtleTtcbiAgICAgICAgfVxuXG4gICAgICAgICRoYXNoX3B1dChzZWxmLCBrZXksIG90aGVyX3ZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiBvdGhlci5kZWZhdWx0X3Byb2NcbiAgICAgIHNlbGYuZGVmYXVsdF9wcm9jID0gb3RoZXIuZGVmYXVsdF9wcm9jXG4gICAgZWxzZVxuICAgICAgc2VsZi5kZWZhdWx0ID0gb3RoZXIuZGVmYXVsdFxuICAgIGVuZFxuXG4gICAgc2VsZlxuICBlbmRcblxuICBkZWYgc2VsZWN0KCZibG9jaylcbiAgICByZXR1cm4gZW51bV9mb3IoOnNlbGVjdCkgeyBzaXplIH0gdW5sZXNzIGJsb2NrXG5cbiAgICAleHtcbiAgICAgIHZhciBoYXNoID0gJGhhc2goKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGtleXMgPSBzZWxmLiQka2V5cywgbGVuZ3RoID0ga2V5cy5sZW5ndGgsIGtleSwgdmFsdWUsIG9iajsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGtleSA9IGtleXNbaV07XG5cbiAgICAgICAgaWYgKGtleS4kJGlzX3N0cmluZykge1xuICAgICAgICAgIHZhbHVlID0gc2VsZi4kJHNtYXBba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZSA9IGtleS52YWx1ZTtcbiAgICAgICAgICBrZXkgPSBrZXkua2V5O1xuICAgICAgICB9XG5cbiAgICAgICAgb2JqID0gYmxvY2soa2V5LCB2YWx1ZSk7XG5cbiAgICAgICAgaWYgKG9iaiAhPT0gZmFsc2UgJiYgb2JqICE9PSBuaWwpIHtcbiAgICAgICAgICAkaGFzaF9wdXQoaGFzaCwga2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGhhc2g7XG4gICAgfVxuICBlbmRcblxuICBkZWYgc2VsZWN0ISgmYmxvY2spXG4gICAgcmV0dXJuIGVudW1fZm9yKDpzZWxlY3QhKSB7IHNpemUgfSB1bmxlc3MgYmxvY2tcblxuICAgICV4e1xuICAgICAgJGRlbnlfZnJvemVuX2FjY2VzcyhzZWxmKTtcblxuICAgICAgdmFyIHJlc3VsdCA9IG5pbDtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGtleXMgPSBzZWxmLiQka2V5cywgbGVuZ3RoID0ga2V5cy5sZW5ndGgsIGtleSwgdmFsdWUsIG9iajsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGtleSA9IGtleXNbaV07XG5cbiAgICAgICAgaWYgKGtleS4kJGlzX3N0cmluZykge1xuICAgICAgICAgIHZhbHVlID0gc2VsZi4kJHNtYXBba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZSA9IGtleS52YWx1ZTtcbiAgICAgICAgICBrZXkgPSBrZXkua2V5O1xuICAgICAgICB9XG5cbiAgICAgICAgb2JqID0gYmxvY2soa2V5LCB2YWx1ZSk7XG5cbiAgICAgICAgaWYgKG9iaiA9PT0gZmFsc2UgfHwgb2JqID09PSBuaWwpIHtcbiAgICAgICAgICBpZiAoJGhhc2hfZGVsZXRlKHNlbGYsIGtleSkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbGVuZ3RoLS07XG4gICAgICAgICAgICBpLS07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IHNlbGY7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBzaGlmdFxuICAgICV4e1xuICAgICAgJGRlbnlfZnJvemVuX2FjY2VzcyhzZWxmKTtcbiAgICAgIHZhciBrZXlzID0gc2VsZi4kJGtleXMsXG4gICAgICAgICAga2V5O1xuXG4gICAgICBpZiAoa2V5cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGtleSA9IGtleXNbMF07XG5cbiAgICAgICAga2V5ID0ga2V5LiQkaXNfc3RyaW5nID8ga2V5IDoga2V5LmtleTtcblxuICAgICAgICByZXR1cm4gW2tleSwgJGhhc2hfZGVsZXRlKHNlbGYsIGtleSldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZi4kZGVmYXVsdChuaWwpO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIHNsaWNlKCprZXlzKVxuICAgICV4e1xuICAgICAgdmFyIHJlc3VsdCA9ICRoYXNoKCk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBrZXlzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzW2ldLCB2YWx1ZSA9ICRoYXNoX2dldChzZWxmLCBrZXkpO1xuXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgJGhhc2hfcHV0KHJlc3VsdCwga2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiB0b19hXG4gICAgJXh7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBrZXlzID0gc2VsZi4kJGtleXMsIGxlbmd0aCA9IGtleXMubGVuZ3RoLCBrZXksIHZhbHVlOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAga2V5ID0ga2V5c1tpXTtcblxuICAgICAgICBpZiAoa2V5LiQkaXNfc3RyaW5nKSB7XG4gICAgICAgICAgdmFsdWUgPSBzZWxmLiQkc21hcFtrZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlID0ga2V5LnZhbHVlO1xuICAgICAgICAgIGtleSA9IGtleS5rZXk7XG4gICAgICAgIH1cblxuICAgICAgICByZXN1bHQucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIHRvX2goJmJsb2NrKVxuICAgIHJldHVybiBtYXAoJmJsb2NrKS50b19oIGlmIGJsb2NrX2dpdmVuP1xuXG4gICAgJXh7XG4gICAgICBpZiAoc2VsZi4kJGNsYXNzID09PSBPcGFsLkhhc2gpIHtcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICB9XG5cbiAgICAgIHZhciBoYXNoID0gbmV3IE9wYWwuSGFzaCgpO1xuXG4gICAgICAkaGFzaF9pbml0KGhhc2gpO1xuICAgICAgT3BhbC5oYXNoX2Nsb25lKHNlbGYsIGhhc2gpO1xuXG4gICAgICByZXR1cm4gaGFzaDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiB0b19oYXNoXG4gICAgc2VsZlxuICBlbmRcblxuICBkZWYgdG9fcHJvY1xuICAgIHByb2MgZG8gfGtleSA9IHVuZGVmaW5lZHxcbiAgICAgICV4e1xuICAgICAgICBpZiAoa2V5ID09IG51bGwpIHtcbiAgICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgJ25vIGtleSBnaXZlbid9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc2VsZltrZXldXG4gICAgZW5kXG4gIGVuZFxuXG4gIGRlZiB0cmFuc2Zvcm1fa2V5cygmYmxvY2spXG4gICAgcmV0dXJuIGVudW1fZm9yKDp0cmFuc2Zvcm1fa2V5cykgeyBzaXplIH0gdW5sZXNzIGJsb2NrXG5cbiAgICAleHtcbiAgICAgIHZhciByZXN1bHQgPSAkaGFzaCgpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwga2V5cyA9IHNlbGYuJCRrZXlzLCBsZW5ndGggPSBrZXlzLmxlbmd0aCwga2V5LCB2YWx1ZTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGtleSA9IGtleXNbaV07XG5cbiAgICAgICAgaWYgKGtleS4kJGlzX3N0cmluZykge1xuICAgICAgICAgIHZhbHVlID0gc2VsZi4kJHNtYXBba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZSA9IGtleS52YWx1ZTtcbiAgICAgICAgICBrZXkgPSBrZXkua2V5O1xuICAgICAgICB9XG5cbiAgICAgICAga2V5ID0gJHlpZWxkMShibG9jaywga2V5KTtcblxuICAgICAgICAkaGFzaF9wdXQocmVzdWx0LCBrZXksIHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiB0cmFuc2Zvcm1fa2V5cyEoJmJsb2NrKVxuICAgIHJldHVybiBlbnVtX2Zvcig6dHJhbnNmb3JtX2tleXMhKSB7IHNpemUgfSB1bmxlc3MgYmxvY2tcblxuICAgICV4e1xuICAgICAgJGRlbnlfZnJvemVuX2FjY2VzcyhzZWxmKTtcblxuICAgICAgdmFyIGtleXMgPSBPcGFsLnNsaWNlLmNhbGwoc2VsZi4kJGtleXMpLFxuICAgICAgICAgIGksIGxlbmd0aCA9IGtleXMubGVuZ3RoLCBrZXksIHZhbHVlLCBuZXdfa2V5O1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAga2V5ID0ga2V5c1tpXTtcblxuICAgICAgICBpZiAoa2V5LiQkaXNfc3RyaW5nKSB7XG4gICAgICAgICAgdmFsdWUgPSBzZWxmLiQkc21hcFtrZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlID0ga2V5LnZhbHVlO1xuICAgICAgICAgIGtleSA9IGtleS5rZXk7XG4gICAgICAgIH1cblxuICAgICAgICBuZXdfa2V5ID0gJHlpZWxkMShibG9jaywga2V5KTtcblxuICAgICAgICAkaGFzaF9kZWxldGUoc2VsZiwga2V5KTtcbiAgICAgICAgJGhhc2hfcHV0KHNlbGYsIG5ld19rZXksIHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfVxuICBlbmRcblxuICBkZWYgdHJhbnNmb3JtX3ZhbHVlcygmYmxvY2spXG4gICAgcmV0dXJuIGVudW1fZm9yKDp0cmFuc2Zvcm1fdmFsdWVzKSB7IHNpemUgfSB1bmxlc3MgYmxvY2tcblxuICAgICV4e1xuICAgICAgdmFyIHJlc3VsdCA9ICRoYXNoKCk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBrZXlzID0gc2VsZi4kJGtleXMsIGxlbmd0aCA9IGtleXMubGVuZ3RoLCBrZXksIHZhbHVlOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAga2V5ID0ga2V5c1tpXTtcblxuICAgICAgICBpZiAoa2V5LiQkaXNfc3RyaW5nKSB7XG4gICAgICAgICAgdmFsdWUgPSBzZWxmLiQkc21hcFtrZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlID0ga2V5LnZhbHVlO1xuICAgICAgICAgIGtleSA9IGtleS5rZXk7XG4gICAgICAgIH1cblxuICAgICAgICB2YWx1ZSA9ICR5aWVsZDEoYmxvY2ssIHZhbHVlKTtcblxuICAgICAgICAkaGFzaF9wdXQocmVzdWx0LCBrZXksIHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiB0cmFuc2Zvcm1fdmFsdWVzISgmYmxvY2spXG4gICAgcmV0dXJuIGVudW1fZm9yKDp0cmFuc2Zvcm1fdmFsdWVzISkgeyBzaXplIH0gdW5sZXNzIGJsb2NrXG5cbiAgICAleHtcbiAgICAgICRkZW55X2Zyb3plbl9hY2Nlc3Moc2VsZik7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBrZXlzID0gc2VsZi4kJGtleXMsIGxlbmd0aCA9IGtleXMubGVuZ3RoLCBrZXksIHZhbHVlOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAga2V5ID0ga2V5c1tpXTtcblxuICAgICAgICBpZiAoa2V5LiQkaXNfc3RyaW5nKSB7XG4gICAgICAgICAgdmFsdWUgPSBzZWxmLiQkc21hcFtrZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlID0ga2V5LnZhbHVlO1xuICAgICAgICAgIGtleSA9IGtleS5rZXk7XG4gICAgICAgIH1cblxuICAgICAgICB2YWx1ZSA9ICR5aWVsZDEoYmxvY2ssIHZhbHVlKTtcblxuICAgICAgICAkaGFzaF9wdXQoc2VsZiwga2V5LCB2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIHZhbHVlc1xuICAgICV4e1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwga2V5cyA9IHNlbGYuJCRrZXlzLCBsZW5ndGggPSBrZXlzLmxlbmd0aCwga2V5OyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAga2V5ID0ga2V5c1tpXTtcblxuICAgICAgICBpZiAoa2V5LiQkaXNfc3RyaW5nKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goc2VsZi4kJHNtYXBba2V5XSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgZW5kXG5cbiAgYWxpYXMgZHVwIGNsb25lXG4gIGFsaWFzIGVhY2hfcGFpciBlYWNoXG4gIGFsaWFzIGVxbD8gPT1cbiAgYWxpYXMgZmlsdGVyIHNlbGVjdFxuICBhbGlhcyBmaWx0ZXIhIHNlbGVjdCFcbiAgYWxpYXMgaW5jbHVkZT8gaGFzX2tleT9cbiAgYWxpYXMgaW5kaWNlcyBpbmRleGVzXG4gIGFsaWFzIGtleSBpbmRleFxuICBhbGlhcyBrZXk/IGhhc19rZXk/XG4gIGFsaWFzIG1lbWJlcj8gaGFzX2tleT9cbiAgYWxpYXMgc2l6ZSBsZW5ndGhcbiAgYWxpYXMgc3RvcmUgW109XG4gIGFsaWFzIHRvX3MgaW5zcGVjdFxuICBhbGlhcyB1cGRhdGUgbWVyZ2UhXG4gIGFsaWFzIHZhbHVlPyBoYXNfdmFsdWU/XG4gIGFsaWFzIHZhbHVlc19hdCBpbmRleGVzXG5lbmRcbiJdLCJuYW1lcyI6WyI8dG9wIChyZXF1aXJlZCk+Iiwic2VsZiIsInJlcXVpcmUiLCI8Y2xhc3M6SGFzaD4iLCJpbmNsdWRlIiwiRW51bWVyYWJsZSIsIltdIiwiT3BhbCIsImNvZXJjZV90bz8iLCJhcmd2IiwiMCIsIkhhc2giLCJhbGxvY2F0ZSIsIm1lcmdlISIsIkFycmF5IiwiS2VybmVsIiwicmFpc2UiLCJBcmd1bWVudEVycm9yIiwidHJ5X2NvbnZlcnQiLCJvYmoiLCJpbml0aWFsaXplIiwiZGVmYXVsdHMiLCI9PSIsIm90aGVyIiwiPj0iLCJjb2VyY2VfdG8hIiwicmVzdWx0IiwiZWFjaCIsImJsb2NrIGluID49Iiwib3RoZXJfa2V5Iiwib3RoZXJfdmFsIiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiA+PSIsInZhbCIsImZldGNoIiwiPiIsIjwiLCI8PSIsImtleSIsIltdPSIsInZhbHVlIiwiYXNzb2MiLCJvYmplY3QiLCJjbGVhciIsImNsb25lIiwiY29tcGFjdCIsImNvbXBhY3QhIiwiY29tcGFyZV9ieV9pZGVudGl0eSIsImNvbXBhcmVfYnlfaWRlbnRpdHk/IiwiZGVmYXVsdCIsImRlZmF1bHQ9IiwiZGVmYXVsdF9wcm9jIiwiZGVmYXVsdF9wcm9jPSIsIlByb2MiLCJsYW1iZGE/IiwiYXJpdHkiLCJhYnMiLCJUeXBlRXJyb3IiLCJkZWxldGUiLCJkZWxldGVfaWYiLCJibG9jayIsImVudW1fZm9yIiwiYmxvY2sgaW4gZGVsZXRlX2lmIiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiBkZWxldGVfaWYiLCJzaXplIiwiZGlnIiwiaXRlbSIsInJlc3BvbmRfdG8/IiwiY2xhc3MiLCJrZXlzIiwiYmxvY2sgaW4gZWFjaCIsImJsb2NrICgyIGxldmVscykgaW4gZWFjaCIsImVhY2hfa2V5IiwiYmxvY2sgaW4gZWFjaF9rZXkiLCJibG9jayAoMiBsZXZlbHMpIGluIGVhY2hfa2V5IiwiZWFjaF92YWx1ZSIsImJsb2NrIGluIGVhY2hfdmFsdWUiLCJibG9jayAoMiBsZXZlbHMpIGluIGVhY2hfdmFsdWUiLCJlbXB0eT8iLCJleGNlcHQiLCJleGNlcHQhIiwiZHVwIiwiYmxvY2sgaW4gZXhjZXB0ISIsImJsb2NrICgyIGxldmVscykgaW4gZXhjZXB0ISIsIktleUVycm9yIiwibmV3IiwiaW5zcGVjdCIsImZldGNoX3ZhbHVlcyIsIm1hcCIsImJsb2NrIGluIGZldGNoX3ZhbHVlcyIsImJsb2NrICgyIGxldmVscykgaW4gZmV0Y2hfdmFsdWVzIiwidG9fcHJvYyIsImZsYXR0ZW4iLCJsZXZlbCIsIjEiLCJJbnRlZ2VyIiwiZnJlZXplIiwiZnJvemVuPyIsImhhc19rZXk/IiwiaGFzX3ZhbHVlPyIsImhhc2giLCJlcWw/IiwiaW5kZXgiLCJpbmRleGVzIiwiaW52ZXJ0Iiwia2VlcF9pZiIsImJsb2NrIGluIGtlZXBfaWYiLCJibG9jayAoMiBsZXZlbHMpIGluIGtlZXBfaWYiLCJsZW5ndGgiLCJtZXJnZSIsIm90aGVycyIsInJhc3NvYyIsInJlaGFzaCIsInJlamVjdCIsImJsb2NrIGluIHJlamVjdCIsImJsb2NrICgyIGxldmVscykgaW4gcmVqZWN0IiwicmVqZWN0ISIsImJsb2NrIGluIHJlamVjdCEiLCJibG9jayAoMiBsZXZlbHMpIGluIHJlamVjdCEiLCJyZXBsYWNlIiwic2VsZWN0IiwiYmxvY2sgaW4gc2VsZWN0IiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiBzZWxlY3QiLCJzZWxlY3QhIiwiYmxvY2sgaW4gc2VsZWN0ISIsImJsb2NrICgyIGxldmVscykgaW4gc2VsZWN0ISIsInNoaWZ0Iiwic2xpY2UiLCJ0b19hIiwidG9faCIsImJsb2NrX2dpdmVuPyIsInRvX2hhc2giLCJwcm9jIiwiYmxvY2sgaW4gdG9fcHJvYyIsImJsb2NrICgyIGxldmVscykgaW4gdG9fcHJvYyIsInRyYW5zZm9ybV9rZXlzIiwiYmxvY2sgaW4gdHJhbnNmb3JtX2tleXMiLCJibG9jayAoMiBsZXZlbHMpIGluIHRyYW5zZm9ybV9rZXlzIiwidHJhbnNmb3JtX2tleXMhIiwiYmxvY2sgaW4gdHJhbnNmb3JtX2tleXMhIiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiB0cmFuc2Zvcm1fa2V5cyEiLCJ0cmFuc2Zvcm1fdmFsdWVzIiwiYmxvY2sgaW4gdHJhbnNmb3JtX3ZhbHVlcyIsImJsb2NrICgyIGxldmVscykgaW4gdHJhbnNmb3JtX3ZhbHVlcyIsInRyYW5zZm9ybV92YWx1ZXMhIiwiYmxvY2sgaW4gdHJhbnNmb3JtX3ZhbHVlcyEiLCJibG9jayAoMiBsZXZlbHMpIGluIHRyYW5zZm9ybV92YWx1ZXMhIiwidmFsdWVzIl0sIm1hcHBpbmdzIjoiQUFBQUEsK0JBQUFBLGdCQUFBQTtFQUFBQTs7RUFBQUE7O0VBRUFDLElBQUFDLFNBQUFBLENBQVFGLG9CQUFSRTtFQVVBRixPQUFBRztFQUFBQTs7SUFBQUE7OztJQUNFRixJQUFBRyxTQUFBQSxDQUFRQ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290IjoiIiwic291cmNlcyI6WyJjb3JlbGliL251bWVyaWMucmIiXSwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSAnY29yZWxpYi9jb21wYXJhYmxlJ1xuXG5jbGFzcyA6Ok51bWVyaWNcbiAgaW5jbHVkZSA6OkNvbXBhcmFibGVcblxuICBkZWYgY29lcmNlKG90aGVyKVxuICAgIGlmIG90aGVyLmluc3RhbmNlX29mPyBzZWxmLmNsYXNzXG4gICAgICByZXR1cm4gW290aGVyLCBzZWxmXVxuICAgIGVuZFxuXG4gICAgWzo6S2VybmVsLkZsb2F0KG90aGVyKSwgOjpLZXJuZWwuRmxvYXQoc2VsZildXG4gIGVuZFxuXG4gIGRlZiBfX2NvZXJjZWRfXyhtZXRob2QsIG90aGVyKVxuICAgIGlmIG90aGVyLnJlc3BvbmRfdG8/KDpjb2VyY2UpXG4gICAgICBhLCBiID0gb3RoZXIuY29lcmNlKHNlbGYpXG4gICAgICBhLl9fc2VuZF9fIG1ldGhvZCwgYlxuICAgIGVsc2VcbiAgICAgIGNhc2UgbWV0aG9kXG4gICAgICB3aGVuIDorLCA6LSwgOiosIDovLCA6JSwgOiYsIDp8LCA6XiwgOioqXG4gICAgICAgIDo6S2VybmVsLnJhaXNlIDo6VHlwZUVycm9yLCBcIiN7b3RoZXIuY2xhc3N9IGNhbid0IGJlIGNvZXJjZWQgaW50byBOdW1lcmljXCJcbiAgICAgIHdoZW4gOj4sIDo+PSwgOjwsIDo8PSwgOjw9PlxuICAgICAgICA6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsIFwiY29tcGFyaXNvbiBvZiAje3NlbGYuY2xhc3N9IHdpdGggI3tvdGhlci5jbGFzc30gZmFpbGVkXCJcbiAgICAgIGVuZFxuICAgIGVuZFxuICBlbmRcblxuICBkZWYgPD0+KG90aGVyKVxuICAgIGlmIGVxdWFsPyBvdGhlclxuICAgICAgcmV0dXJuIDBcbiAgICBlbmRcblxuICAgIG5pbFxuICBlbmRcblxuICBkZWYgK0BcbiAgICBzZWxmXG4gIGVuZFxuXG4gIGRlZiAtQFxuICAgIDAgLSBzZWxmXG4gIGVuZFxuXG4gIGRlZiAlKG90aGVyKVxuICAgIHNlbGYgLSBvdGhlciAqIGRpdihvdGhlcilcbiAgZW5kXG5cbiAgZGVmIGFic1xuICAgIHNlbGYgPCAwID8gLXNlbGYgOiBzZWxmXG4gIGVuZFxuXG4gIGRlZiBhYnMyXG4gICAgc2VsZiAqIHNlbGZcbiAgZW5kXG5cbiAgZGVmIGFuZ2xlXG4gICAgc2VsZiA8IDAgPyA6Ok1hdGg6OlBJIDogMFxuICBlbmRcblxuICBkZWYgY2VpbChuZGlnaXRzID0gMClcbiAgICB0b19mLmNlaWwobmRpZ2l0cylcbiAgZW5kXG5cbiAgZGVmIGNvbmpcbiAgICBzZWxmXG4gIGVuZFxuXG4gIGRlZiBkZW5vbWluYXRvclxuICAgIHRvX3IuZGVub21pbmF0b3JcbiAgZW5kXG5cbiAgZGVmIGRpdihvdGhlcilcbiAgICA6Oktlcm5lbC5yYWlzZSA6Olplcm9EaXZpc2lvbkVycm9yLCAnZGl2aWRlZCBieSBvJyBpZiBvdGhlciA9PSAwXG5cbiAgICAoc2VsZiAvIG90aGVyKS5mbG9vclxuICBlbmRcblxuICBkZWYgZGl2bW9kKG90aGVyKVxuICAgIFtkaXYob3RoZXIpLCBzZWxmICUgb3RoZXJdXG4gIGVuZFxuXG4gIGRlZiBmZGl2KG90aGVyKVxuICAgIHRvX2YgLyBvdGhlclxuICBlbmRcblxuICBkZWYgZmxvb3IobmRpZ2l0cyA9IDApXG4gICAgdG9fZi5mbG9vcihuZGlnaXRzKVxuICBlbmRcblxuICBkZWYgaVxuICAgIDo6S2VybmVsLkNvbXBsZXgoMCwgc2VsZilcbiAgZW5kXG5cbiAgZGVmIGltYWdcbiAgICAwXG4gIGVuZFxuXG4gIGRlZiBpbnRlZ2VyP1xuICAgIGZhbHNlXG4gIGVuZFxuXG4gIGRlZiBub256ZXJvP1xuICAgIHplcm8/ID8gbmlsIDogc2VsZlxuICBlbmRcblxuICBkZWYgbnVtZXJhdG9yXG4gICAgdG9fci5udW1lcmF0b3JcbiAgZW5kXG5cbiAgZGVmIHBvbGFyXG4gICAgW2FicywgYXJnXVxuICBlbmRcblxuICBkZWYgcXVvKG90aGVyKVxuICAgIDo6T3BhbC5jb2VyY2VfdG8hKHNlbGYsIDo6UmF0aW9uYWwsIDp0b19yKSAvIG90aGVyXG4gIGVuZFxuXG4gIGRlZiByZWFsXG4gICAgc2VsZlxuICBlbmRcblxuICBkZWYgcmVhbD9cbiAgICB0cnVlXG4gIGVuZFxuXG4gIGRlZiByZWN0XG4gICAgW3NlbGYsIDBdXG4gIGVuZFxuXG4gIGRlZiByb3VuZChkaWdpdHMgPSB1bmRlZmluZWQpXG4gICAgdG9fZi5yb3VuZChkaWdpdHMpXG4gIGVuZFxuXG4gIGRlZiBzdGVwKGxpbWl0ID0gdW5kZWZpbmVkLCBzdGVwID0gdW5kZWZpbmVkLCB0bzogdW5kZWZpbmVkLCBieTogdW5kZWZpbmVkLCAmYmxvY2spXG4gICAgJXh7XG4gICAgICBpZiAobGltaXQgIT09IHVuZGVmaW5lZCAmJiB0byAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCAndG8gaXMgZ2l2ZW4gdHdpY2UnfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3RlcCAhPT0gdW5kZWZpbmVkICYmIGJ5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsICdzdGVwIGlzIGdpdmVuIHR3aWNlJ31cbiAgICAgIH1cblxuICAgICAgaWYgKHRvICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGltaXQgPSB0bztcbiAgICAgIH1cblxuICAgICAgaWYgKGJ5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc3RlcCA9IGJ5O1xuICAgICAgfVxuXG4gICAgICBpZiAobGltaXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsaW1pdCA9IG5pbDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdmFsaWRhdGVQYXJhbWV0ZXJzKCkge1xuICAgICAgICBpZiAoc3RlcCA9PT0gbmlsKSB7XG4gICAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OlR5cGVFcnJvciwgJ3N0ZXAgbXVzdCBiZSBudW1lcmljJ31cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGVwICE9IG51bGwgJiYgI3tzdGVwID09IDB9KSB7XG4gICAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsIFwic3RlcCBjYW4ndCBiZSAwXCJ9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RlcCA9PT0gbmlsIHx8IHN0ZXAgPT0gbnVsbCkge1xuICAgICAgICAgIHN0ZXAgPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNpZ24gPSAje3N0ZXAgPD0+IDB9O1xuXG4gICAgICAgIGlmIChzaWduID09PSBuaWwpIHtcbiAgICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgXCIwIGNhbid0IGJlIGNvZXJjZWQgaW50byAje3N0ZXAuY2xhc3N9XCJ9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGltaXQgPT09IG5pbCB8fCBsaW1pdCA9PSBudWxsKSB7XG4gICAgICAgICAgbGltaXQgPSBzaWduID4gMCA/ICN7OjpGbG9hdDo6SU5GSU5JVFl9IDogI3stOjpGbG9hdDo6SU5GSU5JVFl9O1xuICAgICAgICB9XG5cbiAgICAgICAgI3s6Ok9wYWwuY29tcGFyZShzZWxmLCBsaW1pdCl9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHN0ZXBGbG9hdFNpemUoKSB7XG4gICAgICAgIGlmICgoc3RlcCA+IDAgJiYgc2VsZiA+IGxpbWl0KSB8fCAoc3RlcCA8IDAgJiYgc2VsZiA8IGxpbWl0KSkge1xuICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9IGVsc2UgaWYgKHN0ZXAgPT09IEluZmluaXR5IHx8IHN0ZXAgPT09IC1JbmZpbml0eSkge1xuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBhYnMgPSBNYXRoLmFicywgZmxvb3IgPSBNYXRoLmZsb29yLFxuICAgICAgICAgICAgICBlcnIgPSAoYWJzKHNlbGYpICsgYWJzKGxpbWl0KSArIGFicyhsaW1pdCAtIHNlbGYpKSAvIGFicyhzdGVwKSAqICN7OjpGbG9hdDo6RVBTSUxPTn07XG5cbiAgICAgICAgICBpZiAoZXJyID09PSBJbmZpbml0eSB8fCBlcnIgPT09IC1JbmZpbml0eSkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChlcnIgPiAwLjUpIHtcbiAgICAgICAgICAgICAgZXJyID0gMC41O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZmxvb3IoKGxpbWl0IC0gc2VsZikgLyBzdGVwICsgZXJyKSArIDFcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc3RlcFNpemUoKSB7XG4gICAgICAgIHZhbGlkYXRlUGFyYW1ldGVycygpO1xuXG4gICAgICAgIGlmIChzdGVwID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIEluZmluaXR5O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0ZXAgJSAxICE9PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIHN0ZXBGbG9hdFNpemUoKTtcbiAgICAgICAgfSBlbHNlIGlmICgoc3RlcCA+IDAgJiYgc2VsZiA+IGxpbWl0KSB8fCAoc3RlcCA8IDAgJiYgc2VsZiA8IGxpbWl0KSkge1xuICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBjZWlsID0gTWF0aC5jZWlsLCBhYnMgPSBNYXRoLmFicyxcbiAgICAgICAgICAgICAgbGhzID0gYWJzKHNlbGYgLSBsaW1pdCkgKyAxLFxuICAgICAgICAgICAgICByaHMgPSBhYnMoc3RlcCk7XG5cbiAgICAgICAgICByZXR1cm4gY2VpbChsaHMgLyByaHMpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICB9XG5cbiAgICB1bmxlc3MgYmxvY2tfZ2l2ZW4/XG4gICAgICBpZiAoIWxpbWl0IHx8IGxpbWl0LmlzX2E/KDo6TnVtZXJpYykpICYmXG4gICAgICAgICAoIXN0ZXAgfHwgc3RlcC5pc19hPyg6Ok51bWVyaWMpKVxuXG4gICAgICAgIHJldHVybiA6OkVudW1lcmF0b3I6OkFyaXRobWV0aWNTZXF1ZW5jZS5uZXcoXG4gICAgICAgICAgW2xpbWl0LCBzdGVwLCAoJ3RvOiAnIGlmIHRvKSwgKCdieTogJyBpZiBieSldLCBzZWxmXG4gICAgICAgIClcbiAgICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIGVudW1fZm9yKDpzdGVwLCBsaW1pdCwgc3RlcCwgJmBzdGVwU2l6ZWApXG4gICAgICBlbmRcbiAgICBlbmRcblxuICAgICV4e1xuICAgICAgdmFsaWRhdGVQYXJhbWV0ZXJzKCk7XG5cbiAgICAgIHZhciBpc0Rlc2MgPSAje3N0ZXAubmVnYXRpdmU/fSxcbiAgICAgICAgICBpc0luZiA9ICN7c3RlcCA9PSAwfSB8fFxuICAgICAgICAgICAgICAgICAgKGxpbWl0ID09PSBJbmZpbml0eSAmJiAhaXNEZXNjKSB8fFxuICAgICAgICAgICAgICAgICAgKGxpbWl0ID09PSAtSW5maW5pdHkgJiYgaXNEZXNjKTtcblxuICAgICAgaWYgKHNlbGYuJCRpc19udW1iZXIgJiYgc3RlcC4kJGlzX251bWJlciAmJiBsaW1pdC4kJGlzX251bWJlcikge1xuICAgICAgICBpZiAoc2VsZiAlIDEgPT09IDAgJiYgKGlzSW5mIHx8IGxpbWl0ICUgMSA9PT0gMCkgJiYgc3RlcCAlIDEgPT09IDApIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBzZWxmO1xuXG4gICAgICAgICAgaWYgKGlzSW5mKSB7XG4gICAgICAgICAgICBmb3IgKDs7IHZhbHVlICs9IHN0ZXApIHtcbiAgICAgICAgICAgICAgYmxvY2sodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoaXNEZXNjKSB7XG4gICAgICAgICAgICBmb3IgKDsgdmFsdWUgPj0gbGltaXQ7IHZhbHVlICs9IHN0ZXApIHtcbiAgICAgICAgICAgICAgYmxvY2sodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKDsgdmFsdWUgPD0gbGltaXQ7IHZhbHVlICs9IHN0ZXApIHtcbiAgICAgICAgICAgICAgYmxvY2sodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBzZWxmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBiZWdpbiA9ICN7dG9fZn0udmFsdWVPZigpO1xuICAgICAgICAgIHN0ZXAgPSAje3N0ZXAudG9fZn0udmFsdWVPZigpO1xuICAgICAgICAgIGxpbWl0ID0gI3tsaW1pdC50b19mfS52YWx1ZU9mKCk7XG5cbiAgICAgICAgICB2YXIgbiA9IHN0ZXBGbG9hdFNpemUoKTtcblxuICAgICAgICAgIGlmICghaXNGaW5pdGUoc3RlcCkpIHtcbiAgICAgICAgICAgIGlmIChuICE9PSAwKSBibG9jayhiZWdpbik7XG4gICAgICAgICAgfSBlbHNlIGlmIChzdGVwID09PSAwKSB7XG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICBibG9jayhiZWdpbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICAgIHZhciBkID0gaSAqIHN0ZXAgKyBzZWxmO1xuICAgICAgICAgICAgICBpZiAoc3RlcCA+PSAwID8gbGltaXQgPCBkIDogbGltaXQgPiBkKSB7XG4gICAgICAgICAgICAgICAgZCA9IGxpbWl0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJsb2NrKGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBzZWxmO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgY291bnRlciA9IHNlbGZcblxuICAgIHdoaWxlIGBpc0Rlc2MgPyAje2NvdW50ZXIgPj0gbGltaXR9IDogI3tjb3VudGVyIDw9IGxpbWl0fWBcbiAgICAgIHlpZWxkIGNvdW50ZXJcbiAgICAgIGNvdW50ZXIgKz0gc3RlcFxuICAgIGVuZFxuICBlbmRcblxuICBkZWYgdG9fY1xuICAgIDo6S2VybmVsLkNvbXBsZXgoc2VsZiwgMClcbiAgZW5kXG5cbiAgZGVmIHRvX2ludFxuICAgIHRvX2lcbiAgZW5kXG5cbiAgZGVmIHRydW5jYXRlKG5kaWdpdHMgPSAwKVxuICAgIHRvX2YudHJ1bmNhdGUobmRpZ2l0cylcbiAgZW5kXG5cbiAgZGVmIHplcm8/XG4gICAgc2VsZiA9PSAwXG4gIGVuZFxuXG4gIGRlZiBwb3NpdGl2ZT9cbiAgICBzZWxmID4gMFxuICBlbmRcblxuICBkZWYgbmVnYXRpdmU/XG4gICAgc2VsZiA8IDBcbiAgZW5kXG5cbiAgZGVmIGR1cFxuICAgIHNlbGZcbiAgZW5kXG5cbiAgZGVmIGNsb25lKGZyZWV6ZTogdHJ1ZSlcbiAgICBzZWxmXG4gIGVuZFxuXG4gIGRlZiBmaW5pdGU/XG4gICAgdHJ1ZVxuICBlbmRcblxuICBkZWYgaW5maW5pdGU/XG4gICAgbmlsXG4gIGVuZFxuXG4gIGFsaWFzIGFyZyBhbmdsZVxuICBhbGlhcyBjb25qdWdhdGUgY29ualxuICBhbGlhcyBpbWFnaW5hcnkgaW1hZ1xuICBhbGlhcyBtYWduaXR1ZGUgYWJzXG4gIGFsaWFzIG1vZHVsbyAlXG4gIGFsaWFzIHBoYXNlIGFyZ1xuICBhbGlhcyByZWN0YW5ndWxhciByZWN0XG5lbmRcbiJdLCJuYW1lcyI6WyI8dG9wIChyZXF1aXJlZCk+Iiwic2VsZiIsInJlcXVpcmUiLCI8Y2xhc3M6TnVtZXJpYz4iLCJpbmNsdWRlIiwiQ29tcGFyYWJsZSIsImNvZXJjZSIsIm90aGVyIiwiaW5zdGFuY2Vfb2Y/IiwiY2xhc3MiLCJLZXJuZWwiLCJGbG9hdCIsIl9fY29lcmNlZF9fIiwibWV0aG9kIiwicmVzcG9uZF90bz8iLCJhIiwiYiIsIl9fc2VuZF9fIiwicmFpc2UiLCJUeXBlRXJyb3IiLCJBcmd1bWVudEVycm9yIiwiPD0+IiwiZXF1YWw/IiwiMCIsIitAIiwiLUAiLCItIiwiJSIsIioiLCJkaXYiLCJhYnMiLCI8IiwiYWJzMiIsImFuZ2xlIiwiTWF0aDo6UEkiLCJNYXRoIiwiY2VpbCIsIm5kaWdpdHMiLCJ0b19mIiwiY29uaiIsImRlbm9taW5hdG9yIiwidG9fciIsIlplcm9EaXZpc2lvbkVycm9yIiwiLyIsImZsb29yIiwiZGl2bW9kIiwiZmRpdiIsImkiLCJDb21wbGV4IiwiaW1hZyIsImludGVnZXI/Iiwibm9uemVybz8iLCJ6ZXJvPyIsIm51bWVyYXRvciIsInBvbGFyIiwiYXJnIiwicXVvIiwiT3BhbCIsImNvZXJjZV90byEiLCJSYXRpb25hbCIsInJlYWwiLCJyZWFsPyIsInJlY3QiLCJyb3VuZCIsImRpZ2l0cyIsInN0ZXAiLCI9PSIsIkZsb2F0OjpJTkZJTklUWSIsImNvbXBhcmUiLCJsaW1pdCIsIkZsb2F0OjpFUFNJTE9OIiwiYmxvY2tfZ2l2ZW4/IiwiaXNfYT8iLCJOdW1lcmljIiwiRW51bWVyYXRvcjo6QXJpdGhtZXRpY1NlcXVlbmNlIiwiRW51bWVyYXRvciIsIm5ldyIsInRvIiwiYnkiLCJlbnVtX2ZvciIsInRvX3Byb2MiLCJuZWdhdGl2ZT8iLCJjb3VudGVyIiwiPj0iLCI8PSIsIisiLCJ0b19jIiwidG9faW50IiwidG9faSIsInRydW5jYXRlIiwicG9zaXRpdmU/IiwiPiIsImR1cCIsImNsb25lIiwiJGt3YXJncyIsImZpbml0ZT8iLCJpbmZpbml0ZT8iXSwibWFwcGluZ3MiOiJBQUFBQSxrQ0FBQUEsZ0JBQUFBO0VBQUFBOztFQUFBQTs7RUFBQUMsSUFBQUMsU0FBQUEsQ0FBUUYsb0JBQVJFO0VBRUFGLE9BQUFHO0VBQUFBOzs7O0lBQ0VGLElBQUFHLFNBQUFBLENBQVFDLGlCQUFSRDs7QUFFQUUsSUFBQUEsc0JBQUFBLGtCQUFXQyxLQUFYRDtBQUFBQSxNQUFBQTs7O01BQ0UsSUFBQSxRQUFHQyxLQUFLQyxpQkFBQUEsQ0FBY1AsSUFBSVEsT0FBQUEsQ0FBQUEsQ0FBbEJELENBQVIsQ0FBQTtRQ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E1BQUFBLENBQUFBLENBQUltRCxVQUFBQSxDQUFVcEQsT0FBVm9EO0lBRE5BLENBQUFBLElBQUFBOztBQUlBckMsSUFBQUEscUJBQUFBLDhCQUFBQTtBQUFBQSxNQUFBQTs7TUFDRUEsT0FBQW5ELElBQUtpRSxPQUFBQSxDQUFHM0MsQ0FBSDJDO0lBRFBkLENBQUFBLEdBQUFBOztBQUlBc0MsSUFBQUEseUJBQUFBLGtDQUFBQTtBQUFBQSxNQUFBQTs7TUFDRUEsT0FBS0MsT0FBTDFGLElBQUswRixFQUFFcEUsQ0FBRm9FO0lBRFBELENBQUFBLEdBQUFBOztBQUlBVCxJQUFBQSx5QkFBQUEsa0NBQUFBO0FBQUFBLE1BQUFBOztNQUNFQSxPQUFLbEQsT0FBTDlCLElBQUs4QixFQUFFUixDQUFGUTtJQURQa0QsQ0FBQUEsR0FBQUE7O0FBSUFXLElBQUFBLG1CQUFBQSxZQUFBQSxHQUFBQTs7QUFJQUMsSUFBQUEscUJBQUFBLGlCQXZVRkMsT0F1VUVEO0FBQUFBLE1BQUFBOzs7TUF2VUY7O01BdVVZLGtDQUFBLDZCQUFRO01BQ2hCQSxPQUFBNUY7SUFERjRGLENBQUFBLElBQUFBOztBQUlBRSxJQUFBQSx1QkFBQUEsWUFDRSxJQURGQSxDQUFBQSxHQUFBQTs7QUFJQUMsSUFBQUEseUJBQUFBLFlBQ0UsR0FERkEsQ0FBQUEsR0FBQUE7SUFJQSxhQUFNLEtBQU4sRUFBVSxPQUFWO0lBQ0EsYUFBTSxXQUFOLEVBQWdCLE1BQWhCO0lBQ0EsYUFBTSxXQUFOLEVBQWdCLE1BQWhCO0lBQ0EsYUFBTSxXQUFOLEVBQWdCLEtBQWhCO0lBQ0EsYUFBTSxRQUFOLEVBQWEsR0FBYjtJQUNBLGFBQU0sT0FBTixFQUFZLEtBQVo7SUFDQTdGLE9BQUEsYUFBTSxhQUFOLEVBQWtCLE1BQWxCO0VBdlZGQSxHQUFNLElBQU5BLEVBQUFBLElBQUFBO0FBRkFIOyJ9fSx7Im9mZnNldCI6eyJsaW5lIjoxNzU4NiwiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvcmVsaWIvZW51bWVyYXRvci5yYiJdLCJzb3VyY2VzQ29udGVudCI6WyIjIGhlbHBlcnM6IHNsaWNlLCBjb2VyY2VfdG8sIGRlbnlfZnJvemVuX2FjY2Vzc1xuXG5yZXF1aXJlICdjb3JlbGliL2VudW1lcmFibGUnXG5cbmNsYXNzIDo6RW51bWVyYXRvclxuICBpbmNsdWRlIDo6RW51bWVyYWJsZVxuXG4gIGBzZWxmLiQkcHJvdG90eXBlLiQkaXNfZW51bWVyYXRvciA9IHRydWVgXG5cbiAgZGVmIHNlbGYuZm9yKG9iamVjdCwgbWV0aG9kID0gOmVhY2gsICphcmdzLCAmYmxvY2spXG4gICAgJXh7XG4gICAgICB2YXIgb2JqID0gI3thbGxvY2F0ZX07XG5cbiAgICAgIG9iai5vYmplY3QgPSBvYmplY3Q7XG4gICAgICBvYmouc2l6ZSAgID0gYmxvY2s7XG4gICAgICBvYmoubWV0aG9kID0gbWV0aG9kO1xuICAgICAgb2JqLmFyZ3MgICA9IGFyZ3M7XG4gICAgICBvYmouY3Vyc29yID0gMDtcblxuICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBpbml0aWFsaXplKCosICZibG9jaylcbiAgICBgJGRlbnlfZnJvemVuX2FjY2VzcyhzZWxmKWBcblxuICAgIEBjdXJzb3IgPSAwXG4gICAgaWYgYmxvY2tcbiAgICAgIEBvYmplY3QgPSBHZW5lcmF0b3IubmV3KCZibG9jaylcbiAgICAgIEBtZXRob2QgPSA6ZWFjaFxuICAgICAgQGFyZ3MgICA9IFtdXG4gICAgICBAc2l6ZSAgID0gYGFyZ3VtZW50c1swXSB8fCBuaWxgXG5cbiAgICAgIGlmIEBzaXplICYmICFAc2l6ZS5yZXNwb25kX3RvPyg6Y2FsbClcbiAgICAgICAgQHNpemUgPSBgJGNvZXJjZV90bygje0BzaXplfSwgI3s6OkludGVnZXJ9LCAndG9faW50JylgXG4gICAgICBlbmRcbiAgICBlbHNlXG4gICAgICBAb2JqZWN0ID0gYGFyZ3VtZW50c1swXWBcbiAgICAgIEBtZXRob2QgPSBgYXJndW1lbnRzWzFdIHx8IFwiZWFjaFwiYFxuICAgICAgQGFyZ3MgICA9IGAkc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpYFxuICAgICAgQHNpemUgICA9IG5pbFxuICAgIGVuZFxuICBlbmRcblxuICBkZWYgZWFjaCgqYXJncywgJmJsb2NrKVxuICAgIHJldHVybiBzZWxmIGlmIGJsb2NrLm5pbD8gJiYgYXJncy5lbXB0eT9cblxuICAgIGFyZ3MgPSBAYXJncyArIGFyZ3NcblxuICAgIHJldHVybiBzZWxmLmNsYXNzLm5ldyhAb2JqZWN0LCBAbWV0aG9kLCAqYXJncykgaWYgYmxvY2submlsP1xuXG4gICAgQG9iamVjdC5fX3NlbmRfXyhAbWV0aG9kLCAqYXJncywgJmJsb2NrKVxuICBlbmRcblxuICBkZWYgc2l6ZVxuICAgIEBzaXplLnJlc3BvbmRfdG8/KDpjYWxsKSA/IEBzaXplLmNhbGwoKkBhcmdzKSA6IEBzaXplXG4gIGVuZFxuXG4gIGRlZiB3aXRoX2luZGV4KG9mZnNldCA9IDAsICZibG9jaylcbiAgICBvZmZzZXQgPSBpZiBvZmZzZXRcbiAgICAgICAgICAgICAgIGAkY29lcmNlX3RvKG9mZnNldCwgI3s6OkludGVnZXJ9LCAndG9faW50JylgXG4gICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgIGVuZFxuXG4gICAgcmV0dXJuIGVudW1fZm9yKDp3aXRoX2luZGV4LCBvZmZzZXQpIHsgc2l6ZSB9IHVubGVzcyBibG9ja1xuXG4gICAgJXh7XG4gICAgICB2YXIgcmVzdWx0LCBpbmRleCA9IG9mZnNldDtcblxuICAgICAgc2VsZi4kZWFjaC4kJHAgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHBhcmFtID0gI3s6Ok9wYWwuZGVzdHJ1Y3R1cmUoYGFyZ3VtZW50c2ApfSxcbiAgICAgICAgICAgIHZhbHVlID0gYmxvY2socGFyYW0sIGluZGV4KTtcblxuICAgICAgICBpbmRleCsrO1xuXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGYuJGVhY2goKTtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBlYWNoX3dpdGhfaW5kZXgoJmJsb2NrKVxuICAgIHJldHVybiBlbnVtX2Zvcig6ZWFjaF93aXRoX2luZGV4KSB7IHNpemUgfSB1bmxlc3MgYmxvY2tfZ2l2ZW4/XG5cbiAgICBzdXBlclxuICAgIEBvYmplY3RcbiAgZW5kXG5cbiAgZGVmIHJld2luZFxuICAgIEBjdXJzb3IgPSAwXG5cbiAgICBzZWxmXG4gIGVuZFxuXG4gIGRlZiBwZWVrX3ZhbHVlc1xuICAgIEB2YWx1ZXMgfHw9IG1hcCB7IHwqaXwgaSB9XG4gICAgOjpLZXJuZWwucmFpc2UgOjpTdG9wSXRlcmF0aW9uLCAnaXRlcmF0aW9uIHJlYWNoZWQgYW4gZW5kJyBpZiBAY3Vyc29yID49IEB2YWx1ZXMubGVuZ3RoXG4gICAgQHZhbHVlc1tAY3Vyc29yXVxuICBlbmRcblxuICBkZWYgcGVla1xuICAgIHZhbHVlcyA9IHBlZWtfdmFsdWVzXG4gICAgdmFsdWVzLmxlbmd0aCA8PSAxID8gdmFsdWVzWzBdIDogdmFsdWVzXG4gIGVuZFxuXG4gIGRlZiBuZXh0X3ZhbHVlc1xuICAgIG91dCA9IHBlZWtfdmFsdWVzXG4gICAgQGN1cnNvciArPSAxXG4gICAgb3V0XG4gIGVuZFxuXG4gIGRlZiBuZXh0XG4gICAgdmFsdWVzID0gbmV4dF92YWx1ZXNcbiAgICB2YWx1ZXMubGVuZ3RoIDw9IDEgPyB2YWx1ZXNbMF0gOiB2YWx1ZXNcbiAgZW5kXG5cbiAgZGVmIGZlZWQoYXJnKVxuICAgIHJhaXNlIE5vdEltcGxlbWVudGVkRXJyb3IsIFwiT3BhbCBkb2Vzbid0IHN1cHBvcnQgRW51bWVyYXRvciNmZWVkXCJcbiAgZW5kXG5cbiAgZGVmICsob3RoZXIpXG4gICAgOjpFbnVtZXJhdG9yOjpDaGFpbi5uZXcoc2VsZiwgb3RoZXIpXG4gIGVuZFxuXG4gIGRlZiBpbnNwZWN0XG4gICAgcmVzdWx0ID0gXCIjPCN7c2VsZi5jbGFzc306ICN7QG9iamVjdC5pbnNwZWN0fToje0BtZXRob2R9XCJcblxuICAgIGlmIEBhcmdzLmFueT9cbiAgICAgIHJlc3VsdCArPSBcIigje0BhcmdzLmluc3BlY3RbOjpSYW5nZS5uZXcoMSwgLTIpXX0pXCJcbiAgICBlbmRcblxuICAgIHJlc3VsdCArICc+J1xuICBlbmRcblxuICBhbGlhcyB3aXRoX29iamVjdCBlYWNoX3dpdGhfb2JqZWN0XG5cbiAgYXV0b2xvYWQgOkFyaXRobWV0aWNTZXF1ZW5jZSwgJ2NvcmVsaWIvZW51bWVyYXRvci9hcml0aG1ldGljX3NlcXVlbmNlJ1xuICBhdXRvbG9hZCA6Q2hhaW4sICdjb3JlbGliL2VudW1lcmF0b3IvY2hhaW4nXG4gIGF1dG9sb2FkIDpHZW5lcmF0b3IsICdjb3JlbGliL2VudW1lcmF0b3IvZ2VuZXJhdG9yJ1xuICBhdXRvbG9hZCA6TGF6eSwgJ2NvcmVsaWIvZW51bWVyYXRvci9sYXp5J1xuICBhdXRvbG9hZCA6WWllbGRlciwgJ2NvcmVsaWIvZW51bWVyYXRvci95aWVsZGVyJ1xuZW5kXG4iXSwibmFtZXMiOlsiPHRvcCAocmVxdWlyZWQpPiIsInNlbGYiLCJyZXF1aXJlIiwiPGNsYXNzOkVudW1lcmF0b3I+IiwiaW5jbHVkZSIsIkVudW1lcmFibGUiLCJmb3IiLCJvYmplY3QiLCJhbGxvY2F0ZSIsImluaXRpYWxpemUiLCJAY3Vyc29yIiwiMCIsImJsb2NrIiwiQG9iamVjdCIsIm5ldyIsIkdlbmVyYXRvciIsInRvX3Byb2MiLCJAbWV0aG9kIiwiQGFyZ3MiLCJAc2l6ZSIsInJlc3BvbmRfdG8/IiwiSW50ZWdlciIsImVhY2giLCJuaWw/IiwiYXJncyIsImVtcHR5PyIsIisiLCJjbGFzcyIsIl9fc2VuZF9fIiwic2l6ZSIsImNhbGwiLCJ3aXRoX2luZGV4Iiwib2Zmc2V0IiwiZW51bV9mb3IiLCJibG9jayBpbiB3aXRoX2luZGV4IiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiB3aXRoX2luZGV4IiwiT3BhbCIsImRlc3RydWN0dXJlIiwiZWFjaF93aXRoX2luZGV4IiwiYmxvY2tfZ2l2ZW4/IiwiYmxvY2sgaW4gZWFjaF93aXRoX2luZGV4IiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiBlYWNoX3dpdGhfaW5kZXgiLCJyZXdpbmQiLCJwZWVrX3ZhbHVlcyIsIkB2YWx1ZXMiLCIkcmV0X29yXzEiLCJtYXAiLCJibG9jayBpbiBwZWVrX3ZhbHVlcyIsImJsb2NrICgyIGxldmVscykgaW4gcGVla192YWx1ZXMiLCJpIiwiPj0iLCJsZW5ndGgiLCJLZXJuZWwiLCJyYWlzZSIsIlN0b3BJdGVyYXRpb24iLCJbXSIsInBlZWsiLCJ2YWx1ZXMiLCI8PSIsIjEiLCJuZXh0X3ZhbHVlcyIsIm91dCIsIm5leHQiLCJmZWVkIiwiYXJnIiwiTm90SW1wbGVtZW50ZWRFcnJvciIsIm90aGVyIiwiRW51bWVyYXRvcjo6Q2hhaW4iLCJFbnVtZXJhdG9yIiwiaW5zcGVjdCIsInJlc3VsdCIsImFueT8iLCJSYW5nZSIsIi0yIiwiYXV0b2xvYWQiXSwibWFwcGluZ3MiOiJBQUFBQSxxQ0FBQUEsZ0JBQUFBO0VBQUFBOztFQUFBQTs7RUFFQUMsSUFBQUMsU0FBQUEsQ0FBUUYsb0JBQVJFO0VBRUFGLE9BQUFHO0VBQUFBOztJQUFBQTs7QUFBQUE7O0lBQ0VGLElBQUFHLFNBQUFBLENBQVFDLGlCQUFSRDtJQUVDRDtJQUVERyxNQUFJTCxJQUFKSyxVQUFBQSwyQkFBYUMsTUFBRCxFQVRkLEVBU2MsRUFUZCxFQVNFRDtBQUFBQSxNQUFBQTs7TUFBQUE7OztNQVRGOztNQVN1Qix1REFBQSw2QkFBUztNQUFPOztBQUV2Q0EsZ0JBQWtCTCxJQUFBTyxVQUFBQSxDQUFBQSxDQUFTRjs7QUFFM0JBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBOztBQUVBQTtBQUNBQTtJQVhFQSxDQUFBQSxJQUFBQTs7QUFjQUcsSUFBQUEsMEJBQUFBLHNCQXZCRixFQXVCRUE7QUFBQUEsTUFBQUE7O01BQUFBOzs7TUF2QkY7TUF1QmlCO01BQ1pBO01BRURDLGNBQVVDO01BQ1YsSUFBQSxRQUFHQyxLQUFILENBQUE7O1FBQ0VDLGNBQW1CQyxNQUFUQyxlQUFTRCxPQUFBQSxFQUFBQSxFQUFBQSxFQUFNRixLQ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UFNLGFBQU4sRUFBa0Isa0JBQWxCO0lBRUFwRSxJQUFBeUUsVUFBQUEsQ0FBUyxvQkFBVCxFQUE4QnZFLHdDQUE5QnVFO0lBQ0F6RSxJQUFBeUUsVUFBQUEsQ0FBUyxPQUFULEVBQWlCdkUsMEJBQWpCdUU7SUFDQXpFLElBQUF5RSxVQUFBQSxDQUFTLFdBQVQsRUFBcUJ2RSw4QkFBckJ1RTtJQUNBekUsSUFBQXlFLFVBQUFBLENBQVMsTUFBVCxFQUFnQnZFLHlCQUFoQnVFO0lBQ0F2RSxPQUFBRixJQUFBeUUsVUFBQUEsQ0FBUyxTQUFULEVBQW1CdkUsNEJBQW5CdUU7RUExSUZ2RSxHQUFNLElBQU5BLEVBQUFBLElBQUFBO0FBSkFIOyJ9fSx7Im9mZnNldCI6eyJsaW5lIjoxNzgxNCwiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvcmVsaWIvY29uc3RhbnRzLnJiIl0sInNvdXJjZXNDb250ZW50IjpbIjo6UlVCWV9QTEFURk9STSAgICAgICA9ICdvcGFsJ1xuOjpSVUJZX0VOR0lORSAgICAgICAgID0gJ29wYWwnXG46OlJVQllfVkVSU0lPTiAgICAgICAgPSAnMy4xLjAnXG46OlJVQllfRU5HSU5FX1ZFUlNJT04gPSAnMS42LjEnXG46OlJVQllfUkVMRUFTRV9EQVRFICAgPSAnMjAyMi0xMi0wOSdcbjo6UlVCWV9QQVRDSExFVkVMICAgICA9IDBcbjo6UlVCWV9SRVZJU0lPTiAgICAgICA9ICcwJ1xuOjpSVUJZX0NPUFlSSUdIVCAgICAgID0gJ29wYWwgLSBDb3B5cmlnaHQgKEMpIDIwMTMtMjAyMiBBZGFtIEJleW5vbiBhbmQgdGhlIE9wYWwgY29udHJpYnV0b3JzJ1xuOjpSVUJZX0RFU0NSSVBUSU9OICAgID0gXCJvcGFsICN7OjpSVUJZX0VOR0lORV9WRVJTSU9OfSAoI3s6OlJVQllfUkVMRUFTRV9EQVRFfSByZXZpc2lvbiAjezo6UlVCWV9SRVZJU0lPTn0pXCJcbiJdLCJuYW1lcyI6WyI8dG9wIChyZXF1aXJlZCk+IiwiMCIsIlJVQllfRU5HSU5FX1ZFUlNJT04iLCJSVUJZX1JFTEVBU0VfREFURSIsIlJVQllfUkVWSVNJT04iXSwibWFwcGluZ3MiOiJBQUFBQSxvQ0FBQUEsZ0JBQUFBO0VBQUFBOzs7RUFBQSxXQUFBLElBQUEsbUJBQXdCQSxNQUF4QjtFQUNBLFdBQUEsSUFBQSxpQkFBd0JBLE1BQXhCO0VBQ0EsV0FBQSxJQUFBLGtCQUF3QkEsT0FBeEI7RUFDQSxXQUFBLElBQUEseUJBQXdCQSxPQUF4QjtFQUNBLFdBQUEsSUFBQSx1QkFBd0JBLFlBQXhCO0VBQ0EsV0FBQSxJQUFBLHFCQUF3QkMsQ0FBeEI7RUFDQSxXQUFBLElBQUEsbUJBQXdCRCxHQUF4QjtFQUNBLFdBQUEsSUFBQSxvQkFBd0JBLHNFQUF4QjtFQUNBQSxPQUFBLFdBQUEsSUFBQSxzQkFBeUJBLE9BQUQsR0FBQSxDQUFRRSwwQkFBUixDQUFBLEdBQThCRixJQUE5QixHQUFBLENBQWtDRyx3QkFBbEMsQ0FBQSxHQUFzREgsWUFBdEQsR0FBQSxDQUFrRUksb0JBQWxFLENBQUEsR0FBa0ZKLEdBQTFHO0FBUkFBOyJ9fSx7Im9mZnNldCI6eyJsaW5lIjoxNzgyOSwiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvcmVsaWIvZW51bWVyYXRvci9sYXp5LnJiIl0sInNvdXJjZXNDb250ZW50IjpbIiMgaGVscGVyczogdHJ1dGh5LCBjb2VyY2VfdG8sIHlpZWxkMSwgeWllbGRYLCBkZW55X2Zyb3plbl9hY2Nlc3NcblxuY2xhc3MgOjpFbnVtZXJhdG9yXG4gIGNsYXNzIHNlbGY6OkxhenkgPCBzZWxmXG4gICAgY2xhc3Mgc2VsZjo6U3RvcExhenlFcnJvciA8IDo6RXhjZXB0aW9uOyBlbmRcblxuICAgIGRlZiBzZWxmLmZvcihvYmplY3QsICopXG4gICAgICBsYXp5ID0gc3VwZXJcbiAgICAgIGBsYXp5LmVudW1lcmF0b3IgPSBvYmplY3RgXG4gICAgICBsYXp5XG4gICAgZW5kXG5cbiAgICBkZWYgaW5pdGlhbGl6ZShvYmplY3QsIHNpemUgPSBuaWwsICZibG9jaylcbiAgICAgIGAkZGVueV9mcm96ZW5fYWNjZXNzKHNlbGYpYFxuXG4gICAgICB1bmxlc3MgYmxvY2tfZ2l2ZW4/XG4gICAgICAgIDo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgJ3RyaWVkIHRvIGNhbGwgbGF6eSBuZXcgd2l0aG91dCBhIGJsb2NrJ1xuICAgICAgZW5kXG5cbiAgICAgIEBlbnVtZXJhdG9yID0gb2JqZWN0XG5cbiAgICAgIHN1cGVyIHNpemUgZG8gfHlpZWxkZXIsICplYWNoX2FyZ3N8XG4gICAgICAgIG9iamVjdC5lYWNoKCplYWNoX2FyZ3MpIGRvIHwqYXJnc3xcbiAgICAgICAgICAleHtcbiAgICAgICAgICAgIGFyZ3MudW5zaGlmdCgje3lpZWxkZXJ9KTtcblxuICAgICAgICAgICAgJHlpZWxkWChibG9jaywgYXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICBlbmRcbiAgICAgIHJlc2N1ZSBTdG9wTGF6eUVycm9yXG4gICAgICAgIG5pbFxuICAgICAgZW5kXG4gICAgZW5kXG5cbiAgICBkZWYgbGF6eVxuICAgICAgc2VsZlxuICAgIGVuZFxuXG4gICAgZGVmIGNvbGxlY3QoJmJsb2NrKVxuICAgICAgdW5sZXNzIGJsb2NrXG4gICAgICAgIDo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgJ3RyaWVkIHRvIGNhbGwgbGF6eSBtYXAgd2l0aG91dCBhIGJsb2NrJ1xuICAgICAgZW5kXG5cbiAgICAgIExhenkubmV3KHNlbGYsIGVudW1lcmF0b3Jfc2l6ZSkgZG8gfGVudW0sICphcmdzfFxuICAgICAgICAleHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSAkeWllbGRYKGJsb2NrLCBhcmdzKTtcblxuICAgICAgICAgICN7ZW51bS55aWVsZCBgdmFsdWVgfTtcbiAgICAgICAgfVxuICAgICAgZW5kXG4gICAgZW5kXG5cbiAgICBkZWYgY29sbGVjdF9jb25jYXQoJmJsb2NrKVxuICAgICAgdW5sZXNzIGJsb2NrXG4gICAgICAgIDo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgJ3RyaWVkIHRvIGNhbGwgbGF6eSBtYXAgd2l0aG91dCBhIGJsb2NrJ1xuICAgICAgZW5kXG5cbiAgICAgIExhenkubmV3KHNlbGYsIG5pbCkgZG8gfGVudW0sICphcmdzfFxuICAgICAgICAleHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSAkeWllbGRYKGJsb2NrLCBhcmdzKTtcblxuICAgICAgICAgIGlmICgje2B2YWx1ZWAucmVzcG9uZF90bz8gOmZvcmNlfSAmJiAje2B2YWx1ZWAucmVzcG9uZF90bz8gOmVhY2h9KSB7XG4gICAgICAgICAgICAje2B2YWx1ZWAuZWFjaCB7IHx2fCBlbnVtLnlpZWxkIHYgfX1cbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgYXJyYXkgPSAjezo6T3BhbC50cnlfY29udmVydCBgdmFsdWVgLCA6OkFycmF5LCA6dG9fYXJ5fTtcblxuICAgICAgICAgICAgaWYgKGFycmF5ID09PSBuaWwpIHtcbiAgICAgICAgICAgICAgI3tlbnVtLnlpZWxkIGB2YWx1ZWB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICN7YHZhbHVlYC5lYWNoIHsgfHZ8IGVudW0ueWllbGQgdiB9fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIGVuZFxuICAgIGVuZFxuXG4gICAgZGVmIGRyb3AobilcbiAgICAgIG4gPSBgJGNvZXJjZV90bygje259LCAjezo6SW50ZWdlcn0sICd0b19pbnQnKWBcblxuICAgICAgaWYgbiA8IDBcbiAgICAgICAgOjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCAnYXR0ZW1wdCB0byBkcm9wIG5lZ2F0aXZlIHNpemUnXG4gICAgICBlbmRcblxuICAgICAgY3VycmVudF9zaXplID0gZW51bWVyYXRvcl9zaXplXG4gICAgICBzZXRfc2l6ZSAgICAgPSBpZiA6OkludGVnZXIgPT09IGN1cnJlbnRfc2l6ZVxuICAgICAgICAgICAgICAgICAgICAgICBuIDwgY3VycmVudF9zaXplID8gbiA6IGN1cnJlbnRfc2l6ZVxuICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50X3NpemVcbiAgICAgICAgICAgICAgICAgICAgIGVuZFxuXG4gICAgICBkcm9wcGVkID0gMFxuICAgICAgTGF6eS5uZXcoc2VsZiwgc2V0X3NpemUpIGRvIHxlbnVtLCAqYXJnc3xcbiAgICAgICAgaWYgZHJvcHBlZCA8IG5cbiAgICAgICAgICBkcm9wcGVkICs9IDFcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGVudW0ueWllbGQoKmFyZ3MpXG4gICAgICAgIGVuZFxuICAgICAgZW5kXG4gICAgZW5kXG5cbiAgICBkZWYgZHJvcF93aGlsZSgmYmxvY2spXG4gICAgICB1bmxlc3MgYmxvY2tcbiAgICAgICAgOjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCAndHJpZWQgdG8gY2FsbCBsYXp5IGRyb3Bfd2hpbGUgd2l0aG91dCBhIGJsb2NrJ1xuICAgICAgZW5kXG5cbiAgICAgIHN1Y2NlZWRpbmcgPSB0cnVlXG4gICAgICBMYXp5Lm5ldyhzZWxmLCBuaWwpIGRvIHxlbnVtLCAqYXJnc3xcbiAgICAgICAgaWYgc3VjY2VlZGluZ1xuICAgICAgICAgICV4e1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gJHlpZWxkWChibG9jaywgYXJncyk7XG5cbiAgICAgICAgICAgIGlmICghJHRydXRoeSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgc3VjY2VlZGluZyA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICN7ZW51bS55aWVsZCgqYXJncyl9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgIGVudW0ueWllbGQoKmFyZ3MpXG4gICAgICAgIGVuZFxuICAgICAgZW5kXG4gICAgZW5kXG5cbiAgICBkZWYgZW51bV9mb3IobWV0aG9kID0gOmVhY2gsICphcmdzLCAmYmxvY2spXG4gICAgICBzZWxmLmNsYXNzLmZvcihzZWxmLCBtZXRob2QsICphcmdzLCAmYmxvY2spXG4gICAgZW5kXG5cbiAgICBkZWYgZmluZF9hbGwoJmJsb2NrKVxuICAgICAgdW5sZXNzIGJsb2NrXG4gICAgICAgIDo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgJ3RyaWVkIHRvIGNhbGwgbGF6eSBzZWxlY3Qgd2l0aG91dCBhIGJsb2NrJ1xuICAgICAgZW5kXG5cbiAgICAgIExhenkubmV3KHNlbGYsIG5pbCkgZG8gfGVudW0sICphcmdzfFxuICAgICAgICAleHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSAkeWllbGRYKGJsb2NrLCBhcmdzKTtcblxuICAgICAgICAgIGlmICgkdHJ1dGh5KHZhbHVlKSkge1xuICAgICAgICAgICAgI3tlbnVtLnlpZWxkKCphcmdzKX07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBlbmRcbiAgICBlbmRcblxuICAgIGRlZiBncmVwKHBhdHRlcm4sICZibG9jaylcbiAgICAgIGlmIGJsb2NrXG4gICAgICAgIExhenkubmV3KHNlbGYsIG5pbCkgZG8gfGVudW0sICphcmdzfFxuICAgICAgICAgICV4e1xuICAgICAgICAgICAgdmFyIHBhcmFtID0gI3s6Ok9wYWwuZGVzdHJ1Y3R1cmUoYXJncyl9LFxuICAgICAgICAgICAgICAgIHZhbHVlID0gI3twYXR0ZXJuID09PSBgcGFyYW1gfTtcblxuICAgICAgICAgICAgaWYgKCR0cnV0aHkodmFsdWUpKSB7XG4gICAgICAgICAgICAgIHZhbHVlID0gJHlpZWxkMShibG9jaywgcGFyYW0pO1xuXG4gICAgICAgICAgICAgICN7ZW51bS55aWVsZCBgJHlpZWxkMShibG9jaywgcGFyYW0pYH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICBlbmRcbiAgICAgIGVsc2VcbiAgICAgICAgTGF6eS5uZXcoc2VsZiwgbmlsKSBkbyB8ZW51bSwgKmFyZ3N8XG4gICAgICAgICAgJXh7XG4gICAgICAgICAgICB2YXIgcGFyYW0gPSAjezo6T3BhbC5kZXN0cnVjdHVyZShhcmdzKX0sXG4gICAgICAgICAgICAgICAgdmFsdWUgPSAje3BhdHRlcm4gPT09IGBwYXJhbWB9O1xuXG4gICAgICAgICAgICBpZiAoJHRydXRoeSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgI3tlbnVtLnlpZWxkIGBwYXJhbWB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgZW5kXG4gICAgICBlbmRcbiAgICBlbmRcblxuICAgIGRlZiByZWplY3QoJmJsb2NrKVxuICAgICAgdW5sZXNzIGJsb2NrXG4gICAgICAgIDo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgJ3RyaWVkIHRvIGNhbGwgbGF6eSByZWplY3Qgd2l0aG91dCBhIGJsb2NrJ1xuICAgICAgZW5kXG5cbiAgICAgIExhenkubmV3KHNlbGYsIG5pbCkgZG8gfGVudW0sICphcmdzfFxuICAgICAgICAleHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSAkeWllbGRYKGJsb2NrLCBhcmdzKTtcblxuICAgICAgICAgIGlmICghJHRydXRoeSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICN7ZW51bS55aWVsZCgqYXJncyl9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgZW5kXG4gICAgZW5kXG5cbiAgICBkZWYgdGFrZShuKVxuICAgICAgbiA9IGAkY29lcmNlX3RvKCN7bn0sICN7OjpJbnRlZ2VyfSwgJ3RvX2ludCcpYFxuXG4gICAgICBpZiBuIDwgMFxuICAgICAgICA6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsICdhdHRlbXB0IHRvIHRha2UgbmVnYXRpdmUgc2l6ZSdcbiAgICAgIGVuZFxuXG4gICAgICBjdXJyZW50X3NpemUgPSBlbnVtZXJhdG9yX3NpemVcbiAgICAgIHNldF9zaXplICAgICA9IGlmIDo6SW50ZWdlciA9PT0gY3VycmVudF9zaXplXG4gICAgICAgICAgICAgICAgICAgICAgIG4gPCBjdXJyZW50X3NpemUgPyBuIDogY3VycmVudF9zaXplXG4gICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfc2l6ZVxuICAgICAgICAgICAgICAgICAgICAgZW5kXG5cbiAgICAgIHRha2VuID0gMFxuICAgICAgTGF6eS5uZXcoc2VsZiwgc2V0X3NpemUpIGRvIHxlbnVtLCAqYXJnc3xcbiAgICAgICAgaWYgdGFrZW4gPCBuXG4gICAgICAgICAgZW51bS55aWVsZCgqYXJncylcbiAgICAgICAgICB0YWtlbiArPSAxXG4gICAgICAgIGVsc2VcbiAgICAgICAgICA6Oktlcm5lbC5yYWlzZSBTdG9wTGF6eUVycm9yXG4gICAgICAgIGVuZFxuICAgICAgZW5kXG4gICAgZW5kXG5cbiAgICBkZWYgdGFrZV93aGlsZSgmYmxvY2spXG4gICAgICB1bmxlc3MgYmxvY2tcbiAgICAgICAgOjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCAndHJpZWQgdG8gY2FsbCBsYXp5IHRha2Vfd2hpbGUgd2l0aG91dCBhIGJsb2NrJ1xuICAgICAgZW5kXG5cbiAgICAgIExhenkubmV3KHNlbGYsIG5pbCkgZG8gfGVudW0sICphcmdzfFxuICAgICAgICAleHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSAkeWllbGRYKGJsb2NrLCBhcmdzKTtcblxuICAgICAgICAgIGlmICgkdHJ1dGh5KHZhbHVlKSkge1xuICAgICAgICAgICAgI3tlbnVtLnlpZWxkKCphcmdzKX07XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSBTdG9wTGF6eUVycm9yfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIGVuZFxuICAgIGVuZFxuXG4gICAgZGVmIGluc3BlY3RcbiAgICAgIFwiIzwje3NlbGYuY2xhc3N9OiAje0BlbnVtZXJhdG9yLmluc3BlY3R9PlwiXG4gICAgZW5kXG5cbiAgICBhbGlhcyBmb3JjZSB0b19hXG4gICAgYWxpYXMgZmlsdGVyIGZpbmRfYWxsXG4gICAgYWxpYXMgZmxhdF9tYXAgY29sbGVjdF9jb25jYXRcbiAgICBhbGlhcyBtYXAgY29sbGVjdFxuICAgIGFsaWFzIHNlbGVjdCBmaW5kX2FsbFxuICAgIGFsaWFzIHRvX2VudW0gZW51bV9mb3JcbiAgZW5kXG5lbmRcbiJdLCJuYW1lcyI6WyI8dG9wIChyZXF1aXJlZCk+IiwiPGNsYXNzOkVudW1lcmF0b3I+IiwiPGNsYXNzOnNlbGY6Okxhenk+IiwiPGNsYXNzOnNlbGY6OlN0b3BMYXp5RXJyb3I+Iiwic2VsZiIsIkV4Y2VwdGlvbiIsImZvciIsIm9iamVjdCIsImxhenkiLCJpbml0aWFsaXplIiwic2l6ZSIsImJsb2NrX2dpdmVuPyIsIktlcm5lbCIsInJhaXNlIiwiQXJndW1lbnRFcnJvciIsIkBlbnVtZXJhdG9yIiwiYmxvY2sgaW4gaW5pdGlhbGl6ZSIsInlpZWxkZXIiLCJibG9jayAoMiBsZXZlbHMpIGluIGluaXRpYWxpemUiLCJlYWNoIiwiZWFjaF9hcmdzIiwiYmxvY2sgKDMgbGV2ZWxzKSBpbiBpbml0aWFsaXplIiwiU3RvcExhenlFcnJvciIsImNvbGxlY3QiLCJibG9jayIsIm5ldyIsIkxhenkiLCJlbnVtZXJhdG9yX3NpemUiLCJibG9jayBpbiBjb2xsZWN0IiwiZW51bSQiLCJibG9jayAoMiBsZXZlbHMpIGluIGNvbGxlY3QiLCJ5aWVsZCIsImNvbGxlY3RfY29uY2F0IiwiYmxvY2sgaW4gY29sbGVjdF9jb25jYXQiLCJibG9jayAoMiBsZXZlbHMpIGluIGNvbGxlY3RfY29uY2F0IiwicmVzcG9uZF90bz8iLCJ2IiwiYmxvY2sgKDMgbGV2ZWxzKSBpbiBjb2xsZWN0X2NvbmNhdCIsIk9wYWwiLCJ0cnlfY29udmVydCIsIkFycmF5IiwiZHJvcCIsIm4iLCJJbnRlZ2VyIiwiPCIsIjAiLCJjdXJyZW50X3NpemUiLCJzZXRfc2l6ZSIsImRyb3BwZWQiLCJibG9jayBpbiBkcm9wIiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiBkcm9wIiwiKyIsIjEiLCJhcmdzIiwiZHJvcF93aGlsZSIsInN1Y2NlZWRpbmciLCJibG9jayBpbiBkcm9wX3doaWxlIiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiBkcm9wX3doaWxlIiwiZW51bV9mb3IiLCJjbGFzcyIsIm1ldGhvZCIsInRvX3Byb2MiLCJmaW5kX2FsbCIsImJsb2NrIGluIGZpbmRfYWxsIiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiBmaW5kX2FsbCIsImdyZXAiLCJwYXR0ZXJuIiwiYmxvY2sgaW4gZ3JlcCIsImJsb2NrICgyIGxldmVscykgaW4gZ3JlcCIsImRlc3RydWN0dXJlIiwiPT09IiwicmVqZWN0IiwiYmxvY2sgaW4gcmVqZWN0IiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiByZWplY3QiLCJ0YWtlIiwidGFrZW4iLCJibG9jayBpbiB0YWtlIiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiB0YWtlIiwidGFrZV93aGlsZSIsImJsb2NrIGluIHRha2Vfd2hpbGUiLCJibG9jayAoMiBsZXZlbHMpIGluIHRha2Vfd2hpbGUiLCJpbnNwZWN0Il0sIm1hcHBpbmdzIjoiQUFBQUEsMENBQUFBLGdCQUFBQTtFQUFBQTs7RUFBQUE7RUFFQUEsT0FBQUM7RUFBQUE7O0lBQUFBOztJQUNFQSxPQUFBQztJQUFBQTs7TUFBQUE7O0FBQUFBOztNQUNFQyxPQUFNQyxJQUFORCxFQUE0QkUsZ0JBQTVCRjtNQUVBRyxNQUFJRixJQUFKRSxVQUFBQSxxQkFBYUMsTUFBRCxFQU5oQixFQU1JRDtBQUFBQSxRQUFBQTs7UUFBQUE7O1FBTko7UUFNeUI7UUFDbkJFLE9BQU8sT0FBQUosSUFBQSxFQUFBLGtEQUFBLE9BQUEsRUFBQSxDQUFBRyxNQUFBLENBQUEsUUFBQSxNQUFBLFNBQUEsQ0FBQSxDQUFBLEVBQUEsTUFBQTtRQUNORDtRQUNEQSxPQUFBRTtNQUhGRixDQUFBQSxJQUFBQTs7QUFNQUcsTUFBQUEsMEJBQUFBLHNCQUFlRixNQUFELEVBQVNHLElBQXZCRDtBQUFBQSxRQUFBQTs7UUFBQUE7O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UFBYSxVQUFiO01BQ0EvRSxPQUFBLGFBQU0sU0FBTixFQUFjLFVBQWQ7SUEvT0ZBLEdBQU1FLElBQU5GLEVBQW1CRSxJQUFuQkY7RUFERkQsR0FBTSxJQUFOQSxFQUFBQSxJQUFBQTtBQUZBRDsifX0seyJvZmZzZXQiOnsibGluZSI6MTgxODUsImNvbHVtbiI6MH0sIm1hcCI6eyJ2ZXJzaW9uIjozLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb3JlbGliL2VudW1lcmF0b3IveWllbGRlci5yYiJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBFbnVtZXJhdG9yXG4gIGNsYXNzIFlpZWxkZXJcbiAgICBkZWYgaW5pdGlhbGl6ZSgmYmxvY2spXG4gICAgICBAYmxvY2sgPSBibG9ja1xuICAgICAgIyBydWJvY29wOmRpc2FibGUgTGludC9Wb2lkXG4gICAgICBzZWxmXG4gICAgICAjIHJ1Ym9jb3A6ZW5hYmxlIExpbnQvVm9pZFxuICAgIGVuZFxuXG4gICAgZGVmIHlpZWxkKCp2YWx1ZXMpXG4gICAgICAleHtcbiAgICAgICAgdmFyIHZhbHVlID0gT3BhbC55aWVsZFgoI3tAYmxvY2t9LCB2YWx1ZXMpO1xuXG4gICAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZS4kdGhyb3dlcl90eXBlID09IFwiYnJlYWtcIikge1xuICAgICAgICAgIHRocm93IHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgIGVuZFxuXG4gICAgZGVmIDw8KHZhbHVlKVxuICAgICAgc2VsZi55aWVsZCh2YWx1ZSlcblxuICAgICAgc2VsZlxuICAgIGVuZFxuXG4gICAgZGVmIHRvX3Byb2NcbiAgICAgIHByb2MgZG8gfCp2YWx1ZXN8XG4gICAgICAgIHNlbGYueWllbGQoKnZhbHVlcylcbiAgICAgIGVuZFxuICAgIGVuZFxuICBlbmRcbmVuZFxuIl0sIm5hbWVzIjpbIjx0b3AgKHJlcXVpcmVkKT4iLCI8Y2xhc3M6RW51bWVyYXRvcj4iLCI8Y2xhc3M6WWllbGRlcj4iLCJpbml0aWFsaXplIiwiQGJsb2NrIiwiYmxvY2siLCJzZWxmIiwieWllbGQiLCI8PCIsInZhbHVlIiwidG9fcHJvYyIsInByb2MiLCJibG9jayBpbiB0b19wcm9jIiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiB0b19wcm9jIiwidmFsdWVzIl0sIm1hcHBpbmdzIjoiQUFBQUEsNkNBQUFBLGdCQUFBQTtFQUFBQTs7RUFBQUE7RUFBQUEsT0FBQUM7RUFBQUE7O0lBQUFBOztJQUNFQSxPQUFBQztJQUFBQTs7TUFBQUE7O0FBQUFBOzs7QUFDRUMsTUFBQUEsMEJBQUFBLHNCQUFBQTtBQUFBQSxRQUFBQTs7UUFBQUE7OztRQUNFQyxhQUFTQztRQUVURixPQUFBRztNQUhGSCxDQUFBQSxHQUFBQTs7QUFPQUksTUFBQUEscUJBQUFBLDBCQVRKLEVBU0lBO0FBQUFBLFFBQUFBOzs7UUFUSjtRQVNjOztBQUVkQSxnQ0FBa0NILFVBQU9HOztBQUV6Q0E7QUFDQUE7QUFDQUE7O0FBRUFBO0FBQ0FBO01BVElBLENBQUFBLElBQUFBOztBQVlBQyxNQUFBQSxrQkFBQUEsMkJBQU9DLEtBQVBEO0FBQUFBLFFBQUFBOzs7UUFDRUYsSUFBSUMsT0FBQUEsQ0FBT0UsS0FBUEY7UUFFSkMsT0FBQUY7TUFIRkUsQ0FBQUEsR0FBQUE7TUFNQU4sT0FBQVEsdUJBQUFBLG1CQUFBQTtBQUFBQSxRQUFBQTs7UUFDRUEsT0FBQUMsTUFBQUwsSUFBQUssUUFBQUEsRUFBQUEsRUFBQUEsRUFBQUMsYUE1Qk4sRUE0Qk1BLEVBQUFDOzs7VUE1Qk47VUE0QmU7VUFDUEEsT0FBSU4sTUFBSkQsSUFBSUMsU0FBQUEsRUFBTyxNQUFDTyxNQUFELENBQVBQLEVBRE5LLENBQUFBLEdBQUFBLHNCQUFBQSxDQUFBRDtNQURGRCxDQUFBQSxHQUFBQTtJQTFCRlIsR0FBQUEsV0FBQUEsRUFBQUEsSUFBQUE7RUFERkQsR0FBQUEsV0FBQUEsRUFBQUEsSUFBQUE7QUFBQUQ7In19LHsib2Zmc2V0Ijp7ImxpbmUiOjE4MjUwLCJjb2x1bW4iOjB9LCJtYXAiOnsidmVyc2lvbiI6Mywic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29yZWxpYi9lbnVtZXJhdG9yL2FyaXRobWV0aWNfc2VxdWVuY2UucmIiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgOjpFbnVtZXJhdG9yXG4gIGNsYXNzIHNlbGY6OkFyaXRobWV0aWNTZXF1ZW5jZSA8IHNlbGZcbiAgICBgT3BhbC5wcm9wKHNlbGYuJCRwcm90b3R5cGUsICckJGlzX2FyaXRobWV0aWNfc2VxJywgdHJ1ZSlgXG5cbiAgICBgdmFyIGluZiA9IEluZmluaXR5YFxuXG4gICAgIyBAcHJpdmF0ZVxuICAgIGRlZiBpbml0aWFsaXplKHJhbmdlLCBzdGVwID0gdW5kZWZpbmVkLCBjcmVhdGlvbl9tZXRob2QgPSA6c3RlcClcbiAgICAgIEBjcmVhdGlvbl9tZXRob2QgPSBjcmVhdGlvbl9tZXRob2RcbiAgICAgIGlmIHJhbmdlLmlzX2E/IDo6QXJyYXlcbiAgICAgICAgQHN0ZXBfYXJnMSwgQHN0ZXBfYXJnMiwgQHRvcGZ4LCBAYnlwZnggPSAqcmFuZ2VcbiAgICAgICAgQHJlY2VpdmVyX251bSA9IHN0ZXBcbiAgICAgICAgQHN0ZXAgPSAxXG5cbiAgICAgICAgQHJhbmdlID0gaWYgQHN0ZXBfYXJnMlxuICAgICAgICAgICAgICAgICAgIEBzdGVwID0gQHN0ZXBfYXJnMlxuICAgICAgICAgICAgICAgICAgIChAcmVjZWl2ZXJfbnVtLi5Ac3RlcF9hcmcxKVxuICAgICAgICAgICAgICAgICBlbHNpZiBAc3RlcF9hcmcxXG4gICAgICAgICAgICAgICAgICAgKEByZWNlaXZlcl9udW0uLkBzdGVwX2FyZzEpXG4gICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAoQHJlY2VpdmVyX251bS4ubmlsKVxuICAgICAgICAgICAgICAgICBlbmRcbiAgICAgIGVsc2VcbiAgICAgICAgQHNraXBwZWRfYXJnID0gdHJ1ZSB1bmxlc3Mgc3RlcFxuICAgICAgICBAcmFuZ2UsIEBzdGVwID0gcmFuZ2UsIHN0ZXAgfHwgMVxuICAgICAgZW5kXG5cbiAgICAgIEBvYmplY3QgPSBzZWxmXG5cbiAgICAgIDo6S2VybmVsLnJhaXNlIEFyZ3VtZW50RXJyb3IsIFwic3RlcCBjYW4ndCBiZSAwXCIgaWYgQHN0ZXAgPT0gMFxuICAgICAgdW5sZXNzIEBzdGVwLnJlc3BvbmRfdG8/IDp0b19pbnRcbiAgICAgICAgOjpLZXJuZWwucmFpc2UgQXJndW1lbnRFcnJvciwgXCJubyBpbXBsaWNpdCBjb252ZXJzaW9uIG9mICN7QHN0ZXAuY2xhc3N9IFwiIFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpbnRvIEludGVnZXInXG4gICAgICBlbmRcbiAgICBlbmRcblxuICAgIGF0dHJfcmVhZGVyIDpzdGVwXG5cbiAgICBkZWYgYmVnaW5cbiAgICAgIEByYW5nZS5iZWdpblxuICAgIGVuZFxuXG4gICAgZGVmIGVuZFxuICAgICAgQHJhbmdlLmVuZFxuICAgIGVuZFxuXG4gICAgZGVmIGV4Y2x1ZGVfZW5kP1xuICAgICAgQHJhbmdlLmV4Y2x1ZGVfZW5kP1xuICAgIGVuZFxuXG4gICAgIyBAcHJpdmF0ZVxuICAgIGRlZiBfbGVzc2VyX3RoYW5fZW5kPyh2YWwpXG4gICAgICBlbmRfID0gc2VsZi5lbmQgfHwgYGluZmBcbiAgICAgIGlmIHN0ZXAgPiAwXG4gICAgICAgIGV4Y2x1ZGVfZW5kPyA/IHZhbCA8IGVuZF8gOiB2YWwgPD0gZW5kX1xuICAgICAgZWxzZVxuICAgICAgICBleGNsdWRlX2VuZD8gPyB2YWwgPiBlbmRfIDogdmFsID49IGVuZF9cbiAgICAgIGVuZFxuICAgIGVuZFxuXG4gICAgIyBAcHJpdmF0ZVxuICAgIGRlZiBfZ3JlYXRlcl90aGFuX2JlZ2luPyh2YWwpXG4gICAgICBiZWdpbl8gPSBzZWxmLmJlZ2luIHx8IC1gaW5mYFxuICAgICAgaWYgc3RlcCA+IDBcbiAgICAgICAgdmFsID4gYmVnaW5fXG4gICAgICBlbHNlXG4gICAgICAgIHZhbCA8IGJlZ2luX1xuICAgICAgZW5kXG4gICAgZW5kXG5cbiAgICBkZWYgZmlyc3QoY291bnQgPSB1bmRlZmluZWQpXG4gICAgICBpdGVyID0gc2VsZi5iZWdpbiB8fCAtYGluZmBcblxuICAgICAgcmV0dXJuIF9sZXNzZXJfdGhhbl9lbmQ/KGl0ZXIpID8gaXRlciA6IG5pbCB1bmxlc3MgY291bnRcblxuICAgICAgb3V0ID0gW11cblxuICAgICAgd2hpbGUgX2xlc3Nlcl90aGFuX2VuZD8oaXRlcikgJiYgY291bnQgPiAwXG4gICAgICAgIG91dCA8PCBpdGVyXG4gICAgICAgIGl0ZXIgKz0gc3RlcFxuICAgICAgICBjb3VudCAtPSAxXG4gICAgICBlbmRcblxuICAgICAgb3V0XG4gICAgZW5kXG5cbiAgICBkZWYgZWFjaCgmYmxvY2spXG4gICAgICByZXR1cm4gc2VsZiB1bmxlc3MgYmxvY2tfZ2l2ZW4/XG5cbiAgICAgIGNhc2Ugc2VsZi5iZWdpblxuICAgICAgd2hlbiBuaWxcbiAgICAgICAgOjpLZXJuZWwucmFpc2UgVHlwZUVycm9yLCBcIm5pbCBjYW4ndCBiZSBjb2VyY2VkIGludG8gSW50ZWdlclwiXG4gICAgICBlbmRcblxuICAgICAgaXRlciA9IHNlbGYuYmVnaW4gfHwgLWBpbmZgXG5cbiAgICAgIHdoaWxlIF9sZXNzZXJfdGhhbl9lbmQ/KGl0ZXIpXG4gICAgICAgIHlpZWxkIGl0ZXJcbiAgICAgICAgaXRlciArPSBzdGVwXG4gICAgICBlbmRcbiAgICAgIHNlbGZcbiAgICBlbmRcblxuICAgIGRlZiBsYXN0KGNvdW50ID0gdW5kZWZpbmVkKVxuICAgICAgY2FzZSBzZWxmLmVuZFxuICAgICAgd2hlbiBgaW5mYCwgLWBpbmZgXG4gICAgICAgIDo6S2VybmVsLnJhaXNlIDo6RmxvYXREb21haW5FcnJvciwgc2VsZi5lbmRcbiAgICAgIHdoZW4gbmlsXG4gICAgICAgIDo6S2VybmVsLnJhaXNlIDo6UmFuZ2VFcnJvciwgJ2Nhbm5vdCBnZXQgdGhlIGxhc3QgZWxlbWVudCBvZiBlbmRsZXNzIGFyaXRobWV0aWMgc2VxdWVuY2UnXG4gICAgICBlbmRcblxuICAgICAgaXRlciA9IHNlbGYuZW5kIC0gKChzZWxmLmVuZCAtIHNlbGYuYmVnaW4pICUgc3RlcClcbiAgICAgIGl0ZXIgLT0gc3RlcCB1bmxlc3MgX2xlc3Nlcl90aGFuX2VuZD8oaXRlcilcblxuICAgICAgcmV0dXJuIF9ncmVhdGVyX3RoYW5fYmVnaW4/KGl0ZXIpID8gaXRlciA6IG5pbCB1bmxlc3MgY291bnRcblxuICAgICAgb3V0ID0gW11cblxuICAgICAgd2hpbGUgX2dyZWF0ZXJfdGhhbl9iZWdpbj8oaXRlcikgJiYgY291bnQgPiAwXG4gICAgICAgIG91dCA8PCBpdGVyXG4gICAgICAgIGl0ZXIgLT0gc3RlcFxuICAgICAgICBjb3VudCAtPSAxXG4gICAgICBlbmRcblxuICAgICAgb3V0LnJldmVyc2VcbiAgICBlbmRcblxuICAgIGRlZiBzaXplXG4gICAgICBzdGVwX3NpZ24gPSBzdGVwID4gMCA/IDEgOiAtMVxuXG4gICAgICBpZiAhX2xlc3Nlcl90aGFuX2VuZD8oc2VsZi5iZWdpbilcbiAgICAgICAgMFxuICAgICAgZWxzaWYgWy1gaW5mYCwgYGluZmBdLmluY2x1ZGU/KHN0ZXApXG4gICAgICAgIDFcbiAgICAgIGVsc2lmIFstYGluZmAgKiBzdGVwX3NpZ24sIG5pbF0uaW5jbHVkZT8oc2VsZi5iZWdpbikgfHxcbiAgICAgICAgICAgIFtgaW5mYCAqIHN0ZXBfc2lnbiwgbmlsXS5pbmNsdWRlPyhzZWxmLmVuZClcbiAgICAgICAgYGluZmBcbiAgICAgIGVsc2VcbiAgICAgICAgaXRlciA9IHNlbGYuZW5kIC0gKChzZWxmLmVuZCAtIHNlbGYuYmVnaW4pICUgc3RlcClcbiAgICAgICAgaXRlciAtPSBzdGVwIHVubGVzcyBfbGVzc2VyX3RoYW5fZW5kPyhpdGVyKVxuICAgICAgICAoKGl0ZXIgLSBzZWxmLmJlZ2luKSAvIHN0ZXApLmFicy50b19pICsgMVxuICAgICAgZW5kXG4gICAgZW5kXG5cbiAgICBkZWYgPT0ob3RoZXIpXG4gICAgICBzZWxmLmNsYXNzID09IG90aGVyLmNsYXNzICYmXG4gICAgICAgIHNlbGYuYmVnaW4gPT0gb3RoZXIuYmVnaW4gJiZcbiAgICAgICAgc2VsZi5lbmQgPT0gb3RoZXIuZW5kICYmXG4gICAgICAgIHN0ZXAgPT0gb3RoZXIuc3RlcCAmJlxuICAgICAgICBleGNsdWRlX2VuZD8gPT0gb3RoZXIuZXhjbHVkZV9lbmQ/XG4gICAgZW5kXG5cbiAgICBkZWYgaGFzaFxuICAgICAgW3NlbGYuYmVnaW4sIHNlbGYuZW5kLCBzdGVwLCBleGNsdWRlX2VuZD9dLmhhc2hcbiAgICBlbmRcblxuICAgIGRlZiBpbnNwZWN0XG4gICAgICBpZiBAcmVjZWl2ZXJfbnVtXG4gICAgICAgIGFyZ3MgPSBpZiBAc3RlcF9hcmcyXG4gICAgICAgICAgICAgICAgIFwiKCN7QHRvcGZ4fSN7QHN0ZXBfYXJnMS5pbnNwZWN0fSwgI3tAYnlwZnh9I3tAc3RlcF9hcmcyLmluc3BlY3R9KVwiXG4gICAgICAgICAgICAgICBlbHNpZiBAc3RlcF9hcmcxXG4gICAgICAgICAgICAgICAgIFwiKCN7QHRvcGZ4fSN7QHN0ZXBfYXJnMS5pbnNwZWN0fSlcIlxuICAgICAgICAgICAgICAgZW5kXG5cbiAgICAgICAgXCIoI3tAcmVjZWl2ZXJfbnVtLmluc3BlY3R9LiN7QGNyZWF0aW9uX21ldGhvZH0je2FyZ3N9KVwiXG4gICAgICBlbHNlXG4gICAgICAgIGFyZ3MgPSB1bmxlc3MgQHNraXBwZWRfYXJnXG4gICAgICAgICAgICAgICAgIFwiKCN7QHN0ZXB9KVwiXG4gICAgICAgICAgICAgICBlbmRcbiAgICAgICAgXCIoKCN7QHJhbmdlLmluc3BlY3R9KS4je0BjcmVhdGlvbl9tZXRob2R9I3thcmdzfSlcIlxuICAgICAgZW5kXG4gICAgZW5kXG5cbiAgICBhbGlhcyA9PT0gPT1cbiAgICBhbGlhcyBlcWw/ID09XG4gIGVuZFxuZW5kXG4iXSwibmFtZXMiOlsiPHRvcCAocmVxdWlyZWQpPiIsIjxjbGFzczpFbnVtZXJhdG9yPiIsIjxjbGFzczpzZWxmOjpBcml0aG1ldGljU2VxdWVuY2U+IiwiaW5pdGlhbGl6ZSIsInJhbmdlIiwic3RlcCIsImNyZWF0aW9uX21ldGhvZCIsIkBjcmVhdGlvbl9tZXRob2QiLCJpc19hPyIsIkFycmF5IiwiQHN0ZXBfYXJnMSIsIkBzdGVwX2FyZzIiLCJAdG9wZngiLCJAYnlwZngiLCJAcmVjZWl2ZXJfbnVtIiwiQHN0ZXAiLCIxIiwiQHJhbmdlIiwiQHNraXBwZWRfYXJnIiwiJHJldF9vcl8xIiwiQG9iamVjdCIsInNlbGYiLCIwIiwiS2VybmVsIiwicmFpc2UiLCJBcmd1bWVudEVycm9yIiwicmVzcG9uZF90bz8iLCJjbGFzcyIsImF0dHJfcmVhZGVyIiwiYmVnaW4iLCJlbmQiLCJleGNsdWRlX2VuZD8iLCJfbGVzc2VyX3RoYW5fZW5kPyIsInZhbCIsImVuZF8iLCI+IiwiPCIsIjw9IiwiPj0iLCJfZ3JlYXRlcl90aGFuX2JlZ2luPyIsImJlZ2luXyIsIi1AIiwiZmlyc3QiLCJjb3VudCIsIml0ZXIiLCJvdXQiLCI8PCIsIisiLCItIiwiZWFjaCIsImJsb2NrX2dpdmVuPyIsIlR5cGVFcnJvciIsImxhc3QiLCJGbG9hdERvbWFpbkVycm9yIiwiUmFuZ2VFcnJvciIsIiUiLCJyZXZlcnNlIiwic2l6ZSIsInN0ZXBfc2lnbiIsIi0xIiwiaW5jbHVkZT8iLCIqIiwiLyIsImFicyIsInRvX2kiLCI9PSIsIm90aGVyIiwiJHJldF9vcl8yIiwiJHJldF9vcl8zIiwiJHJldF9vcl80IiwiaGFzaCIsImluc3BlY3QiLCJhcmdzIl0sIm1hcHBpbmdzIjoiQUFBQUEseURBQUFBLGdCQUFBQTtFQUFBQTs7RUFBQUE7RUFBQUEsT0FBQUM7RUFBQUE7O0lBQUFBOztJQUNFQSxPQUFBQztJQUFBQTs7TUFBQUE7O0FBQUFBOztNQUNHQTtNQUVBQTs7QUFHREMsTUFBQUEsMEJBQUFBLHNCQUFlQyxLQUFELEVBQVFDLElBQVIsRUFBMEJDLGVBQXhDSDtBQUFBQSxRQUFBQTs7OztRQUF3QywrQ0FBa0I7UUFDeERJLHVCQUFtQkQ7UUFDbkIsSUFBQSxRQUFHRixLQUFLSSxVQUFBQSxDQUFPQyxZQUFQRCxDQUFSLENBQUE7O1VBQ0UsS0FBeUMsVUFBQSxNQUFDSixLQUFELENBQUEsQ0FBekMsRUFBQU0sQ0FBQUEsaUJBQUEsNkJBQUFBLENBQUEsRUFBWUMsQ0FBQUEsaUJBQVosNkJBQVlBLENBQVosRUFBd0JDLENBQUFBLGFBQXhCLDZCQUF3QkEsQ0FBeEIsRUFBZ0NDLENBQUFBLGFBQWhDLDZCQUFnQ0EsQ0FBaEM7VUFDQUMsb0JBQWdCVDtVQUNoQlUsWUFBUUM7VUFFUkMsYUFBUyxDQUFBLFFBQUdOLGNBQUgsQ0FBQSxHQUFBLENBQ0VSLENBQUFZLENBQUFBLFlBQVFKLGNBQVJJLEdBQ0MsZ0JBQUFELGlCQUFBLEVBQWVKLGNBQWYsUUFERFAsQ0FERixJQUdBLENBQUEsUUFBTU8sY0FBTixDQUFBLEdBQUEsQ0FDRyxnQkFBQUksaUJBQUEsRUFBZUosY0FBZixRQURILElBQUEsQ0FHRyxnQkFBQUksaUJBQUEsRUFBZSxHQUFmLFFBSEgsQ0FBQSxDQUhBO1FBTFg7O1VBY0UsS0FBQSxRQUEyQlQsSUFBM0IsQ0FBQTtZQUFBYSxtQkFBZTtVQUFmO1VBQ0EsS0FBZ0IsQ0FBQWQsS0FBQSxFQUFPLENBQUEsUUFBQWUsQ0FBQUEsWUFBQWQsSUFBQWMsQ0FBQSxDQUFBLEdBQUEsQ0FBQSxTQUFBLElBQUEsQ0FBUUgsQ0FBUixDQUFBLENBQVAsQ0FBaEIsRUFBQUMsQ0FBQUEsYUFBQSxLQUFBQSxDQUFBLEVBQVFGLENBQUFBLFlBQVIsS0FBUUEsQ0FBUjtRQWZGO1FBa0JBSyxjQUFVQztRQUVWLElBQUEsTUFBbUROLFNBQW5ELEVBQTRETyxDQUE1RCxDQUFBO1VBQUFDLE9BQVFDLE9BQUFBLENBQU9DLG1CQUFmLEVBQThCdEIsaUJBQXRCcUI7UUFBUjtRQUNBLElBQUEsUUFBT1QsU0FBS1csZ0JBQUFBLENBQWEsUUFBYkEsQ0FBWixDQUFBO1VBOUJOdkIsT0FBQTtRQThCTTtVQUNFQSxPQUFBb0IsT0FBUUMsT0FBQUEsQ0FBT0MsbUJBQWYsRUFBOEIsRUFBQSxHQUFBLENBQUN0Qiw0QkFBRCxHQUFBLENBQTZCWSxTQUFLWSxPQUFBQSxDQUFBQSxDQUFsQyxDQUFBLEdBQXlDeEIsR0FBekMsQ0FBQSxHQUNBQSxjQUR0QnFCO1FBRFY7TUF2QkZyQixDQUFBQSxJQUFBQTtNQTZCQWtCLElBQUFPLGFBQUFBLENBQVksTUFBWkE7O0FBRUFDLE1BQUFBLHFCQUFBQSxpQkFBQUE7QUFBQUEsUUFBQUE7O1FBQ0VBLE9BQUFaLFVBQU1ZLE9BQUFBLENBQUFBO01BRFJBLENBQUFBLEdBQUFBOztBQUlBQyxNQUFBQSxtQkFBQUEsZUFBQUE7QUFBQUEsUUFBQUE7O1FBQ0VBLE9BQUFiLFVBQU1hLEtBQUFBLENBQUFBO01BRFJBLENBQUFBLEdBQUFBOztBQUlBQyxNQUFBQSw0QkFBQUEsZ0RBQUFBO0FBQUFBLFFBQUFBOztRQUNFQSxPQUFBZCxVQUFNYyxpQkFBQUEsQ0FBQUE7TUFEUkEsQ0FBQUEsR0FBQUE7O0FBS0FDLE1BQUFBLGlDQUFBQSxxREFBc0JDLEdBQXRCRDtBQUFBQSxRQUFBQTs7O1FBQ0VFLE9BQU8sQ0FBQSxRQUFBZixDQUFBQSxZQUFBRSxJQUFJUyxLQUFBQSxDQUFBQSxDQUFKWCxDQUFBLENBQUEsR0FBQSxDQUFBLFNBQUEsSUFBQSxDQUFhYSxHQUFiLENBQUE7UUFDUCxJQUFBLFFBQVFHLE9BQUxkLElBQUFoQixNQUFBQSxDQUFBQSxDQUFLOEIsRUFBRWIsQ0FBRmEsQ0FBUixDQUFBO1VBQ0UsSUFBQSxRQUFBZCxJQUFBVSxpQkFBQUEsQ0FBQUEsQ0FBQSxDQUFBO1lBQWVDLE9BQUlJLE9BQUpILEdBQUlHLEVBQUVGLElBQUZFO1VBQW5CO1lBQTRCSixPQUFJSyxPQUFKSixHQUFJSSxFQUFHSCxJQUFIRztVQUFoQztRQURGLE9BR0UsSUFBQSxRQUFBaEIsSUFBQVUsaUJBQUFBLENBQUFBLENBQUEsQ0FBQTtVQUFlQyxPQUFJRyxPQUFKRixHQUFJRSxFQUFFRCxJQUFGQztRQUFuQjtVQUE0QkgsT0FBSU0sT0FBSkwsR0FBSUssRUFBR0osSUFBSEk7UUFBaEM7TUFMSk4sQ0FBQUEsR0FBQUE7O0FBVUFPLE1BQUFBLG9DQUFBQSx3REFBeUJOLEdBQXpCTTtBQUFBQSxRQUFBQTs7O1FBQ0VDLFNBQVMsQ0FBQSxRQUFBckIsQ0FBQUEsWUFBQUUsSUFBSVEsT0FBQUEsQ0FBQUEsQ0FBSlYsQ0FBQSxDQUFBLEdBQUEsQ0FBQSxTQUFBLElBQUEsQ0FBZW9CLENBQUNBLEdBQURBLENBQURFLE9BQUFBLENBQUFBLENBQWQsQ0FBQTtRQUNULElBQUEsUUFBUU4sT0FBTGQsSUFBQWhCLE1BQUFBLENBQUFBLENBQUs4QixFQUFFYixDQUFGYSxDQUFSLENBQUE7VUFDRUksT0FBSUosT0FBSkYsR0FBSUUsRUFBRUssTUFBRkw7UUFETjtVQUdFSSxPQUFJSCxPQUFKSCxHQUFJRyxFQUFFSSxNQUFGSjtRQUhOO01BRkZHLENBQUFBLEdBQUFBOztBQVNBRyxNQUFBQSxxQkFBQUEsaUJBQVVDLEtBQVZEO0FBQUFBLFFBQUFBOzs7O1FBQ0VFLE9BQU8sQ0FBQSxRQUFBekIsQ0FBQUEsWUFBQUUsSUFBSVEsT0FBQUEsQ0FBQUEsQ0FBSlYsQ0FBQSxDQUFBLEdBQUEsQ0FBQSxTQUFBLElBQUEsQ0FBZXVCLENBQUNBLEdBQURBLENBQURELE9BQUFBLENBQUFBLENBQWQsQ0FBQTtRQUVQLEtBQUEsUUFBbURFLEtBQW5ELENBQUE7VUFBQSxPQUFPLENBQUEsUUFBQXRCLElBQUFXLHNCQUFBQSxDQUFrQlksSUFBbEJaLENBQUEsQ0FBQSxHQUFBLENBQTBCWSxJQUExQixJQUFBLENBQWlDLEdBQWpDLENBQUE7UUFBUDtRQUVBQyxNQUFNO1FBRU4sT0FBQSxRQUFNLENBQUEsUUFBQTFCLENBQUFBLFlBQUFFLElBQUFXLHNCQUFBQSxDQUFrQlksSUFBbEJaLENBQUFiLENBQUEsQ0FBQSxHQUFBLENBQWlDZ0IsT0FBTlEsS0FBTVIsRUFBRWIsQ0FBRmEsQ0FBakMsSUFBQSxDQUFBLFNBQUEsQ0FBQSxDQUFOLENBQUE7O1VBQ0VVLEdBQUlDLE9BQUFBLENBQUdGLElBQUhFO1VBQ0pGLE9BQUtHLFNBQUxILElBQUtHLEVBQUcxQixJQUFBaEIsTUFBQUEsQ0FBQUEsQ0FBSDBDO1VBQ0xKLFFBQU1LLFVBQU5MLEtBQU1LLEVBQUdoQyxDQUFIZ0M7UUFIUjtRQU1BTixPQUFBRztNQWJGSCxDQUFBQSxJQUFBQTs7QUFnQkFPLE1BQUFBLG9CQUFBQSxnQkFBQUE7QUFBQUEsUUFBQUE7O1FBQUFBOzs7UUFDRSxLQUFtQkMsZUFBbkI7VUFBQSxPQUFPN0I7UUFBUDtRQUdBLElBQUEsUUFBSyxHQUFMLEVBREFGLENBQUFBLFlBQUtFLElBQUlRLE9BQUFBLENBQUFBLENBQVRWLENBQ0EsQ0FBQTtVQUNFSSxPQUFRQyxPQUFBQSxDQUFPMkIsZUFBZixFQUEwQkYsbUNBQWxCekI7UUFEVjtVQURBO1FBQ0E7UUFJQW9CLE9BQU8sQ0FBQSxRQUFBekIsQ0FBQUEsWUFBQUUsSUFBSVEsT0FBQUEsQ0FBQUEsQ0FBSlYsQ0FBQSxDQUFBLEdBQUEsQ0FBQSxTQUFBLElBQUEsQ0FBZThCLENBQUNBLEdBQURBLENBQURSLE9BQUFBLENBQUFBLENBQWQsQ0FBQTtRQUVQLE9BQUEsUUFBTXBCLElBQUFXLHNCQUFBQSxDQUFrQlksSUFBbEJaLENBQU4sQ0FBQTs7VUFDRSxtQkFBTVksSUFBTjtVQUNBQSxPQUFLRyxTQUFMSCxJQUFLRyxFQUFHMUIsSUFBQWhCLE1BQUFBLENBQUFBLENBQUgwQztRQUZQO1FBSUFFLE9BQUE1QjtNQWRGNEIsQ0FBQUEsR0FBQUE7O0FBaUJBRyxNQUFBQSxvQkFBQUEsZ0JBQVNULEtBQVRTO0FBQUFBLFFBQUFBOzs7O1FBRUUsSUF6R04sQ0FBQSxRQXlHWUEsR0F6R1osRUF3R01qQyxDQUFBQSxZQUFLRSxJQUFJUyxLQUFBQSxDQUFBQSxDQUFUWCxDQXhHTixDQUFBLElBQUEsQ0FBQSxRQXlHbUJpQyxDQUFDQSxHQUFEQSxDQUFEWCxPQUFBQSxDQUFBQSxDQXpHbEIsRUFBQSxTQUFBLENBQUEsQ0FBQSxDQXlHTTtVQUNFbEIsT0FBUUMsT0FBQUEsQ0FBTzZCLHVCQUFmLEVBQW1DaEMsSUFBSVMsS0FBQUEsQ0FBQUEsQ0FBL0JOO1FBRFYsT0FFQSxJQUFBLFFBQUssR0FBTCxFQTNHTixTQTJHTSxDQUFBO1VBQ0VELE9BQVFDLE9BQUFBLENBQU84QixpQkFBZixFQUE2QkYsNERBQXJCNUI7UUFEVjtVQUhBO1FBR0E7UUFJQW9CLE9BQWdCSSxVQUFUM0IsSUFBSVMsS0FBQUEsQ0FBQUEsQ0FBS2tCLEVBQWFBLFVBQVQzQixJQUFJUyxLQUFBQSxDQUFBQSxDQUFLa0IsRUFBRTNCLElBQUlRLE9BQUFBLENBQUFBLENBQU5tQixDQUFjTyxNQUFBQSxDQUFFbEMsSUFBQWhCLE1BQUFBLENBQUFBLENBQUZrRCxDQUEzQlA7UUFDaEIsS0FBQSxRQUFvQjNCLElBQUFXLHNCQUFBQSxDQUFrQlksSUFBbEJaLENBQXBCLENBQUE7VUFBQVksT0FBS0ksVUFBTEosSUFBS0ksRUFBRzNCLElBQUFoQixNQUFBQSxDQUFBQSxDQUFIMkM7UUFBTDtRQUVBLEtBQUEsUUFBc0RMLEtBQXRELENBQUE7VUFBQSxPQUFPLENBQUEsUUFBQXRCLElBQUFrQix5QkFBQUEsQ0FBcUJLLElBQXJCTCxDQUFBLENBQUEsR0FBQSxDQUE2QkssSUFBN0IsSUFBQSxDQUFvQyxHQUFwQyxDQUFBO1FBQVA7UUFFQUMsTUFBTTtRQUVOLE9BQUEsUUFBTSxDQUFBLFFBQUExQixDQUFBQSxZQUFBRSxJQUFBa0IseUJBQUFBLENBQXFCSyxJQUFyQkwsQ0FBQXBCLENBQUEsQ0FBQSxHQUFBLENBQW9DZ0IsT0FBTlEsS0FBTVIsRUFBRWIsQ0FBRmEsQ0FBcEMsSUFBQSxDQUFBLFNBQUEsQ0FBQSxDQUFOLENBQUE7O1VBQ0VVLEdBQUlDLE9BQUFBLENBQUdGLElBQUhFO1VBQ0pGLE9BQUtJLFVBQUxKLElBQUtJLEVBQUczQixJQUFBaEIsTUFBQUEsQ0FBQUEsQ0FBSDJDO1VBQ0xMLFFBQU1LLFVBQU5MLEtBQU1LLEVBQUdoQyxDQUFIZ0M7UUFIUjtRQU1BSSxPQUFBUCxHQUFHVyxTQUFBQSxDQUFBQTtNQXJCTEosQ0FBQUEsSUFBQUE7O0FBd0JBSyxNQUFBQSxvQkFBQUEsZ0JBQUFBO0FBQUFBLFFBQUFBOzs7UUFDRUMsWUFBWSxDQUFBLFFBQUt2QixPQUFMZCxJQUFBaEIsTUFBQUEsQ0FBQUEsQ0FBSzhCLEVBQUViLENBQUZhLENBQUwsQ0FBQSxHQUFBLENBQVduQixDQUFYLElBQUEsQ0FBZTJDLEVBQWYsQ0FBQTtRQUVaLElBQUEsS0FBSXRDLElBQUFXLHNCQUFBQSxDQUFrQlgsSUFBSVEsT0FBQUEsQ0FBQUEsQ0FBdEJHLENBQUosQ0FBQTtVQUNFeUIsT0FBQW5DO1FBREYsT0FFQSxJQUFBLFFBQU0sQ0FBRW1DLENBQUNBLEdBQURBLENBQURoQixPQUFBQSxDQUFBQSxDQUFELEVBQVVnQixHQUFWLENBQWVHLGFBQUFBLENBQVV2QyxJQUFBaEIsTUFBQUEsQ0FBQUEsQ0FBVnVELENBQXJCLENBQUE7VUFDRUgsT0FBQXpDO1FBREYsT0FFQSxJQUFNLENBQUEsUUFBQSxDQUFRNkMsVUFBTkosQ0FBQ0EsR0FBREEsQ0FBRGhCLE9BQUFBLENBQUFBLENBQU9vQixFQUFFSCxTQUFGRyxDQUFSLEVBQXFCLEdBQXJCLENBQXlCRCxhQUFBQSxDQUFVdkMsSUFBSVEsT0FBQUEsQ0FBQUEsQ0FBZCtCLENBQXpCLENBQUEsSUFBQSxDQUFBLFFBQ0EsQ0FBT0MsVUFBTEosR0FBS0ksRUFBRUgsU0FBRkcsQ0FBUCxFQUFvQixHQUFwQixDQUF3QkQsYUFBQUEsQ0FBVXZDLElBQUlTLEtBQUFBLENBQUFBLENBQWQ4QixDQUR4QixDQUFBLENBQUEsQ0FBTjtVQUVFSCxPQUFDQSxHQUFEQTtRQUZGOztVQUlFYixPQUFnQkksVUFBVDNCLElBQUlTLEtBQUFBLENBQUFBLENBQUtrQixFQUFhQSxVQUFUM0IsSUFBSVMsS0FBQUEsQ0FBQUEsQ0FBS2tCLEVBQUUzQixJQUFJUSxPQUFBQSxDQUFBQSxDQUFObUIsQ0FBY08sTUFBQUEsQ0FBRWxDLElBQUFoQixNQUFBQSxDQUFBQSxDQUFGa0QsQ0FBM0JQO1VBQ2hCLEtBQUEsUUFBb0IzQixJQUFBVyxzQkFBQUEsQ0FBa0JZLElBQWxCWixDQUFwQixDQUFBO1lBQUFZLE9BQUtJLFVBQUxKLElBQUtJLEVBQUczQixJQUFBaEIsTUFBQUEsQ0FBQUEsQ0FBSDJDO1VBQUw7VUFDQVMsT0FBc0NWLFNBQWpCZSxXQUFkZCxVQUFMSixJQUFLSSxFQUFFM0IsSUFBSVEsT0FBQUEsQ0FBQUEsQ0FBTm1CLENBQWNjLEVBQUV6QyxJQUFBaEIsTUFBQUEsQ0FBQUEsQ0FBRnlELENBQU9DLEtBQUFBLENBQUFBLENBQUlDLE1BQUFBLENBQUFBLENBQU1qQixFQUFFL0IsQ0FBRitCO1FBTnhDO01BUEZVLENBQUFBLEdBQUFBOztBQWlCQVEsTUFBQUEsa0JBQUFBLHNDQUFPQyxLQUFQRDtBQUFBQSxRQUFBQTs7UUFDRSxJQUFBLFFBQUE5QyxDQUFBQSxZQUFBLENBQUEsUUFBQWdELENBQUFBLFlBQUEsQ0FBQSxRQUFBQyxDQUFBQSxZQUFBLENBQUEsUUFBQUMsQ0FBQUEsWUFBQWhELElBQUlNLE9BQUFBLENBQUFBLENBQU9zQyxPQUFBQSxDQUFHQyxLQUFLdkMsT0FBQUEsQ0FBQUEsQ0FBUnNDLENBQVhJLENBQUEsQ0FBQSxHQUFBLENBQ0VoRCxJQUFJUSxPQUFBQSxDQUFBQSxDQUFPb0MsT0FBQUEsQ0FBR0MsS0FBS3JDLE9BQUFBLENBQUFBLENBQVJvQyxDQURiLElBQUEsQ0FBQSxTQUFBLENBQUEsQ0FBQUcsQ0FBQSxDQUFBLEdBQUEsQ0FFRS9DLElBQUlTLEtBQUFBLENBQUFBLENBQUttQyxPQUFBQSxDQUFHQyxLQUFLcEMsS0FBQUEsQ0FBQUEsQ0FBUm1DLENBRlgsSUFBQSxDQUFBLFNBQUEsQ0FBQSxDQUFBRSxDQUFBLENBQUEsR0FBQSxDQUdFOUMsSUFBQWhCLE1BQUFBLENBQUFBLENBQUs0RCxPQUFBQSxDQUFHQyxLQUFLN0QsTUFBQUEsQ0FBQUEsQ0FBUjRELENBSFAsSUFBQSxDQUFBLFNBQUEsQ0FBQSxDQUFBOUMsQ0FBQSxDQUFBO1VBSUU4QyxPQUFBNUMsSUFBQVUsaUJBQUFBLENBQUFBLENBQWFrQyxPQUFBQSxDQUFHQyxLQUFLbkMsaUJBQUFBLENBQUFBLENBQVJrQztRQUpmO1VBQUFBLE9BQUE7UUFBQTtNQURGQSxDQUFBQSxHQUFBQTs7QUFRQUssTUFBQUEsb0JBQUFBLGdCQUFBQTtBQUFBQSxRQUFBQTs7UUFDRUEsT0FBQSxDQUFDakQsSUFBSVEsT0FBQUEsQ0FBQUEsQ0FBTCxFQUFhUixJQUFJUyxLQUFBQSxDQUFBQSxDQUFqQixFQUF1QlQsSUFBQWhCLE1BQUFBLENBQUFBLENBQXZCLEVBQTZCZ0IsSUFBQVUsaUJBQUFBLENBQUFBLENBQTdCLENBQTBDdUMsTUFBQUEsQ0FBQUE7TUFENUNBLENBQUFBLEdBQUFBOztBQUlBQyxNQUFBQSx1QkFBQUEsbUJBQUFBO0FBQUFBLFFBQUFBOztRQUNFLElBQUEsUUFBR3pELGlCQUFILENBQUE7O1VBQ0UwRCxPQUFPLENBQUEsUUFBRzdELGNBQUgsQ0FBQSxHQUFBLENBQ0c0RCxHQUFELEdBQUEsQ0FBSTNELFVBQUosQ0FBQSxHQUFBLENBQWFGLGNBQVU2RCxTQUFBQSxDQUFBQSxDQUF2QixDQUFBLEdBQWdDQSxJQUFoQyxHQUFBLENBQW9DMUQsVUFBcEMsQ0FBQSxHQUFBLENBQTZDRixjQUFVNEQsU0FBQUEsQ0FBQUEsQ0FBdkQsQ0FBQSxHQUFnRUEsR0FEbEUsSUFFQSxDQUFBLFFBQU03RCxjQUFOLENBQUEsR0FBQSxDQUNHNkQsR0FBRCxHQUFBLENBQUkzRCxVQUFKLENBQUEsR0FBQSxDQUFhRixjQUFVNkQsU0FBQUEsQ0FBQUEsQ0FBdkIsQ0FBQSxHQUFnQ0EsR0FEbEMsSUFBQSxHQUFBLENBRkE7VUFNUEEsT0FBQ0EsR0FBRCxHQUFBLENBQUl6RCxpQkFBYXlELFNBQUFBLENBQUFBLENBQWpCLENBQUEsR0FBMEJBLEdBQTFCLEdBQUEsQ0FBNkJoRSxvQkFBN0IsQ0FBQSxHQUFBLENBQWdEaUUsSUFBaEQsQ0FBQSxHQUFxREQ7UUFQdkQ7O1VBU0VDLE9BQU8sQ0FBQSxRQUFPdEQsZ0JBQVAsQ0FBQSxHQUFBLENBQUEsR0FBQSxJQUFBLENBQ0dxRCxHQUFELEdBQUEsQ0FBSXhELFNBQUosQ0FBQSxHQUFVd0QsR0FEWixDQUFBO1VBR1BBLE9BQUNBLElBQUQsR0FBQSxDQUFLdEQsVUFBTXNELFNBQUFBLENBQUFBLENBQVgsQ0FBQSxHQUFvQkEsSUFBcEIsR0FBQSxDQUF3QmhFLG9CQUF4QixDQUFBLEdBQUEsQ0FBMkNpRSxJQUEzQyxDQUFBLEdBQWdERDtRQVpsRDtNQURGQSxDQUFBQSxHQUFBQTtNQWlCQSxhQUFNLEtBQU4sRUFBVSxJQUFWO01BQ0FyRSxPQUFBLGFBQU0sTUFBTixFQUFXLElBQVg7SUE3S0ZBLEdBQU1tQixJQUFObkIsRUFBaUNtQixJQUFqQ25CO0VBREZELEdBQU0sSUFBTkEsRUFBQUEsSUFBQUE7QUFBQUQ7In19LHsib2Zmc2V0Ijp7ImxpbmUiOjE4NDc2LCJjb2x1bW4iOjB9LCJtYXAiOnsidmVyc2lvbiI6Mywic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29yZWxpYi9tb2R1bGUucmIiXSwic291cmNlc0NvbnRlbnQiOlsiIyBoZWxwZXJzOiB0cnV0aHksIGNvZXJjZV90bywgY29uc3Rfc2V0LCBPYmplY3QsIHJldHVybl9pdmFyLCBhc3NpZ25faXZhciwgaXZhciwgZGVueV9mcm96ZW5fYWNjZXNzLCBmcmVlemUsIHByb3BcblxuY2xhc3MgOjpNb2R1bGVcbiAgZGVmIHNlbGYuYWxsb2NhdGVcbiAgICAleHtcbiAgICAgIHZhciBtb2R1bGUgPSBPcGFsLmFsbG9jYXRlX21vZHVsZShuaWwsIGZ1bmN0aW9uKCl7fSk7XG4gICAgICAvLyBMaW5rIHRoZSBwcm90b3R5cGUgb2YgTW9kdWxlIHN1YmNsYXNzZXNcbiAgICAgIGlmIChzZWxmICE9PSBPcGFsLk1vZHVsZSkgT2JqZWN0LnNldFByb3RvdHlwZU9mKG1vZHVsZSwgc2VsZi4kJHByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gbW9kdWxlO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGluaXRpYWxpemUoJmJsb2NrKVxuICAgIG1vZHVsZV9ldmFsKCZibG9jaykgaWYgYmxvY2tfZ2l2ZW4/XG4gIGVuZFxuXG4gIGRlZiA9PT0ob2JqZWN0KVxuICAgIHJldHVybiBmYWxzZSBpZiBgb2JqZWN0ID09IG51bGxgXG5cbiAgICBgT3BhbC5pc19hKG9iamVjdCwgc2VsZilgXG4gIGVuZFxuXG4gIGRlZiA8KG90aGVyKVxuICAgIHVubGVzcyA6Ok1vZHVsZSA9PT0gb3RoZXJcbiAgICAgIDo6S2VybmVsLnJhaXNlIDo6VHlwZUVycm9yLCAnY29tcGFyZWQgd2l0aCBub24gY2xhc3MvbW9kdWxlJ1xuICAgIGVuZFxuXG4gICAgIyBjbGFzcyBjYW5ub3QgYmUgYSBkZXNjZW5kYW50IG9mIGl0c2VsZlxuICAgICV4e1xuICAgICAgdmFyIHdvcmtpbmcgPSBzZWxmLFxuICAgICAgICAgIGFuY2VzdG9ycyxcbiAgICAgICAgICBpLCBsZW5ndGg7XG5cbiAgICAgIGlmICh3b3JraW5nID09PSBvdGhlcikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDAsIGFuY2VzdG9ycyA9IE9wYWwuYW5jZXN0b3JzKHNlbGYpLCBsZW5ndGggPSBhbmNlc3RvcnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGFuY2VzdG9yc1tpXSA9PT0gb3RoZXIpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwLCBhbmNlc3RvcnMgPSBPcGFsLmFuY2VzdG9ycyhvdGhlciksIGxlbmd0aCA9IGFuY2VzdG9ycy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYW5jZXN0b3JzW2ldID09PSBzZWxmKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuaWw7XG4gICAgfVxuICBlbmRcblxuICBkZWYgPD0ob3RoZXIpXG4gICAgZXF1YWw/KG90aGVyKSB8fCBzZWxmIDwgb3RoZXJcbiAgZW5kXG5cbiAgZGVmID4ob3RoZXIpXG4gICAgdW5sZXNzIDo6TW9kdWxlID09PSBvdGhlclxuICAgICAgOjpLZXJuZWwucmFpc2UgOjpUeXBlRXJyb3IsICdjb21wYXJlZCB3aXRoIG5vbiBjbGFzcy9tb2R1bGUnXG4gICAgZW5kXG5cbiAgICBvdGhlciA8IHNlbGZcbiAgZW5kXG5cbiAgZGVmID49KG90aGVyKVxuICAgIGVxdWFsPyhvdGhlcikgfHwgc2VsZiA+IG90aGVyXG4gIGVuZFxuXG4gIGRlZiA8PT4ob3RoZXIpXG4gICAgJXh7XG4gICAgICBpZiAoc2VsZiA9PT0gb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdW5sZXNzIDo6TW9kdWxlID09PSBvdGhlclxuICAgICAgcmV0dXJuIG5pbFxuICAgIGVuZFxuXG4gICAgbHQgPSBzZWxmIDwgb3RoZXJcbiAgICByZXR1cm4gbmlsIGlmIGx0Lm5pbD9cbiAgICBsdCA/IC0xIDogMVxuICBlbmRcblxuICBkZWYgYWxpYXNfbWV0aG9kKG5ld25hbWUsIG9sZG5hbWUpXG4gICAgYCRkZW55X2Zyb3plbl9hY2Nlc3Moc2VsZilgXG5cbiAgICBuZXduYW1lID0gYCRjb2VyY2VfdG8obmV3bmFtZSwgI3s6OlN0cmluZ30sICd0b19zdHInKWBcbiAgICBvbGRuYW1lID0gYCRjb2VyY2VfdG8ob2xkbmFtZSwgI3s6OlN0cmluZ30sICd0b19zdHInKWBcbiAgICBgT3BhbC5hbGlhcyhzZWxmLCBuZXduYW1lLCBvbGRuYW1lKWBcblxuICAgIHNlbGZcbiAgZW5kXG5cbiAgZGVmIGFsaWFzX25hdGl2ZShtaWQsIGpzaWQgPSBtaWQpXG4gICAgYCRkZW55X2Zyb3plbl9hY2Nlc3Moc2VsZilgXG5cbiAgICBgT3BhbC5hbGlhc19uYXRpdmUoc2VsZiwgbWlkLCBqc2lkKWBcblxuICAgIHNlbGZcbiAgZW5kXG5cbiAgZGVmIGFuY2VzdG9yc1xuICAgIGBPcGFsLmFuY2VzdG9ycyhzZWxmKWBcbiAgZW5kXG5cbiAgZGVmIGFwcGVuZF9mZWF0dXJlcyhpbmNsdWRlcilcbiAgICBgJGRlbnlfZnJvemVuX2FjY2VzcyhpbmNsdWRlcilgXG5cbiAgICBgT3BhbC5hcHBlbmRfZmVhdHVyZXMoc2VsZiwgaW5jbHVkZXIpYFxuICAgIHNlbGZcbiAgZW5kXG5cbiAgZGVmIGF0dHJfYWNjZXNzb3IoKm5hbWVzKVxuICAgIGF0dHJfcmVhZGVyKCpuYW1lcylcbiAgICBhdHRyX3dyaXRlcigqbmFtZXMpXG4gIGVuZFxuXG4gIGRlZiBhdHRyKCphcmdzKVxuICAgICV4e1xuICAgICAgaWYgKGFyZ3MubGVuZ3RoID09IDIgJiYgKGFyZ3NbMV0gPT09IHRydWUgfHwgYXJnc1sxXSA9PT0gZmFsc2UpKSB7XG4gICAgICAgICN7d2FybiAnb3B0aW9uYWwgYm9vbGVhbiBhcmd1bWVudCBpcyBvYnNvbGV0ZWQnLCB1cGxldmVsOiAxfVxuXG4gICAgICAgIGFyZ3NbMV0gPyAje2F0dHJfYWNjZXNzb3IoYGFyZ3NbMF1gKX0gOiAje2F0dHJfcmVhZGVyKGBhcmdzWzBdYCl9O1xuICAgICAgICByZXR1cm4gbmlsO1xuICAgICAgfVxuICAgIH1cblxuICAgIGF0dHJfcmVhZGVyKCphcmdzKVxuICBlbmRcblxuICBkZWYgYXR0cl9yZWFkZXIoKm5hbWVzKVxuICAgICV4e1xuICAgICAgJGRlbnlfZnJvemVuX2FjY2VzcyhzZWxmKTtcblxuICAgICAgdmFyIHByb3RvID0gc2VsZi4kJHByb3RvdHlwZTtcblxuICAgICAgZm9yICh2YXIgaSA9IG5hbWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHZhciBuYW1lID0gbmFtZXNbaV0sXG4gICAgICAgICAgICBpZCAgID0gJyQnICsgbmFtZSxcbiAgICAgICAgICAgIGl2YXIgPSAkaXZhcihuYW1lKTtcblxuICAgICAgICB2YXIgYm9keSA9ICRyZXR1cm5faXZhcihpdmFyKTtcblxuICAgICAgICAvLyBpbml0aWFsaXplIHRoZSBpbnN0YW5jZSB2YXJpYWJsZSBhcyBuaWxcbiAgICAgICAgT3BhbC5wcm9wKHByb3RvLCBpdmFyLCBuaWwpO1xuXG4gICAgICAgIGJvZHkuJCRwYXJhbWV0ZXJzID0gW107XG4gICAgICAgIGJvZHkuJCRhcml0eSA9IDA7XG5cbiAgICAgICAgT3BhbC5kZWZuKHNlbGYsIGlkLCBib2R5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBuaWxcbiAgZW5kXG5cbiAgZGVmIGF0dHJfd3JpdGVyKCpuYW1lcylcbiAgICAleHtcbiAgICAgICRkZW55X2Zyb3plbl9hY2Nlc3Moc2VsZik7XG5cbiAgICAgIHZhciBwcm90byA9IHNlbGYuJCRwcm90b3R5cGU7XG5cbiAgICAgIGZvciAodmFyIGkgPSBuYW1lcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICB2YXIgbmFtZSA9IG5hbWVzW2ldLFxuICAgICAgICAgICAgaWQgICA9ICckJyArIG5hbWUgKyAnPScsXG4gICAgICAgICAgICBpdmFyID0gJGl2YXIobmFtZSk7XG5cbiAgICAgICAgdmFyIGJvZHkgPSAkYXNzaWduX2l2YXIoaXZhcilcblxuICAgICAgICBib2R5LiQkcGFyYW1ldGVycyA9IFtbJ3JlcSddXTtcbiAgICAgICAgYm9keS4kJGFyaXR5ID0gMTtcblxuICAgICAgICAvLyBpbml0aWFsaXplIHRoZSBpbnN0YW5jZSB2YXJpYWJsZSBhcyBuaWxcbiAgICAgICAgT3BhbC5wcm9wKHByb3RvLCBpdmFyLCBuaWwpO1xuXG4gICAgICAgIE9wYWwuZGVmbihzZWxmLCBpZCwgYm9keSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbmlsXG4gIGVuZFxuXG4gIGRlZiBhdXRvbG9hZChjb25zdCwgcGF0aClcbiAgICAleHtcbiAgICAgICRkZW55X2Zyb3plbl9hY2Nlc3Moc2VsZik7XG5cbiAgICAgIGlmICghI3tPcGFsLmNvbnN0X25hbWU/KGNvbnN0KX0pIHtcbiAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6Ok5hbWVFcnJvciwgXCJhdXRvbG9hZCBtdXN0IGJlIGNvbnN0YW50IG5hbWU6ICN7Y29uc3R9XCJ9XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXRoID09IFwiXCIpIHtcbiAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsICdlbXB0eSBmaWxlIG5hbWUnfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXNlbGYuJCRjb25zdC5oYXNPd25Qcm9wZXJ0eSgje2NvbnN0fSkpIHtcbiAgICAgICAgaWYgKCFzZWxmLiQkYXV0b2xvYWQpIHtcbiAgICAgICAgICBzZWxmLiQkYXV0b2xvYWQgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBPcGFsLmNvbnN0X2NhY2hlX3ZlcnNpb24rKztcbiAgICAgICAgc2VsZi4kJGF1dG9sb2FkWyN7Y29uc3R9XSA9IHsgcGF0aDogI3twYXRofSwgbG9hZGVkOiBmYWxzZSwgcmVxdWlyZWQ6IGZhbHNlLCBzdWNjZXNzOiBmYWxzZSwgZXhjZXB0aW9uOiBmYWxzZSB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5pbDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBhdXRvbG9hZD8oY29uc3QpXG4gICAgJXh7XG4gICAgICBpZiAoc2VsZi4kJGF1dG9sb2FkICYmIHNlbGYuJCRhdXRvbG9hZFsje2NvbnN0fV0gJiYgIXNlbGYuJCRhdXRvbG9hZFsje2NvbnN0fV0ucmVxdWlyZWQgJiYgIXNlbGYuJCRhdXRvbG9hZFsje2NvbnN0fV0uc3VjY2Vzcykge1xuICAgICAgICByZXR1cm4gc2VsZi4kJGF1dG9sb2FkWyN7Y29uc3R9XS5wYXRoO1xuICAgICAgfVxuXG4gICAgICB2YXIgYW5jZXN0b3JzID0gc2VsZi4kYW5jZXN0b3JzKCk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBhbmNlc3RvcnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGFuY2VzdG9yc1tpXS4kJGF1dG9sb2FkICYmIGFuY2VzdG9yc1tpXS4kJGF1dG9sb2FkWyN7Y29uc3R9XSAmJiAhYW5jZXN0b3JzW2ldLiQkYXV0b2xvYWRbI3tjb25zdH1dLnJlcXVpcmVkICYmICFhbmNlc3RvcnNbaV0uJCRhdXRvbG9hZFsje2NvbnN0fV0uc3VjY2Vzcykge1xuICAgICAgICAgIHJldHVybiBhbmNlc3RvcnNbaV0uJCRhdXRvbG9hZFsje2NvbnN0fV0ucGF0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5pbDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBjbGFzc192YXJpYWJsZXNcbiAgICBgT2JqZWN0LmtleXMoT3BhbC5jbGFzc192YXJpYWJsZXMoc2VsZikpYFxuICBlbmRcblxuICBkZWYgY2xhc3NfdmFyaWFibGVfZ2V0KG5hbWUpXG4gICAgbmFtZSA9IDo6T3BhbC5jbGFzc192YXJpYWJsZV9uYW1lIShuYW1lKVxuXG4gICAgYE9wYWwuY2xhc3NfdmFyaWFibGVfZ2V0KHNlbGYsIG5hbWUsIGZhbHNlKWBcbiAgZW5kXG5cbiAgZGVmIGNsYXNzX3ZhcmlhYmxlX3NldChuYW1lLCB2YWx1ZSlcbiAgICBgJGRlbnlfZnJvemVuX2FjY2VzcyhzZWxmKWBcblxuICAgIG5hbWUgPSA6Ok9wYWwuY2xhc3NfdmFyaWFibGVfbmFtZSEobmFtZSlcblxuICAgIGBPcGFsLmNsYXNzX3ZhcmlhYmxlX3NldChzZWxmLCBuYW1lLCB2YWx1ZSlgXG4gIGVuZFxuXG4gIGRlZiBjbGFzc192YXJpYWJsZV9kZWZpbmVkPyhuYW1lKVxuICAgIG5hbWUgPSA6Ok9wYWwuY2xhc3NfdmFyaWFibGVfbmFtZSEobmFtZSlcblxuICAgIGBPcGFsLmNsYXNzX3ZhcmlhYmxlcyhzZWxmKS5oYXNPd25Qcm9wZXJ0eShuYW1lKWBcbiAgZW5kXG5cbiAgZGVmIHJlbW92ZV9jbGFzc192YXJpYWJsZShuYW1lKVxuICAgIGAkZGVueV9mcm96ZW5fYWNjZXNzKHNlbGYpYFxuXG4gICAgbmFtZSA9IDo6T3BhbC5jbGFzc192YXJpYWJsZV9uYW1lIShuYW1lKVxuXG4gICAgJXh7XG4gICAgICBpZiAoT3BhbC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNlbGYuJCRjdmFycywgbmFtZSkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gc2VsZi4kJGN2YXJzW25hbWVdO1xuICAgICAgICBkZWxldGUgc2VsZi4kJGN2YXJzW25hbWVdO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6TmFtZUVycm9yLCBcImNhbm5vdCByZW1vdmUgI3tuYW1lfSBmb3IgI3tzZWxmfVwifVxuICAgICAgfVxuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGNvbnN0YW50cyhpbmhlcml0ID0gdHJ1ZSlcbiAgICBgT3BhbC5jb25zdGFudHMoc2VsZiwgaW5oZXJpdClgXG4gIGVuZFxuXG4gIGRlZiBzZWxmLmNvbnN0YW50cyhpbmhlcml0ID0gdW5kZWZpbmVkKVxuICAgICV4e1xuICAgICAgaWYgKGluaGVyaXQgPT0gbnVsbCkge1xuICAgICAgICB2YXIgbmVzdGluZyA9IChzZWxmLiQkbmVzdGluZyB8fCBbXSkuY29uY2F0KCRPYmplY3QpLFxuICAgICAgICAgICAgY29uc3RhbnQsIGNvbnN0YW50cyA9IHt9LFxuICAgICAgICAgICAgaSwgaWk7XG5cbiAgICAgICAgZm9yKGkgPSAwLCBpaSA9IG5lc3RpbmcubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgIGZvciAoY29uc3RhbnQgaW4gbmVzdGluZ1tpXS4kJGNvbnN0KSB7XG4gICAgICAgICAgICBjb25zdGFudHNbY29uc3RhbnRdID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGNvbnN0YW50cyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gT3BhbC5jb25zdGFudHMoc2VsZiwgaW5oZXJpdClcbiAgICAgIH1cbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBzZWxmLm5lc3RpbmdcbiAgICBgc2VsZi4kJG5lc3RpbmcgfHwgW11gXG4gIGVuZFxuXG4gICMgY2hlY2sgZm9yIGNvbnN0YW50IHdpdGhpbiBjdXJyZW50IHNjb3BlXG4gICMgaWYgaW5oZXJpdCBpcyB0cnVlIG9yIHNlbGYgaXMgT2JqZWN0LCB3aWxsIGFsc28gY2hlY2sgYW5jZXN0b3JzXG4gIGRlZiBjb25zdF9kZWZpbmVkPyhuYW1lLCBpbmhlcml0ID0gdHJ1ZSlcbiAgICBuYW1lID0gT3BhbC5jb25zdF9uYW1lIShuYW1lKVxuXG4gICAgOjpLZXJuZWwucmFpc2UgOjpOYW1lRXJyb3IubmV3KFwid3JvbmcgY29uc3RhbnQgbmFtZSAje25hbWV9XCIsIG5hbWUpIHVubGVzcyBuYW1lID1+IDo6T3BhbDo6Q09OU1RfTkFNRV9SRUdFWFBcblxuICAgICV4e1xuICAgICAgdmFyIG1vZHVsZSwgbW9kdWxlcyA9IFtzZWxmXSwgbW9kdWxlX2NvbnN0YW50cywgaSwgaWk7XG5cbiAgICAgIC8vIEFkZCB1cCBhbmNlc3RvcnMgaWYgaW5oZXJpdCBpcyB0cnVlXG4gICAgICBpZiAoaW5oZXJpdCkge1xuICAgICAgICBtb2R1bGVzID0gbW9kdWxlcy5jb25jYXQoT3BhbC5hbmNlc3RvcnMoc2VsZikpO1xuXG4gICAgICAgIC8vIEFkZCBPYmplY3QncyBhbmNlc3RvcnMgaWYgaXQncyBhIG1vZHVsZSDigJMgbW9kdWxlcyBoYXZlIG5vIGFuY2VzdG9ycyBvdGhlcndpc2VcbiAgICAgICAgaWYgKHNlbGYuJCRpc19tb2R1bGUpIHtcbiAgICAgICAgICBtb2R1bGVzID0gbW9kdWxlcy5jb25jYXQoWyRPYmplY3RdKS5jb25jYXQoT3BhbC5hbmNlc3RvcnMoJE9iamVjdCkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDAsIGlpID0gbW9kdWxlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgIG1vZHVsZSA9IG1vZHVsZXNbaV07XG4gICAgICAgIGlmIChtb2R1bGUuJCRjb25zdFsje25hbWV9XSAhPSBudWxsKSB7IHJldHVybiB0cnVlOyB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICBtb2R1bGUuJCRhdXRvbG9hZCAmJlxuICAgICAgICAgIG1vZHVsZS4kJGF1dG9sb2FkWyN7bmFtZX1dICYmXG4gICAgICAgICAgIW1vZHVsZS4kJGF1dG9sb2FkWyN7bmFtZX1dLnJlcXVpcmVkICYmXG4gICAgICAgICAgIW1vZHVsZS4kJGF1dG9sb2FkWyN7bmFtZX1dLnN1Y2Nlc3NcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGNvbnN0X2dldChuYW1lLCBpbmhlcml0ID0gdHJ1ZSlcbiAgICBuYW1lID0gT3BhbC5jb25zdF9uYW1lIShuYW1lKVxuXG4gICAgJXh7XG4gICAgICBpZiAobmFtZS5pbmRleE9mKCc6OicpID09PSAwICYmIG5hbWUgIT09ICc6Oicpe1xuICAgICAgICBuYW1lID0gbmFtZS5zbGljZSgyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiBgbmFtZS5pbmRleE9mKCc6OicpICE9IC0xICYmIG5hbWUgIT0gJzo6J2BcbiAgICAgIHJldHVybiBuYW1lLnNwbGl0KCc6OicpLmluamVjdChzZWxmKSB7IHxvLCBjfCBvLmNvbnN0X2dldChjKSB9XG4gICAgZW5kXG5cbiAgICA6Oktlcm5lbC5yYWlzZSA6Ok5hbWVFcnJvci5uZXcoXCJ3cm9uZyBjb25zdGFudCBuYW1lICN7bmFtZX1cIiwgbmFtZSkgdW5sZXNzIG5hbWUgPX4gOjpPcGFsOjpDT05TVF9OQU1FX1JFR0VYUFxuXG4gICAgJXh7XG4gICAgICBpZiAoaW5oZXJpdCkge1xuICAgICAgICByZXR1cm4gT3BhbC4kJChbc2VsZl0sIG5hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIE9wYWwuY29uc3RfZ2V0X2xvY2FsKHNlbGYsIG5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGNvbnN0X21pc3NpbmcobmFtZSlcbiAgICBmdWxsX2NvbnN0X25hbWUgPSBzZWxmID09IDo6T2JqZWN0ID8gbmFtZSA6IFwiI3tzZWxmfTo6I3tuYW1lfVwiXG5cbiAgICA6Oktlcm5lbC5yYWlzZSA6Ok5hbWVFcnJvci5uZXcoXCJ1bmluaXRpYWxpemVkIGNvbnN0YW50ICN7ZnVsbF9jb25zdF9uYW1lfVwiLCBuYW1lKVxuICBlbmRcblxuICBkZWYgY29uc3Rfc2V0KG5hbWUsIHZhbHVlKVxuICAgIGAkZGVueV9mcm96ZW5fYWNjZXNzKHNlbGYpYFxuXG4gICAgbmFtZSA9IDo6T3BhbC5jb25zdF9uYW1lIShuYW1lKVxuXG4gICAgaWYgbmFtZSAhfiA6Ok9wYWw6OkNPTlNUX05BTUVfUkVHRVhQIHx8IG5hbWUuc3RhcnRfd2l0aD8oJzo6JylcbiAgICAgIDo6S2VybmVsLnJhaXNlIDo6TmFtZUVycm9yLm5ldyhcIndyb25nIGNvbnN0YW50IG5hbWUgI3tuYW1lfVwiLCBuYW1lKVxuICAgIGVuZFxuXG4gICAgYCRjb25zdF9zZXQoc2VsZiwgbmFtZSwgdmFsdWUpYFxuXG4gICAgdmFsdWVcbiAgZW5kXG5cbiAgZGVmIHB1YmxpY19jb25zdGFudChjb25zdF9uYW1lKVxuICBlbmRcblxuICBkZWYgZGVmaW5lX21ldGhvZChuYW1lLCBtZXRob2QgPSB1bmRlZmluZWQsICZibG9jaylcbiAgICAleHtcbiAgICAgICRkZW55X2Zyb3plbl9hY2Nlc3Moc2VsZik7XG5cbiAgICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCAmJiBibG9jayA9PT0gbmlsKVxuICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgJ3RyaWVkIHRvIGNyZWF0ZSBhIFByb2Mgb2JqZWN0IHdpdGhvdXQgYSBibG9jayd9XG4gICAgfVxuXG4gICAgYmxvY2sgfHw9IGNhc2UgbWV0aG9kXG4gICAgICAgICAgICAgIHdoZW4gOjpQcm9jXG4gICAgICAgICAgICAgICAgbWV0aG9kXG5cbiAgICAgICAgICAgICAgd2hlbiA6Ok1ldGhvZFxuICAgICAgICAgICAgICAgIGAje21ldGhvZC50b19wcm9jfS4kJHVuYm91bmRgXG5cbiAgICAgICAgICAgICAgd2hlbiA6OlVuYm91bmRNZXRob2RcbiAgICAgICAgICAgICAgICAtPigqYXJncykge1xuICAgICAgICAgICAgICAgICAgYm91bmQgPSBtZXRob2QuYmluZChzZWxmKVxuICAgICAgICAgICAgICAgICAgYm91bmQuY2FsbCgqYXJncylcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIDo6S2VybmVsLnJhaXNlIDo6VHlwZUVycm9yLCBcIndyb25nIGFyZ3VtZW50IHR5cGUgI3tibG9jay5jbGFzc30gKGV4cGVjdGVkIFByb2MvTWV0aG9kKVwiXG4gICAgICAgICAgICAgIGVuZFxuXG4gICAgJXh7XG4gICAgICBpZiAodHlwZW9mKFByb3h5KSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIG1ldGEgPSBPYmplY3QuY3JlYXRlKG51bGwpXG5cbiAgICAgICAgYmxvY2suJCRwcm94eV90YXJnZXQgPSBibG9ja1xuICAgICAgICBibG9jayA9IG5ldyBQcm94eShibG9jaywge1xuICAgICAgICAgIGFwcGx5OiBmdW5jdGlvbih0YXJnZXQsIHNlbGYsIGFyZ3MpIHtcbiAgICAgICAgICAgIHZhciBvbGRfbmFtZSA9IHRhcmdldC4kJGpzaWRcbiAgICAgICAgICAgIHRhcmdldC4kJGpzaWQgPSBuYW1lO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5hcHBseShzZWxmLCBhcmdzKTtcbiAgICAgICAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICAgICAgICBpZiAoZSA9PT0gdGFyZ2V0LiQkYnJrIHx8IGUgPT09IHRhcmdldC4kJHJldCkgcmV0dXJuIGUuJHY7XG4gICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICB0YXJnZXQuJCRqc2lkID0gb2xkX25hbWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIGJsb2NrLiQkanNpZCAgICAgICAgPSBuYW1lO1xuICAgICAgYmxvY2suJCRzICAgICAgICAgICA9IG51bGw7XG4gICAgICBibG9jay4kJGRlZiAgICAgICAgID0gYmxvY2s7XG4gICAgICBibG9jay4kJGRlZmluZV9tZXRoID0gdHJ1ZTtcblxuICAgICAgcmV0dXJuIE9wYWwuZGVmbihzZWxmLCAnJCcgKyBuYW1lLCBibG9jayk7XG4gICAgfVxuICBlbmRcblxuICBkZWYgZnJlZXplXG4gICAgIyBTcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGZyZWV6ZSwgYmVjYXVzZSB0aGUgJCRiYXNlX21vZHVsZSBwcm9wZXJ0eSBuZWVkcyB0byBiZVxuICAgICMgYWNjZXNzaWJsZSBkZXNwaXRlIHRoZSBmcm96ZW4gc3RhdHVzXG5cbiAgICByZXR1cm4gc2VsZiBpZiBmcm96ZW4/XG5cbiAgICAleHtcbiAgICAgIGlmICghc2VsZi5oYXNPd25Qcm9wZXJ0eSgnJCRiYXNlX21vZHVsZScpKSB7ICRwcm9wKHNlbGYsICckJGJhc2VfbW9kdWxlJywgbnVsbCk7IH1cblxuICAgICAgcmV0dXJuICRmcmVlemUoc2VsZik7XG4gICAgfVxuICBlbmRcblxuICBkZWYgcmVtb3ZlX21ldGhvZCgqbmFtZXMpXG4gICAgJXh7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBuYW1lID0gbmFtZXNbaV07XG4gICAgICAgIGlmICghKHR5cGVvZiBuYW1lID09PSBcInN0cmluZ1wiIHx8IG5hbWUuJCRpc19zdHJpbmcpKSB7XG4gICAgICAgICAgI3tyYWlzZSA6OlR5cGVFcnJvciwgXCIje25hbWV9IGlzIG5vdCBhIHN5bWJvbCBub3IgYSBzdHJpbmdcIn1cbiAgICAgICAgfVxuICAgICAgICAkZGVueV9mcm96ZW5fYWNjZXNzKHNlbGYpO1xuXG4gICAgICAgIE9wYWwucmRlZihzZWxmLCBcIiRcIiArIG5hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNlbGZcbiAgZW5kXG5cbiAgZGVmIHNpbmdsZXRvbl9jbGFzcz9cbiAgICBgISFzZWxmLiQkaXNfc2luZ2xldG9uYFxuICBlbmRcblxuICBkZWYgaW5jbHVkZSgqbW9kcylcbiAgICAleHtcbiAgICAgIGZvciAodmFyIGkgPSBtb2RzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHZhciBtb2QgPSBtb2RzW2ldO1xuXG4gICAgICAgIGlmICghbW9kLiQkaXNfbW9kdWxlKSB7XG4gICAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OlR5cGVFcnJvciwgXCJ3cm9uZyBhcmd1bWVudCB0eXBlICN7YG1vZGAuY2xhc3N9IChleHBlY3RlZCBNb2R1bGUpXCJ9O1xuICAgICAgICB9XG5cbiAgICAgICAgI3tgbW9kYC5hcHBlbmRfZmVhdHVyZXMgc2VsZn07XG4gICAgICAgICN7YG1vZGAuaW5jbHVkZWQgc2VsZn07XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2VsZlxuICBlbmRcblxuICBkZWYgaW5jbHVkZWRfbW9kdWxlc1xuICAgIGBPcGFsLmluY2x1ZGVkX21vZHVsZXMoc2VsZilgXG4gIGVuZFxuXG4gIGRlZiBpbmNsdWRlPyhtb2QpXG4gICAgJXh7XG4gICAgICBpZiAoIW1vZC4kJGlzX21vZHVsZSkge1xuICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6VHlwZUVycm9yLCBcIndyb25nIGFyZ3VtZW50IHR5cGUgI3tgbW9kYC5jbGFzc30gKGV4cGVjdGVkIE1vZHVsZSlcIn07XG4gICAgICB9XG5cbiAgICAgIHZhciBpLCBpaSwgbW9kMiwgYW5jZXN0b3JzID0gT3BhbC5hbmNlc3RvcnMoc2VsZik7XG5cbiAgICAgIGZvciAoaSA9IDAsIGlpID0gYW5jZXN0b3JzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgbW9kMiA9IGFuY2VzdG9yc1tpXTtcbiAgICAgICAgaWYgKG1vZDIgPT09IG1vZCAmJiBtb2QyICE9PSBzZWxmKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGluc3RhbmNlX21ldGhvZChuYW1lKVxuICAgICV4e1xuICAgICAgdmFyIG1ldGggPSBzZWxmLiQkcHJvdG90eXBlWyckJyArIG5hbWVdO1xuXG4gICAgICBpZiAoIW1ldGggfHwgbWV0aC4kJHN0dWIpIHtcbiAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6Ok5hbWVFcnJvci5uZXcoXCJ1bmRlZmluZWQgbWV0aG9kIGAje25hbWV9JyBmb3IgY2xhc3MgYCN7c2VsZi5uYW1lfSdcIiwgbmFtZSl9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gI3s6OlVuYm91bmRNZXRob2QubmV3KHNlbGYsIGBtZXRoLiQkb3duZXIgfHwgI3tzZWxmfWAsIGBtZXRoYCwgbmFtZSl9O1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGluc3RhbmNlX21ldGhvZHMoaW5jbHVkZV9zdXBlciA9IHRydWUpXG4gICAgJXh7XG4gICAgICBpZiAoJHRydXRoeSgje2luY2x1ZGVfc3VwZXJ9KSkge1xuICAgICAgICByZXR1cm4gT3BhbC5pbnN0YW5jZV9tZXRob2RzKHNlbGYpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIE9wYWwub3duX2luc3RhbmNlX21ldGhvZHMoc2VsZik7XG4gICAgICB9XG4gICAgfVxuICBlbmRcblxuICBkZWYgaW5jbHVkZWQobW9kKVxuICBlbmRcblxuICBkZWYgZXh0ZW5kZWQobW9kKVxuICBlbmRcblxuICBkZWYgZXh0ZW5kX29iamVjdChvYmplY3QpXG4gICAgYCRkZW55X2Zyb3plbl9hY2Nlc3Mob2JqZWN0KWBcbiAgICBuaWxcbiAgZW5kXG5cbiAgZGVmIG1ldGhvZF9hZGRlZCgqKVxuICBlbmRcblxuICBkZWYgbWV0aG9kX3JlbW92ZWQoKilcbiAgZW5kXG5cbiAgZGVmIG1ldGhvZF91bmRlZmluZWQoKilcbiAgZW5kXG5cbiAgZGVmIG1vZHVsZV9ldmFsKCphcmdzLCAmYmxvY2spXG4gICAgaWYgYmxvY2submlsPyAmJiBgISFPcGFsLmNvbXBpbGVgXG4gICAgICA6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsICd3cm9uZyBudW1iZXIgb2YgYXJndW1lbnRzICgwIGZvciAxLi4zKScgdW5sZXNzICgxLi4zKS5jb3Zlcj8gYXJncy5zaXplXG5cbiAgICAgIHN0cmluZywgZmlsZSwgX2xpbmVubyA9ICphcmdzXG4gICAgICBkZWZhdWx0X2V2YWxfb3B0aW9ucyA9IHsgZmlsZTogKGZpbGUgfHwgJyhldmFsKScpLCBldmFsOiB0cnVlIH1cbiAgICAgIGNvbXBpbGluZ19vcHRpb25zID0gX19PUEFMX0NPTVBJTEVSX0NPTkZJR19fLm1lcmdlKGRlZmF1bHRfZXZhbF9vcHRpb25zKVxuICAgICAgY29tcGlsZWQgPSA6Ok9wYWwuY29tcGlsZSBzdHJpbmcsIGNvbXBpbGluZ19vcHRpb25zXG4gICAgICBibG9jayA9IDo6S2VybmVsLnByb2MgZG9cbiAgICAgICAgJXh7bmV3IEZ1bmN0aW9uKFwiT3BhbCxzZWxmXCIsIFwicmV0dXJuIFwiICsgY29tcGlsZWQpKE9wYWwsIHNlbGYpfVxuICAgICAgZW5kXG4gICAgZWxzaWYgYXJncy5hbnk/XG4gICAgICA6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsIFwid3JvbmcgbnVtYmVyIG9mIGFyZ3VtZW50cyAoI3thcmdzLnNpemV9IGZvciAwKVwiIFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuXFxuICBOT1RFOklmIHlvdSB3YW50IHRvIGVuYWJsZSBwYXNzaW5nIGEgU3RyaW5nIGFyZ3VtZW50IHBsZWFzZSBhZGQgXFxcInJlcXVpcmUgJ29wYWwtcGFyc2VyJ1xcXCIgdG8geW91ciBzY3JpcHRcXG5cIlxuICAgIGVuZFxuXG4gICAgJXh7XG4gICAgICB2YXIgb2xkID0gYmxvY2suJCRzLFxuICAgICAgICAgIHJlc3VsdDtcblxuICAgICAgYmxvY2suJCRzID0gbnVsbDtcbiAgICAgIHJlc3VsdCA9IGJsb2NrLmFwcGx5KHNlbGYsIFtzZWxmXSk7XG4gICAgICBibG9jay4kJHMgPSBvbGQ7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICBlbmRcblxuICBkZWYgbW9kdWxlX2V4ZWMoKmFyZ3MsICZibG9jaylcbiAgICAleHtcbiAgICAgIGlmIChibG9jayA9PT0gbmlsKSB7XG4gICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpMb2NhbEp1bXBFcnJvciwgJ25vIGJsb2NrIGdpdmVuJ31cbiAgICAgIH1cblxuICAgICAgdmFyIGJsb2NrX3NlbGYgPSBibG9jay4kJHMsIHJlc3VsdDtcblxuICAgICAgYmxvY2suJCRzID0gbnVsbDtcbiAgICAgIHJlc3VsdCA9IGJsb2NrLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgICAgYmxvY2suJCRzID0gYmxvY2tfc2VsZjtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBtZXRob2RfZGVmaW5lZD8obWV0aG9kKVxuICAgICV4e1xuICAgICAgdmFyIGJvZHkgPSBzZWxmLiQkcHJvdG90eXBlWyckJyArIG1ldGhvZF07XG4gICAgICByZXR1cm4gKCEhYm9keSkgJiYgIWJvZHkuJCRzdHViO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIG1vZHVsZV9mdW5jdGlvbigqbWV0aG9kcylcbiAgICAleHtcbiAgICAgICRkZW55X2Zyb3plbl9hY2Nlc3Moc2VsZik7XG5cbiAgICAgIGlmIChtZXRob2RzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBzZWxmLiQkbW9kdWxlX2Z1bmN0aW9uID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIG5pbDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gbWV0aG9kcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBtZXRoID0gbWV0aG9kc1tpXSxcbiAgICAgICAgICAgICAgaWQgICA9ICckJyArIG1ldGgsXG4gICAgICAgICAgICAgIGZ1bmMgPSBzZWxmLiQkcHJvdG90eXBlW2lkXTtcblxuICAgICAgICAgIE9wYWwuZGVmcyhzZWxmLCBpZCwgZnVuYyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1ldGhvZHMubGVuZ3RoID09PSAxID8gbWV0aG9kc1swXSA6IG1ldGhvZHM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIG5hbWVcbiAgICAleHtcbiAgICAgIGlmIChzZWxmLiQkZnVsbF9uYW1lKSB7XG4gICAgICAgIHJldHVybiBzZWxmLiQkZnVsbF9uYW1lO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVzdWx0ID0gW10sIGJhc2UgPSBzZWxmO1xuXG4gICAgICB3aGlsZSAoYmFzZSkge1xuICAgICAgICAvLyBHaXZlIHVwIGlmIGFueSBvZiB0aGUgYW5jZXN0b3JzIGlzIHVubmFtZWRcbiAgICAgICAgaWYgKGJhc2UuJCRuYW1lID09PSBuaWwgfHwgYmFzZS4kJG5hbWUgPT0gbnVsbCkgcmV0dXJuIG5pbDtcblxuICAgICAgICByZXN1bHQudW5zaGlmdChiYXNlLiQkbmFtZSk7XG5cbiAgICAgICAgYmFzZSA9IGJhc2UuJCRiYXNlX21vZHVsZTtcblxuICAgICAgICBpZiAoYmFzZSA9PT0gJE9iamVjdCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXN1bHQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBuaWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmLiQkZnVsbF9uYW1lID0gcmVzdWx0LmpvaW4oJzo6Jyk7XG4gICAgfVxuICBlbmRcblxuICBkZWYgcHJlcGVuZCgqbW9kcylcbiAgICAleHtcbiAgICAgIGlmIChtb2RzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgJ3dyb25nIG51bWJlciBvZiBhcmd1bWVudHMgKGdpdmVuIDAsIGV4cGVjdGVkIDErKSd9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSBtb2RzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHZhciBtb2QgPSBtb2RzW2ldO1xuXG4gICAgICAgIGlmICghbW9kLiQkaXNfbW9kdWxlKSB7XG4gICAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OlR5cGVFcnJvciwgXCJ3cm9uZyBhcmd1bWVudCB0eXBlICN7YG1vZGAuY2xhc3N9IChleHBlY3RlZCBNb2R1bGUpXCJ9O1xuICAgICAgICB9XG5cbiAgICAgICAgI3tgbW9kYC5wcmVwZW5kX2ZlYXR1cmVzIHNlbGZ9O1xuICAgICAgICAje2Btb2RgLnByZXBlbmRlZCBzZWxmfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzZWxmXG4gIGVuZFxuXG4gIGRlZiBwcmVwZW5kX2ZlYXR1cmVzKHByZXBlbmRlcilcbiAgICAleHtcbiAgICAgICRkZW55X2Zyb3plbl9hY2Nlc3MocHJlcGVuZGVyKTtcblxuICAgICAgaWYgKCFzZWxmLiQkaXNfbW9kdWxlKSB7XG4gICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpUeXBlRXJyb3IsIFwid3JvbmcgYXJndW1lbnQgdHlwZSAje3NlbGYuY2xhc3N9IChleHBlY3RlZCBNb2R1bGUpXCJ9O1xuICAgICAgfVxuXG4gICAgICBPcGFsLnByZXBlbmRfZmVhdHVyZXMoc2VsZiwgcHJlcGVuZGVyKVxuICAgIH1cbiAgICBzZWxmXG4gIGVuZFxuXG4gIGRlZiBwcmVwZW5kZWQobW9kKVxuICBlbmRcblxuICBkZWYgcmVtb3ZlX2NvbnN0KG5hbWUpXG4gICAgYCRkZW55X2Zyb3plbl9hY2Nlc3Moc2VsZilgXG5cbiAgICBgT3BhbC5jb25zdF9yZW1vdmUoc2VsZiwgbmFtZSlgXG4gIGVuZFxuXG4gIGRlZiB0b19zXG4gICAgYE9wYWwuTW9kdWxlLiRuYW1lLmNhbGwoc2VsZilgIHx8IFwiIzwje2BzZWxmLiQkaXNfbW9kdWxlID8gJ01vZHVsZScgOiAnQ2xhc3MnYH06MHgje19faWRfXy50b19zKDE2KX0+XCJcbiAgZW5kXG5cbiAgZGVmIHVuZGVmX21ldGhvZCgqbmFtZXMpXG4gICAgJXh7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBuYW1lID0gbmFtZXNbaV07XG4gICAgICAgIGlmICghKHR5cGVvZiBuYW1lID09PSBcInN0cmluZ1wiIHx8IG5hbWUuJCRpc19zdHJpbmcpKSB7XG4gICAgICAgICAgI3tyYWlzZSA6OlR5cGVFcnJvciwgXCIje25hbWV9IGlzIG5vdCBhIHN5bWJvbCBub3IgYSBzdHJpbmdcIn1cbiAgICAgICAgfVxuICAgICAgICAkZGVueV9mcm96ZW5fYWNjZXNzKHNlbGYpO1xuXG4gICAgICAgIE9wYWwudWRlZihzZWxmLCBcIiRcIiArIG5hbWVzW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzZWxmXG4gIGVuZFxuXG4gIGRlZiBpbnN0YW5jZV92YXJpYWJsZXNcbiAgICBjb25zdHMgPSBjb25zdGFudHNcbiAgICAleHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcblxuICAgICAgZm9yICh2YXIgbmFtZSBpbiBzZWxmKSB7XG4gICAgICAgIGlmIChzZWxmLmhhc093blByb3BlcnR5KG5hbWUpICYmIG5hbWUuY2hhckF0KDApICE9PSAnJCcgJiYgbmFtZSAhPT0gJ2NvbnN0cnVjdG9yJyAmJiAhI3tjb25zdHMuaW5jbHVkZT8oYG5hbWVgKX0pIHtcbiAgICAgICAgICByZXN1bHQucHVzaCgnQCcgKyBuYW1lKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGR1cFxuICAgIGNvcHkgPSBzdXBlclxuICAgIGNvcHkuY29weV9jbGFzc192YXJpYWJsZXMoc2VsZilcbiAgICBjb3B5LmNvcHlfY29uc3RhbnRzKHNlbGYpXG4gICAgY29weVxuICBlbmRcblxuICBkZWYgY29weV9jbGFzc192YXJpYWJsZXMob3RoZXIpXG4gICAgJXh7XG4gICAgICBmb3IgKHZhciBuYW1lIGluIG90aGVyLiQkY3ZhcnMpIHtcbiAgICAgICAgc2VsZi4kJGN2YXJzW25hbWVdID0gb3RoZXIuJCRjdmFyc1tuYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBjb3B5X2NvbnN0YW50cyhvdGhlcilcbiAgICAleHtcbiAgICAgIHZhciBuYW1lLCBvdGhlcl9jb25zdGFudHMgPSBvdGhlci4kJGNvbnN0O1xuXG4gICAgICBmb3IgKG5hbWUgaW4gb3RoZXJfY29uc3RhbnRzKSB7XG4gICAgICAgICRjb25zdF9zZXQoc2VsZiwgbmFtZSwgb3RoZXJfY29uc3RhbnRzW25hbWVdKTtcbiAgICAgIH1cbiAgICB9XG4gIGVuZFxuXG4gIGRlZiByZWZpbmUoa2xhc3MsICZibG9jaylcbiAgICByZWZpbmVtZW50X21vZHVsZSwgbSwga2xhc3NfaWQgPSBzZWxmLCBuaWwsIG5pbFxuICAgICV4e1xuICAgICAga2xhc3NfaWQgPSBPcGFsLmlkKGtsYXNzKTtcbiAgICAgIGlmICh0eXBlb2Ygc2VsZi4kJHJlZmluZV9tb2R1bGVzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHNlbGYuJCRyZWZpbmVfbW9kdWxlcyA9IHt9O1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBzZWxmLiQkcmVmaW5lX21vZHVsZXNba2xhc3NfaWRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIG0gPSBzZWxmLiQkcmVmaW5lX21vZHVsZXNba2xhc3NfaWRdID0gI3s6OlJlZmluZW1lbnQubmV3fTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBtID0gc2VsZi4kJHJlZmluZV9tb2R1bGVzW2tsYXNzX2lkXTtcbiAgICAgIH1cbiAgICAgIG0ucmVmaW5lbWVudF9tb2R1bGUgPSByZWZpbmVtZW50X21vZHVsZVxuICAgICAgbS5yZWZpbmVkX2NsYXNzID0ga2xhc3NcbiAgICB9XG4gICAgbS5jbGFzc19leGVjKCZibG9jaylcbiAgICBtXG4gIGVuZFxuXG4gICMgQ29tcGlsZXIgb3ZlcnJpZGVzIHRoaXMgbWV0aG9kXG4gIGRlZiB1c2luZyhtb2QpXG4gICAgOjpLZXJuZWwucmFpc2UgJ01vZHVsZSN1c2luZyBpcyBub3QgcGVybWl0dGVkIGluIG1ldGhvZHMnXG4gIGVuZFxuXG4gIGFsaWFzIGNsYXNzX2V2YWwgbW9kdWxlX2V2YWxcbiAgYWxpYXMgY2xhc3NfZXhlYyBtb2R1bGVfZXhlY1xuICBhbGlhcyBpbnNwZWN0IHRvX3NcbmVuZFxuXG5jbGFzcyA6OlJlZmluZW1lbnQgPCA6Ok1vZHVsZVxuICBkZWYgaW5zcGVjdFxuICAgIGlmIEByZWZpbmVtZW50X21vZHVsZVxuICAgICAgXCIjPHJlZmluZW1lbnQ6I3tAcmVmaW5lZF9jbGFzcy5pbnNwZWN0fUAje0ByZWZpbmVtZW50X21vZHVsZS5pbnNwZWN0fT5cIlxuICAgIGVsc2VcbiAgICAgIHN1cGVyXG4gICAgZW5kXG4gIGVuZFxuZW5kXG4iXSwibmFtZXMiOlsiPHRvcCAocmVxdWlyZWQpPiIsIjxjbGFzczpNb2R1bGU+IiwiYWxsb2NhdGUiLCJzZWxmIiwiaW5pdGlhbGl6ZSIsImJsb2NrX2dpdmVuPyIsIm1vZHVsZV9ldmFsIiwiYmxvY2siLCJ0b19wcm9jIiwiPT09Iiwib2JqZWN0IiwiPCIsIm90aGVyIiwiTW9kdWxlIiwiS2VybmVsIiwicmFpc2UiLCJUeXBlRXJyb3IiLCI8PSIsIiRyZXRfb3JfMSIsImVxdWFsPyIsIj4iLCI+PSIsIjw9PiIsImx0IiwibmlsPyIsIi0xIiwiMSIsImFsaWFzX21ldGhvZCIsIm5ld25hbWUiLCJvbGRuYW1lIiwiU3RyaW5nIiwiYWxpYXNfbmF0aXZlIiwibWlkIiwianNpZCIsImFuY2VzdG9ycyIsImFwcGVuZF9mZWF0dXJlcyIsImluY2x1ZGVyIiwiYXR0cl9hY2Nlc3NvciIsImF0dHJfcmVhZGVyIiwibmFtZXMiLCJhdHRyX3dyaXRlciIsImF0dHIiLCJ3YXJuIiwiYXJncyIsImF1dG9sb2FkIiwiY29uc3QkIiwicGF0aCIsIk9wYWwiLCJjb25zdF9uYW1lPyIsIk5hbWVFcnJvciIsIkFyZ3VtZW50RXJyb3IiLCJhdXRvbG9hZD8iLCJjbGFzc192YXJpYWJsZXMiLCJjbGFzc192YXJpYWJsZV9nZXQiLCJuYW1lIiwiY2xhc3NfdmFyaWFibGVfbmFtZSEiLCJjbGFzc192YXJpYWJsZV9zZXQiLCJ2YWx1ZSIsImNsYXNzX3ZhcmlhYmxlX2RlZmluZWQ/IiwicmVtb3ZlX2NsYXNzX3ZhcmlhYmxlIiwiY29uc3RhbnRzIiwiaW5oZXJpdCIsIm5lc3RpbmciLCJjb25zdF9kZWZpbmVkPyIsImNvbnN0X25hbWUhIiwiPX4iLCJPcGFsOjpDT05TVF9OQU1FX1JFR0VYUCIsIm5ldyIsImNvbnN0X2dldCIsImluamVjdCIsInNwbGl0IiwiYmxvY2sgaW4gY29uc3RfZ2V0IiwibyIsImMiLCJibG9jayAoMiBsZXZlbHMpIGluIGNvbnN0X2dldCIsImNvbnN0X21pc3NpbmciLCJmdWxsX2NvbnN0X25hbWUiLCJPYmplY3QiLCJjb25zdF9zZXQiLCIhfiIsInN0YXJ0X3dpdGg/IiwicHVibGljX2NvbnN0YW50IiwiZGVmaW5lX21ldGhvZCIsIm1ldGhvZCIsIlByb2MiLCIkcmV0X29yXzIiLCJNZXRob2QiLCJVbmJvdW5kTWV0aG9kIiwiYmxvY2sgaW4gZGVmaW5lX21ldGhvZCIsImJsb2NrICgyIGxldmVscykgaW4gZGVmaW5lX21ldGhvZCIsImJvdW5kIiwiYmluZCIsImNhbGwiLCJjbGFzcyIsImZyZWV6ZSIsImZyb3plbj8iLCJyZW1vdmVfbWV0aG9kIiwic2luZ2xldG9uX2NsYXNzPyIsImluY2x1ZGUiLCJpbmNsdWRlZCIsImluY2x1ZGVkX21vZHVsZXMiLCJpbmNsdWRlPyIsIm1vZCIsImluc3RhbmNlX21ldGhvZCIsImluc3RhbmNlX21ldGhvZHMiLCJpbmNsdWRlX3N1cGVyIiwiZXh0ZW5kZWQiLCJleHRlbmRfb2JqZWN0IiwibWV0aG9kX2FkZGVkIiwibWV0aG9kX3JlbW92ZWQiLCJtZXRob2RfdW5kZWZpbmVkIiwiMyIsImNvdmVyPyIsInNpemUiLCJzdHJpbmciLCJmaWxlIiwiX2xpbmVubyIsImRlZmF1bHRfZXZhbF9vcHRpb25zIiwiY29tcGlsaW5nX29wdGlvbnMiLCJfX09QQUxfQ09NUElMRVJfQ09ORklHX18iLCJtZXJnZSIsImNvbXBpbGVkIiwiY29tcGlsZSIsInByb2MiLCJibG9jayBpbiBtb2R1bGVfZXZhbCIsImJsb2NrICgyIGxldmVscykgaW4gbW9kdWxlX2V2YWwiLCJhbnk/IiwibW9kdWxlX2V4ZWMiLCJMb2NhbEp1bXBFcnJvciIsIm1ldGhvZF9kZWZpbmVkPyIsIm1vZHVsZV9mdW5jdGlvbiIsInByZXBlbmQiLCJwcmVwZW5kX2ZlYXR1cmVzIiwicHJlcGVuZGVkIiwicHJlcGVuZGVyIiwicmVtb3ZlX2NvbnN0IiwidG9fcyIsIl9faWRfXyIsIjE2IiwidW5kZWZfbWV0aG9kIiwiaW5zdGFuY2VfdmFyaWFibGVzIiwiY29uc3RzIiwiZHVwIiwiY29weSIsImNvcHlfY2xhc3NfdmFyaWFibGVzIiwiY29weV9jb25zdGFudHMiLCJyZWZpbmUiLCJrbGFzcyIsInJlZmluZW1lbnRfbW9kdWxlIiwibSIsImtsYXNzX2lkIiwiUmVmaW5lbWVudCIsImNsYXNzX2V4ZWMiLCJ1c2luZyIsIjxjbGFzczpSZWZpbmVtZW50PiIsImluc3BlY3QiLCJAcmVmaW5lbWVudF9tb2R1bGUiLCJAcmVmaW5lZF9jbGFzcyJdLCJtYXBwaW5ncyI6IkFBQUFBLGlDQUFBQSxnQkFBQUE7RUFBQUE7O0VBQUFBOztFQUVBQztFQUFBQTs7SUFBQUE7OztJQUNFQyxNQUFJQyxJQUFKRCxlQUFBQSxvQkFBQUE7QUFBQUEsTUFBQUE7OztBQUVGQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtJQU5FQSxDQUFBQSxHQUFBQTs7QUFTQUUsSUFBQUEsMEJBQUFBLHNCQUFBQTtBQUFBQSxNQUFBQTs7TUFBQUE7OztNQUNFLElBQXVCQyxlQUF2QjtRQUFBRCxPQUFBRSxNQUFBSCxJQUFBRyxlQUFBQSxFQUFBQSxFQUFBQ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Xh3QkZBLEdBQU0sSUFBTkEsRUFBQUEsSUFBQUE7RUEyd0JBRCxPQUFBMEo7RUFBQUE7O0lBQUFBOztBQUFBQTtJQUNFQSxPQUFBQyx1QkFBQUEsbUJBQUFBO0FBQUFBLE1BQUFBOztNQUFBQTtNQUNFLElBQUEsUUFBR0Msc0JBQUgsQ0FBQTtRQUNFRCxPQUFDQSxlQUFELEdBQUEsQ0FBZ0JFLGtCQUFjRixTQUFBQSxDQUFBQSxDQUE5QixDQUFBLEdBQXVDQSxHQUF2QyxHQUFBLENBQTBDQyxzQkFBa0JELFNBQUFBLENBQUFBLENBQTVELENBQUEsR0FBcUVBO01BRHZFO1FBR0VBLE9BQUEsT0FBQXhKLElBQUEsRUFBQSxvREFBQSxXQUFBLEVBQUEsRUFBQSxFQUFBLE1BQUE7TUFIRjtJQURGd0osQ0FBQUEsR0FBQUE7RUFERkQsR0FBTSxJQUFOQSxFQUFxQjdJLE9BQXJCNkk7QUE3d0JBMUo7In19LHsib2Zmc2V0Ijp7ImxpbmUiOjE5NDYyLCJjb2x1bW4iOjB9LCJtYXAiOnsidmVyc2lvbiI6Mywic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29yZWxpYi9oZWxwZXJzLnJiIl0sInNvdXJjZXNDb250ZW50IjpbIiMgaGVscGVyczogdHlwZV9lcnJvciwgY29lcmNlX3RvXG5cbm1vZHVsZSA6Ok9wYWxcbiAgZGVmIHNlbGYuYnJpZGdlKGNvbnN0cnVjdG9yLCBrbGFzcylcbiAgICBgT3BhbC5icmlkZ2UoY29uc3RydWN0b3IsIGtsYXNzKWBcbiAgZW5kXG5cbiAgZGVmIHNlbGYuY29lcmNlX3RvIShvYmplY3QsIHR5cGUsIG1ldGhvZCwgKmFyZ3MpXG4gICAgY29lcmNlZCA9IGAkY29lcmNlX3RvKG9iamVjdCwgdHlwZSwgbWV0aG9kLCBhcmdzKWBcblxuICAgIHVubGVzcyB0eXBlID09PSBjb2VyY2VkXG4gICAgICA6Oktlcm5lbC5yYWlzZSBgJHR5cGVfZXJyb3Iob2JqZWN0LCB0eXBlLCBtZXRob2QsIGNvZXJjZWQpYFxuICAgIGVuZFxuXG4gICAgY29lcmNlZFxuICBlbmRcblxuICBkZWYgc2VsZi5jb2VyY2VfdG8/KG9iamVjdCwgdHlwZSwgbWV0aG9kLCAqYXJncylcbiAgICByZXR1cm4gdW5sZXNzIG9iamVjdC5yZXNwb25kX3RvPyBtZXRob2RcblxuICAgIGNvZXJjZWQgPSBgJGNvZXJjZV90byhvYmplY3QsIHR5cGUsIG1ldGhvZCwgYXJncylgXG5cbiAgICByZXR1cm4gaWYgY29lcmNlZC5uaWw/XG5cbiAgICB1bmxlc3MgdHlwZSA9PT0gY29lcmNlZFxuICAgICAgOjpLZXJuZWwucmFpc2UgYCR0eXBlX2Vycm9yKG9iamVjdCwgdHlwZSwgbWV0aG9kLCBjb2VyY2VkKWBcbiAgICBlbmRcblxuICAgIGNvZXJjZWRcbiAgZW5kXG5cbiAgZGVmIHNlbGYudHJ5X2NvbnZlcnQob2JqZWN0LCB0eXBlLCBtZXRob2QpXG4gICAgcmV0dXJuIG9iamVjdCBpZiB0eXBlID09PSBvYmplY3RcblxuICAgIGlmIG9iamVjdC5yZXNwb25kX3RvPyBtZXRob2RcbiAgICAgIG9iamVjdC5fX3NlbmRfXyBtZXRob2RcbiAgICBlbmRcbiAgZW5kXG5cbiAgZGVmIHNlbGYuY29tcGFyZShhLCBiKVxuICAgIGNvbXBhcmUgPSBhIDw9PiBiXG5cbiAgICBpZiBgY29tcGFyZSA9PT0gbmlsYFxuICAgICAgOjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCBcImNvbXBhcmlzb24gb2YgI3thLmNsYXNzfSB3aXRoICN7Yi5jbGFzc30gZmFpbGVkXCJcbiAgICBlbmRcblxuICAgIGNvbXBhcmVcbiAgZW5kXG5cbiAgZGVmIHNlbGYuZGVzdHJ1Y3R1cmUoYXJncylcbiAgICAleHtcbiAgICAgIGlmIChhcmdzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgIHJldHVybiBhcmdzWzBdO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoYXJncy4kJGlzX2FycmF5KSB7XG4gICAgICAgIHJldHVybiBhcmdzO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHZhciBhcmdzX2FyeSA9IG5ldyBBcnJheShhcmdzLmxlbmd0aCk7XG4gICAgICAgIGZvcih2YXIgaSA9IDAsIGwgPSBhcmdzX2FyeS5sZW5ndGg7IGkgPCBsOyBpKyspIHsgYXJnc19hcnlbaV0gPSBhcmdzW2ldOyB9XG5cbiAgICAgICAgcmV0dXJuIGFyZ3NfYXJ5O1xuICAgICAgfVxuICAgIH1cbiAgZW5kXG5cbiAgZGVmIHNlbGYucmVzcG9uZF90bz8ob2JqLCBtZXRob2QsIGluY2x1ZGVfYWxsID0gZmFsc2UpXG4gICAgJXh7XG4gICAgICBpZiAob2JqID09IG51bGwgfHwgIW9iai4kJGNsYXNzKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBvYmoucmVzcG9uZF90bz8obWV0aG9kLCBpbmNsdWRlX2FsbClcbiAgZW5kXG5cbiAgZGVmIHNlbGYuaW5zdGFuY2VfdmFyaWFibGVfbmFtZSEobmFtZSlcbiAgICBuYW1lID0gOjpPcGFsLmNvZXJjZV90byEobmFtZSwgOjpTdHJpbmcsIDp0b19zdHIpXG5cbiAgICB1bmxlc3MgYC9eQFthLXpBLVpfXVthLXpBLVowLTlfXSo/JC8udGVzdChuYW1lKWBcbiAgICAgIDo6S2VybmVsLnJhaXNlIDo6TmFtZUVycm9yLm5ldyhcIicje25hbWV9JyBpcyBub3QgYWxsb3dlZCBhcyBhbiBpbnN0YW5jZSB2YXJpYWJsZSBuYW1lXCIsIG5hbWUpXG4gICAgZW5kXG5cbiAgICBuYW1lXG4gIGVuZFxuXG4gIGRlZiBzZWxmLmNsYXNzX3ZhcmlhYmxlX25hbWUhKG5hbWUpXG4gICAgbmFtZSA9IDo6T3BhbC5jb2VyY2VfdG8hKG5hbWUsIDo6U3RyaW5nLCA6dG9fc3RyKVxuXG4gICAgaWYgYG5hbWUubGVuZ3RoIDwgMyB8fCBuYW1lLnNsaWNlKDAsMikgIT09ICdAQCdgXG4gICAgICA6Oktlcm5lbC5yYWlzZSA6Ok5hbWVFcnJvci5uZXcoXCJgI3tuYW1lfScgaXMgbm90IGFsbG93ZWQgYXMgYSBjbGFzcyB2YXJpYWJsZSBuYW1lXCIsIG5hbWUpXG4gICAgZW5kXG5cbiAgICBuYW1lXG4gIGVuZFxuXG4gIGRlZiBzZWxmLmNvbnN0X25hbWU/KGNvbnN0X25hbWUpXG4gICAgJXh7XG4gICAgICBpZiAodHlwZW9mIGNvbnN0X25hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICN7Y29uc3RfbmFtZSA9IDo6T3BhbC5jb2VyY2VfdG8hKGNvbnN0X25hbWUsIDo6U3RyaW5nLCA6dG9fc3RyKX1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuICN7Y29uc3RfbmFtZX1bMF0gPT09ICN7Y29uc3RfbmFtZX1bMF0udG9VcHBlckNhc2UoKVxuICAgIH1cbiAgZW5kXG5cbiAgZGVmIHNlbGYuY29uc3RfbmFtZSEoY29uc3RfbmFtZSlcbiAgICBjb25zdF9uYW1lID0gOjpPcGFsLmNvZXJjZV90byEoY29uc3RfbmFtZSwgOjpTdHJpbmcsIDp0b19zdHIpIGlmIGRlZmluZWQ/IDo6U3RyaW5nXG5cbiAgICAleHtcbiAgICAgIGlmICghY29uc3RfbmFtZSB8fCBjb25zdF9uYW1lWzBdICE9IGNvbnN0X25hbWVbMF0udG9VcHBlckNhc2UoKSkge1xuICAgICAgICAje3JhaXNlIDo6TmFtZUVycm9yLCBcIndyb25nIGNvbnN0YW50IG5hbWUgI3tjb25zdF9uYW1lfVwifVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0X25hbWVcbiAgZW5kXG5cbiAgIyBAcHJpdmF0ZVxuICAjIE1hcmsgc29tZSBtZXRob2RzIGFzIHByaXN0aW5lIGluIG9yZGVyIHRvIGFwcGx5IG9wdGltaXphdGlvbnMgd2hlbiB0aGV5XG4gICMgYXJlIHN0aWxsIGluIHRoZWlyIG9yaWdpbmFsIGZvcm0uIFRoaXMgY291bGQgcHJvYmFibHkgYmUgbW92ZWQgdG9cbiAgIyB0aGUgYE9wYWwuZGVmKClgIEpTIEFQSSwgYnV0IGZvciBub3cgaXQgd2lsbCBzdGF5IG1hbnVhbC5cbiAgI1xuICAjIEBleGFtcGxlXG4gICNcbiAgIyAgIE9wYWwucHJpc3RpbmUgQXJyYXksIDphbGxvY2F0ZSwgOmNvcHlfaW5zdGFuY2VfdmFyaWFibGVzLCA6aW5pdGlhbGl6ZV9kdXBcbiAgI1xuICAjICAgY2xhc3MgQXJyYXlcbiAgIyAgICAgZGVmIGR1cFxuICAjICAgICAgICV4e1xuICAjICAgICAgICAgaWYgKFxuICAjICAgICAgICAgICBzZWxmLiRhbGxvY2F0ZS4kJHByaXN0aW5lICYmXG4gICMgICAgICAgICAgIHNlbGYuJGNvcHlfaW5zdGFuY2VfdmFyaWFibGVzLiQkcHJpc3RpbmUgJiZcbiAgIyAgICAgICAgICAgc2VsZi4kaW5pdGlhbGl6ZV9kdXAuJCRwcmlzdGluZVxuICAjICAgICAgICAgKSByZXR1cm4gc2VsZi5zbGljZSgwKTtcbiAgIyAgICAgICB9XG4gICNcbiAgIyAgICAgICBzdXBlclxuICAjICAgICBlbmRcbiAgIyAgIGVuZFxuICAjXG4gICMgQHBhcmFtIG93bmVyX2NsYXNzIFtDbGFzc10gdGhlIGNsYXNzIG93bmluZyB0aGUgbWV0aG9kc1xuICAjIEBwYXJhbSBtZXRob2RfbmFtZXMgW0FycmF5PFN5bWJvbD5dIHRoZSBsaXN0IG9mIG1ldGhvZHMgbmFtZXMgdG8gbWFya1xuICAjIEByZXR1cm4gW25pbF1cbiAgZGVmIHNlbGYucHJpc3RpbmUob3duZXJfY2xhc3MsICptZXRob2RfbmFtZXMpXG4gICAgJXh7XG4gICAgICB2YXIgbWV0aG9kX25hbWUsIG1ldGhvZDtcbiAgICAgIGZvciAodmFyIGkgPSBtZXRob2RfbmFtZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgbWV0aG9kX25hbWUgPSBtZXRob2RfbmFtZXNbaV07XG4gICAgICAgIG1ldGhvZCA9IG93bmVyX2NsYXNzLiQkcHJvdG90eXBlWyckJyttZXRob2RfbmFtZV07XG5cbiAgICAgICAgaWYgKG1ldGhvZCAmJiAhbWV0aG9kLiQkc3R1Yikge1xuICAgICAgICAgIG1ldGhvZC4kJHByaXN0aW5lID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBuaWxcbiAgZW5kXG5cbiAgYHZhciBpbnNwZWN0X3N0YWNrID0gW11gXG5cbiAgIyBQZXJmb3JtcyBhIHNhZmUgY2FsbCB0byBpbnNwZWN0IGZvciBhbnkgdmFsdWUsIHdoZXRoZXJcbiAgIyBuYXRpdmUgb3IgT3BhbC13cmFwcGVkLlxuICAjXG4gICMgQHBhcmFtIHZhbHVlIFtPYmplY3RdXG4gICMgQHJldHVybiBbU3RyaW5nXVxuICBkZWYgc2VsZi5pbnNwZWN0KHZhbHVlID0gdW5kZWZpbmVkKVxuICAgIGB2YXIgcHVzaGVkID0gZmFsc2VgXG4gICAgYmVnaW5cbiAgICAgICV4e1xuICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAvLyBKUyBudWxsIHZhbHVlXG4gICAgICAgICAgcmV0dXJuICdudWxsJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgLy8gSlMgdW5kZWZpbmVkIHZhbHVlXG4gICAgICAgICAgcmV0dXJuICd1bmRlZmluZWQnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZS4kJGNsYXNzID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIC8vIEpTIG9iamVjdCAvIG90aGVyIHZhbHVlIHRoYXQgaXMgbm90IGJyaWRnZWRcbiAgICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5hcHBseSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlLiRpbnNwZWN0ICE9PSAnZnVuY3Rpb24nIHx8IHZhbHVlLiRpbnNwZWN0LiQkc3R1Yikge1xuICAgICAgICAgIC8vIEJhc2ljT2JqZWN0IGFuZCBmcmllbmRzXG4gICAgICAgICAgcmV0dXJuICN7XCIjPCN7YHZhbHVlLiQkY2xhc3NgfToweCN7dmFsdWUuX19pZF9fLnRvX3MoMTYpfT5cIn1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpbnNwZWN0X3N0YWNrLmluZGV4T2YoI3t2YWx1ZS5fX2lkX199KSAhPT0gLTEpIHtcbiAgICAgICAgICAvLyBpbnNwZWN0IHJlY3Vyc2luZyBpbnNpZGUgaW5zcGVjdCB0byBmaW5kIG91dCBhYm91dCB0aGVcbiAgICAgICAgICAvLyBzYW1lIG9iamVjdFxuICAgICAgICAgIHJldHVybiAje1wiIzwje2B2YWx1ZS4kJGNsYXNzYH06MHgje3ZhbHVlLl9faWRfXy50b19zKDE2KX0+XCJ9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgLy8gYW55dGhpbmcgc3VwcG9ydGluZyBPcGFsXG4gICAgICAgICAgaW5zcGVjdF9zdGFjay5wdXNoKCN7dmFsdWUuX19pZF9ffSk7XG4gICAgICAgICAgcHVzaGVkID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gdmFsdWUuJGluc3BlY3QoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbmlsXG4gICAgcmVzY3VlIDo6RXhjZXB0aW9uID0+IGUgIyBydWJvY29wOmRpc2FibGUgTGludC9SZXNjdWVFeGNlcHRpb25cbiAgICAgIFwiIzwje2B2YWx1ZS4kJGNsYXNzYH06MHgje3ZhbHVlLl9faWRfXy50b19zKDE2KX0+XCJcbiAgICBlbnN1cmVcbiAgICAgIGBpZiAocHVzaGVkKSBpbnNwZWN0X3N0YWNrLnBvcCgpYFxuICAgIGVuZFxuICBlbmRcbmVuZFxuIl0sIm5hbWVzIjpbIjx0b3AgKHJlcXVpcmVkKT4iLCI8bW9kdWxlOk9wYWw+IiwiYnJpZGdlIiwic2VsZiIsImNvbnN0cnVjdG9yIiwia2xhc3MiLCJjb2VyY2VfdG8hIiwib2JqZWN0IiwidHlwZSIsIm1ldGhvZCIsImNvZXJjZWQiLCJLZXJuZWwiLCJyYWlzZSIsImNvZXJjZV90bz8iLCJyZXNwb25kX3RvPyIsIm5pbD8iLCJ0cnlfY29udmVydCIsIl9fc2VuZF9fIiwiY29tcGFyZSIsImEiLCJiIiwiPD0+IiwiQXJndW1lbnRFcnJvciIsImNsYXNzIiwiZGVzdHJ1Y3R1cmUiLCJhcmdzIiwib2JqIiwiaW5jbHVkZV9hbGwiLCJpbnN0YW5jZV92YXJpYWJsZV9uYW1lISIsIm5hbWUiLCJPcGFsIiwiU3RyaW5nIiwiTmFtZUVycm9yIiwibmV3IiwiY2xhc3NfdmFyaWFibGVfbmFtZSEiLCJjb25zdF9uYW1lPyIsImNvbnN0X25hbWUiLCJjb25zdF9uYW1lISIsInByaXN0aW5lIiwib3duZXJfY2xhc3MiLCJpbnNwZWN0IiwidmFsdWUiLCJfX2lkX18iLCJ0b19zIiwiMTYiLCJFeGNlcHRpb24iLCJlIl0sIm1hcHBpbmdzIjoiQUFBQUEsa0NBQUFBLGdCQUFBQTtFQUFBQTs7RUFBQUE7RUFFQUEsT0FBQUM7RUFBQUE7Ozs7SUFDRUMsTUFBSUMsSUFBSkQsYUFBQUEsa0JBQWdCRSxXQUFELEVBQWNDLEtBQTdCSDtBQUFBQTtNQUNFQSxPQUFDQSwrQkFBREE7SUFERkEsQ0FBQUEsR0FBQUE7SUFJQUksTUFBSUgsSUFBSkcsaUJBQUFBLGdDQUFvQkMsTUFBRCxFQUFTQyxJQUFULEVBQWVDLE1BQWYsRUFQckIsRUFPRUg7QUFBQUEsTUFBQUE7OztNQVBGO01BTzRDO01BQ3hDSSxVQUFXSjtNQUVYLEtBQUEsUUFBT0UsSUFBUCxFQUFnQkUsT0FBaEIsQ0FBQTtRQUNFQyxPQUFRQyxPQUFBQSxDQUFRTiwwQ0FBUk07TUFEVjtNQUlBTixPQUFBSTtJQVBGSixDQUFBQSxJQUFBQTtJQVVBTyxNQUFJVixJQUFKVSxpQkFBQUEsZ0NBQW9CTixNQUFELEVBQVNDLElBQVQsRUFBZUMsTUFBZixFQWpCckIsRUFpQkVJO0FBQUFBLE1BQUFBOzs7TUFqQkY7TUFpQjRDO01BQ3hDLEtBQUEsUUFBY04sTUFBTU8sZ0JBQUFBLENBQWFMLE1BQWJLLENBQXBCLENBQUE7UUFBQSxPQUFBO01BQUE7TUFFQUosVUFBV0c7TUFFWCxJQUFBLFFBQVVILE9BQU9LLFNBQUFBLENBQUFBLENBQWpCLENBQUE7UUFBQSxPQUFBO01BQUE7TUFFQSxLQUFBLFFBQU9QLElBQVAsRUFBZ0JFLE9BQWhCLENBQUE7UUFDRUMsT0FBUUMsT0FBQUEsQ0FBUUMsMENBQVJEO01BRFY7TUFJQUMsT0FBQUg7SUFYR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0FBQ0FBO1FBQ01BLE9BQUE7TUE3QkE7UUE4QkYsc0JBQU8sQ0FBQUssZ0JBQUEsQ0FBUCxJQUFzQkMsQ0FBQUEsSUFBdEIsSUFBc0JBO1VBQXRCO1lBQ0VOLE9BQUNBLElBQUQsR0FBQSxDQUFNQSxhQUFOLENBQUEsR0FBcUJBLEtBQXJCLEdBQUEsQ0FBMEJDLEtBQUtDLFFBQUFBLENBQUFBLENBQU9DLE1BQUFBLENBQU1DLEVBQU5ELENBQXRDLENBQUEsR0FBZ0RIO1VBRGxEO1FBQUEsQ0E5QkU7TUFBQTtNQUFBO1FBaUNDQTtNQWpDRCxDQUFBO0lBSEpBLENBQUFBLElBQUFBO0VBcEtGdkMsR0FBTyxJQUFQQTtBQUZBRDsifX0seyJvZmZzZXQiOnsibGluZSI6MTk2NzEsImNvbHVtbiI6MH0sIm1hcCI6eyJ2ZXJzaW9uIjozLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb3JlbGliL2Vycm9yL2Vycm5vLnJiIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZSA6OkVycm5vXG4gIGVycm9ycyA9IFtcbiAgICBbOkVJTlZBTCwgJ0ludmFsaWQgYXJndW1lbnQnLCAyMl0sXG4gICAgWzpFRVhJU1QsICdGaWxlIGV4aXN0cycsIDE3XSxcbiAgICBbOkVJU0RJUiwgJ0lzIGEgZGlyZWN0b3J5JywgMjFdLFxuICAgIFs6RU1GSUxFLCAnVG9vIG1hbnkgb3BlbiBmaWxlcycsIDI0XSxcbiAgICBbOkVTUElQRSwgJ0lsbGVnYWwgc2VlaycsIDI5XSxcbiAgICBbOkVBQ0NFUywgJ1Blcm1pc3Npb24gZGVuaWVkJywgMTNdLFxuICAgIFs6RVBFUk0sICdPcGVyYXRpb24gbm90IHBlcm1pdHRlZCcsIDFdLFxuICAgIFs6RU5PRU5ULCAnTm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeScsIDJdLFxuICAgIFs6RU5BTUVUT09MT05HLCAnRmlsZSBuYW1lIHRvbyBsb25nJywgMzZdXG4gIF1cblxuICBrbGFzcyA9IG5pbFxuXG4gICV4e1xuICAgIHZhciBpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBlcnJvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIChmdW5jdGlvbigpIHsgLy8gQ3JlYXRlIGEgY2xvc3VyZVxuICAgICAgICB2YXIgY2xhc3NfbmFtZSA9IGVycm9yc1tpXVswXTtcbiAgICAgICAgdmFyIGRlZmF1bHRfbWVzc2FnZSA9IGVycm9yc1tpXVsxXTtcbiAgICAgICAgdmFyIGVycm5vID0gZXJyb3JzW2ldWzJdO1xuXG4gICAgICAgIGtsYXNzID0gT3BhbC5rbGFzcyhzZWxmLCBPcGFsLlN5c3RlbUNhbGxFcnJvciwgY2xhc3NfbmFtZSk7XG4gICAgICAgIGtsYXNzLmVycm5vID0gZXJybm87XG5cbiAgICAgICAgI3tcbiAgICAgICAgICBjbGFzcyA8PCBrbGFzc1xuICAgICAgICAgICAgZGVmIG5ldyhuYW1lID0gbmlsKVxuICAgICAgICAgICAgICBtZXNzYWdlID0gYGRlZmF1bHRfbWVzc2FnZWBcbiAgICAgICAgICAgICAgbWVzc2FnZSArPSBcIiAtICN7bmFtZX1cIiBpZiBuYW1lXG4gICAgICAgICAgICAgIHN1cGVyKG1lc3NhZ2UpXG4gICAgICAgICAgICBlbmRcbiAgICAgICAgICBlbmRcbiAgICAgICAgfVxuICAgICAgfSkoKTtcbiAgICB9XG4gIH1cbmVuZFxuXG5jbGFzcyA6OlN5c3RlbUNhbGxFcnJvciA8IDo6U3RhbmRhcmRFcnJvclxuICBkZWYgZXJybm9cbiAgICBzZWxmLmNsYXNzLmVycm5vXG4gIGVuZFxuXG4gIGNsYXNzIDw8IHNlbGZcbiAgICBhdHRyX3JlYWRlciA6ZXJybm9cbiAgZW5kXG5lbmRcbiJdLCJuYW1lcyI6WyI8dG9wIChyZXF1aXJlZCk+IiwiPG1vZHVsZTpFcnJubz4iLCJlcnJvcnMiLCIyMiIsIjE3IiwiMjEiLCIyNCIsIjI5IiwiMTMiLCIxIiwiMiIsIjM2Iiwia2xhc3MiLCJuZXciLCJuYW1lIiwibWVzc2FnZSIsIisiLCJzZWxmIiwiPGNsYXNzOlN5c3RlbUNhbGxFcnJvcj4iLCJlcnJubyIsImNsYXNzIiwiYXR0cl9yZWFkZXIiLCJTdGFuZGFyZEVycm9yIl0sIm1hcHBpbmdzIjoiQUFBQUEsc0NBQUFBLGdCQUFBQTtFQUFBQTs7RUFBQUE7O0VBQUFDO0VBQUFBOztJQUFBQTs7O0lBQ0VDLFNBQVMsQ0FDUCxDQUFDLFFBQUQsRUFBVUQsa0JBQVYsRUFBOEJFLEVBQTlCLENBRE8sRUFFUCxDQUFDLFFBQUQsRUFBVUYsYUFBVixFQUF5QkcsRUFBekIsQ0FGTyxFQUdQLENBQUMsUUFBRCxFQUFVSCxnQkFBVixFQUE0QkksRUFBNUIsQ0FITyxFQUlQLENBQUMsUUFBRCxFQUFVSixxQkFBVixFQUFpQ0ssRUFBakMsQ0FKTyxFQUtQLENBQUMsUUFBRCxFQUFVTCxjQUFWLEVBQTBCTSxFQUExQixDQUxPLEVBTVAsQ0FBQyxRQUFELEVBQVVOLG1CQUFWLEVBQStCTyxFQUEvQixDQU5PLEVBT1AsQ0FBQyxPQUFELEVBQVNQLHlCQUFULEVBQW9DUSxDQUFwQyxDQVBPLEVBUVAsQ0FBQyxRQUFELEVBQVVSLDJCQUFWLEVBQXVDUyxDQUF2QyxDQVJPLEVBU1AsQ0FBQyxjQUFELEVBQWdCVCxvQkFBaEIsRUFBc0NVLEVBQXRDLENBVE87SUFZVEMsUUFBUTs7QUFHVlg7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7O0FBRUFBO0FBQ0FBOztBQUVBQSxRQUNVOztNQUNFLE9BQUFZLG1CQUFBQSxnQkFBUUMsSUFBUkQ7QUFBQUEsUUFBQUE7O1FBQUFBOztRQUFRLHlCQUFPO1FBQ2JFLFVBQVdGO1FBQ1gsSUFBQSxRQUEyQkMsSUFBM0IsQ0FBQTtVQUFBQyxVQUFRQyxTQUFSRCxPQUFRQyxFQUFJSCxLQUFELEdBQUEsQ0FBTUMsSUFBTixDQUFIRTtRQUFSO1FBQ0FILE9BQUEsT0FBQUksSUFBQSxFQUFBLDZDQUFBLE9BQUEsRUFBQSxDQUFNRixPQUFOLENBQUEsRUFBQSxJQUFBO01BSEZGLENBQUFBLElBQUFBO0lBREYsNEJBQVNELEtBQVQ7QUFRVlg7QUFDQUE7QUFDQUE7RUFyQ0FBLEdBQU8sSUFBUEE7RUF3Q0FELE9BQUFrQjtFQUFBQTs7SUFBQUE7Ozs7QUFDRUMsSUFBQUEscUJBQUFBLGlCQUFBQTtBQUFBQSxNQUFBQTs7TUFDRUEsT0FBQUYsSUFBSUcsT0FBQUEsQ0FBQUEsQ0FBTUQsT0FBQUEsQ0FBQUE7SUFEWkEsQ0FBQUEsR0FBQUE7SUFJQUQsT0FBQTs7TUFDRSxPQUFBRCxJQUFBSSxhQUFBQSxDQUFZLE9BQVpBO0lBREYsNEJBQVNKLElBQVQ7RUFMRkMsR0FBTSxJQUFOQSxFQUEwQkksb0JBQTFCSjtBQXhDQWxCOyJ9fSx7Im9mZnNldCI6eyJsaW5lIjoxOTczMywiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm9wYWwvcmVnZXhwX2FuY2hvcnMucmIiXSwic291cmNlc0NvbnRlbnQiOlsiIyBmcm96ZW5fc3RyaW5nX2xpdGVyYWw6IHRydWVcblxubW9kdWxlIE9wYWxcbiAgc2VsZjo6UkVHRVhQX1NUQVJUID0gUlVCWV9FTkdJTkUgPT0gJ29wYWwnID8gJ14nIDogJ1xcQSdcbiAgc2VsZjo6UkVHRVhQX0VORCA9IFJVQllfRU5HSU5FID09ICdvcGFsJyA/ICckJyA6ICdcXHonXG5cbiAgIyBVbmljb2RlIGNoYXJhY3RlcnMgaW4gcmFuZ2VzXG4gICMgXFx1MDAwMSAtIFxcdTAwMkYgKGJsYW5rIHVuaWNvZGUgY2hhcmFjdGVycyArIHNwYWNlICsgIVwiIyQlJicoKSorLC0uLyBjaGFycylcbiAgIyBcXHUwMDNBIC0gXFx1MDA0MCAoOjs8PT4/QCBjaGFycylcbiAgIyBcXHUwMDVCIC0gXFx1MDA1RSAoW1xcXV4gY2hhcnMpXG4gICMgXFx1MDA2MCAgICAgICAgICAoYCBjaGFyKVxuICAjIFxcdTAwN0IgLSBcXHUwMDdGICh7fH1+IGNoYXJzfSlcbiAgIyBhcmUgbm90IGFsbG93ZWQgdG8gYmUgdXNlZCBpbiBpZGVudGlmaWVyIGluIHRoZSBiZWdnaW5pbmcgb3IgbWlkZGxlIG9mIGl0cyBuYW1lXG4gIHNlbGY6OkZPUkJJRERFTl9TVEFSVElOR19JREVOVElGSUVSX0NIQVJTID0gJ1xcdTAwMDEtXFx1MDAyRlxcdTAwM0EtXFx1MDA0MFxcdTAwNUItXFx1MDA1RVxcdTAwNjBcXHUwMDdCLVxcdTAwN0YnXG5cbiAgIyBVbmljb2RlIGNoYXJhY3RlcnMgaW4gcmFuZ2VzXG4gICMgXFx1MDAwMSAtIFxcdTAwMjAgKGJsYW5rIHVuaWNvZGUgY2hhcmFjdGVycyArIHNwYWNlKVxuICAjIFxcdTAwMjIgLSBcXHUwMDJGIChcIiMkJSYnKCkqKywtLi8gY2hhcnMpXG4gICMgXFx1MDAzQSAtIFxcdTAwM0UgKDo7PD0+IGNoYXJzKVxuICAjIFxcdTAwNDAgICAgICAgICAgKEAgY2hhcilcbiAgIyBcXHUwMDVCIC0gXFx1MDA1RSAoW1xcXV4gY2hhcnMpXG4gICMgXFx1MDA2MCAgICAgICAgICAoYCBjaGFyKVxuICAjIFxcdTAwN0IgLSBcXHUwMDdGICh7fH1+IGNoYXJzfSlcbiAgIyBhcmUgbm90IGFsbG93ZWQgdG8gYmUgdXNlZCBpbiBpZGVudGlmaWVyIGluIHRoZSBlbmQgb2YgaXRzIG5hbWVcbiAgIyBJbiBmYWN0LCBGT1JCSURERU5fU1RBUlRJTkdfSURFTlRJRklFUl9DSEFSUyA9IEZPUkJJRERFTl9FTkRJTkdfSURFTlRJRklFUl9DSEFSUyArIFxcdTAwMjEgKCc/JykgKyBcXHUwMDNGICgnIScpXG4gIHNlbGY6OkZPUkJJRERFTl9FTkRJTkdfSURFTlRJRklFUl9DSEFSUyAgID0gJ1xcdTAwMDEtXFx1MDAyMFxcdTAwMjItXFx1MDAyRlxcdTAwM0EtXFx1MDAzRVxcdTAwNDBcXHUwMDVCLVxcdTAwNUVcXHUwMDYwXFx1MDA3Qi1cXHUwMDdGJ1xuICBzZWxmOjpJTkxJTkVfSURFTlRJRklFUl9SRUdFWFAgPSBSZWdleHAubmV3KFwiW14je3NlbGY6OkZPUkJJRERFTl9TVEFSVElOR19JREVOVElGSUVSX0NIQVJTfV0qW14je3NlbGY6OkZPUkJJRERFTl9FTkRJTkdfSURFTlRJRklFUl9DSEFSU31dXCIpXG5cbiAgIyBGb3IgY29uc3RhbnRzIHJ1bGVzIGFyZSBwcmV0dHkgbXVjaCB0aGUgc2FtZSwgYnV0ICc6JyBpcyBhbGxvd2VkIGFuZCAnPyEnIGFyZSBub3QuXG4gICMgUGx1cyBpdCBtYXkgc3RhcnQgd2l0aCBhICc6Oicgd2hpY2ggaW5kaWNhdGVzIHRoYXQgdGhlIGNvbnN0YW50IGNvbWVzIGZyb20gdG9wbGV2ZWwuXG4gIHNlbGY6OkZPUkJJRERFTl9DT05TVF9OQU1FX0NIQVJTID0gJ1xcdTAwMDEtXFx1MDAyMFxcdTAwMjEtXFx1MDAyRlxcdTAwM0ItXFx1MDAzRlxcdTAwNDBcXHUwMDVCLVxcdTAwNUVcXHUwMDYwXFx1MDA3Qi1cXHUwMDdGJ1xuICBzZWxmOjpDT05TVF9OQU1FX1JFR0VYUCA9IFJlZ2V4cC5uZXcoXCIje3NlbGY6OlJFR0VYUF9TVEFSVH0oOjopP1tBLVpdW14je3NlbGY6OkZPUkJJRERFTl9DT05TVF9OQU1FX0NIQVJTfV0qI3tzZWxmOjpSRUdFWFBfRU5EfVwiKVxuZW5kXG4iXSwibmFtZXMiOlsiPHRvcCAocmVxdWlyZWQpPiIsIjxtb2R1bGU6T3BhbD4iLCJzZWxmIiwiUmVnZXhwIiwibmV3Iiwic2VsZjo6Rk9SQklEREVOX1NUQVJUSU5HX0lERU5USUZJRVJfQ0hBUlMiLCJzZWxmOjpGT1JCSURERU5fRU5ESU5HX0lERU5USUZJRVJfQ0hBUlMiLCJzZWxmOjpSRUdFWFBfU1RBUlQiLCJzZWxmOjpGT1JCSURERU5fQ09OU1RfTkFNRV9DSEFSUyIsInNlbGY6OlJFR0VYUF9FTkQiXSwibWFwcGluZ3MiOiJBQUFBQSxzQ0FBQUEsZ0JBQUFBO0VBQUFBOztFQUFBQTtFQUVBQSxPQUFBQztFQUFBQTs7SUFBQUE7OztJQUNFLFdBQUFDLElBQUEsa0JBQTZDRCxHQUE3QztJQUNBLFdBQUFDLElBQUEsZ0JBQTJDRCxHQUEzQztJQVNBLFdBQUFDLElBQUEseUNBQTRDRCxxRUFBNUM7SUFZQSxXQUFBQyxJQUFBLHVDQUE0Q0QsMkZBQTVDO0lBQ0EsV0FBQUMsSUFBQSw4QkFBaUNDLFlBQU1DLEtBQUFBLENBQU1ILElBQUQsR0FBQSxDQUFLSSxJQUFBSCxJQUFBRyx3Q0FBTCxDQUFBLEdBQStDSixNQUEvQyxHQUFBLENBQXFESyxJQUFBSixJQUFBSSxzQ0FBckQsQ0FBQSxHQUE2RkwsR0FBbEdHLENBQXZDO0lBSUEsV0FBQUYsSUFBQSxnQ0FBbUNELDJGQUFuQztJQUNBQSxPQUFBLFdBQUFDLElBQUEsdUJBQTBCQyxZQUFNQyxLQUFBQSxDQUFLLEVBQUEsR0FBQSxDQUFHRyxJQUFBTCxJQUFBSyxpQkFBSCxDQUFBLEdBQXNCTixjQUF0QixHQUFBLENBQW9DTyxJQUFBTixJQUFBTSwrQkFBcEMsQ0FBQSxHQUFxRVAsSUFBckUsR0FBQSxDQUF5RVEsSUFBQVAsSUFBQU8sZUFBekUsQ0FBTEwsQ0FBaEM7RUE3QkZILEdBQUFBLFdBQUFBO0FBRkFEOyJ9fSx7Im9mZnNldCI6eyJsaW5lIjoxOTc1MywiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvcmVsaWIvcHJvYy5yYiJdLCJzb3VyY2VzQ29udGVudCI6WyIjIGhlbHBlcnM6IHNsaWNlXG5cbmNsYXNzIDo6UHJvYyA8IGBGdW5jdGlvbmBcbiAgYE9wYWwucHJvcChzZWxmLiQkcHJvdG90eXBlLCAnJCRpc19wcm9jJywgdHJ1ZSlgXG4gIGBPcGFsLnByb3Aoc2VsZi4kJHByb3RvdHlwZSwgJyQkaXNfbGFtYmRhJywgZmFsc2UpYFxuXG4gIGRlZiBzZWxmLm5ldygmYmxvY2spXG4gICAgdW5sZXNzIGJsb2NrXG4gICAgICA6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsICd0cmllZCB0byBjcmVhdGUgYSBQcm9jIG9iamVjdCB3aXRob3V0IGEgYmxvY2snXG4gICAgZW5kXG5cbiAgICBibG9ja1xuICBlbmRcblxuICBkZWYgY2FsbCgqYXJncywgJmJsb2NrKVxuICAgICV4e1xuICAgICAgaWYgKGJsb2NrICE9PSBuaWwpIHtcbiAgICAgICAgc2VsZi4kJHAgPSBibG9jaztcbiAgICAgIH1cblxuICAgICAgdmFyIHJlc3VsdCwgJGJyayA9IHNlbGYuJCRicmssICRyZXQgPSBzZWxmLiQkcmV0O1xuXG4gICAgICBpZiAoJGJyayB8fCAoJHJldCAmJiBzZWxmLiQkaXNfbGFtYmRhKSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmIChzZWxmLiQkaXNfbGFtYmRhKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBzZWxmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IE9wYWwueWllbGRYKHNlbGYsIGFyZ3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgaWYgKGVyciA9PT0gJGJyaykge1xuICAgICAgICAgICAgcmV0dXJuIGVyci4kdjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoc2VsZi4kJGlzX2xhbWJkYSAmJiBlcnIgPT09ICRyZXQpIHtcbiAgICAgICAgICAgIHJldHVybiBlcnIuJHY7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGlmIChzZWxmLiQkaXNfbGFtYmRhKSB7XG4gICAgICAgICAgcmVzdWx0ID0gc2VsZi5hcHBseShudWxsLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICByZXN1bHQgPSBPcGFsLnlpZWxkWChzZWxmLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmID4+KG90aGVyKVxuICAgIDo6S2VybmVsLnByb2MgZG8gfCphcmdzLCAmYmxvY2t8XG4gICAgICBvdXQgPSBjYWxsKCphcmdzLCAmYmxvY2spXG4gICAgICBvdGhlci5jYWxsKG91dClcbiAgICBlbmRcbiAgZW5kXG5cbiAgZGVmIDw8KG90aGVyKVxuICAgIDo6S2VybmVsLnByb2MgZG8gfCphcmdzLCAmYmxvY2t8XG4gICAgICBvdXQgPSBvdGhlci5jYWxsKCphcmdzLCAmYmxvY2spXG4gICAgICBjYWxsKG91dClcbiAgICBlbmRcbiAgZW5kXG5cbiAgZGVmIHRvX3Byb2NcbiAgICBzZWxmXG4gIGVuZFxuXG4gIGRlZiBsYW1iZGE/XG4gICAgIyBUaGlzIG1ldGhvZCBzaG91bGQgdGVsbCB0aGUgdXNlciBpZiB0aGUgcHJvYyB0cmlja3MgYXJlIHVuYXZhaWxhYmxlLFxuICAgICMgKHNlZSBQcm9jI2xhbWJkYT8gb24gcnVieSBkb2NzIHRvIGZpbmQgb3V0IG1vcmUpLlxuICAgIGAhIXNlbGYuJCRpc19sYW1iZGFgXG4gIGVuZFxuXG4gIGRlZiBhcml0eVxuICAgICV4e1xuICAgICAgaWYgKHNlbGYuJCRpc19jdXJyaWVkKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBzZWxmLiQkYXJpdHk7XG4gICAgICB9XG4gICAgfVxuICBlbmRcblxuICBkZWYgc291cmNlX2xvY2F0aW9uXG4gICAgYGlmIChzZWxmLiQkaXNfY3VycmllZCkgeyByZXR1cm4gbmlsOyB9YFxuICAgIGBzZWxmLiQkc291cmNlX2xvY2F0aW9uYCB8fCBuaWxcbiAgZW5kXG5cbiAgZGVmIGJpbmRpbmdcbiAgICBgaWYgKHNlbGYuJCRpc19jdXJyaWVkKSB7ICN7OjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCBcIkNhbid0IGNyZWF0ZSBCaW5kaW5nXCJ9IH1gXG5cbiAgICBpZiBkZWZpbmVkPyA6OkJpbmRpbmdcbiAgICAgIDo6QmluZGluZy5uZXcobmlsLCBbXSwgYHNlbGYuJCRzYCwgc291cmNlX2xvY2F0aW9uKVxuICAgIGVuZFxuICBlbmRcblxuICBkZWYgcGFyYW1ldGVyc1xuICAgICV4e1xuICAgICAgaWYgKHNlbGYuJCRpc19jdXJyaWVkKSB7XG4gICAgICAgIHJldHVybiAje1tbOnJlc3RdXX07XG4gICAgICB9IGVsc2UgaWYgKHNlbGYuJCRwYXJhbWV0ZXJzKSB7XG4gICAgICAgIGlmIChzZWxmLiQkaXNfbGFtYmRhKSB7XG4gICAgICAgICAgcmV0dXJuIHNlbGYuJCRwYXJhbWV0ZXJzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciByZXN1bHQgPSBbXSwgaSwgbGVuZ3RoO1xuXG4gICAgICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gc2VsZi4kJHBhcmFtZXRlcnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBwYXJhbWV0ZXIgPSBzZWxmLiQkcGFyYW1ldGVyc1tpXTtcblxuICAgICAgICAgICAgaWYgKHBhcmFtZXRlclswXSA9PT0gJ3JlcScpIHtcbiAgICAgICAgICAgICAgLy8gcmVxdWlyZWQgYXJndW1lbnRzIGFsd2F5cyBoYXZlIG5hbWVcbiAgICAgICAgICAgICAgcGFyYW1ldGVyID0gWydvcHQnLCBwYXJhbWV0ZXJbMV1dO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXN1bHQucHVzaChwYXJhbWV0ZXIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBjdXJyeShhcml0eSA9IHVuZGVmaW5lZClcbiAgICAleHtcbiAgICAgIGlmIChhcml0eSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGFyaXR5ID0gc2VsZi5sZW5ndGg7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgYXJpdHkgPSAjezo6T3BhbC5jb2VyY2VfdG8hKGFyaXR5LCA6OkludGVnZXIsIDp0b19pbnQpfTtcbiAgICAgICAgaWYgKHNlbGYuJCRpc19sYW1iZGEgJiYgYXJpdHkgIT09IHNlbGYubGVuZ3RoKSB7XG4gICAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsIFwid3JvbmcgbnVtYmVyIG9mIGFyZ3VtZW50cyAoI3tgYXJpdHlgfSBmb3IgI3tgc2VsZi5sZW5ndGhgfSlcIn1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjdXJyaWVkICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSAkc2xpY2UuY2FsbChhcmd1bWVudHMpLFxuICAgICAgICAgICAgbGVuZ3RoID0gYXJncy5sZW5ndGgsXG4gICAgICAgICAgICByZXN1bHQ7XG5cbiAgICAgICAgaWYgKGxlbmd0aCA+IGFyaXR5ICYmIHNlbGYuJCRpc19sYW1iZGEgJiYgIXNlbGYuJCRpc19jdXJyaWVkKSB7XG4gICAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsIFwid3JvbmcgbnVtYmVyIG9mIGFyZ3VtZW50cyAoI3tgbGVuZ3RoYH0gZm9yICN7YGFyaXR5YH0pXCJ9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGVuZ3RoID49IGFyaXR5KSB7XG4gICAgICAgICAgcmV0dXJuIHNlbGYuJGNhbGwuYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXN1bHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGN1cnJpZWQuYXBwbHkobnVsbCxcbiAgICAgICAgICAgIGFyZ3MuY29uY2F0KCRzbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQuJCRpc19sYW1iZGEgPSBzZWxmLiQkaXNfbGFtYmRhO1xuICAgICAgICByZXN1bHQuJCRpc19jdXJyaWVkID0gdHJ1ZTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcblxuICAgICAgY3VycmllZC4kJGlzX2xhbWJkYSA9IHNlbGYuJCRpc19sYW1iZGE7XG4gICAgICBjdXJyaWVkLiQkaXNfY3VycmllZCA9IHRydWU7XG4gICAgICByZXR1cm4gY3VycmllZDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBkdXBcbiAgICAleHtcbiAgICAgIHZhciBvcmlnaW5hbF9wcm9jID0gc2VsZi4kJG9yaWdpbmFsX3Byb2MgfHwgc2VsZixcbiAgICAgICAgICBwcm9jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsX3Byb2MuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICB9O1xuXG4gICAgICBmb3IgKHZhciBwcm9wIGluIHNlbGYpIHtcbiAgICAgICAgaWYgKHNlbGYuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgICBwcm9jW3Byb3BdID0gc2VsZltwcm9wXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvYztcbiAgICB9XG4gIGVuZFxuXG4gIGFsaWFzID09PSBjYWxsXG4gIGFsaWFzIGNsb25lIGR1cFxuICBhbGlhcyB5aWVsZCBjYWxsXG4gIGFsaWFzIFtdIGNhbGxcbmVuZFxuIl0sIm5hbWVzIjpbIjx0b3AgKHJlcXVpcmVkKT4iLCI8Y2xhc3M6UHJvYz4iLCJuZXciLCJzZWxmIiwiYmxvY2siLCJLZXJuZWwiLCJyYWlzZSIsIkFyZ3VtZW50RXJyb3IiLCJjYWxsIiwiPj4iLCJvdGhlciIsInByb2MiLCJibG9jayBpbiA+PiIsImJsb2NrICgyIGxldmVscykgaW4gPj4iLCJvdXQiLCJhcmdzIiwidG9fcHJvYyIsIjw8IiwiYmxvY2sgaW4gPDwiLCJibG9jayAoMiBsZXZlbHMpIGluIDw8IiwibGFtYmRhPyIsImFyaXR5Iiwic291cmNlX2xvY2F0aW9uIiwiJHJldF9vcl8xIiwiYmluZGluZyIsIkJpbmRpbmciLCJwYXJhbWV0ZXJzIiwiY3VycnkiLCJPcGFsIiwiY29lcmNlX3RvISIsIkludGVnZXIiLCJkdXAiXSwibWFwcGluZ3MiOiJBQUFBQSwrQkFBQUEsZ0JBQUFBO0VBQUFBOztFQUFBQTtFQUVBQSxPQUFBQztFQUFBQTs7OztJQUNHQTtJQUNBQTtJQUVEQyxNQUFJQyxJQUFKRCxVQUFBQSxxQkFBQUE7QUFBQUEsTUFBQUE7O01BQUFBOzs7TUFDRSxLQ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UZBRDsifX0seyJvZmZzZXQiOnsibGluZSI6MTk5OTksImNvbHVtbiI6MH0sIm1hcCI6eyJ2ZXJzaW9uIjozLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb3JlbGliL251bWJlci5yYiJdLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlICdjb3JlbGliL251bWVyaWMnXG5cbmNsYXNzIDo6TnVtYmVyIDwgOjpOdW1lcmljXG4gIDo6T3BhbC5icmlkZ2UoYE51bWJlcmAsIHNlbGYpXG4gIGBPcGFsLnByb3Aoc2VsZi4kJHByb3RvdHlwZSwgJyQkaXNfbnVtYmVyJywgdHJ1ZSlgXG4gIGBzZWxmLiQkaXNfbnVtYmVyX2NsYXNzID0gdHJ1ZWBcblxuICBjbGFzcyA8PCBzZWxmXG4gICAgZGVmIGFsbG9jYXRlXG4gICAgICA6Oktlcm5lbC5yYWlzZSA6OlR5cGVFcnJvciwgXCJhbGxvY2F0b3IgdW5kZWZpbmVkIGZvciAje25hbWV9XCJcbiAgICBlbmRcblxuICAgIHVuZGVmIDpuZXdcbiAgZW5kXG5cbiAgZGVmIGNvZXJjZShvdGhlcilcbiAgICAleHtcbiAgICAgIGlmIChvdGhlciA9PT0gbmlsKSB7XG4gICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpUeXBlRXJyb3IsIFwiY2FuJ3QgY29udmVydCAje290aGVyLmNsYXNzfSBpbnRvIEZsb2F0XCJ9O1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAob3RoZXIuJCRpc19zdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIFsjezo6S2VybmVsLkZsb2F0KG90aGVyKX0sIHNlbGZdO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoI3tvdGhlci5yZXNwb25kX3RvPyg6dG9fZil9KSB7XG4gICAgICAgIHJldHVybiBbI3s6Ok9wYWwuY29lcmNlX3RvIShvdGhlciwgOjpGbG9hdCwgOnRvX2YpfSwgc2VsZl07XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChvdGhlci4kJGlzX251bWJlcikge1xuICAgICAgICByZXR1cm4gW290aGVyLCBzZWxmXTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6VHlwZUVycm9yLCBcImNhbid0IGNvbnZlcnQgI3tvdGhlci5jbGFzc30gaW50byBGbG9hdFwifTtcbiAgICAgIH1cbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBfX2lkX19cbiAgICBgKHNlbGYgKiAyKSArIDFgXG4gIGVuZFxuXG4gIGRlZiArKG90aGVyKVxuICAgICV4e1xuICAgICAgaWYgKG90aGVyLiQkaXNfbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBzZWxmICsgb3RoZXI7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuICN7X19jb2VyY2VkX18gOissIG90aGVyfTtcbiAgICAgIH1cbiAgICB9XG4gIGVuZFxuXG4gIGRlZiAtKG90aGVyKVxuICAgICV4e1xuICAgICAgaWYgKG90aGVyLiQkaXNfbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBzZWxmIC0gb3RoZXI7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuICN7X19jb2VyY2VkX18gOi0sIG90aGVyfTtcbiAgICAgIH1cbiAgICB9XG4gIGVuZFxuXG4gIGRlZiAqKG90aGVyKVxuICAgICV4e1xuICAgICAgaWYgKG90aGVyLiQkaXNfbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBzZWxmICogb3RoZXI7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuICN7X19jb2VyY2VkX18gOiosIG90aGVyfTtcbiAgICAgIH1cbiAgICB9XG4gIGVuZFxuXG4gIGRlZiAvKG90aGVyKVxuICAgICV4e1xuICAgICAgaWYgKG90aGVyLiQkaXNfbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBzZWxmIC8gb3RoZXI7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuICN7X19jb2VyY2VkX18gOi8sIG90aGVyfTtcbiAgICAgIH1cbiAgICB9XG4gIGVuZFxuXG4gIGRlZiAlKG90aGVyKVxuICAgICV4e1xuICAgICAgaWYgKG90aGVyLiQkaXNfbnVtYmVyKSB7XG4gICAgICAgIGlmIChvdGhlciA9PSAtSW5maW5pdHkpIHtcbiAgICAgICAgICByZXR1cm4gb3RoZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3RoZXIgPT0gMCkge1xuICAgICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpaZXJvRGl2aXNpb25FcnJvciwgJ2RpdmlkZWQgYnkgMCd9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG90aGVyIDwgMCB8fCBzZWxmIDwgMCkge1xuICAgICAgICAgIHJldHVybiAoc2VsZiAlIG90aGVyICsgb3RoZXIpICUgb3RoZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHNlbGYgJSBvdGhlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJldHVybiAje19fY29lcmNlZF9fIDolLCBvdGhlcn07XG4gICAgICB9XG4gICAgfVxuICBlbmRcblxuICBkZWYgJihvdGhlcilcbiAgICAleHtcbiAgICAgIGlmIChvdGhlci4kJGlzX251bWJlcikge1xuICAgICAgICByZXR1cm4gc2VsZiAmIG90aGVyO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJldHVybiAje19fY29lcmNlZF9fIDomLCBvdGhlcn07XG4gICAgICB9XG4gICAgfVxuICBlbmRcblxuICBkZWYgfChvdGhlcilcbiAgICAleHtcbiAgICAgIGlmIChvdGhlci4kJGlzX251bWJlcikge1xuICAgICAgICByZXR1cm4gc2VsZiB8IG90aGVyO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJldHVybiAje19fY29lcmNlZF9fIDp8LCBvdGhlcn07XG4gICAgICB9XG4gICAgfVxuICBlbmRcblxuICBkZWYgXihvdGhlcilcbiAgICAleHtcbiAgICAgIGlmIChvdGhlci4kJGlzX251bWJlcikge1xuICAgICAgICByZXR1cm4gc2VsZiBeIG90aGVyO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJldHVybiAje19fY29lcmNlZF9fIDpeLCBvdGhlcn07XG4gICAgICB9XG4gICAgfVxuICBlbmRcblxuICBkZWYgPChvdGhlcilcbiAgICAleHtcbiAgICAgIGlmIChvdGhlci4kJGlzX251bWJlcikge1xuICAgICAgICByZXR1cm4gc2VsZiA8IG90aGVyO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJldHVybiAje19fY29lcmNlZF9fIDo8LCBvdGhlcn07XG4gICAgICB9XG4gICAgfVxuICBlbmRcblxuICBkZWYgPD0ob3RoZXIpXG4gICAgJXh7XG4gICAgICBpZiAob3RoZXIuJCRpc19udW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYgPD0gb3RoZXI7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuICN7X19jb2VyY2VkX18gOjw9LCBvdGhlcn07XG4gICAgICB9XG4gICAgfVxuICBlbmRcblxuICBkZWYgPihvdGhlcilcbiAgICAleHtcbiAgICAgIGlmIChvdGhlci4kJGlzX251bWJlcikge1xuICAgICAgICByZXR1cm4gc2VsZiA+IG90aGVyO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJldHVybiAje19fY29lcmNlZF9fIDo+LCBvdGhlcn07XG4gICAgICB9XG4gICAgfVxuICBlbmRcblxuICBkZWYgPj0ob3RoZXIpXG4gICAgJXh7XG4gICAgICBpZiAob3RoZXIuJCRpc19udW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYgPj0gb3RoZXI7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuICN7X19jb2VyY2VkX18gOj49LCBvdGhlcn07XG4gICAgICB9XG4gICAgfVxuICBlbmRcblxuICAjIENvbXB1dGUgdGhlIHJlc3VsdCBvZiB0aGUgc3BhY2VzaGlwIG9wZXJhdG9yIGluc2lkZSBpdHMgb3duIGZ1bmN0aW9uIHNvIGl0XG4gICMgY2FuIGJlIG9wdGltaXplZCBkZXNwaXRlIGEgdHJ5L2ZpbmFsbHkgY29uc3RydWN0LlxuICAleHtcbiAgICB2YXIgc3BhY2VzaGlwX29wZXJhdG9yID0gZnVuY3Rpb24oc2VsZiwgb3RoZXIpIHtcbiAgICAgIGlmIChvdGhlci4kJGlzX251bWJlcikge1xuICAgICAgICBpZiAoaXNOYU4oc2VsZikgfHwgaXNOYU4ob3RoZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIG5pbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWxmID4gb3RoZXIpIHtcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfSBlbHNlIGlmIChzZWxmIDwgb3RoZXIpIHtcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gI3tfX2NvZXJjZWRfXyA6PD0+LCBgb3RoZXJgfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBkZWYgPD0+KG90aGVyKVxuICAgIGBzcGFjZXNoaXBfb3BlcmF0b3Ioc2VsZiwgb3RoZXIpYFxuICByZXNjdWUgOjpBcmd1bWVudEVycm9yXG4gICAgbmlsXG4gIGVuZFxuXG4gIGRlZiA8PChjb3VudClcbiAgICBjb3VudCA9IDo6T3BhbC5jb2VyY2VfdG8hIGNvdW50LCA6OkludGVnZXIsIDp0b19pbnRcblxuICAgIGAje2NvdW50fSA+IDAgPyBzZWxmIDw8ICN7Y291bnR9IDogc2VsZiA+PiAtI3tjb3VudH1gXG4gIGVuZFxuXG4gIGRlZiA+Pihjb3VudClcbiAgICBjb3VudCA9IDo6T3BhbC5jb2VyY2VfdG8hIGNvdW50LCA6OkludGVnZXIsIDp0b19pbnRcblxuICAgIGAje2NvdW50fSA+IDAgPyBzZWxmID4+ICN7Y291bnR9IDogc2VsZiA8PCAtI3tjb3VudH1gXG4gIGVuZFxuXG4gIGRlZiBbXShiaXQpXG4gICAgYml0ID0gOjpPcGFsLmNvZXJjZV90byEgYml0LCA6OkludGVnZXIsIDp0b19pbnRcblxuICAgICV4e1xuICAgICAgaWYgKCN7Yml0fSA8IDApIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICBpZiAoI3tiaXR9ID49IDMyKSB7XG4gICAgICAgIHJldHVybiAjeyBzZWxmIH0gPCAwID8gMSA6IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gKHNlbGYgPj4gI3tiaXR9KSAmIDE7XG4gICAgfVxuICBlbmRcblxuICBkZWYgK0BcbiAgICBgK3NlbGZgXG4gIGVuZFxuXG4gIGRlZiAtQFxuICAgIGAtc2VsZmBcbiAgZW5kXG5cbiAgZGVmIH5cbiAgICBgfnNlbGZgXG4gIGVuZFxuXG4gIGRlZiAqKihvdGhlcilcbiAgICBpZiA6OkludGVnZXIgPT09IG90aGVyXG4gICAgICBpZiAhKDo6SW50ZWdlciA9PT0gc2VsZikgfHwgb3RoZXIgPiAwXG4gICAgICAgIGBNYXRoLnBvdyhzZWxmLCBvdGhlcilgXG4gICAgICBlbHNlXG4gICAgICAgIDo6UmF0aW9uYWwubmV3KHNlbGYsIDEpKipvdGhlclxuICAgICAgZW5kXG4gICAgZWxzaWYgc2VsZiA8IDAgJiYgKDo6RmxvYXQgPT09IG90aGVyIHx8IDo6UmF0aW9uYWwgPT09IG90aGVyKVxuICAgICAgOjpDb21wbGV4Lm5ldyhzZWxmLCAwKSoqb3RoZXIudG9fZlxuICAgIGVsc2lmIGBvdGhlci4kJGlzX251bWJlciAhPSBudWxsYFxuICAgICAgYE1hdGgucG93KHNlbGYsIG90aGVyKWBcbiAgICBlbHNlXG4gICAgICBfX2NvZXJjZWRfXyA6KiosIG90aGVyXG4gICAgZW5kXG4gIGVuZFxuXG4gIGRlZiA9PShvdGhlcilcbiAgICAleHtcbiAgICAgIGlmIChvdGhlci4kJGlzX251bWJlcikge1xuICAgICAgICByZXR1cm4gc2VsZi52YWx1ZU9mKCkgPT09IG90aGVyLnZhbHVlT2YoKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKCN7b3RoZXIucmVzcG9uZF90bz8gOj09fSkge1xuICAgICAgICByZXR1cm4gI3tvdGhlciA9PSBzZWxmfTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICBlbmRcblxuICBhbGlhcyA9PT0gPT1cblxuICBkZWYgYWJzXG4gICAgYE1hdGguYWJzKHNlbGYpYFxuICBlbmRcblxuICBkZWYgYWJzMlxuICAgIGBNYXRoLmFicyhzZWxmICogc2VsZilgXG4gIGVuZFxuXG4gIGRlZiBhbGxiaXRzPyhtYXNrKVxuICAgIG1hc2sgPSA6Ok9wYWwuY29lcmNlX3RvISBtYXNrLCA6OkludGVnZXIsIDp0b19pbnRcbiAgICBgKHNlbGYgJiBtYXNrKSA9PSBtYXNrYFxuICBlbmRcblxuICBkZWYgYW55Yml0cz8obWFzaylcbiAgICBtYXNrID0gOjpPcGFsLmNvZXJjZV90byEgbWFzaywgOjpJbnRlZ2VyLCA6dG9faW50XG4gICAgYChzZWxmICYgbWFzaykgIT09IDBgXG4gIGVuZFxuXG4gIGRlZiBhbmdsZVxuICAgIHJldHVybiBzZWxmIGlmIG5hbj9cblxuICAgICV4e1xuICAgICAgaWYgKHNlbGYgPT0gMCkge1xuICAgICAgICBpZiAoMSAvIHNlbGYgPiAwKSB7XG4gICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIE1hdGguUEk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHNlbGYgPCAwKSB7XG4gICAgICAgIHJldHVybiBNYXRoLlBJO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGJpdF9sZW5ndGhcbiAgICB1bmxlc3MgOjpJbnRlZ2VyID09PSBzZWxmXG4gICAgICA6Oktlcm5lbC5yYWlzZSA6Ok5vTWV0aG9kRXJyb3IubmV3KFwidW5kZWZpbmVkIG1ldGhvZCBgYml0X2xlbmd0aGAgZm9yICN7c2VsZn06RmxvYXRcIiwgJ2JpdF9sZW5ndGgnKVxuICAgIGVuZFxuXG4gICAgJXh7XG4gICAgICBpZiAoc2VsZiA9PT0gMCB8fCBzZWxmID09PSAtMSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlc3VsdCA9IDAsXG4gICAgICAgICAgdmFsdWUgID0gc2VsZiA8IDAgPyB+c2VsZiA6IHNlbGY7XG5cbiAgICAgIHdoaWxlICh2YWx1ZSAhPSAwKSB7XG4gICAgICAgIHJlc3VsdCAgICs9IDE7XG4gICAgICAgIHZhbHVlICA+Pj49IDE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICBlbmRcblxuICBkZWYgY2VpbChuZGlnaXRzID0gMClcbiAgICAleHtcbiAgICAgIHZhciBmID0gI3t0b19mfTtcblxuICAgICAgaWYgKGYgJSAxID09PSAwICYmIG5kaWdpdHMgPj0gMCkge1xuICAgICAgICByZXR1cm4gZjtcbiAgICAgIH1cblxuICAgICAgdmFyIGZhY3RvciA9IE1hdGgucG93KDEwLCBuZGlnaXRzKSxcbiAgICAgICAgICByZXN1bHQgPSBNYXRoLmNlaWwoZiAqIGZhY3RvcikgLyBmYWN0b3I7XG5cbiAgICAgIGlmIChmICUgMSA9PT0gMCkge1xuICAgICAgICByZXN1bHQgPSBNYXRoLnJvdW5kKHJlc3VsdCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICBlbmRcblxuICBkZWYgY2hyKGVuY29kaW5nID0gdW5kZWZpbmVkKVxuICAgIGBPcGFsLmVuYyhTdHJpbmcuZnJvbUNoYXJDb2RlKHNlbGYpLCBlbmNvZGluZyB8fCBcIkJJTkFSWVwiKWBcbiAgZW5kXG5cbiAgZGVmIGRlbm9taW5hdG9yXG4gICAgaWYgbmFuPyB8fCBpbmZpbml0ZT9cbiAgICAgIDFcbiAgICBlbHNlXG4gICAgICBzdXBlclxuICAgIGVuZFxuICBlbmRcblxuICBkZWYgZG93bnRvKHN0b3AsICZibG9jaylcbiAgICB1bmxlc3MgYmxvY2tfZ2l2ZW4/XG4gICAgICByZXR1cm4gZW51bV9mb3IoOmRvd250bywgc3RvcCkgZG9cbiAgICAgICAgOjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCBcImNvbXBhcmlzb24gb2YgI3tzZWxmLmNsYXNzfSB3aXRoICN7c3RvcC5jbGFzc30gZmFpbGVkXCIgdW5sZXNzIDo6TnVtZXJpYyA9PT0gc3RvcFxuICAgICAgICBzdG9wID4gc2VsZiA/IDAgOiBzZWxmIC0gc3RvcCArIDFcbiAgICAgIGVuZFxuICAgIGVuZFxuXG4gICAgJXh7XG4gICAgICBpZiAoIXN0b3AuJCRpc19udW1iZXIpIHtcbiAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsIFwiY29tcGFyaXNvbiBvZiAje3NlbGYuY2xhc3N9IHdpdGggI3tzdG9wLmNsYXNzfSBmYWlsZWRcIn1cbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSBzZWxmOyBpID49IHN0b3A7IGktLSkge1xuICAgICAgICBibG9jayhpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzZWxmXG4gIGVuZFxuXG4gIGRlZiBlcXVhbD8ob3RoZXIpXG4gICAgc2VsZiA9PSBvdGhlciB8fCBgaXNOYU4oc2VsZikgJiYgaXNOYU4ob3RoZXIpYFxuICBlbmRcblxuICBkZWYgZXZlbj9cbiAgICBgc2VsZiAlIDIgPT09IDBgXG4gIGVuZFxuXG4gIGRlZiBmbG9vcihuZGlnaXRzID0gMClcbiAgICAleHtcbiAgICAgIHZhciBmID0gI3t0b19mfTtcblxuICAgICAgaWYgKGYgJSAxID09PSAwICYmIG5kaWdpdHMgPj0gMCkge1xuICAgICAgICByZXR1cm4gZjtcbiAgICAgIH1cblxuICAgICAgdmFyIGZhY3RvciA9IE1hdGgucG93KDEwLCBuZGlnaXRzKSxcbiAgICAgICAgICByZXN1bHQgPSBNYXRoLmZsb29yKGYgKiBmYWN0b3IpIC8gZmFjdG9yO1xuXG4gICAgICBpZiAoZiAlIDEgPT09IDApIHtcbiAgICAgICAgcmVzdWx0ID0gTWF0aC5yb3VuZChyZXN1bHQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGdjZChvdGhlcilcbiAgICB1bmxlc3MgOjpJbnRlZ2VyID09PSBvdGhlclxuICAgICAgOjpLZXJuZWwucmFpc2UgOjpUeXBlRXJyb3IsICdub3QgYW4gaW50ZWdlcidcbiAgICBlbmRcblxuICAgICV4e1xuICAgICAgdmFyIG1pbiA9IE1hdGguYWJzKHNlbGYpLFxuICAgICAgICAgIG1heCA9IE1hdGguYWJzKG90aGVyKTtcblxuICAgICAgd2hpbGUgKG1pbiA+IDApIHtcbiAgICAgICAgdmFyIHRtcCA9IG1pbjtcblxuICAgICAgICBtaW4gPSBtYXggJSBtaW47XG4gICAgICAgIG1heCA9IHRtcDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1heDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBnY2RsY20ob3RoZXIpXG4gICAgW2djZChvdGhlciksIGxjbShvdGhlcildXG4gIGVuZFxuXG4gIGRlZiBpbnRlZ2VyP1xuICAgIGBzZWxmICUgMSA9PT0gMGBcbiAgZW5kXG5cbiAgZGVmIGlzX2E/KGtsYXNzKVxuICAgIHJldHVybiB0cnVlIGlmIGtsYXNzID09IDo6SW50ZWdlciAmJiA6OkludGVnZXIgPT09IHNlbGZcbiAgICByZXR1cm4gdHJ1ZSBpZiBrbGFzcyA9PSA6OkludGVnZXIgJiYgOjpJbnRlZ2VyID09PSBzZWxmXG4gICAgcmV0dXJuIHRydWUgaWYga2xhc3MgPT0gOjpGbG9hdCAmJiA6OkZsb2F0ID09PSBzZWxmXG5cbiAgICBzdXBlclxuICBlbmRcblxuICBkZWYgaW5zdGFuY2Vfb2Y/KGtsYXNzKVxuICAgIHJldHVybiB0cnVlIGlmIGtsYXNzID09IDo6SW50ZWdlciAmJiA6OkludGVnZXIgPT09IHNlbGZcbiAgICByZXR1cm4gdHJ1ZSBpZiBrbGFzcyA9PSA6OkludGVnZXIgJiYgOjpJbnRlZ2VyID09PSBzZWxmXG4gICAgcmV0dXJuIHRydWUgaWYga2xhc3MgPT0gOjpGbG9hdCAmJiA6OkZsb2F0ID09PSBzZWxmXG5cbiAgICBzdXBlclxuICBlbmRcblxuICBkZWYgbGNtKG90aGVyKVxuICAgIHVubGVzcyA6OkludGVnZXIgPT09IG90aGVyXG4gICAgICA6Oktlcm5lbC5yYWlzZSA6OlR5cGVFcnJvciwgJ25vdCBhbiBpbnRlZ2VyJ1xuICAgIGVuZFxuXG4gICAgJXh7XG4gICAgICBpZiAoc2VsZiA9PSAwIHx8IG90aGVyID09IDApIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKHNlbGYgKiBvdGhlciAvICN7Z2NkKG90aGVyKX0pO1xuICAgICAgfVxuICAgIH1cbiAgZW5kXG5cbiAgZGVmIG5leHRcbiAgICBgc2VsZiArIDFgXG4gIGVuZFxuXG4gIGRlZiBub2JpdHM/KG1hc2spXG4gICAgbWFzayA9IDo6T3BhbC5jb2VyY2VfdG8hIG1hc2ssIDo6SW50ZWdlciwgOnRvX2ludFxuICAgIGAoc2VsZiAmIG1hc2spID09IDBgXG4gIGVuZFxuXG4gIGRlZiBub256ZXJvP1xuICAgIGBzZWxmID09IDAgPyBuaWwgOiBzZWxmYFxuICBlbmRcblxuICBkZWYgbnVtZXJhdG9yXG4gICAgaWYgbmFuPyB8fCBpbmZpbml0ZT9cbiAgICAgIHNlbGZcbiAgICBlbHNlXG4gICAgICBzdXBlclxuICAgIGVuZFxuICBlbmRcblxuICBkZWYgb2RkP1xuICAgIGBzZWxmICUgMiAhPT0gMGBcbiAgZW5kXG5cbiAgZGVmIG9yZFxuICAgIHNlbGZcbiAgZW5kXG5cbiAgZGVmIHBvdyhiLCBtID0gdW5kZWZpbmVkKVxuICAgICV4e1xuICAgICAgaWYgKHNlbGYgPT0gMCkge1xuICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6WmVyb0RpdmlzaW9uRXJyb3IsICdkaXZpZGVkIGJ5IDAnfVxuICAgICAgfVxuXG4gICAgICBpZiAobSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiAje3NlbGYqKmJ9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCEoI3s6OkludGVnZXIgPT09IGJ9KSkge1xuICAgICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpUeXBlRXJyb3IsICdJbnRlZ2VyI3BvdygpIDJuZCBhcmd1bWVudCBub3QgYWxsb3dlZCB1bmxlc3MgYSAxc3QgYXJndW1lbnQgaXMgaW50ZWdlcid9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYiA8IDApIHtcbiAgICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6VHlwZUVycm9yLCAnSW50ZWdlciNwb3coKSAxc3QgYXJndW1lbnQgY2Fubm90IGJlIG5lZ2F0aXZlIHdoZW4gMm5kIGFyZ3VtZW50IHNwZWNpZmllZCd9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoISgjezo6SW50ZWdlciA9PT0gbX0pKSB7XG4gICAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OlR5cGVFcnJvciwgJ0ludGVnZXIjcG93KCkgMm5kIGFyZ3VtZW50IG5vdCBhbGxvd2VkIHVubGVzcyBhbGwgYXJndW1lbnRzIGFyZSBpbnRlZ2Vycyd9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobSA9PT0gMCkge1xuICAgICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpaZXJvRGl2aXNpb25FcnJvciwgJ2RpdmlkZWQgYnkgMCd9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gI3soc2VsZioqYikgJSBtfVxuICAgICAgfVxuICAgIH1cbiAgZW5kXG5cbiAgZGVmIHByZWRcbiAgICBgc2VsZiAtIDFgXG4gIGVuZFxuXG4gIGRlZiBxdW8ob3RoZXIpXG4gICAgaWYgOjpJbnRlZ2VyID09PSBzZWxmXG4gICAgICBzdXBlclxuICAgIGVsc2VcbiAgICAgIHNlbGYgLyBvdGhlclxuICAgIGVuZFxuICBlbmRcblxuICBkZWYgcmF0aW9uYWxpemUoZXBzID0gdW5kZWZpbmVkKVxuICAgICV4e1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCBcIndyb25nIG51bWJlciBvZiBhcmd1bWVudHMgKCN7YGFyZ3VtZW50cy5sZW5ndGhgfSBmb3IgMC4uMSlcIn07XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgOjpJbnRlZ2VyID09PSBzZWxmXG4gICAgICA6OlJhdGlvbmFsLm5ldyhzZWxmLCAxKVxuICAgIGVsc2lmIGluZmluaXRlP1xuICAgICAgOjpLZXJuZWwucmFpc2UgOjpGbG9hdERvbWFpbkVycm9yLCAnSW5maW5pdHknXG4gICAgZWxzaWYgbmFuP1xuICAgICAgOjpLZXJuZWwucmFpc2UgOjpGbG9hdERvbWFpbkVycm9yLCAnTmFOJ1xuICAgIGVsc2lmIGBlcHMgPT0gbnVsbGBcbiAgICAgIGYsIG4gID0gOjpNYXRoLmZyZXhwIHNlbGZcbiAgICAgIGYgICAgID0gOjpNYXRoLmxkZXhwKGYsIDo6RmxvYXQ6Ok1BTlRfRElHKS50b19pXG4gICAgICBuICAgIC09IDo6RmxvYXQ6Ok1BTlRfRElHXG5cbiAgICAgIDo6UmF0aW9uYWwubmV3KDIgKiBmLCAxIDw8ICgxIC0gbikpLnJhdGlvbmFsaXplKDo6UmF0aW9uYWwubmV3KDEsIDEgPDwgKDEgLSBuKSkpXG4gICAgZWxzZVxuICAgICAgdG9fci5yYXRpb25hbGl6ZShlcHMpXG4gICAgZW5kXG4gIGVuZFxuXG4gIGRlZiByZW1haW5kZXIoeSlcbiAgICBzZWxmIC0geSAqIChzZWxmIC8geSkudHJ1bmNhdGVcbiAgZW5kXG5cbiAgZGVmIHJvdW5kKG5kaWdpdHMgPSB1bmRlZmluZWQpXG4gICAgaWYgOjpJbnRlZ2VyID09PSBzZWxmXG4gICAgICBpZiBgbmRpZ2l0cyA9PSBudWxsYFxuICAgICAgICByZXR1cm4gc2VsZlxuICAgICAgZW5kXG5cbiAgICAgIGlmIDo6RmxvYXQgPT09IG5kaWdpdHMgJiYgbmRpZ2l0cy5pbmZpbml0ZT9cbiAgICAgICAgOjpLZXJuZWwucmFpc2UgOjpSYW5nZUVycm9yLCAnSW5maW5pdHknXG4gICAgICBlbmRcblxuICAgICAgbmRpZ2l0cyA9IDo6T3BhbC5jb2VyY2VfdG8hKG5kaWdpdHMsIDo6SW50ZWdlciwgOnRvX2ludClcblxuICAgICAgaWYgbmRpZ2l0cyA8IDo6SW50ZWdlcjo6TUlOXG4gICAgICAgIDo6S2VybmVsLnJhaXNlIDo6UmFuZ2VFcnJvciwgJ291dCBvZiBib3VuZHMnXG4gICAgICBlbmRcblxuICAgICAgaWYgYG5kaWdpdHMgPj0gMGBcbiAgICAgICAgcmV0dXJuIHNlbGZcbiAgICAgIGVuZFxuXG4gICAgICBuZGlnaXRzID0gLW5kaWdpdHNcblxuICAgICAgJXh7XG4gICAgICAgIGlmICgwLjQxNTI0MSAqIG5kaWdpdHMgLSAwLjEyNSA+ICN7c2l6ZX0pIHtcbiAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBmID0gTWF0aC5wb3coMTAsIG5kaWdpdHMpLFxuICAgICAgICAgICAgeCA9IE1hdGguZmxvb3IoKE1hdGguYWJzKHNlbGYpICsgZiAvIDIpIC8gZikgKiBmO1xuXG4gICAgICAgIHJldHVybiBzZWxmIDwgMCA/IC14IDogeDtcbiAgICAgIH1cbiAgICBlbHNlXG4gICAgICBpZiBuYW4/ICYmIGBuZGlnaXRzID09IG51bGxgXG4gICAgICAgIDo6S2VybmVsLnJhaXNlIDo6RmxvYXREb21haW5FcnJvciwgJ05hTidcbiAgICAgIGVuZFxuXG4gICAgICBuZGlnaXRzID0gOjpPcGFsLmNvZXJjZV90byEoYG5kaWdpdHMgfHwgMGAsIDo6SW50ZWdlciwgOnRvX2ludClcblxuICAgICAgaWYgbmRpZ2l0cyA8PSAwXG4gICAgICAgIGlmIG5hbj9cbiAgICAgICAgICA6Oktlcm5lbC5yYWlzZSA6OlJhbmdlRXJyb3IsICdOYU4nXG4gICAgICAgIGVsc2lmIGluZmluaXRlP1xuICAgICAgICAgIDo6S2VybmVsLnJhaXNlIDo6RmxvYXREb21haW5FcnJvciwgJ0luZmluaXR5J1xuICAgICAgICBlbmRcbiAgICAgIGVsc2lmIG5kaWdpdHMgPT0gMFxuICAgICAgICByZXR1cm4gYE1hdGgucm91bmQoc2VsZilgXG4gICAgICBlbHNpZiBuYW4/IHx8IGluZmluaXRlP1xuICAgICAgICByZXR1cm4gc2VsZlxuICAgICAgZW5kXG5cbiAgICAgIF8sIGV4cCA9IDo6TWF0aC5mcmV4cChzZWxmKVxuXG4gICAgICBpZiBuZGlnaXRzID49ICg6OkZsb2F0OjpESUcgKyAyKSAtIChleHAgPiAwID8gZXhwIC8gNCA6IGV4cCAvIDMgLSAxKVxuICAgICAgICByZXR1cm4gc2VsZlxuICAgICAgZW5kXG5cbiAgICAgIGlmIG5kaWdpdHMgPCAtKGV4cCA+IDAgPyBleHAgLyAzICsgMSA6IGV4cCAvIDQpXG4gICAgICAgIHJldHVybiAwXG4gICAgICBlbmRcblxuICAgICAgYE1hdGgucm91bmQoc2VsZiAqIE1hdGgucG93KDEwLCBuZGlnaXRzKSkgLyBNYXRoLnBvdygxMCwgbmRpZ2l0cylgXG4gICAgZW5kXG4gIGVuZFxuXG4gIGRlZiB0aW1lcygmYmxvY2spXG4gICAgcmV0dXJuIGVudW1fZm9yKDp0aW1lcykgeyBzZWxmIH0gdW5sZXNzIGJsb2NrXG5cbiAgICAleHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZjsgaSsrKSB7XG4gICAgICAgIGJsb2NrKGkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNlbGZcbiAgZW5kXG5cbiAgZGVmIHRvX2ZcbiAgICBzZWxmXG4gIGVuZFxuXG4gIGRlZiB0b19pXG4gICAgYHNlbGYgPCAwID8gTWF0aC5jZWlsKHNlbGYpIDogTWF0aC5mbG9vcihzZWxmKWBcbiAgZW5kXG5cbiAgZGVmIHRvX3JcbiAgICBpZiA6OkludGVnZXIgPT09IHNlbGZcbiAgICAgIDo6UmF0aW9uYWwubmV3KHNlbGYsIDEpXG4gICAgZWxzZVxuICAgICAgZiwgZSAgPSA6Ok1hdGguZnJleHAoc2VsZilcbiAgICAgIGYgICAgID0gOjpNYXRoLmxkZXhwKGYsIDo6RmxvYXQ6Ok1BTlRfRElHKS50b19pXG4gICAgICBlICAgIC09IDo6RmxvYXQ6Ok1BTlRfRElHXG5cbiAgICAgIChmICogKDo6RmxvYXQ6OlJBRElYKiplKSkudG9fclxuICAgIGVuZFxuICBlbmRcblxuICBkZWYgdG9fcyhiYXNlID0gMTApXG4gICAgYmFzZSA9IDo6T3BhbC5jb2VyY2VfdG8hIGJhc2UsIDo6SW50ZWdlciwgOnRvX2ludFxuXG4gICAgaWYgYmFzZSA8IDIgfHwgYmFzZSA+IDM2XG4gICAgICA6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsIFwiaW52YWxpZCByYWRpeCAje2Jhc2V9XCJcbiAgICBlbmRcblxuICAgICMgRG9uJ3QgbG9zZSB0aGUgbmVnYXRpdmUgemVyb1xuICAgIGlmIHNlbGYgPT0gMCAmJiBgMS9zZWxmID09PSAtSW5maW5pdHlgXG4gICAgICByZXR1cm4gJy0wLjAnXG4gICAgZW5kXG5cbiAgICBgc2VsZi50b1N0cmluZyhiYXNlKWBcbiAgZW5kXG5cbiAgZGVmIHRydW5jYXRlKG5kaWdpdHMgPSAwKVxuICAgICV4e1xuICAgICAgdmFyIGYgPSAje3RvX2Z9O1xuXG4gICAgICBpZiAoZiAlIDEgPT09IDAgJiYgbmRpZ2l0cyA+PSAwKSB7XG4gICAgICAgIHJldHVybiBmO1xuICAgICAgfVxuXG4gICAgICB2YXIgZmFjdG9yID0gTWF0aC5wb3coMTAsIG5kaWdpdHMpLFxuICAgICAgICAgIHJlc3VsdCA9IHBhcnNlSW50KGYgKiBmYWN0b3IsIDEwKSAvIGZhY3RvcjtcblxuICAgICAgaWYgKGYgJSAxID09PSAwKSB7XG4gICAgICAgIHJlc3VsdCA9IE1hdGgucm91bmQocmVzdWx0KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBkaWdpdHMoYmFzZSA9IDEwKVxuICAgIGlmIHNlbGYgPCAwXG4gICAgICA6Oktlcm5lbC5yYWlzZSA6Ok1hdGg6OkRvbWFpbkVycm9yLCAnb3V0IG9mIGRvbWFpbidcbiAgICBlbmRcblxuICAgIGJhc2UgPSA6Ok9wYWwuY29lcmNlX3RvISBiYXNlLCA6OkludGVnZXIsIDp0b19pbnRcblxuICAgIGlmIGJhc2UgPCAyXG4gICAgICA6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsIFwiaW52YWxpZCByYWRpeCAje2Jhc2V9XCJcbiAgICBlbmRcblxuICAgICV4e1xuICAgICAgaWYgKHNlbGYgIT0gcGFyc2VJbnQoc2VsZikpICN7OjpLZXJuZWwucmFpc2UgOjpOb01ldGhvZEVycm9yLCBcInVuZGVmaW5lZCBtZXRob2QgYGRpZ2l0cycgZm9yICN7aW5zcGVjdH1cIn1cblxuICAgICAgdmFyIHZhbHVlID0gc2VsZiwgcmVzdWx0ID0gW107XG5cbiAgICAgIGlmIChzZWxmID09IDApIHtcbiAgICAgICAgcmV0dXJuIFswXTtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKHZhbHVlICE9IDApIHtcbiAgICAgICAgcmVzdWx0LnB1c2godmFsdWUgJSBiYXNlKTtcbiAgICAgICAgdmFsdWUgPSBwYXJzZUludCh2YWx1ZSAvIGJhc2UsIDEwKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBkaXZtb2Qob3RoZXIpXG4gICAgaWYgbmFuPyB8fCBvdGhlci5uYW4/XG4gICAgICA6Oktlcm5lbC5yYWlzZSA6OkZsb2F0RG9tYWluRXJyb3IsICdOYU4nXG4gICAgZWxzaWYgaW5maW5pdGU/XG4gICAgICA6Oktlcm5lbC5yYWlzZSA6OkZsb2F0RG9tYWluRXJyb3IsICdJbmZpbml0eSdcbiAgICBlbHNlXG4gICAgICBzdXBlclxuICAgIGVuZFxuICBlbmRcblxuICBkZWYgdXB0byhzdG9wLCAmYmxvY2spXG4gICAgdW5sZXNzIGJsb2NrX2dpdmVuP1xuICAgICAgcmV0dXJuIGVudW1fZm9yKDp1cHRvLCBzdG9wKSBkb1xuICAgICAgICA6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsIFwiY29tcGFyaXNvbiBvZiAje3NlbGYuY2xhc3N9IHdpdGggI3tzdG9wLmNsYXNzfSBmYWlsZWRcIiB1bmxlc3MgOjpOdW1lcmljID09PSBzdG9wXG4gICAgICAgIHN0b3AgPCBzZWxmID8gMCA6IHN0b3AgLSBzZWxmICsgMVxuICAgICAgZW5kXG4gICAgZW5kXG5cbiAgICAleHtcbiAgICAgIGlmICghc3RvcC4kJGlzX251bWJlcikge1xuICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgXCJjb21wYXJpc29uIG9mICN7c2VsZi5jbGFzc30gd2l0aCAje3N0b3AuY2xhc3N9IGZhaWxlZFwifVxuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IHNlbGY7IGkgPD0gc3RvcDsgaSsrKSB7XG4gICAgICAgIGJsb2NrKGkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNlbGZcbiAgZW5kXG5cbiAgZGVmIHplcm8/XG4gICAgYHNlbGYgPT0gMGBcbiAgZW5kXG5cbiAgIyBTaW5jZSBiaXR3aXNlIG9wZXJhdGlvbnMgYXJlIDMyIGJpdCwgZGVjbGFyZSBpdCB0byBiZSBzby5cbiAgZGVmIHNpemVcbiAgICA0XG4gIGVuZFxuXG4gIGRlZiBuYW4/XG4gICAgYGlzTmFOKHNlbGYpYFxuICBlbmRcblxuICBkZWYgZmluaXRlP1xuICAgIGBzZWxmICE9IEluZmluaXR5ICYmIHNlbGYgIT0gLUluZmluaXR5ICYmICFpc05hTihzZWxmKWBcbiAgZW5kXG5cbiAgZGVmIGluZmluaXRlP1xuICAgICV4e1xuICAgICAgaWYgKHNlbGYgPT0gSW5maW5pdHkpIHtcbiAgICAgICAgcmV0dXJuICsxO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoc2VsZiA9PSAtSW5maW5pdHkpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBuaWw7XG4gICAgICB9XG4gICAgfVxuICBlbmRcblxuICBkZWYgcG9zaXRpdmU/XG4gICAgYHNlbGYgIT0gMCAmJiAoc2VsZiA9PSBJbmZpbml0eSB8fCAxIC8gc2VsZiA+IDApYFxuICBlbmRcblxuICBkZWYgbmVnYXRpdmU/XG4gICAgYHNlbGYgPT0gLUluZmluaXR5IHx8IDEgLyBzZWxmIDwgMGBcbiAgZW5kXG5cbiAgJXh7XG4gICAgZnVuY3Rpb24gbnVtYmVyVG9VaW50OEFycmF5KG51bSkge1xuICAgICAgdmFyIHVpbnQ4YXJyYXkgPSBuZXcgVWludDhBcnJheSg4KTtcbiAgICAgIG5ldyBEYXRhVmlldyh1aW50OGFycmF5LmJ1ZmZlcikuc2V0RmxvYXQ2NCgwLCBudW0sIHRydWUpO1xuICAgICAgcmV0dXJuIHVpbnQ4YXJyYXk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdWludDhBcnJheVRvTnVtYmVyKGFycikge1xuICAgICAgcmV0dXJuIG5ldyBEYXRhVmlldyhhcnIuYnVmZmVyKS5nZXRGbG9hdDY0KDAsIHRydWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluY3JlbWVudE51bWJlckJpdChudW0pIHtcbiAgICAgIHZhciBhcnIgPSBudW1iZXJUb1VpbnQ4QXJyYXkobnVtKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChhcnJbaV0gPT09IDB4ZmYpIHtcbiAgICAgICAgICBhcnJbaV0gPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFycltpXSsrO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdWludDhBcnJheVRvTnVtYmVyKGFycik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVjcmVtZW50TnVtYmVyQml0KG51bSkge1xuICAgICAgdmFyIGFyciA9IG51bWJlclRvVWludDhBcnJheShudW0pO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGFycltpXSA9PT0gMCkge1xuICAgICAgICAgIGFycltpXSA9IDB4ZmY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXJyW2ldLS07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB1aW50OEFycmF5VG9OdW1iZXIoYXJyKTtcbiAgICB9XG4gIH1cblxuICBkZWYgbmV4dF9mbG9hdFxuICAgIHJldHVybiA6OkZsb2F0OjpJTkZJTklUWSBpZiBzZWxmID09IDo6RmxvYXQ6OklORklOSVRZXG4gICAgcmV0dXJuIDo6RmxvYXQ6Ok5BTiBpZiBuYW4/XG5cbiAgICBpZiBzZWxmID49IDBcbiAgICAgICMgTWF0aC5hYnMoKSBpcyBuZWVkZWQgdG8gaGFuZGxlIC0wLjBcbiAgICAgIGBpbmNyZW1lbnROdW1iZXJCaXQoTWF0aC5hYnMoc2VsZikpYFxuICAgIGVsc2VcbiAgICAgIGBkZWNyZW1lbnROdW1iZXJCaXQoc2VsZilgXG4gICAgZW5kXG4gIGVuZFxuXG4gIGRlZiBwcmV2X2Zsb2F0XG4gICAgcmV0dXJuIC06OkZsb2F0OjpJTkZJTklUWSBpZiBzZWxmID09IC06OkZsb2F0OjpJTkZJTklUWVxuICAgIHJldHVybiA6OkZsb2F0OjpOQU4gaWYgbmFuP1xuXG4gICAgaWYgc2VsZiA+IDBcbiAgICAgIGBkZWNyZW1lbnROdW1iZXJCaXQoc2VsZilgXG4gICAgZWxzZVxuICAgICAgYC1pbmNyZW1lbnROdW1iZXJCaXQoTWF0aC5hYnMoc2VsZikpYFxuICAgIGVuZFxuICBlbmRcblxuICBhbGlhcyBhcmcgYW5nbGVcbiAgYWxpYXMgZXFsPyA9PVxuICBhbGlhcyBmZGl2IC9cbiAgYWxpYXMgaW5zcGVjdCB0b19zXG4gIGFsaWFzIGtpbmRfb2Y/IGlzX2E/XG4gIGFsaWFzIG1hZ25pdHVkZSBhYnNcbiAgYWxpYXMgbW9kdWxvICVcbiAgYWxpYXMgb2JqZWN0X2lkIF9faWRfX1xuICBhbGlhcyBwaGFzZSBhbmdsZVxuICBhbGlhcyBzdWNjIG5leHRcbiAgYWxpYXMgdG9faW50IHRvX2lcbmVuZFxuXG46OkZpeG51bSA9IDo6TnVtYmVyXG5cbmNsYXNzIDo6SW50ZWdlciA8IDo6TnVtZXJpY1xuICBgc2VsZi4kJGlzX251bWJlcl9jbGFzcyA9IHRydWVgXG4gIGBzZWxmLiQkaXNfaW50ZWdlcl9jbGFzcyA9IHRydWVgXG5cbiAgY2xhc3MgPDwgc2VsZlxuICAgIGRlZiBhbGxvY2F0ZVxuICAgICAgOjpLZXJuZWwucmFpc2UgOjpUeXBlRXJyb3IsIFwiYWxsb2NhdG9yIHVuZGVmaW5lZCBmb3IgI3tuYW1lfVwiXG4gICAgZW5kXG5cbiAgICB1bmRlZiA6bmV3XG5cbiAgICBkZWYgc3FydChuKVxuICAgICAgbiA9IDo6T3BhbC5jb2VyY2VfdG8hKG4sIDo6SW50ZWdlciwgOnRvX2ludClcbiAgICAgICV4e1xuICAgICAgICBpZiAobiA8IDApIHtcbiAgICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6TWF0aDo6RG9tYWluRXJyb3IsICdOdW1lcmljYWwgYXJndW1lbnQgaXMgb3V0IG9mIGRvbWFpbiAtIFwiaXNxcnRcIid9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGFyc2VJbnQoTWF0aC5zcXJ0KG4pLCAxMCk7XG4gICAgICB9XG4gICAgZW5kXG5cbiAgICBkZWYgdHJ5X2NvbnZlcnQob2JqZWN0KVxuICAgICAgT3BhbC5jb2VyY2VfdG8/KG9iamVjdCwgc2VsZiwgOnRvX2ludClcbiAgICBlbmRcbiAgZW5kXG5cbiAgc2VsZjo6TUFYID0gYE1hdGgucG93KDIsIDMwKSAtIDFgXG4gIHNlbGY6Ok1JTiA9IGAtTWF0aC5wb3coMiwgMzApYFxuZW5kXG5cbmNsYXNzIDo6RmxvYXQgPCA6Ok51bWVyaWNcbiAgYHNlbGYuJCRpc19udW1iZXJfY2xhc3MgPSB0cnVlYFxuXG4gIGNsYXNzIDw8IHNlbGZcbiAgICBkZWYgYWxsb2NhdGVcbiAgICAgIDo6S2VybmVsLnJhaXNlIDo6VHlwZUVycm9yLCBcImFsbG9jYXRvciB1bmRlZmluZWQgZm9yICN7bmFtZX1cIlxuICAgIGVuZFxuXG4gICAgdW5kZWYgOm5ld1xuXG4gICAgZGVmID09PShvdGhlcilcbiAgICAgIGAhIW90aGVyLiQkaXNfbnVtYmVyYFxuICAgIGVuZFxuICBlbmRcblxuICBzZWxmOjpJTkZJTklUWSA9IGBJbmZpbml0eWBcbiAgc2VsZjo6TUFYICAgICAgPSBgTnVtYmVyLk1BWF9WQUxVRWBcbiAgc2VsZjo6TUlOICAgICAgPSBgTnVtYmVyLk1JTl9WQUxVRWBcbiAgc2VsZjo6TkFOICAgICAgPSBgTmFOYFxuXG4gIHNlbGY6OkRJRyAgICAgID0gMTVcbiAgc2VsZjo6TUFOVF9ESUcgPSA1M1xuICBzZWxmOjpSQURJWCAgICA9IDJcblxuICBzZWxmOjpFUFNJTE9OID0gYE51bWJlci5FUFNJTE9OIHx8IDIuMjIwNDQ2MDQ5MjUwMzEzMDgwODQ3MjYzMzM2MTgxNkUtMTZgXG5lbmRcbiJdLCJuYW1lcyI6WyI8dG9wIChyZXF1aXJlZCk+Iiwic2VsZiIsInJlcXVpcmUiLCI8Y2xhc3M6TnVtYmVyPiIsIk9wYWwiLCJicmlkZ2UiLCJhbGxvY2F0ZSIsIktlcm5lbCIsInJhaXNlIiwiVHlwZUVycm9yIiwibmFtZSIsImNvZXJjZSIsIm90aGVyIiwiY2xhc3MiLCJGbG9hdCIsInJlc3BvbmRfdG8/IiwiY29lcmNlX3RvISIsIl9faWRfXyIsIisiLCJfX2NvZXJjZWRfXyIsIi0iLCIqIiwiLyIsIiUiLCJaZXJvRGl2aXNpb25FcnJvciIsIiYiLCJ8IiwiXiIsIjwiLCI8PSIsIj4iLCI+PSIsIjw9PiIsIkFyZ3VtZW50RXJyb3IiLCI8PCIsImNvdW50IiwiSW50ZWdlciIsIj4+IiwiW10iLCJiaXQiLCIrQCIsIi1AIiwifiIsIioqIiwiPT09IiwiMCIsIlJhdGlvbmFsIiwibmV3IiwiMSIsIkNvbXBsZXgiLCJ0b19mIiwiPT0iLCJhYnMiLCJhYnMyIiwiYWxsYml0cz8iLCJtYXNrIiwiYW55Yml0cz8iLCJhbmdsZSIsIm5hbj8iLCJiaXRfbGVuZ3RoIiwiTm9NZXRob2RFcnJvciIsImNlaWwiLCJuZGlnaXRzIiwiY2hyIiwiZW5jb2RpbmciLCJkZW5vbWluYXRvciIsImluZmluaXRlPyIsImRvd250byIsInN0b3AiLCJibG9ja19naXZlbj8iLCJlbnVtX2ZvciIsImJsb2NrIGluIGRvd250byIsImJsb2NrICgyIGxldmVscykgaW4gZG93bnRvIiwiTnVtZXJpYyIsImVxdWFsPyIsIiRyZXRfb3JfMSIsImV2ZW4/IiwiZmxvb3IiLCJnY2QiLCJnY2RsY20iLCJsY20iLCJpbnRlZ2VyPyIsImlzX2E/Iiwia2xhc3MiLCJpbnN0YW5jZV9vZj8iLCJuZXh0Iiwibm9iaXRzPyIsIm5vbnplcm8/IiwibnVtZXJhdG9yIiwib2RkPyIsIm9yZCIsInBvdyIsImIiLCJtIiwicHJlZCIsInF1byIsInJhdGlvbmFsaXplIiwiZXBzIiwiRmxvYXREb21haW5FcnJvciIsIk1hdGgiLCJmcmV4cCIsImYiLCJuIiwibGRleHAiLCJGbG9hdDo6TUFOVF9ESUciLCJ0b19pIiwiMiIsInRvX3IiLCJyZW1haW5kZXIiLCJ5IiwidHJ1bmNhdGUiLCJyb3VuZCIsIlJhbmdlRXJyb3IiLCJJbnRlZ2VyOjpNSU4iLCJzaXplIiwiXyIsImV4cCIsIkZsb2F0OjpESUciLCI0IiwiMyIsInRpbWVzIiwiYmxvY2siLCJibG9jayBpbiB0aW1lcyIsImJsb2NrICgyIGxldmVscykgaW4gdGltZXMiLCJlIiwiRmxvYXQ6OlJBRElYIiwidG9fcyIsImJhc2UiLCIxMCIsIjM2IiwiZGlnaXRzIiwiTWF0aDo6RG9tYWluRXJyb3IiLCJpbnNwZWN0IiwiZGl2bW9kIiwidXB0byIsImJsb2NrIGluIHVwdG8iLCJibG9jayAoMiBsZXZlbHMpIGluIHVwdG8iLCJ6ZXJvPyIsImZpbml0ZT8iLCJwb3NpdGl2ZT8iLCJuZWdhdGl2ZT8iLCJuZXh0X2Zsb2F0IiwiRmxvYXQ6OklORklOSVRZIiwiRmxvYXQ6Ok5BTiIsInByZXZfZmxvYXQiLCJOdW1iZXIiLCI8Y2xhc3M6SW50ZWdlcj4iLCJzcXJ0IiwidHJ5X2NvbnZlcnQiLCJvYmplY3QiLCJjb2VyY2VfdG8/IiwiPGNsYXNzOkZsb2F0PiIsIjE1IiwiNTMiXSwibWFwcGluZ3MiOiJBQUFBQSxpQ0FBQUEsZ0JBQUFBO0VBQUFBOztFQUFBQTs7RUFBQUMsSUFBQUMsU0FBQUEsQ0FBUUYsaUJBQVJFO0VBRUFDO0VBQUFBOztJQUFBQTs7O0lBQ0VDLEtBQU1DLFFBQUFBLENBQVNGLE1BQWYsRUFBd0JGLElBQWxCSTtJQUNMRjtJQUNBQTtJQUVEOzs7O0FBQ0VHLE1BQUFBLHdCQUFBQSxvQkFBQUE7QUFBQUEsUUFBQUE7O1FBQ0VBLE9BQUFDLE9BQVFDLE9BQUFBLENBQU9DLGdCQUFmLEVBQTZCSCwwQkFBRCxHQUFBLENBQTJCTCxJQUFBUyxNQUFBQSxDQUFBQSxDQUEzQixDQUFwQkY7TUFEVkYsQ0FBQUEsR0FBQUE7OztNQUlBLHNCQUFNLEtBQU47TUFaSixPQUFBO0lBT0UsNEJBQVNMLElBQVQ7O0FBUUFVLElBQUFBLHNCQUFBQSxrQkFBV0MsS0FBWEQ7QUFBQUEsTUFBQUE7OztBQUVGQTtBQUNBQSxRQUFVSixPQUFRQyxPQUFBQSxDQUFPQyxnQkFBZixFQUE2QkUsZ0JBQUQsR0FBQSxDQUFpQkMsS0FBS0MsT0FBQUEsQ0FBQUEsQ0FBdEIsQ0FBQSxHQUE2QkYsYUFBakRILENBQThERztBQUNoRkE7QUFDQUE7QUFDQUEsZ0JBQWtCSixPQUFRTyxPQUFBQSxDQUFPRixLQUFQRSxDQUFjSDtBQUN4Q0E7QUFDQUEsZUFBaUJDLEtBQUtHLGdCQUFBQSxDQUFhLE1BQWJBLENBQW9CSjtBQUMxQ0EsZ0JBQWtCUCxLQUFNWSxlQUFBQSxDQUFZSixLQUFsQixFQUF5QkUsWUFBekIsRUFBa0MsTUFBNUJFLENBQW1DTDtBQUMzREE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUEsUUFBVUosT0FBUUMsT0FBQUEsQ0FBT0MsZ0JBQWYsRUFBNkJFLGdCQUFELEdBQUEsQ0FBaUJDLEtBQUtDLE9BQUFBLENBQUFBLENBQXRCLENBQUEsR0FBNkJGLGFBQWpESCxDQUE4REc7QUFDaEZBO0FBQ0FBO0lBakJFQSxDQUFBQSxHQUFBQTs7QUFvQkFNLElBQUFBLHNCQUFBQSxrQkFBQUE7QUFBQUEsTUFBQUE7O01BQ0VBLE9BQUNBLGNBQURBO0lBREZBLENBQUFBLEdBQUFBOztBQUlBQyxJQUFBQSxpQkFBQUEseUJBQU1OLEtBQU5NO0FBQUFBLE1BQUFBOzs7QUFFRkE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUEsZUFBaUJqQixJQUFBa0IsYUFBQUEsQ0FBWSxHQUFaLEVBQWdCUCxLQUFoQk8sQ0FBc0JEO0FBQ3ZDQTtBQUNBQTtJQVJFQSxDQUFBQSxHQUFBQTs7QUFXQUUsSUFBQUEsaUJBQUFBLDBCQUFNUixLQUFOUTtBQUFBQSxNQUFBQTs7O0FBRUZBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBLGVBQWlCbkIsSUFBQWtCLGFBQUFBLENBQVksR0FBWixFQUFnQlAsS0FBaEJPLENBQXNCQztBQUN2Q0E7QUFDQUE7SUFSRUEsQ0FBQUEsR0FBQUE7O0FBV0FDLElBQUFBLGlCQUFBQSxxQkFBTVQsS0FBTlM7QUFBQUEsTUFBQUE7OztBQUVGQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQSxlQUFpQnBCLElBQUFrQixhQUFBQSxDQUFZLEdBQVosRUFBZ0JQLEtBQWhCTyxDQUFzQkU7QUFDdkNBO0FBQ0FBO0lBUkVBLENBQUFBLEdBQUFBOztBQVdBQyxJQUFBQSxpQkFBQUEsMEJBQU1WLEtBQU5VO0FBQUFBLE1BQUFBOzs7QUFFRkE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUEsZUFBaUJyQixJQUFBa0IsYUFBQUEsQ0FBWSxHQUFaLEVBQWdCUCxLQUFoQk8sQ0FBc0JHO0FBQ3ZDQTtBQUNBQTtJQVJFQSxDQUFBQSxHQUFBQTs7QUFXQUMsSUFBQUEsaUJBQUFBLDRCQUFNWCxLQUFOVztBQUFBQSxNQUFBQTs7O0FBRUZBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBLFVBQVloQixPQUFRQyxPQUFBQSxDQUFPZ0Isd0JBQWYsRUFBb0NELGNBQTVCZixDQUEyQ2U7QUFDL0RBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBLGVBQWlCdEIsSUFBQWtCLGFBQUFBLENBQVksR0FBWixFQUFnQlAsS0FBaEJPLENBQXNCSTtBQUN2Q0E7QUFDQUE7SUFuQkVBLENBQUFBLEdBQUFBOztBQXNCQUUsSUFBQUEsaUJBQUFBLHFCQUFNYixLQUFOYTtBQUFBQSxNQUFBQTs7O0FBRUZBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBLGVBQWlCeEIsSUFBQWtCLGFBQUFBLENBQVksR0FBWixFQUFnQlAsS0FBaEJPLENBQXNCTTtBQUN2Q0E7QUFDQUE7SUFSRUEsQ0FBQUEsR0FBQUE7O0FBV0FDLElBQUFBLGlCQUFBQSxxQkFBTWQsS0FBTmM7QUFBQUEsTUFBQUE7OztBQUVGQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQSxlQUFpQnpCLElBQUFrQixhQUFBQSxDQUFZLEdBQVosRUFBZ0JQLEtBQWhCTyxDQUFzQk87QUFDdkNBO0FBQ0FBO0lBUkVBLENBQUFBLEdBQUFBOztBQVdBQyxJQUFBQSxpQkFBQUEscUJBQU1mLEtBQU5lO0FBQUFBLE1BQUFBOzs7QUFFRkE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUEsZUFBaUIxQixJQUFBa0IsYUFBQUEsQ0FBWSxHQUFaLEVBQWdCUCxLQUFoQk8sQ0FBc0JRO0FBQ3ZDQTtBQUNBQTtJQVJFQSxDQUFBQSxHQUFBQTs7QUFXQUMsSUFBQUEsaUJBQUFBLHVCQUFNaEIsS0FBTmdCO0FBQUFBLE1BQUFBOzs7QUFFRkE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUEsZUFBaUIzQixJQUFBa0IsYUFBQUEsQ0FBWSxHQUFaLEVBQWdCUCxLQUFoQk8sQ0FBc0JTO0FBQ3ZDQTtBQUNBQTtJQVJFQSxDQUFBQSxHQUFBQTs7QUFXQUMsSUFBQUEsa0JBQUFBLDJCQUFPakIsS0FBUGlCO0FBQUFBLE1BQUFBOzs7QUFFRkE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUEsZUFBaUI1QixJQUFBa0IsYUFBQUEsQ0FBWSxJQUFaLEVBQWlCUCxLQUFqQk8sQ0FBdUJVO0FBQ3hDQTtBQUNBQTtJQVJFQSxDQUFBQSxHQUFBQTs7QUFXQUMsSUFBQUEsaUJBQUFBLHdCQUFNbEIsS0FBTmtCO0FBQUFBLE1BQUFBOzs7QUFFRkE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUEsZUFBaUI3QixJQUFBa0IsYUFBQUEsQ0FBWSxHQUFaLEVBQWdCUCxLQUFoQk8sQ0FBc0JXO0FBQ3ZDQTtBQUNBQTtJQVJFQSxDQUFBQSxHQUFBQTs7QUFXQUMsSUFBQUEsa0JBQUFBLDJCQUFPbkIsS0FBUG1CO0FBQUFBLE1BQUFBOzs7QUFFRkE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUEsZUFBaUI5QixJQUFBa0IsYUFBQUEsQ0FBWSxJQUFaLEVBQWlCUCxLQUFqQk8sQ0FBdUJZO0FBQ3hDQTtBQUNBQTtJQVJFQSxDQUFBQSxHQUFBQTs7QUFjRjVCO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBOztBQUVBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQSxlQUFpQkYsSUFBQWtCLGFBQUFBLENBQVksS0FBWixFQUFtQmhCLEtBQW5CZ0IsQ0FBMEJoQjtBQUMzQ0E7QUFDQUE7QUFDQUE7O0FBRUU2QixJQUFBQSxtQkFBQUEsOEJBQVFwQixLQUFSb0I7QUFBQUEsTUFBQUE7O01BQ0U7UUFBQUEsT0FBQ0EsK0JBQURBO01BQUE7UUFDRixzQkFBTyxDQUFBQyxvQkFBQSxDQUFQO1VBQUE7WUFDRUQsT0FBQTtVQURGO1FBQUEsQ0FERTtNQUFBO0lBREZBLENBQUFBLEdBQUFBOztBQU1BRSxJQUFBQSxrQkFBQUEsMkJBQU9DLEtBQVBEO0FBQUFBLE1BQUFBOzs7TUFDRUMsUUFBUS9CLEtBQU1ZLGVBQUFBLENBQVltQixLQUFsQixFQUF5QkMsY0FBekIsRUFBb0MsUUFBOUJwQjtNQUVka0IsT0FBR0MsS0FBTUQsZUFBaUJDLEtBQU1ELFlBQWNDO0lBSGhERCxDQUFBQSxHQUFBQTs7QUFNQUcsSUFBQUEsa0JBQUFBLDJCQUFPRixLQUFQRTtBQUFBQSxNQUFBQTs7O01BQ0VGLFFBQVEvQixLQUFNWSxlQUFBQSxDQUFZbUIsS0FBbEIsRUFBeUJDLGNBQXpCLEVBQW9DLFFBQTlCcEI7TUFFZHFCLE9BQUdGLEtBQU1FLGVBQWlCRixLQUFNRSxZQUFjRjtJQUhoREUsQ0FBQUEsR0FBQUE7O0FBTUFDLElBQUFBLGtCQUFBQSx1QkFBT0MsR0FBUEQ7QUFBQUEsTUFBQUE7OztNQUNFQyxNQUFNbkMsS0FBTVksZUFBQUEsQ0FBWXVCLEdBQWxCLEVBQXVCSCxjQUF2QixFQUFrQyxRQUE1QnBCOztBQUdoQnNCLFVBQVlDLEdBQUlEO0FBQ2hCQTtBQUNBQTtBQUNBQSxVQUFZQyxHQUFJRDtBQUNoQkEsZUFBa0JyQyxJQUFNcUM7QUFDeEJBO0FBQ0FBLHNCQUF3QkMsR0FBSUQ7QUFDNUJBO0lBWEVBLENBQUFBLEdBQUFBOztBQWNBRSxJQUFBQSxrQkFBQUEsMkJBQUFBO0FBQUFBLE1BQUFBOztNQUNFQSxPQUFDQSxLQUFEQTtJQURGQSxDQUFBQSxHQUFBQTs7QUFJQUMsSUFBQUEsa0JBQUFBLDRCQUFBQTtBQUFBQSxNQUFBQTs7TUFDRUEsT0FBQ0EsS0FBREE7SUFERkEsQ0FBQUEsR0FBQUE7O0FBSUFDLElBQUFBLGlCQUFBQSxzQkFBQUE7QUFBQUEsTUFBQUE7O01BQ0VBLE9BQUNBLEtBQURBO0lBREZBLENBQUFBLEdBQUFBOztBQUlBQyxJQUFBQSxrQkFBQUEsdUJBQU8vQixLQUFQK0I7QUFBQUEsTUFBQUE7O01BQ0UsSUFBQSxRQUFHUCxjQUFILEVBQWlCeEIsS0FBakIsQ0FBQTtRQUNFLElBQUcsQ0FBQSxLQUFFd0IsY0FBVVEsUUFBQUEsQ0FBSTNDLElBQUoyQyxDQUFaLENBQUEsSUFBQSxDQUFBLFFBQStCZCxPQUFObEIsS0FBTWtCLEVBQUVlLENBQUZmLENBQS9CLENBQUEsQ0FBQSxDQUFIO1VBQ0VhLE9BQUNBLHFCQUFEQTtRQURGO1VBR0VBLE9BQUFHLGVBQVVDLEtBQUFBLENBQUs5QyxJQUFmLEVBQXFCK0MsQ0FBWEQsQ0FBYUosT0FBQUEsQ0FBRS9CLEtBQUYrQjtRQUh6QjtNQURGLE9BTUEsSUFBTSxDQUFLZixPQUFMM0IsSUFBSzJCLEVBQUVpQixDQUFGakIsQ0FBTCxJQUFBLENBQWEsQ0FBQSxRQUFBZCxZQUFBLEVBQVlGLEtBQVosQ0FBQSxJQUFBLENBQUEsUUFBcUJrQyxlQUFyQixFQUFvQ2xDLEtBQXBDLENBQUEsQ0FBQSxDQUFiLENBQUEsQ0FBTjtRQUNFK0IsT0FBQU0sY0FBU0YsS0FBQUEsQ0FBSzlDLElBQWQsRUFBb0I0QyxDQUFYRSxDQUFhSixPQUFBQSxDQUFFL0IsS0FBS3NDLE1BQUFBLENBQUFBLENBQVBQO01BRHhCLE9BRUEsSUFBQSxRQUFPQSx5QkFBUCxDQUFBO1FBQ0VBLE9BQUNBLHFCQUFEQTtNQURGO1FBR0VBLE9BQUExQyxJQUFBa0IsYUFBQUEsQ0FBWSxJQUFaLEVBQWlCUCxLQUFqQk87TUFIRjtJQVRGd0IsQ0FBQUEsR0FBQUE7O0FBZ0JBUSxJQUFBQSxrQkFBQUEsMkJBQU92QyxLQUFQdUM7QUFBQUEsTUFBQUE7OztBQUVGQTtBQUNBQTtBQUNBQTtBQUNBQSxlQUFpQnZDLEtBQUtHLGdCQUFBQSxDQUFhLElBQWJBLENBQWlCb0M7QUFDdkNBLGVBQWlCdkMsS0FBTXVDLE9BQUFBLENBQUdsRCxJQUFIa0QsQ0FBUUE7QUFDL0JBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0lBWEVBLENBQUFBLEdBQUFBO0lBY0EsYUFBTSxLQUFOLEVBQVUsSUFBVjs7QUFFQUMsSUFBQUEsbUJBQUFBLGVBQUFBO0FBQUFBLE1BQUFBOztNQUNFQSxPQUFDQSxjQUFEQTtJQURGQSxDQUFBQSxHQUFBQTs7QUFJQUMsSUFBQUEsb0JBQUFBLGdCQUFBQTtBQUFBQSxNQUFBQTs7TUFDRUEsT0FBQ0EscUJBQURBO0lBREZBLENBQUFBLEdBQUFBOztBQUlBQyxJQUFBQSx3QkFBQUEsaUNBQWFDLElBQWJEO0FBQUFBLE1BQUFBOzs7TUFDRUMsT0FBT25ELEtBQU1ZLGVBQUFBLENBQVl1QyxJQUFsQixFQUF3Qm5CLGNBQXhCLEVBQW1DLFFBQTdCcEI7TUFDYnNDLE9BQUNBLHFCQUFEQTtJQUZGQSxDQUFBQSxHQUFBQTs7QUFLQUUsSUFBQUEsd0JBQUFBLGlDQUFhRCxJQUFiQztBQUFBQSxNQUFBQTs7O01BQ0VELE9BQU9uRCxLQUFNWSxlQUFBQSxDQUFZdUMsSUFBbEIsRUFBd0JuQixjQUF4QixFQUFtQyxRQUE3QnBCO01BQ2J3QyxPQUFDQSxtQkFBREE7SUFGRkEsQ0FBQUEsR0FBQUE7O0FBS0FDLElBQUFBLHFCQUFBQSxpQkFBQUE7QUFBQUEsTUFBQUE7OztNQUNFLElBQUEsUUFBZXhELElBQUF5RCxTQUFBQSxDQUFBQSxDQUFmLENBQUE7UUFBQSxPQUFPekQ7TUFBUDs7QUFHSndEO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0lBbEJFQSxDQUFBQSxHQUFBQTs7QUFxQkFFLElBQUFBLDBCQUFBQSxzQkFBQUE7QUFBQUEsTUFBQUE7OztNQUNFLEtBQUEsUUFBT3ZCLGNBQVAsRUFBcUJuQyxJQUFyQixDQUFBO1FBQ0VNLE9BQVFDLE9BQUFBLENBQU9vRCxvQkFBZWIsS0FBQUEsQ0FBTVksb0NBQUQsR0FBQSxDQUFxQzFELElBQXJDLENBQUEsR0FBMEMwRCxRQUE5RCxFQUF1RUEsWUFBeERaLENBQXRCdkM7TUFEVjs7QUFLSm1EO0FBQ0FBO0FBQ0FBOztBQUVBQTtBQUNBQTs7QUFFQUE7QUFDQUE7QUFDQUE7QUFDQUE7O0FBRUFBO0FBQ0FBO0lBbkJFQSxDQUFBQSxHQUFBQTs7QUFzQkFFLElBQUFBLG9CQUFBQSxnQkFBU0MsT0FBVEQ7QUFBQUEsTUFBQUE7OztNQUFTLCtCQUFVaEI7O0FBRXJCZ0IsY0FBZ0I1RCxJQUFBaUQsTUFBQUEsQ0FBQUEsQ0FBS1c7O0FBRXJCQTtBQUNBQTtBQUNBQTs7QUFFQUE7QUFDQUE7O0FBRUFBO0FBQ0FBO0FBQ0FBOztBQUVBQTtBQUNBQTtJQWhCRUEsQ0FBQUEsSUFBQUE7O0FBbUJBRSxJQUFBQSxtQkFBQUEsZUFBUUMsUUFBUkQ7QUFBQUEsTUFBQUE7Ozs7TUFDRUEsT0FBQ0EseURBQURBO0lBREZBLENBQUFBLElBQUFBOztBQUlBRSxJQUFBQSwyQkFBQUEsdUJBQUFBO0FBQUFBLE1BQUFBOztNQUFBQTtNQUNFLElBQUcsQ0FBQSxRQUFBaEUsSUFBQXlELFNBQUFBLENBQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsUUFBUXpELElBQUFpRSxjQUFBQSxDQUFBQSxDQUFSLENBQUEsQ0FBQSxDQUFIO1FBQ0VELE9BQUFqQjtNQURGO1FBR0VpQixPQUFBLE9BQUFoRSxJQUFBLEVBQUEsNERBQUEsZUFBQSxFQUFBLEVBQUEsRUFBQSxNQUFBO01BSEY7SUFERmdFLENBQUFBLEdBQUFBOztBQVFBRSxJQUFBQSxzQkFBQUEsa0JBQVdDLElBQVhEO0FBQUFBLE1BQUFBOztNQUFBQTs7O01BQ0UsS0FBT0UsZUFBUDtRQUNFLE9BQU9DLE1BQUFyRSxJQUFBcUUsWUFBQUEsRUFBQUEsQ0FBUyxRQUFULEVBQWtCRixJQUFsQkUsQ0FBQUEsRUFBQUMsY0FBQUEsRUFBQUM7OztVQUNMLEtBQUEsUUFBK0ZDLGNBQS9GLEVBQTZHTCxJQUE3RyxDQUFBO1lBQUE3RCxPQUFRQyxPQUFBQSxDQUFPeUIsb0JBQWYsRUFBaUN1QyxnQkFBRCxHQUFBLENBQWlCdkUsSUFBSVksT0FBQUEsQ0FBQUEsQ0FBckIsQ0FBQSxHQUE0QjJELFFBQTVCLEdBQUEsQ0FBb0NKLElBQUl2RCxPQUFBQSxDQUFBQSxDQUF4QyxDQUFBLEdBQStDMkQsU0FBdkVoRTtVQUFSO1VBQ0EsSUFBQSxRQUFLc0IsT0FBTHNDLElBQUt0QyxFQUFFN0IsSUFBRjZCLENBQUwsQ0FBQTtZQUFjMEMsT0FBQTNCO1VBQWQ7WUFBa0IyQixPQUFZdEQsU0FBUEUsVUFBTG5CLElBQUttQixFQUFFZ0QsSUFBRmhELENBQU9GLEVBQUU4QixDQUFGOUI7VUFBOUIsRUFGS3FELENBQUFBLEdBQUFBLHFCQUFBQSxDQUFBRDtNQURUOztBQVFKSDtBQUNBQSxRQUFVNUQsT0FBUUMsT0FBQUEsQ0FBT3lCLG9CQUFmLEVBQWlDa0MsZ0JBQUQsR0FBQSxDQUFpQmxFLElBQUlZLE9BQUFBLENBQUFBLENBQXJCLENBQUEsR0FBNEJzRCxRQUE1QixHQUFBLENBQW9DQyxJQUFJdkQsT0FBQUEsQ0FBQUEsQ0FBeEMsQ0FBQSxHQUErQ3NELFNBQXZFM0Q7QUFDbEIyRDtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtNQUVJQSxPQUFBbEU7SUFqQkZrRSxDQUFBQSxHQUFBQTs7QUFvQkFPLElBQUFBLHNCQUFBQSwrQkFBVzlELEtBQVg4RDtBQUFBQSxNQUFBQTs7TUFDRSxJQUFBLFFBQUFDLENBQUFBLFlBQUExRSxJQUFLa0QsT0FBQUEsQ0FBR3ZDLEtBQUh1QyxDQUFMd0IsQ0FBQSxDQUFBO1FBQUFELE9BQUE7TUFBQTtRQUFpQkEsT0FBQ0EsMkJBQURBO01BQWpCO0lBREZBLENBQUFBLEdBQUFBOztBQUlBRSxJQUFBQSxxQkFBQUEsOEJBQUFBO0FBQUFBLE1BQUFBOztNQUNFQSxPQUFDQSxjQUFEQTtJQURGQSxDQUFBQSxHQUFBQTs7QUFJQUMsSUFBQUEscUJBQUFBLGlCQUFVZixPQUFWZTtBQUFBQSxNQUFBQTs7O01BQVUsK0JBQVVoQzs7QUFFdEJnQyxjQUFnQjVFLElBQUFpRCxNQUFBQSxDQUFBQSxDQUFLMkI7O0FBRXJCQTtBQUNBQTtBQUNBQTs7QUFFQUE7QUFDQUE7O0FBRUFBO0FBQ0FBO0FBQ0FBOztBQUVBQTtBQUNBQTtJQWhCRUEsQ0FBQUEsSUFBQUE7O0FBbUJBQyxJQUFBQSxtQkFBQUEsZUFBUWxFLEtBQVJrRTtBQUFBQSxNQUFBQTs7O01BQ0UsS0FBQSxRQUFPMUMsY0FBUCxFQUFxQnhCLEtBQXJCLENBQUE7UUFDRUwsT0FBUUMsT0FBQUEsQ0FBT0MsZ0JBQWYsRUFBNEJxRSxnQkFBcEJ0RTtNQURWOztBQUtKc0U7QUFDQUE7O0FBRUFBO0FBQ0FBOztBQUVBQTtBQUNBQTtBQUNBQTs7QUFFQUE7QUFDQUE7SUFqQkVBLENBQUFBLEdBQUFBOztBQW9CQUMsSUFBQUEsc0JBQUFBLGtCQUFXbkUsS0FBWG1FO0FBQUFBLE1BQUFBOztNQUNFQSxPQUFBLENBQUM5RSxJQUFBNkUsS0FBQUEsQ0FBSWxFLEtBQUprRSxDQUFELEVBQWE3RSxJQUFBK0UsS0FBQUEsQ0FBSXBFLEtBQUpvRSxDQUFiO0lBREZELENBQUFBLEdBQUFBOztBQUlBRSxJQUFBQSx3QkFBQUEsaUNBQUFBO0FBQUFBLE1BQUFBOztNQUNFQSxPQUFDQSxjQUFEQTtJQURGQSxDQUFBQSxHQUFBQTs7QUFJQUMsSUFBQUEscUJBQUFBLDhCQUFVQyxLQUFWRDtBQUFBQSxNQUFBQTs7TUFBQUE7O01BQ0UsSUFBZSxDQUFBLE1BQUFDLEtBQUEsRUFBUy9DLGNBQVQsQ0FBQSxJQUFBLENBQUEsUUFBc0JBLGNBQXRCLEVBQW9DbkMsSUFBcEMsQ0FBQSxDQUFBLENBQWY7UUFBQSxPQUFPO01BQVA7TUFDQSxJQUFlLENBQUEsTUFBQWtGLEtBQUEsRUFBUy9DLGNBQVQsQ0FBQSxJQUFBLENBQUEsUUFBc0JBLGNBQXRCLEVBQW9DbkMsSUFBcEMsQ0FBQSxDQUFBLENBQWY7UUFBQSxPQUFPO01BQVA7TUFDQSxJQUFlLENBQUEsTUFBQWtGLEtBQUEsRUFBU3JFLFlBQVQsQ0FBQSxJQUFBLENBQUEsUUFBb0JBLFlBQXBCLEVBQWdDYixJQUFoQyxDQUFBLENBQUEsQ0FBZjtRQUFBLE9BQU87TUFBUDtNQUVBaUYsT0FBQSxPQUFBakYsSUFBQSxFQUFBLDZEQUFBLFNBQUEsRUFBQSxDQUFBa0YsS0FBQSxDQUFBLEVBQUEsTUFBQTtJQUxGRCxDQUFBQSxHQUFBQTs7QUFRQUUsSUFBQUEsNEJBQUFBLHFDQUFpQkQsS0FBakJDO0FBQUFBLE1BQUFBOztNQUFBQTs7TUFDRSxJQUFlLENBQUEsTUFBQUQsS0FBQSxFQUFTL0MsY0FBVCxDQUFBLElBQUEsQ0FBQSxRQUFzQkEsY0FBdEIsRUFBb0NuQyxJQUFwQyxDQUFBLENBQUEsQ0FBZjtRQUFBLE9BQU87TUFBUDtNQUNBLElBQWUsQ0FBQSxNQUFBa0YsS0FBQSxFQUFTL0MsY0FBVCxDQUFBLElBQUEsQ0FBQSxRQUFzQkEsY0FBdEIsRUFBb0NuQyxJQUFwQyxDQUFBLENBQUEsQ0FBZjtRQUFBLE9BQU87TUFBUDtNQUNBLElBQWUsQ0FBQSxNQUFBa0YsS0FBQSxFQUFTckUsWUFBVCxDQUFBLElBQUEsQ0FBQSxRQUFvQkEsWUFBcEIsRUFBZ0NiLElBQWhDLENBQUEsQ0FBQSxDQUFmO1FBQUEsT0FBTztNQUFQO01BRUFtRixPQUFBLE9BQUFuRixJQUFBLEVBQUEsMkVBQUEsZ0JBQUEsRUFBQSxDQUFBa0YsS0FBQSxDQUFBLEVBQUEsTUFBQTtJQUxGQyxDQUFBQSxHQUFBQTs7QUFRQUosSUFBQUEsbUJBQUFBLGVBQVFwRSxLQUFSb0U7QUFBQUEsTUFBQUE7OztNQUNFLEtBQUEsUUFBTzVDLGNBQVAsRUFBcUJ4QixLQUFyQixDQUFBO1FBQ0VMLE9BQVFDLE9BQUFBLENBQU9DLGdCQUFmLEVBQTRCdUUsZ0JBQXBCeEU7TUFEVjs7QUFLSndFO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBLHVDQUF5Qy9FLElBQUE2RSxLQUFBQSxDQUFJbEUsS0FBSmtFLENBQVdFO0FBQ3BEQTtBQUNBQTtJQVpFQSxDQUFBQSxHQUFBQTs7QUFlQUssSUFBQUEsb0JBQUFBLGdCQUFBQTtBQUFBQSxNQUFBQTs7TUFDRUEsT0FBQ0EsUUFBREE7SUFERkEsQ0FBQUEsR0FBQUE7O0FBSUFDLElBQUFBLHVCQUFBQSxnQ0FBWS9CLElBQVorQjtBQUFBQSxNQUFBQTs7O01BQ0UvQixPQUFPbkQsS0FBTVksZUFBQUEsQ0FBWXVDLElBQWxCLEVBQXdCbkIsY0FBeEIsRUFBbUMsUUFBN0JwQjtNQUNic0UsT0FBQ0Esa0JBQURBO0lBRkZBLENBQUFBLEdBQUFBOztBQUtBQyxJQUFBQSx3QkFBQUEsaUNBQUFBO0FBQUFBLE1BQUFBOztNQUNFQSxPQUFDQSxzQkFBREE7SUFERkEsQ0FBQUEsR0FBQUE7O0FBSUFDLElBQUFBLHlCQUFBQSxxQkFBQUE7QUFBQUEsTUFBQUE7O01BQUFBO01BQ0UsSUFBRyxDQUFBLFFBQUF2RixJQUFBeUQsU0FBQUEsQ0FBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxRQUFRekQsSUFBQWlFLGNBQUFBLENBQUFBLENBQVIsQ0FBQSxDQUFBLENBQUg7UUFDRXNCLE9BQUF2RjtNQURGO1FBR0V1RixPQUFBLE9BQUF2RixJQUFBLEVBQUEsd0RBQUEsYUFBQSxFQUFBLEVBQUEsRUFBQSxNQUFBO01BSEY7SUFERnVGLENBQUFBLEdBQUFBOztBQVFBQyxJQUFBQSxvQkFBQUEsNkJBQUFBO0FBQUFBLE1BQUFBOztNQUNFQSxPQUFDQSxjQUFEQTtJQURGQSxDQUFBQSxHQUFBQTs7QUFJQUMsSUFBQUEsbUJBQUFBLFlBQUFBLEdBQUFBOztBQUlBQyxJQUFBQSxtQkFBQUEsZUFBUUMsQ0FBRCxFQUFJQyxDQUFYRjtBQUFBQSxNQUFBQTs7Ozs7QUFFRkE7QUFDQUEsUUFBVXBGLE9BQVFDLE9BQUFBLENBQU9nQix3QkFBZixFQUFvQ21FLGNBQTVCbkY7QUFDbEJtRjs7QUFFQUE7QUFDQUEsZUFBaUIxRixJQUFJMEMsT0FBQUEsQ0FBRWlELENBQUZqRCxDQUFJZ0Q7QUFDekJBO0FBQ0FBLGNBQWdCdkQsY0FBVVEsUUFBQUEsQ0FBSWdELENBQUpoRCxDQUFNK0M7QUFDaENBLFVBQVlwRixPQUFRQyxPQUFBQSxDQUFPQyxnQkFBZixFQUE0QmtGLHlFQUFwQm5GO0FBQ3BCbUY7O0FBRUFBO0FBQ0FBLFVBQVlwRixPQUFRQyxPQUFBQSxDQUFPQyxnQkFBZixFQUE0QmtGLDJFQUFwQm5GO0FBQ3BCbUY7O0FBRUFBLGNBQWdCdkQsY0FBVVEsUUFBQUEsQ0FBSWlELENBQUpqRCxDQUFNK0M7QUFDaENBLFVBQVlwRixPQUFRQyxPQUFBQSxDQUFPQyxnQkFBZixFQUE0QmtGLDBFQUFwQm5GO0FBQ3BCbUY7O0FBRUFBO0FBQ0FBLFVBQVlwRixPQUFRQyxPQUFBQSxDQUFPZ0Isd0JBQWYsRUFBb0NtRSxjQUE1Qm5GO0FBQ3BCbUY7O0FBRUFBLGVBQWtCMUYsSUFBSTBDLE9BQUFBLENBQUVpRCxDQUFGakQsQ0FBS3BCLE1BQUFBLENBQUVzRSxDQUFGdEU7QUFDM0JvRTtBQUNBQTtJQTNCRUEsQ0FBQUEsSUFBQUE7O0FBOEJBRyxJQUFBQSxvQkFBQUEsZ0JBQUFBO0FBQUFBLE1BQUFBOztNQUNFQSxPQUFDQSxRQUFEQTtJQURGQSxDQUFBQSxHQUFBQTs7QUFJQUMsSUFBQUEsbUJBQUFBLGVBQVFuRixLQUFSbUY7QUFBQUEsTUFBQUE7O01BQUFBO01BQ0UsSUFBQSxRQUFHM0QsY0FBSCxFQUFpQm5DLElBQWpCLENBQUE7UUFDRThGLE9BQUEsT0FBQTlGLElBQUEsRUFBQSw0Q0FBQSxPQUFBLEVBQUEsQ0FBQVcsS0FBQSxDQUFBLEVBQUEsTUFBQTtNQURGO1FBR0VtRixPQUFLekUsV0FBTHJCLElBQUtxQixFQUFFVixLQUFGVTtNQUhQO0lBREZ5RSxDQUFBQSxHQUFBQTs7QUFRQUMsSUFBQUEsMkJBQUFBLHVCQUFnQkMsR0FBaEJEO0FBQUFBLE1BQUFBOzs7OztBQUVGQTtBQUNBQSxRQUFVekYsT0FBUUMsT0FBQUEsQ0FBT3lCLG9CQUFmLEVBQWlDK0QsNkJBQUQsR0FBQSxDQUErQkEsZ0JBQS9CLENBQUEsR0FBaURBLFlBQXpFeEYsQ0FBcUZ3RjtBQUN2R0E7QUFDQUE7TUFFSSxJQUFBLFFBQUc1RCxjQUFILEVBQWlCbkMsSUFBakIsQ0FBQTtRQUNFK0YsT0FBQWxELGVBQVVDLEtBQUFBLENBQUs5QyxJQUFmLEVBQXFCK0MsQ0FBWEQ7TUFEWixPQUVBLElBQUEsUUFBTTlDLElBQUFpRSxjQUFBQSxDQUFBQSxDQUFOLENBQUE7UUFDRThCLE9BQUF6RixPQUFRQyxPQUFBQSxDQUFPMEYsdUJBQWYsRUFBbUNGLFVBQTNCeEY7TUFEVixPQUVBLElBQUEsUUFBTVAsSUFBQXlELFNBQUFBLENBQUFBLENBQU4sQ0FBQTtRQUNFc0MsT0FBQXpGLE9BQVFDLE9BQUFBLENBQU8wRix1QkFBZixFQUFtQ0YsS0FBM0J4RjtNQURWLE9BRUEsSUFBQSxRQUFPd0YsV0FBUCxDQUFBOztRQUNFLEtBQVFHLFdBQU1DLE9BQUFBLENBQU9uRyxJQUFQbUcsQ0FBZCxrQkFBQSxFQUFBQyxDQUFBQSxJQUFBLDZCQUFBQSxDQUFBLEVBQUdDLENBQUFBLElBQUgsNkJBQUdBLENBQUg7UUFDQUQsSUFBUUYsV0FBTUksT0FBQUEsQ0FBT0YsQ0FBYixFQUFnQkcsSUFBQTFGLFlBQUEwRixhQUFWRCxDQUE0QkUsTUFBQUEsQ0FBQUE7UUFDMUNILElBQUtsRixVQUFMa0YsQ0FBS2xGLEVBQUdvRixJQUFBMUYsWUFBQTBGLGFBQUhwRjtRQUVMNEUsT0FBQWxELGVBQVVDLEtBQUFBLENBQU8xQixVQUFGcUYsQ0FBRXJGLEVBQUVnRixDQUFGaEYsQ0FBakIsRUFBc0IyQixDQUFBQSxDQUFBQSxDQUFFZCxPQUFBQSxDQUFNZCxVQUFGNEIsQ0FBRTVCLEVBQUVrRixDQUFGbEYsQ0FBTmMsQ0FBZGEsQ0FBeUJpRCxhQUFBQSxDQUFhbEQsZUFBVUMsS0FBQUEsQ0FBS0MsQ0FBZixFQUFrQkEsQ0FBQUEsQ0FBQUEsQ0FBRWQsT0FBQUEsQ0FBTWQsVUFBRjRCLENBQUU1QixFQUFFa0YsQ0FBRmxGLENBQU5jLENBQVZhLENBQXZCaUQ7TUFMckM7UUFPRUEsT0FBQS9GLElBQUEwRyxNQUFBQSxDQUFBQSxDQUFJWCxhQUFBQSxDQUFhQyxHQUFiRDtNQVBOO0lBYkZBLENBQUFBLElBQUFBOztBQXdCQVksSUFBQUEseUJBQUFBLHFCQUFjQyxDQUFkRDtBQUFBQSxNQUFBQTs7TUFDRUEsT0FBS3hGLFVBQUxuQixJQUFLbUIsRUFBSUMsVUFBRndGLENBQUV4RixFQUFRQyxXQUFMckIsSUFBS3FCLEVBQUV1RixDQUFGdkYsQ0FBSXdGLFVBQUFBLENBQUFBLENBQVp6RixDQUFKRDtJQURQd0YsQ0FBQUEsR0FBQUE7O0FBSUFHLElBQUFBLHFCQUFBQSxpQkFBVWpELE9BQVZpRDtBQUFBQSxNQUFBQTs7OztNQUNFLElBQUEsUUFBRzNFLGNBQUgsRUFBaUJuQyxJQUFqQixDQUFBOztRQUNFLElBQUEsUUFBSThHLGVBQUosQ0FBQTtVQUNFLE9BQU85RztRQURUO1FBSUEsSUFBRyxDQUFBLFFBQUFhLFlBQUEsRUFBWWdELE9BQVosQ0FBQSxJQUFBLENBQUEsUUFBdUJBLE9BQU9JLGNBQUFBLENBQUFBLENBQTlCLENBQUEsQ0FBQSxDQUFIO1VBQ0UzRCxPQUFRQyxPQUFBQSxDQUFPd0csaUJBQWYsRUFBNkJELFVBQXJCdkc7UUFEVjtRQUlBc0QsVUFBVTFELEtBQU1ZLGVBQUFBLENBQVk4QyxPQUFsQixFQUEyQjFCLGNBQTNCLEVBQXNDLFFBQWhDcEI7UUFFaEIsSUFBQSxRQUFXWSxPQUFSa0MsT0FBUWxDLEVBQUVxRixJQUFBN0UsY0FBQTZFLFFBQUZyRixDQUFYLENBQUE7VUFDRXJCLE9BQVFDLE9BQUFBLENBQU93RyxpQkFBZixFQUE2QkQsZUFBckJ2RztRQURWO1FBSUEsSUFBQSxRQUFJdUcsWUFBSixDQUFBO1VBQ0UsT0FBTzlHO1FBRFQ7UUFJQTZELFVBQVdBLE9BQURyQixPQUFBQSxDQUFBQTs7QUFHaEJzRSx5Q0FBMkM5RyxJQUFBaUgsTUFBQUEsQ0FBQUEsQ0FBS0g7QUFDaERBO0FBQ0FBOztBQUVBQTtBQUNBQTs7QUFFQUE7QUFDQUE7TUE5Qkk7O1FBZ0NFLElBQUcsQ0FBQSxRQUFBOUcsSUFBQXlELFNBQUFBLENBQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsUUFBU3FELGVBQVQsQ0FBQSxDQUFBLENBQUg7VUFDRXhHLE9BQVFDLE9BQUFBLENBQU8wRix1QkFBZixFQUFtQ2EsS0FBM0J2RztRQURWO1FBSUFzRCxVQUFVMUQsS0FBTVksZUFBQUEsQ0FBYStGLFlBQW5CLEVBQWtDM0UsY0FBbEMsRUFBNkMsUUFBdkNwQjtRQUVoQixJQUFBLFFBQVdhLE9BQVJpQyxPQUFRakMsRUFBR2dCLENBQUhoQixDQUFYLENBQUE7VUFDRSxJQUFBLFFBQUc1QixJQUFBeUQsU0FBQUEsQ0FBQUEsQ0FBSCxDQUFBO1lBQ0VuRCxPQUFRQyxPQUFBQSxDQUFPd0csaUJBQWYsRUFBNkJELEtBQXJCdkc7VUFEVixPQUVBLElBQUEsUUFBTVAsSUFBQWlFLGNBQUFBLENBQUFBLENBQU4sQ0FBQTtZQUNFM0QsT0FBUUMsT0FBQUEsQ0FBTzBGLHVCQUFmLEVBQW1DYSxVQUEzQnZHO1VBRFY7UUFIRixPQU1BLElBQUEsTUFBTXNELE9BQU4sRUFBaUJqQixDQUFqQixDQUFBO1VBQ0UsT0FBUWtFO1FBRFYsT0FFQSxJQUFNLENBQUEsUUFBQTlHLElBQUF5RCxTQUFBQSxDQUFBQSxDQUFBLENBQUEsSUFBQSxDQUFBLFFBQVF6RCxJQUFBaUUsY0FBQUEsQ0FBQUEsQ0FBUixDQUFBLENBQUEsQ0FBTjtVQUNFLE9BQU9qRTtRQURUO1FBSUEsS0FBU2tHLFdBQU1DLE9BQUFBLENBQU9uRyxJQUFQbUcsQ0FBZixrQkFBQSxFQUFBZSxDQUFBQSxJQUFBLDZCQUFBQSxDQUFBLEVBQUdDLENBQUFBLE1BQUgsNkJBQUdBLENBQUg7UUFFQSxJQUFBLFFBQVdyRixPQUFSK0IsT0FBUS9CLEVBQXNCWCxVQUFMRixTQUFibUcsSUFBQXZHLFlBQUF1RyxRQUFhbkcsRUFBRXdGLENBQUZ4RixDQUFLRSxFQUFHLENBQUEsUUFBSVUsT0FBSnNGLEdBQUl0RixFQUFFZSxDQUFGZixDQUFKLENBQUEsR0FBQSxDQUFjUixXQUFKOEYsR0FBSTlGLEVBQUVnRyxDQUFGaEcsQ0FBZCxJQUFBLENBQTRCRixVQUFKRSxXQUFKOEYsR0FBSTlGLEVBQUVpRyxDQUFGakcsQ0FBSUYsRUFBRTRCLENBQUY1QixDQUE1QixDQUFBLENBQUhBLENBQXRCVyxDQUFYLENBQUE7VUFDRSxPQUFPOUI7UUFEVDtRQUlBLElBQUEsUUFBVzJCLE9BQVJrQyxPQUFRbEMsRUFBSSxDQUFBLFFBQUlFLE9BQUpzRixHQUFJdEYsRUFBRWUsQ0FBRmYsQ0FBSixDQUFBLEdBQUEsQ0FBa0JaLFNBQUpJLFdBQUo4RixHQUFJOUYsRUFBRWlHLENBQUZqRyxDQUFJSixFQUFFOEIsQ0FBRjlCLENBQWxCLElBQUEsQ0FBNEJJLFdBQUo4RixHQUFJOUYsRUFBRWdHLENBQUZoRyxDQUE1QixDQUFBLENBQUZtQixPQUFBQSxDQUFBQSxDQUFGYixDQUFYLENBQUE7VUFDRSxPQUFPaUI7UUFEVDtRQUlBa0UsT0FBQ0EsZ0VBQURBO01BNURGO0lBREZBLENBQUFBLElBQUFBOztBQWlFQVMsSUFBQUEscUJBQUFBLGlCQUFBQTtBQUFBQSxNQUFBQTs7TUFBQUE7OztNQUNFLEtBQUEsUUFBd0NDLEtBQXhDLENBQUE7UUFBQSxPQUFPbkQsTUFBQXJFLElBQUFxRSxZQUFBQSxFQUFBQSxDQUFTLE9BQVRBLENBQUFBLEVBQUFvRCxjQUFBQSxFQUFBQzs7VUFBbUJBLE9BQUExSCxJQUFuQnlILENBQUFBLEdBQUFBLHFCQUFBQSxDQUFBcEQ7TUFBUDs7QUFHSmtEO0FBQ0FBO0FBQ0FBO0FBQ0FBO01BRUlBLE9BQUF2SDtJQVRGdUgsQ0FBQUEsR0FBQUE7O0FBWUF0RSxJQUFBQSxvQkFBQUEsWUFBQUEsR0FBQUE7O0FBSUF1RCxJQUFBQSxvQkFBQUEsZ0JBQUFBO0FBQUFBLE1BQUFBOztNQUNFQSxPQUFDQSw2Q0FBREE7SUFERkEsQ0FBQUEsR0FBQUE7O0FBSUFFLElBQUFBLG9CQUFBQSxnQkFBQUE7QUFBQUEsTUFBQUE7O01BQ0UsSUFBQSxRQUFHdkUsY0FBSCxFQUFpQm5DLElBQWpCLENBQUE7UUFDRTBHLE9BQUE3RCxlQUFVQyxLQUFBQSxDQUFLOUMsSUFBZixFQUFxQitDLENBQVhEO01BRFo7O1FBR0UsS0FBUW9ELFdBQU1DLE9BQUFBLENBQU9uRyxJQUFQbUcsQ0FBZCxrQkFBQSxFQUFBQyxDQUFBQSxJQUFBLDZCQUFBQSxDQUFBLEVBQUd1QixDQUFBQSxJQUFILDZCQUFHQSxDQUFIO1FBQ0F2QixJQUFRRixXQUFNSSxPQUFBQSxDQUFPRixDQUFiLEVBQWdCRyxJQUFBMUYsWUFBQTBGLGFBQVZELENBQTRCRSxNQUFBQSxDQUFBQTtRQUMxQ21CLElBQUt4RyxVQUFMd0csQ0FBS3hHLEVBQUdvRixJQUFBMUYsWUFBQTBGLGFBQUhwRjtRQUVMdUYsT0FBR3RGLFVBQUZnRixDQUFFaEYsRUFBR3dHLElBQUEvRyxZQUFBK0csVUFBY2xGLE9BQUFBLENBQUVpRixDQUFGakYsQ0FBakJ0QixDQUFzQnNGLE1BQUFBLENBQUFBO01BUDNCO0lBREZBLENBQUFBLEdBQUFBOztBQVlBbUIsSUFBQUEsb0JBQUFBLGdCQUFTQyxJQUFURDtBQUFBQSxNQUFBQTs7O01BQVMseUJBQU9FO01BQ2RELE9BQU8zSCxLQUFNWSxlQUFBQSxDQUFZK0csSUFBbEIsRUFBd0IzRixjQUF4QixFQUFtQyxRQUE3QnBCO01BRWIsSUFBRyxDQUFBLFFBQUtZLE9BQUxtRyxJQUFLbkcsRUFBRThFLENBQUY5RSxDQUFMLENBQUEsSUFBQSxDQUFBLFFBQWlCRSxPQUFMaUcsSUFBS2pHLEVBQUVtRyxFQUFGbkcsQ0FBakIsQ0FBQSxDQUFBLENBQUg7UUFDRXZCLE9BQVFDLE9BQUFBLENBQU95QixvQkFBZixFQUFpQzZGLGdCQUFELEdBQUEsQ0FBaUJDLElBQWpCLENBQXhCdkg7TUFEVjtNQUtBLElBQUcsQ0FBQSxNQUFBUCxJQUFBLEVBQVE0QyxDQUFSLENBQUEsSUFBQSxDQUFBLFFBQWNpRixvQkFBZCxDQUFBLENBQUEsQ0FBSDtRQUNFLE9BQU9BO01BRFQ7TUFJQUEsT0FBQ0EsbUJBQURBO0lBWkZBLENBQUFBLElBQUFBOztBQWVBaEIsSUFBQUEsd0JBQUFBLG9CQUFhaEQsT0FBYmdEO0FBQUFBLE1BQUFBOzs7TUFBYSwrQkFBVWpFOztBQUV6QmlFLGNBQWdCN0csSUFBQWlELE1BQUFBLENBQUFBLENBQUs0RDs7QUFFckJBO0FBQ0FBO0FBQ0FBOztBQUVBQTtBQUNBQTs7QUFFQUE7QUFDQUE7QUFDQUE7O0FBRUFBO0FBQ0FBO0lBaEJFQSxDQUFBQSxJQUFBQTs7QUFtQkFvQixJQUFBQSxzQkFBQUEsa0JBQVdILElBQVhHO0FBQUFBLE1BQUFBOzs7TUFBVyx5QkFBT0Y7TUFDaEIsSUFBUXBHLE9BQUwzQixJQUFLMkIsRUFBRWlCLENBQUZqQixDQUFSO1FBQ0VyQixPQUFRQyxPQUFBQSxDQUFPMkgsSUFBQWhDLFdBQUFnQyxnQkFBZixFQUFvQ0QsZUFBNUIxSDtNQURWO01BSUF1SCxPQUFPM0gsS0FBTVksZUFBQUEsQ0FBWStHLElBQWxCLEVBQXdCM0YsY0FBeEIsRUFBbUMsUUFBN0JwQjtNQUViLElBQUEsUUFBUVksT0FBTG1HLElBQUtuRyxFQUFFOEUsQ0FBRjlFLENBQVIsQ0FBQTtRQUNFckIsT0FBUUMsT0FBQUEsQ0FBT3lCLG9CQUFmLEVBQWlDaUcsZ0JBQUQsR0FBQSxDQUFpQkgsSUFBakIsQ0FBeEJ2SDtNQURWOztBQUtKMEgsa0NBQW9DM0gsT0FBUUMsT0FBQUEsQ0FBT29ELG9CQUFmLEVBQWlDc0UsZ0NBQUQsR0FBQSxDQUFpQ2pJLElBQUFtSSxTQUFBQSxDQUFBQSxDQUFqQyxDQUF4QjVIOztBQUU1QzBIOztBQUVBQTtBQUNBQTtBQUNBQTs7QUFFQUE7QUFDQUE7QUFDQUE7QUFDQUE7O0FBRUFBO0FBQ0FBO0lBMUJFQSxDQUFBQSxJQUFBQTs7QUE2QkFHLElBQUFBLHNCQUFBQSxrQkFBV3pILEtBQVh5SDtBQUFBQSxNQUFBQTs7TUFBQUE7TUFDRSxJQUFHLENBQUEsUUFBQXBJLElBQUF5RCxTQUFBQSxDQUFBQSxDQUFBLENBQUEsSUFBQSxDQUFBLFFBQVE5QyxLQUFLOEMsU0FBQUEsQ0FBQUEsQ0FBYixDQUFBLENBQUEsQ0FBSDtRQUNFMkUsT0FBQTlILE9BQVFDLE9BQUFBLENBQU8wRix1QkFBZixFQUFtQ21DLEtBQTNCN0g7TUFEVixPQUVBLElBQUEsUUFBTVAsSUFBQWlFLGNBQUFBLENBQUFBLENBQU4sQ0FBQTtRQUNFbUUsT0FBQTlILE9BQVFDLE9BQUFBLENBQU8wRix1QkFBZixFQUFtQ21DLFVBQTNCN0g7TUFEVjtRQUdFNkgsT0FBQSxPQUFBcEksSUFBQSxFQUFBLGtEQUFBLFVBQUEsRUFBQSxDQUFBVyxLQUFBLENBQUEsRUFBQSxNQUFBO01BSEY7SUFIRnlILENBQUFBLEdBQUFBOztBQVVBQyxJQUFBQSxvQkFBQUEsZ0JBQVNsRSxJQUFUa0U7QUFBQUEsTUFBQUE7O01BQUFBOzs7TUFDRSxLQUFPakUsZUFBUDtRQUNFLE9BQU9DLE1BQUFyRSxJQUFBcUUsWUFBQUEsRUFBQUEsQ0FBUyxNQUFULEVBQWdCRixJQUFoQkUsQ0FBQUEsRUFBQWlFLGNBQUFBLEVBQUFDOzs7VUFDTCxLQUFBLFFBQStGL0QsY0FBL0YsRUFBNkdMLElBQTdHLENBQUE7WUFBQTdELE9BQVFDLE9BQUFBLENBQU95QixvQkFBZixFQUFpQ3VHLGdCQUFELEdBQUEsQ0FBaUJ2SSxJQUFJWSxPQUFBQSxDQUFBQSxDQUFyQixDQUFBLEdBQTRCMkgsUUFBNUIsR0FBQSxDQUFvQ3BFLElBQUl2RCxPQUFBQSxDQUFBQSxDQUF4QyxDQUFBLEdBQStDMkgsU0FBdkVoSTtVQUFSO1VBQ0EsSUFBQSxRQUFLb0IsT0FBTHdDLElBQUt4QyxFQUFFM0IsSUFBRjJCLENBQUwsQ0FBQTtZQUFjNEcsT0FBQTNGO1VBQWQ7WUFBa0IyRixPQUFZdEgsU0FBUEUsVUFBTGdELElBQUtoRCxFQUFFbkIsSUFBRm1CLENBQU9GLEVBQUU4QixDQUFGOUI7VUFBOUIsRUFGS3FILENBQUFBLEdBQUFBLHFCQUFBQSxDQUFBakU7TUFEVDs7QUFRSmdFO0FBQ0FBLFFBQVUvSCxPQUFRQyxPQUFBQSxDQUFPeUIsb0JBQWYsRUFBaUNxRyxnQkFBRCxHQUFBLENBQWlCckksSUFBSVksT0FBQUEsQ0FBQUEsQ0FBckIsQ0FBQSxHQUE0QnlILFFBQTVCLEdBQUEsQ0FBb0NsRSxJQUFJdkQsT0FBQUEsQ0FBQUEsQ0FBeEMsQ0FBQSxHQUErQ3lILFNBQXZFOUg7QUFDbEI4SDtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtNQUVJQSxPQUFBckk7SUFqQkZxSSxDQUFBQSxHQUFBQTs7QUFvQkFHLElBQUFBLHFCQUFBQSw4QkFBQUE7QUFBQUEsTUFBQUE7O01BQ0VBLE9BQUNBLFNBQURBO0lBREZBLENBQUFBLEdBQUFBOztBQUtBdkIsSUFBQUEsb0JBQUFBLFlBQ0VJLENBREZKLENBQUFBLEdBQUFBOztBQUlBeEQsSUFBQUEsb0JBQUFBLDZCQUFBQTtBQUFBQSxNQUFBQTs7TUFDRUEsT0FBQ0EsV0FBREE7SUFERkEsQ0FBQUEsR0FBQUE7O0FBSUFnRixJQUFBQSx1QkFBQUEsZ0NBQUFBO0FBQUFBLE1BQUFBOztNQUNFQSxPQUFDQSxxREFBREE7SUFERkEsQ0FBQUEsR0FBQUE7O0FBSUF4RSxJQUFBQSx5QkFBQUEsa0NBQUFBO0FBQUFBLE1BQUFBOzs7QUFFRkE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7SUFYRUEsQ0FBQUEsR0FBQUE7O0FBY0F5RSxJQUFBQSx5QkFBQUEsa0NBQUFBO0FBQUFBLE1BQUFBOztNQUNFQSxPQUFDQSwrQ0FBREE7SUFERkEsQ0FBQUEsR0FBQUE7O0FBSUFDLElBQUFBLHlCQUFBQSxrQ0FBQUE7QUFBQUEsTUFBQUE7O01BQ0VBLE9BQUNBLGlDQUFEQTtJQURGQSxDQUFBQSxHQUFBQTs7QUFLRnpJO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBOztBQUVBQTtBQUNBQTtBQUNBQTs7QUFFQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7O0FBRUFBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBOztBQUVFMEksSUFBQUEsMEJBQUFBLHNCQUFBQTtBQUFBQSxNQUFBQTs7O01BQ0UsSUFBQSxNQUE0QjVJLElBQTVCLEVBQW9DNkksSUFBQWhJLFlBQUFnSSxhQUFwQyxDQUFBO1FBQUEsT0FBT0EsSUFBQWhJLFlBQUFnSTtNQUFQO01BQ0EsSUFBQSxRQUF1QjdJLElBQUF5RCxTQUFBQSxDQUFBQSxDQUF2QixDQUFBO1FBQUEsT0FBT3FGLElBQUFqSSxZQUFBaUk7TUFBUDtNQUVBLElBQVFoSCxPQUFMOUIsSUFBSzhCLEVBQUdjLENBQUhkLENBQVI7UUFFRThHLE9BQUNBLGtDQUFEQTtNQUZGO1FBSUVBLE9BQUNBLHdCQUFEQTtNQUpGO0lBSkZBLENBQUFBLEdBQUFBOztBQVlBRyxJQUFBQSwwQkFBQUEsc0JBQUFBO0FBQUFBLE1BQUFBOzs7TUFDRSxJQUFBLE1BQTZCL0ksSUFBN0IsRUFBc0M2SSxJQUFBaEksWUFBQWdJLGFBQURyRyxPQUFBQSxDQUFBQSxDQUFyQyxDQUFBO1FBQUEsT0FBUXFHLElBQUFoSSxZQUFBZ0ksYUFBRHJHLE9BQUFBLENBQUFBO01BQVA7TUFDQSxJQUFBLFFBQXVCeEMsSUFBQXlELFNBQUFBLENBQUFBLENBQXZCLENBQUE7UUFBQSxPQUFPcUYsSUFBQWpJLFlBQUFpSTtNQUFQO01BRUEsSUFBUWpILE9BQUw3QixJQUFLNkIsRUFBRWUsQ0FBRmYsQ0FBUjtRQUNFa0gsT0FBQ0Esd0JBQURBO01BREY7UUFHRUEsT0FBQ0EsbUNBQURBO01BSEY7SUFKRkEsQ0FBQUEsR0FBQUE7SUFXQSxhQUFNLEtBQU4sRUFBVSxPQUFWO0lBQ0EsYUFBTSxNQUFOLEVBQVcsSUFBWDtJQUNBLGFBQU0sTUFBTixFQUFXLEdBQVg7SUFDQSxhQUFNLFNBQU4sRUFBYyxNQUFkO0lBQ0EsYUFBTSxVQUFOLEVBQWUsT0FBZjtJQUNBLGFBQU0sV0FBTixFQUFnQixLQUFoQjtJQUNBLGFBQU0sUUFBTixFQUFhLEdBQWI7SUFDQSxhQUFNLFdBQU4sRUFBZ0IsUUFBaEI7SUFDQSxhQUFNLE9BQU4sRUFBWSxPQUFaO0lBQ0EsYUFBTSxNQUFOLEVBQVcsTUFBWDtJQUNBN0ksT0FBQSxhQUFNLFFBQU4sRUFBYSxNQUFiO0VBNTJCRkEsR0FBTSxJQUFOQSxFQUFpQnNFLGNBQWpCdEU7RUErMkJBLFdBQUEsSUFBQSxZQUFXOEksYUFBWDtFQUVBQztFQUFBQTs7SUFBQUE7OztJQUNHQTtJQUNBQTtJQUVEO01BQUE7Ozs7QUFDRTVJLE1BQUFBLHdCQUFBQSxvQkFBQUE7QUFBQUEsUUFBQUE7O1FBQ0VBLE9BQUFDLE9BQVFDLE9BQUFBLENBQU9DLGdCQUFmLEVBQTZCSCwwQkFBRCxHQUFBLENBQTJCTCxJQUFBUyxNQUFBQSxDQUFBQSxDQUEzQixDQUFwQkY7TUFEVkYsQ0FBQUEsR0FBQUE7O01BSUEsc0JBQU0sS0FBTjs7QUFFQTZJLE1BQUFBLG9CQUFBQSxnQkFBUzdDLENBQVQ2QztBQUFBQTs7UUFDRTdDLElBQUlsRyxLQUFNWSxlQUFBQSxDQUFZc0YsQ0FBbEIsRUFBcUJsRSxjQUFyQixFQUFnQyxRQUExQnBCOztBQUVoQm1JO0FBQ0FBLFVBQVk1SSxPQUFRQyxPQUFBQSxDQUFPMkgsSUFBQWhDLFdBQUFnQyxnQkFBZixFQUFvQ2dCLGlEQUE1QjNJO0FBQ3BCMkk7O0FBRUFBO0FBQ0FBO01BUklBLENBQUFBLEdBQUFBO01BV0EsT0FBQUMsMkJBQUFBLHVCQUFnQkMsTUFBaEJEO0FBQUFBLFFBQUFBOztRQUNFQSxPQUFBaEosVUFBSWtKLGVBQUFBLENBQVlELE1BQWhCLEVBQXdCcEosSUFBeEIsRUFBOEIsUUFBMUJxSjtNQURORixDQUFBQSxHQUFBQTtJQWxCRiw0QkFBU25KLElBQVQ7SUF1QkEsV0FBQUEsSUFBQSxTQUFhaUosbUJBQWI7SUFDQUEsT0FBQSxXQUFBakosSUFBQSxTQUFhaUosZ0JBQWI7RUE1QkZBLEdBQU0sSUFBTkEsRUFBa0J6RSxjQUFsQnlFO0VBK0JBbEosT0FBQXVKO0VBQUFBOztJQUFBQTs7O0lBQ0dBO0lBRUQ7Ozs7QUFDRWpKLE1BQUFBLHdCQUFBQSxvQkFBQUE7QUFBQUEsUUFBQUE7O1FBQ0VBLE9BQUFDLE9BQVFDLE9BQUFBLENBQU9DLGdCQUFmLEVBQTZCSCwwQkFBRCxHQUFBLENBQTJCTCxJQUFBUyxNQUFBQSxDQUFBQSxDQUEzQixDQUFwQkY7TUFEVkYsQ0FBQUEsR0FBQUE7O01BSUEsc0JBQU0sS0FBTjtNQUVBLE9BQUFzQyxtQkFBQUEsc0JBQVFoQyxLQUFSZ0M7QUFBQUE7UUFDRUEsT0FBQ0EsbUJBQURBO01BREZBLENBQUFBLEdBQUFBO0lBUEYsNEJBQVMzQyxJQUFUO0lBWUEsV0FBQUEsSUFBQSxjQUFrQnNKLFFBQWxCO0lBQ0EsV0FBQXRKLElBQUEsU0FBa0JzSixnQkFBbEI7SUFDQSxXQUFBdEosSUFBQSxTQUFrQnNKLGdCQUFsQjtJQUNBLFdBQUF0SixJQUFBLFNBQWtCc0osR0FBbEI7SUFFQSxXQUFBdEosSUFBQSxTQUFpQnVKLEVBQWpCO0lBQ0EsV0FBQXZKLElBQUEsY0FBaUJ3SixFQUFqQjtJQUNBLFdBQUF4SixJQUFBLFdBQWlCeUcsQ0FBakI7SUFFQTZDLE9BQUEsV0FBQXRKLElBQUEsYUFBaUJzSix1REFBakI7RUF4QkZBLEdBQU0sSUFBTkEsRUFBZ0I5RSxjQUFoQjhFO0FBbDVCQXZKOyJ9fSx7Im9mZnNldCI6eyJsaW5lIjoyMTE1NywiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvcmVsaWIvYXJyYXkucmIiXSwic291cmNlc0NvbnRlbnQiOlsiIyBoZWxwZXJzOiB0cnV0aHksIGZhbHN5LCBoYXNoX2lkcywgeWllbGQxLCBoYXNoX2dldCwgaGFzaF9wdXQsIGhhc2hfZGVsZXRlLCBjb2VyY2VfdG8sIHJlc3BvbmRfdG8sIGRlbnlfZnJvemVuX2FjY2VzcywgZnJlZXplXG5cbnJlcXVpcmUgJ2NvcmVsaWIvZW51bWVyYWJsZSdcbnJlcXVpcmUgJ2NvcmVsaWIvbnVtZXJpYydcblxuY2xhc3MgOjpBcnJheSA8IGBBcnJheWBcbiAgaW5jbHVkZSA6OkVudW1lcmFibGVcblxuICAjIE1hcmsgYWxsIGphdmFzY3JpcHQgYXJyYXlzIGFzIGJlaW5nIHZhbGlkIHJ1YnkgYXJyYXlzXG4gIGBPcGFsLnByb3Aoc2VsZi4kJHByb3RvdHlwZSwgJyQkaXNfYXJyYXknLCB0cnVlKWBcblxuICAleHtcbiAgICAvLyBSZWNlbnQgdmVyc2lvbnMgb2YgVjggKD4gNy4xKSBvbmx5IHVzZSBhbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gd2hlbiBBcnJheS5wcm90b3R5cGUgaXMgdW5tb2RpZmllZC5cbiAgICAvLyBGb3IgaW5zdGFuY2UsIFwiYXJyYXktc3BsaWNlLnRxXCIgaGFzIGEgXCJmYXN0IHBhdGhcIiAoRXh0cmFjdEZhc3RKU0FycmF5LCBkZWZpbmVkIGluIFwic3JjL2NvZGVnZW4vY29kZS1zdHViLWFzc2VtYmxlci5jY1wiKVxuICAgIC8vIGJ1dCBpdCdzIG9ubHkgZW5hYmxlZCB3aGVuIFwiSXNQcm90b3R5cGVJbml0aWFsQXJyYXlQcm90b3R5cGUoKVwiIGlzIHRydWUuXG4gICAgLy9cbiAgICAvLyBPbGRlciB2ZXJzaW9ucyBvZiBWOCB3ZXJlIHVzaW5nIHJlbGF0aXZlbHkgZmFzdCBKUy13aXRoLWV4dGVuc2lvbnMgY29kZSBldmVuIHdoZW4gQXJyYXkucHJvdG90eXBlIGlzIG1vZGlmaWVkOlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS92OC92OC9ibG9iLzcuMC4xL3NyYy9qcy9hcnJheS5qcyNMNTk5LUw2NDJcbiAgICAvL1xuICAgIC8vIEluIHNob3J0LCBBcnJheSBvcGVyYXRpb25zIGFyZSBzbG93IGluIHJlY2VudCB2ZXJzaW9ucyBvZiBWOCB3aGVuIHRoZSBBcnJheS5wcm90b3R5cGUgaGFzIGJlZW4gdGFtcGVyZWQuXG4gICAgLy8gU28sIHdoZW4gcG9zc2libGUsIHdlIGFyZSB1c2luZyBmYXN0ZXIgb3Blbi1jb2RlZCB2ZXJzaW9uIHRvIGJvb3N0IHRoZSBwZXJmb3JtYW5jZS5cblxuICAgIC8vIEFzIG9mIFY4IDguNCwgZGVwZW5kaW5nIG9uIHRoZSBzaXplIG9mIHRoZSBhcnJheSwgdGhpcyBpcyB1cCB0byB+MjV4IHRpbWVzIGZhc3RlciB0aGFuIEFycmF5I3NoaWZ0KClcbiAgICAvLyBJbXBsZW1lbnRhdGlvbiBpcyBoZWF2aWx5IGluc3BpcmVkIGJ5OiBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi9iYTY4NDgwNWI2YzBlZGVkNzZlNWNkODllZTAwMzI4YWM3YTU5MzY1L2xpYi9pbnRlcm5hbC91dGlsLmpzI0wzNDEtTDM0N1xuICAgIGZ1bmN0aW9uIHNoaWZ0Tm9BcmcobGlzdCkge1xuICAgICAgdmFyIHIgPSBsaXN0WzBdO1xuICAgICAgdmFyIGluZGV4ID0gMTtcbiAgICAgIHZhciBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgICAgIGZvciAoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBsaXN0W2luZGV4IC0gMV0gPSBsaXN0W2luZGV4XTtcbiAgICAgIH1cbiAgICAgIGxpc3QucG9wKCk7XG4gICAgICByZXR1cm4gcjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0FycmF5U3ViY2xhc3Mob2JqLCBrbGFzcykge1xuICAgICAgaWYgKGtsYXNzLiQkbmFtZSA9PT0gT3BhbC5BcnJheSkge1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGtsYXNzLiRhbGxvY2F0ZSgpLiRyZXBsYWNlKCN7YG9iamAudG9fYX0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEEgaGVscGVyIGZvciBrZWVwX2lmIGFuZCBkZWxldGVfaWYsIGZpbHRlciBpcyBlaXRoZXIgT3BhbC50cnV0aHlcbiAgICAvLyBvciBPcGFsLmZhbHN5LlxuICAgIGZ1bmN0aW9uIGZpbHRlcklmKHNlbGYsIGZpbHRlciwgYmxvY2spIHtcbiAgICAgIHZhciB2YWx1ZSwgcmFpc2VkID0gbnVsbCwgdXBkYXRlZCA9IG5ldyBBcnJheShzZWxmLmxlbmd0aCk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBpMiA9IDAsIGxlbmd0aCA9IHNlbGYubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCFyYWlzZWQpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFsdWUgPSAkeWllbGQxKGJsb2NrLCBzZWxmW2ldKVxuICAgICAgICAgIH0gY2F0Y2goZXJyb3IpIHtcbiAgICAgICAgICAgIHJhaXNlZCA9IGVycm9yO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyYWlzZWQgfHwgZmlsdGVyKHZhbHVlKSkge1xuICAgICAgICAgIHVwZGF0ZWRbaTJdID0gc2VsZltpXVxuICAgICAgICAgIGkyICs9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGkyICE9PSBpKSB7XG4gICAgICAgIHNlbGYuc3BsaWNlLmFwcGx5KHNlbGYsIFswLCB1cGRhdGVkLmxlbmd0aF0uY29uY2F0KHVwZGF0ZWQpKTtcbiAgICAgICAgc2VsZi5zcGxpY2UoaTIsIHVwZGF0ZWQubGVuZ3RoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJhaXNlZCkgdGhyb3cgcmFpc2VkO1xuICAgIH1cbiAgfVxuXG4gIGRlZiBzZWxmLltdKCpvYmplY3RzKVxuICAgIGB0b0FycmF5U3ViY2xhc3Mob2JqZWN0cywgc2VsZilgXG4gIGVuZFxuXG4gIGRlZiBpbml0aWFsaXplKHNpemUgPSBuaWwsIG9iaiA9IG5pbCwgJmJsb2NrKVxuICAgICV4e1xuICAgICAgJGRlbnlfZnJvemVuX2FjY2VzcyhzZWxmKTtcblxuICAgICAgaWYgKG9iaiAhPT0gbmlsICYmIGJsb2NrICE9PSBuaWwpIHtcbiAgICAgICAgI3s6Oktlcm5lbC53YXJuKCd3YXJuaW5nOiBibG9jayBzdXBlcnNlZGVzIGRlZmF1bHQgdmFsdWUgYXJndW1lbnQnKX1cbiAgICAgIH1cblxuICAgICAgaWYgKHNpemUgPiAjezo6SW50ZWdlcjo6TUFYfSkge1xuICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgJ2FycmF5IHNpemUgdG9vIGJpZyd9XG4gICAgICB9XG5cbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMikge1xuICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgXCJ3cm9uZyBudW1iZXIgb2YgYXJndW1lbnRzICgje2Bhcmd1bWVudHMubGVuZ3RoYH0gZm9yIDAuLjIpXCJ9XG4gICAgICB9XG5cbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHNlbGYuc3BsaWNlKDAsIHNlbGYubGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICB9XG5cbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGlmIChzaXplLiQkaXNfYXJyYXkpIHtcbiAgICAgICAgICAje3JlcGxhY2Uoc2l6ZS50b19hKX1cbiAgICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgICAgfSBlbHNlIGlmICgje3NpemUucmVzcG9uZF90bz8gOnRvX2FyeX0pIHtcbiAgICAgICAgICAje3JlcGxhY2Uoc2l6ZS50b19hcnkpfVxuICAgICAgICAgIHJldHVybiBzZWxmO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHNpemUgPSAkY29lcmNlX3RvKHNpemUsICN7OjpJbnRlZ2VyfSwgJ3RvX2ludCcpO1xuXG4gICAgICBpZiAoc2l6ZSA8IDApIHtcbiAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsICduZWdhdGl2ZSBhcnJheSBzaXplJ31cbiAgICAgIH1cblxuICAgICAgc2VsZi5zcGxpY2UoMCwgc2VsZi5sZW5ndGgpO1xuICAgICAgdmFyIGksIHZhbHVlO1xuXG4gICAgICBpZiAoYmxvY2sgPT09IG5pbCkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XG4gICAgICAgICAgc2VsZi5wdXNoKG9iaik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBmb3IgKGkgPSAwLCB2YWx1ZTsgaSA8IHNpemU7IGkrKykge1xuICAgICAgICAgIHZhbHVlID0gYmxvY2soaSk7XG4gICAgICAgICAgc2VsZltpXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIHNlbGYudHJ5X2NvbnZlcnQob2JqKVxuICAgIDo6T3BhbC5jb2VyY2VfdG8/IG9iaiwgOjpBcnJheSwgOnRvX2FyeVxuICBlbmRcblxuICBkZWYgJihvdGhlcilcbiAgICBvdGhlciA9IGlmIDo6QXJyYXkgPT09IG90aGVyXG4gICAgICAgICAgICAgIG90aGVyLnRvX2FcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgYCRjb2VyY2VfdG8ob3RoZXIsICN7OjpBcnJheX0sICd0b19hcnknKWAudG9fYVxuICAgICAgICAgICAgZW5kXG5cbiAgICAleHtcbiAgICAgIHZhciByZXN1bHQgPSBbXSwgaGFzaCA9ICN7e319LCBpLCBsZW5ndGgsIGl0ZW07XG5cbiAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IG90aGVyLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICRoYXNoX3B1dChoYXNoLCBvdGhlcltpXSwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IHNlbGYubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaXRlbSA9IHNlbGZbaV07XG4gICAgICAgIGlmICgkaGFzaF9kZWxldGUoaGFzaCwgaXRlbSkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGl0ZW0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICBlbmRcblxuICBkZWYgfChvdGhlcilcbiAgICBvdGhlciA9IGlmIDo6QXJyYXkgPT09IG90aGVyXG4gICAgICAgICAgICAgIG90aGVyLnRvX2FcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgYCRjb2VyY2VfdG8ob3RoZXIsICN7OjpBcnJheX0sICd0b19hcnknKWAudG9fYVxuICAgICAgICAgICAgZW5kXG5cbiAgICAleHtcbiAgICAgIHZhciBoYXNoID0gI3t7fX0sIGksIGxlbmd0aCwgaXRlbTtcblxuICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gc2VsZi5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAkaGFzaF9wdXQoaGFzaCwgc2VsZltpXSwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IG90aGVyLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICRoYXNoX3B1dChoYXNoLCBvdGhlcltpXSwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoYXNoLiRrZXlzKCk7XG4gICAgfVxuICBlbmRcblxuICBkZWYgKihvdGhlcilcbiAgICByZXR1cm4gam9pbihvdGhlci50b19zdHIpIGlmIG90aGVyLnJlc3BvbmRfdG8/IDp0b19zdHJcblxuICAgIG90aGVyID0gYCRjb2VyY2VfdG8ob3RoZXIsICN7OjpJbnRlZ2VyfSwgJ3RvX2ludCcpYFxuXG4gICAgaWYgYG90aGVyIDwgMGBcbiAgICAgIDo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgJ25lZ2F0aXZlIGFyZ3VtZW50J1xuICAgIGVuZFxuXG4gICAgJXh7XG4gICAgICB2YXIgcmVzdWx0ID0gW10sXG4gICAgICAgICAgY29udmVydGVkID0gI3t0b19hfTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvdGhlcjsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5jb25jYXQoY29udmVydGVkKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiArKG90aGVyKVxuICAgIG90aGVyID0gaWYgOjpBcnJheSA9PT0gb3RoZXJcbiAgICAgICAgICAgICAgb3RoZXIudG9fYVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICBgJGNvZXJjZV90byhvdGhlciwgI3s6OkFycmF5fSwgJ3RvX2FyeScpYC50b19hXG4gICAgICAgICAgICBlbmRcblxuICAgIGBzZWxmLmNvbmNhdChvdGhlcilgXG4gIGVuZFxuXG4gIGRlZiAtKG90aGVyKVxuICAgIG90aGVyID0gaWYgOjpBcnJheSA9PT0gb3RoZXJcbiAgICAgICAgICAgICAgb3RoZXIudG9fYVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICBgJGNvZXJjZV90byhvdGhlciwgI3s6OkFycmF5fSwgJ3RvX2FyeScpYC50b19hXG4gICAgICAgICAgICBlbmRcblxuICAgIHJldHVybiBbXSBpZiBgc2VsZi5sZW5ndGggPT09IDBgXG4gICAgcmV0dXJuIGBzZWxmLnNsaWNlKClgIGlmIGBvdGhlci5sZW5ndGggPT09IDBgXG5cbiAgICAleHtcbiAgICAgIHZhciByZXN1bHQgPSBbXSwgaGFzaCA9ICN7e319LCBpLCBsZW5ndGgsIGl0ZW07XG5cbiAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IG90aGVyLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICRoYXNoX3B1dChoYXNoLCBvdGhlcltpXSwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IHNlbGYubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaXRlbSA9IHNlbGZbaV07XG4gICAgICAgIGlmICgkaGFzaF9nZXQoaGFzaCwgaXRlbSkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGl0ZW0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICBlbmRcblxuICBkZWYgPDwob2JqZWN0KVxuICAgIGAkZGVueV9mcm96ZW5fYWNjZXNzKHNlbGYpYFxuICAgIGBzZWxmLnB1c2gob2JqZWN0KWBcblxuICAgIHNlbGZcbiAgZW5kXG5cbiAgZGVmIDw9PihvdGhlcilcbiAgICBpZiA6OkFycmF5ID09PSBvdGhlclxuICAgICAgb3RoZXIgPSBvdGhlci50b19hXG4gICAgZWxzaWYgb3RoZXIucmVzcG9uZF90bz8gOnRvX2FyeVxuICAgICAgb3RoZXIgPSBvdGhlci50b19hcnkudG9fYVxuICAgIGVsc2VcbiAgICAgIHJldHVyblxuICAgIGVuZFxuXG4gICAgJXh7XG4gICAgICBpZiAoI3toYXNofSA9PT0gI3tvdGhlci5oYXNofSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvdW50ID0gTWF0aC5taW4oc2VsZi5sZW5ndGgsIG90aGVyLmxlbmd0aCk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICB2YXIgdG1wID0gI3tgc2VsZltpXWAgPD0+IGBvdGhlcltpXWB9O1xuXG4gICAgICAgIGlmICh0bXAgIT09IDApIHtcbiAgICAgICAgICByZXR1cm4gdG1wO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAje2BzZWxmLmxlbmd0aGAgPD0+IGBvdGhlci5sZW5ndGhgfTtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiA9PShvdGhlcilcbiAgICAleHtcbiAgICAgIHZhciByZWN1cnNlZCA9IHt9O1xuXG4gICAgICBmdW5jdGlvbiBfZXFlcShhcnJheSwgb3RoZXIpIHtcbiAgICAgICAgdmFyIGksIGxlbmd0aCwgYSwgYjtcblxuICAgICAgICBpZiAoYXJyYXkgPT09IG90aGVyKVxuICAgICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICAgIGlmICghb3RoZXIuJCRpc19hcnJheSkge1xuICAgICAgICAgIGlmICgkcmVzcG9uZF90byhvdGhlciwgJyR0b19hcnknKSkge1xuICAgICAgICAgICAgcmV0dXJuICN7YG90aGVyYCA9PSBgYXJyYXlgfTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhcnJheS4kJGNvbnN0cnVjdG9yICE9PSBBcnJheSlcbiAgICAgICAgICBhcnJheSA9ICN7YGFycmF5YC50b19hfTtcbiAgICAgICAgaWYgKG90aGVyLiQkY29uc3RydWN0b3IgIT09IEFycmF5KVxuICAgICAgICAgIG90aGVyID0gI3tgb3RoZXJgLnRvX2F9O1xuXG4gICAgICAgIGlmIChhcnJheS5sZW5ndGggIT09IG90aGVyLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlY3Vyc2VkWyN7YGFycmF5YC5vYmplY3RfaWR9XSA9IHRydWU7XG5cbiAgICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhID0gYXJyYXlbaV07XG4gICAgICAgICAgYiA9IG90aGVyW2ldO1xuICAgICAgICAgIGlmIChhLiQkaXNfYXJyYXkpIHtcbiAgICAgICAgICAgIGlmIChiLiQkaXNfYXJyYXkgJiYgYi5sZW5ndGggIT09IGEubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghcmVjdXJzZWQuaGFzT3duUHJvcGVydHkoI3tgYWAub2JqZWN0X2lkfSkpIHtcbiAgICAgICAgICAgICAgaWYgKCFfZXFlcShhLCBiKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoISN7YGFgID09IGBiYH0pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX2VxZXEoc2VsZiwgb3RoZXIpO1xuICAgIH1cbiAgZW5kXG5cbiAgJXh7XG4gICAgZnVuY3Rpb24gJGFycmF5X3NsaWNlX3JhbmdlKHNlbGYsIGluZGV4KSB7XG4gICAgICB2YXIgc2l6ZSA9IHNlbGYubGVuZ3RoLFxuICAgICAgICAgIGV4Y2x1ZGUsIGZyb20sIHRvLCByZXN1bHQ7XG5cbiAgICAgIGV4Y2x1ZGUgPSBpbmRleC5leGNsO1xuICAgICAgZnJvbSAgICA9IGluZGV4LmJlZ2luID09PSBuaWwgPyAwIDogJGNvZXJjZV90byhpbmRleC5iZWdpbiwgT3BhbC5JbnRlZ2VyLCAndG9faW50Jyk7XG4gICAgICB0byAgICAgID0gaW5kZXguZW5kID09PSBuaWwgPyAtMSA6ICRjb2VyY2VfdG8oaW5kZXguZW5kLCBPcGFsLkludGVnZXIsICd0b19pbnQnKTtcblxuICAgICAgaWYgKGZyb20gPCAwKSB7XG4gICAgICAgIGZyb20gKz0gc2l6ZTtcblxuICAgICAgICBpZiAoZnJvbSA8IDApIHtcbiAgICAgICAgICByZXR1cm4gbmlsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpbmRleC5leGNsX3JldiAmJiBpbmRleC5iZWdpbiAhPT0gbmlsKSB7XG4gICAgICAgIGZyb20gKz0gMTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZyb20gPiBzaXplKSB7XG4gICAgICAgIHJldHVybiBuaWw7XG4gICAgICB9XG5cbiAgICAgIGlmICh0byA8IDApIHtcbiAgICAgICAgdG8gKz0gc2l6ZTtcblxuICAgICAgICBpZiAodG8gPCAwKSB7XG4gICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghZXhjbHVkZSB8fCBpbmRleC5lbmQgPT09IG5pbCkge1xuICAgICAgICB0byArPSAxO1xuICAgICAgfVxuXG4gICAgICByZXN1bHQgPSBzZWxmLnNsaWNlKGZyb20sIHRvKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gJGFycmF5X3NsaWNlX2FyaXRobWV0aWNfc2VxKHNlbGYsIGluZGV4KSB7XG4gICAgICB2YXIgYXJyYXksIG91dCA9IFtdLCBpID0gMCwgcHNldWRvcmFuZ2U7XG5cbiAgICAgIGlmIChpbmRleC5zdGVwIDwgMCkge1xuICAgICAgICBwc2V1ZG9yYW5nZSA9IHtcbiAgICAgICAgICBiZWdpbjogaW5kZXgucmFuZ2UuZW5kLFxuICAgICAgICAgIGVuZDogaW5kZXgucmFuZ2UuYmVnaW4sXG4gICAgICAgICAgZXhjbDogZmFsc2UsXG4gICAgICAgICAgZXhjbF9yZXY6IGluZGV4LnJhbmdlLmV4Y2xcbiAgICAgICAgfTtcbiAgICAgICAgYXJyYXkgPSAkYXJyYXlfc2xpY2VfcmFuZ2Uoc2VsZiwgcHNldWRvcmFuZ2UpLiRyZXZlcnNlKCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgYXJyYXkgPSAkYXJyYXlfc2xpY2VfcmFuZ2Uoc2VsZiwgaW5kZXgucmFuZ2UpO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAoaSA8IGFycmF5Lmxlbmd0aCkge1xuICAgICAgICBvdXQucHVzaChhcnJheVtpXSk7XG4gICAgICAgIGkgKz0gTWF0aC5hYnMoaW5kZXguc3RlcCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gJGFycmF5X3NsaWNlX2luZGV4X2xlbmd0aChzZWxmLCBpbmRleCwgbGVuZ3RoKSB7XG4gICAgICB2YXIgc2l6ZSA9IHNlbGYubGVuZ3RoLFxuICAgICAgICAgIGV4Y2x1ZGUsIGZyb20sIHRvLCByZXN1bHQ7XG5cbiAgICAgIGluZGV4ID0gJGNvZXJjZV90byhpbmRleCwgT3BhbC5JbnRlZ2VyLCAndG9faW50Jyk7XG5cbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaW5kZXggKz0gc2l6ZTtcblxuICAgICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgICAgcmV0dXJuIG5pbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGluZGV4ID49IHNpemUgfHwgaW5kZXggPCAwKSB7XG4gICAgICAgICAgcmV0dXJuIG5pbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzZWxmW2luZGV4XTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBsZW5ndGggPSAkY29lcmNlX3RvKGxlbmd0aCwgT3BhbC5JbnRlZ2VyLCAndG9faW50Jyk7XG5cbiAgICAgICAgaWYgKGxlbmd0aCA8IDAgfHwgaW5kZXggPiBzaXplIHx8IGluZGV4IDwgMCkge1xuICAgICAgICAgIHJldHVybiBuaWw7XG4gICAgICAgIH1cblxuICAgICAgICByZXN1bHQgPSBzZWxmLnNsaWNlKGluZGV4LCBpbmRleCArIGxlbmd0aCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfVxuXG4gIGRlZiBbXShpbmRleCwgbGVuZ3RoID0gdW5kZWZpbmVkKVxuICAgICV4e1xuICAgICAgaWYgKGluZGV4LiQkaXNfcmFuZ2UpIHtcbiAgICAgICAgcmV0dXJuICRhcnJheV9zbGljZV9yYW5nZShzZWxmLCBpbmRleCk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChpbmRleC4kJGlzX2FyaXRobWV0aWNfc2VxKSB7XG4gICAgICAgIHJldHVybiAkYXJyYXlfc2xpY2VfYXJpdGhtZXRpY19zZXEoc2VsZiwgaW5kZXgpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJldHVybiAkYXJyYXlfc2xpY2VfaW5kZXhfbGVuZ3RoKHNlbGYsIGluZGV4LCBsZW5ndGgpO1xuICAgICAgfVxuICAgIH1cbiAgZW5kXG5cbiAgZGVmIFtdPShpbmRleCwgdmFsdWUsIGV4dHJhID0gdW5kZWZpbmVkKVxuICAgIGAkZGVueV9mcm96ZW5fYWNjZXNzKHNlbGYpYFxuXG4gICAgZGF0YSA9IG5pbFxuICAgICV4e1xuICAgICAgdmFyIGksIHNpemUgPSBzZWxmLmxlbmd0aDtcblxuICAgICAgaWYgKGluZGV4LiQkaXNfcmFuZ2UpIHtcbiAgICAgICAgaWYgKHZhbHVlLiQkaXNfYXJyYXkpXG4gICAgICAgICAgZGF0YSA9ICN7dmFsdWUudG9fYX07XG4gICAgICAgIGVsc2UgaWYgKCN7dmFsdWUucmVzcG9uZF90bz8gOnRvX2FyeX0pXG4gICAgICAgICAgZGF0YSA9ICN7dmFsdWUudG9fYXJ5LnRvX2F9O1xuICAgICAgICBlbHNlXG4gICAgICAgICAgZGF0YSA9IFt2YWx1ZV07XG5cbiAgICAgICAgdmFyIGV4Y2x1ZGUgPSBpbmRleC5leGNsLFxuICAgICAgICAgICAgZnJvbSAgICA9IGluZGV4LmJlZ2luID09PSBuaWwgPyAwIDogJGNvZXJjZV90byhpbmRleC5iZWdpbiwgT3BhbC5JbnRlZ2VyLCAndG9faW50JyksXG4gICAgICAgICAgICB0byAgICAgID0gaW5kZXguZW5kID09PSBuaWwgPyAtMSA6ICRjb2VyY2VfdG8oaW5kZXguZW5kLCBPcGFsLkludGVnZXIsICd0b19pbnQnKTtcblxuICAgICAgICBpZiAoZnJvbSA8IDApIHtcbiAgICAgICAgICBmcm9tICs9IHNpemU7XG5cbiAgICAgICAgICBpZiAoZnJvbSA8IDApIHtcbiAgICAgICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpSYW5nZUVycm9yLCBcIiN7aW5kZXguaW5zcGVjdH0gb3V0IG9mIHJhbmdlXCJ9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0byA8IDApIHtcbiAgICAgICAgICB0byArPSBzaXplO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFleGNsdWRlIHx8IGluZGV4LmVuZCA9PT0gbmlsKSB7XG4gICAgICAgICAgdG8gKz0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmcm9tID4gc2l6ZSkge1xuICAgICAgICAgIGZvciAoaSA9IHNpemU7IGkgPCBmcm9tOyBpKyspIHtcbiAgICAgICAgICAgIHNlbGZbaV0gPSBuaWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRvIDwgMCkge1xuICAgICAgICAgIHNlbGYuc3BsaWNlLmFwcGx5KHNlbGYsIFtmcm9tLCAwXS5jb25jYXQoZGF0YSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHNlbGYuc3BsaWNlLmFwcGx5KHNlbGYsIFtmcm9tLCB0byAtIGZyb21dLmNvbmNhdChkYXRhKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZXh0cmEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICN7bGVuZ3RoID0gMX1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsZW5ndGggPSB2YWx1ZTtcbiAgICAgICAgICB2YWx1ZSAgPSBleHRyYTtcblxuICAgICAgICAgIGlmICh2YWx1ZS4kJGlzX2FycmF5KVxuICAgICAgICAgICAgZGF0YSA9ICN7dmFsdWUudG9fYX07XG4gICAgICAgICAgZWxzZSBpZiAoI3t2YWx1ZS5yZXNwb25kX3RvPyA6dG9fYXJ5fSlcbiAgICAgICAgICAgIGRhdGEgPSAje3ZhbHVlLnRvX2FyeS50b19hfTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBkYXRhID0gW3ZhbHVlXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvbGQ7XG5cbiAgICAgICAgaW5kZXggID0gJGNvZXJjZV90byhpbmRleCwgI3s6OkludGVnZXJ9LCAndG9faW50Jyk7XG4gICAgICAgIGxlbmd0aCA9ICRjb2VyY2VfdG8obGVuZ3RoLCAjezo6SW50ZWdlcn0sICd0b19pbnQnKTtcblxuICAgICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgICAgb2xkICAgID0gaW5kZXg7XG4gICAgICAgICAgaW5kZXggKz0gc2l6ZTtcblxuICAgICAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpJbmRleEVycm9yLCBcImluZGV4ICN7YG9sZGB9IHRvbyBzbWFsbCBmb3IgYXJyYXk7IG1pbmltdW0gI3tgLXNlbGYubGVuZ3RoYH1cIn07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxlbmd0aCA8IDApIHtcbiAgICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6SW5kZXhFcnJvciwgXCJuZWdhdGl2ZSBsZW5ndGggKCN7bGVuZ3RofSlcIn1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbmRleCA+IHNpemUpIHtcbiAgICAgICAgICBmb3IgKGkgPSBzaXplOyBpIDwgaW5kZXg7IGkrKykge1xuICAgICAgICAgICAgc2VsZltpXSA9IG5pbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXh0cmEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHNlbGZbaW5kZXhdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgc2VsZi5zcGxpY2UuYXBwbHkoc2VsZiwgW2luZGV4LCBsZW5ndGhdLmNvbmNhdChkYXRhKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICBlbmRcblxuICBkZWYgYW55PyhwYXR0ZXJuID0gdW5kZWZpbmVkLCAmYmxvY2spXG4gICAgYGlmIChzZWxmLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGZhbHNlYFxuICAgIHN1cGVyXG4gIGVuZFxuXG4gIGRlZiBhc3NvYyhvYmplY3QpXG4gICAgJXh7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gc2VsZi5sZW5ndGgsIGl0ZW07IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaXRlbSA9IHNlbGZbaV0sIGl0ZW0ubGVuZ3RoICYmICN7YGl0ZW1bMF1gID09IG9iamVjdH0pIHtcbiAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmlsO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGF0KGluZGV4KVxuICAgICV4e1xuICAgICAgaW5kZXggPSAkY29lcmNlX3RvKGluZGV4LCAjezo6SW50ZWdlcn0sICd0b19pbnQnKVxuXG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIGluZGV4ICs9IHNlbGYubGVuZ3RoO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHNlbGYubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBuaWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmW2luZGV4XTtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBic2VhcmNoX2luZGV4KCZibG9jaylcbiAgICByZXR1cm4gZW51bV9mb3IgOmJzZWFyY2hfaW5kZXggdW5sZXNzIGJsb2NrX2dpdmVuP1xuXG4gICAgJXh7XG4gICAgICB2YXIgbWluID0gMCxcbiAgICAgICAgICBtYXggPSBzZWxmLmxlbmd0aCxcbiAgICAgICAgICBtaWQsXG4gICAgICAgICAgdmFsLFxuICAgICAgICAgIHJldCxcbiAgICAgICAgICBzbWFsbGVyID0gZmFsc2UsXG4gICAgICAgICAgc2F0aXNmaWVkID0gbmlsO1xuXG4gICAgICB3aGlsZSAobWluIDwgbWF4KSB7XG4gICAgICAgIG1pZCA9IG1pbiArIE1hdGguZmxvb3IoKG1heCAtIG1pbikgLyAyKTtcbiAgICAgICAgdmFsID0gc2VsZlttaWRdO1xuICAgICAgICByZXQgPSAkeWllbGQxKGJsb2NrLCB2YWwpO1xuXG4gICAgICAgIGlmIChyZXQgPT09IHRydWUpIHtcbiAgICAgICAgICBzYXRpc2ZpZWQgPSBtaWQ7XG4gICAgICAgICAgc21hbGxlciA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocmV0ID09PSBmYWxzZSB8fCByZXQgPT09IG5pbCkge1xuICAgICAgICAgIHNtYWxsZXIgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChyZXQuJCRpc19udW1iZXIpIHtcbiAgICAgICAgICBpZiAocmV0ID09PSAwKSB7IHJldHVybiBtaWQ7IH1cbiAgICAgICAgICBzbWFsbGVyID0gKHJldCA8IDApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpUeXBlRXJyb3IsIFwid3JvbmcgYXJndW1lbnQgdHlwZSAje2ByZXRgLmNsYXNzfSAobXVzdCBiZSBudW1lcmljLCB0cnVlLCBmYWxzZSBvciBuaWwpXCJ9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc21hbGxlcikgeyBtYXggPSBtaWQ7IH0gZWxzZSB7IG1pbiA9IG1pZCArIDE7IH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNhdGlzZmllZDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBic2VhcmNoKCZibG9jaylcbiAgICByZXR1cm4gZW51bV9mb3IgOmJzZWFyY2ggdW5sZXNzIGJsb2NrX2dpdmVuP1xuXG4gICAgaW5kZXggPSBic2VhcmNoX2luZGV4KCZibG9jaylcblxuICAgICV4e1xuICAgICAgaWYgKGluZGV4ICE9IG51bGwgJiYgaW5kZXguJCRpc19udW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIHNlbGZbaW5kZXhdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGN5Y2xlKG4gPSBuaWwsICZibG9jaylcbiAgICB1bmxlc3MgYmxvY2tfZ2l2ZW4/XG4gICAgICByZXR1cm4gZW51bV9mb3IoOmN5Y2xlLCBuKSBkb1xuICAgICAgICBpZiBuLm5pbD9cbiAgICAgICAgICA6OkZsb2F0OjpJTkZJTklUWVxuICAgICAgICBlbHNlXG4gICAgICAgICAgbiA9IDo6T3BhbC5jb2VyY2VfdG8hKG4sIDo6SW50ZWdlciwgOnRvX2ludClcbiAgICAgICAgICBuID4gMCA/IGVudW1lcmF0b3Jfc2l6ZSAqIG4gOiAwXG4gICAgICAgIGVuZFxuICAgICAgZW5kXG4gICAgZW5kXG5cbiAgICByZXR1cm4gaWYgZW1wdHk/IHx8IG4gPT0gMFxuXG4gICAgJXh7XG4gICAgICB2YXIgaSwgbGVuZ3RoLCB2YWx1ZTtcblxuICAgICAgaWYgKG4gPT09IG5pbCkge1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IHNlbGYubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhbHVlID0gJHlpZWxkMShibG9jaywgc2VsZltpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbiA9ICN7OjpPcGFsLmNvZXJjZV90byEobiwgOjpJbnRlZ2VyLCA6dG9faW50KX07XG4gICAgICAgIGlmIChuIDw9IDApIHtcbiAgICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlIChuID4gMCkge1xuICAgICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IHNlbGYubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhbHVlID0gJHlpZWxkMShibG9jaywgc2VsZltpXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbi0tO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2VsZlxuICBlbmRcblxuICBkZWYgY2xlYXJcbiAgICBgJGRlbnlfZnJvemVuX2FjY2VzcyhzZWxmKWBcblxuICAgIGBzZWxmLnNwbGljZSgwLCBzZWxmLmxlbmd0aClgXG5cbiAgICBzZWxmXG4gIGVuZFxuXG4gIGRlZiBjb3VudChvYmplY3QgPSB1bmRlZmluZWQsICZibG9jaylcbiAgICBpZiBgb2JqZWN0ICE9PSB1bmRlZmluZWRgIHx8IGJsb2NrXG4gICAgICBzdXBlclxuICAgIGVsc2VcbiAgICAgIHNpemVcbiAgICBlbmRcbiAgZW5kXG5cbiAgZGVmIGluaXRpYWxpemVfY29weShvdGhlcilcbiAgICByZXBsYWNlIG90aGVyXG4gIGVuZFxuXG4gIGRlZiBjb2xsZWN0KCZibG9jaylcbiAgICByZXR1cm4gZW51bV9mb3IoOmNvbGxlY3QpIHsgc2l6ZSB9IHVubGVzcyBibG9ja19naXZlbj9cblxuICAgICV4e1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gc2VsZi5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdmFsdWUgPSAkeWllbGQxKGJsb2NrLCBzZWxmW2ldKTtcbiAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGNvbGxlY3QhKCZibG9jaylcbiAgICByZXR1cm4gZW51bV9mb3IoOmNvbGxlY3QhKSB7IHNpemUgfSB1bmxlc3MgYmxvY2tfZ2l2ZW4/XG5cbiAgICAleHtcbiAgICAgICRkZW55X2Zyb3plbl9hY2Nlc3Moc2VsZik7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBzZWxmLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9ICR5aWVsZDEoYmxvY2ssIHNlbGZbaV0pO1xuICAgICAgICBzZWxmW2ldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2VsZlxuICBlbmRcblxuICAleHtcbiAgICBmdW5jdGlvbiBiaW5vbWlhbF9jb2VmZmljaWVudChuLCBrKSB7XG4gICAgICBpZiAobiA9PT0gayB8fCBrID09PSAwKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuXG4gICAgICBpZiAoayA+IDAgJiYgbiA+IGspIHtcbiAgICAgICAgcmV0dXJuIGJpbm9taWFsX2NvZWZmaWNpZW50KG4gLSAxLCBrIC0gMSkgKyBiaW5vbWlhbF9jb2VmZmljaWVudChuIC0gMSwgayk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgfVxuXG4gIGRlZiBjb21iaW5hdGlvbihuKVxuICAgIG51bSA9IDo6T3BhbC5jb2VyY2VfdG8hIG4sIDo6SW50ZWdlciwgOnRvX2ludFxuICAgIHJldHVybiBlbnVtX2Zvcig6Y29tYmluYXRpb24sIG51bSkgeyBgYmlub21pYWxfY29lZmZpY2llbnQoI3tzZWxmfS5sZW5ndGgsIG51bSlgIH0gdW5sZXNzIGJsb2NrX2dpdmVuP1xuXG4gICAgJXh7XG4gICAgICB2YXIgaSwgbGVuZ3RoLCBzdGFjaywgY2hvc2VuLCBsZXYsIGRvbmUsIG5leHQ7XG5cbiAgICAgIGlmIChudW0gPT09IDApIHtcbiAgICAgICAgI3t5aWVsZCBbXX1cbiAgICAgIH0gZWxzZSBpZiAobnVtID09PSAxKSB7XG4gICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IHNlbGYubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAje3lpZWxkIGBbc2VsZltpXV1gfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChudW0gPT09IHNlbGYubGVuZ3RoKSB7XG4gICAgICAgICN7eWllbGQgYHNlbGYuc2xpY2UoKWB9XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChudW0gPj0gMCAmJiBudW0gPCBzZWxmLmxlbmd0aCkge1xuICAgICAgICBzdGFjayA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDw9IG51bSArIDE7IGkrKykge1xuICAgICAgICAgIHN0YWNrLnB1c2goMCk7XG4gICAgICAgIH1cblxuICAgICAgICBjaG9zZW4gPSBbXTtcbiAgICAgICAgbGV2ID0gMDtcbiAgICAgICAgZG9uZSA9IGZhbHNlO1xuICAgICAgICBzdGFja1swXSA9IC0xO1xuXG4gICAgICAgIHdoaWxlICghZG9uZSkge1xuICAgICAgICAgIGNob3NlbltsZXZdID0gc2VsZltzdGFja1tsZXYrMV1dO1xuICAgICAgICAgIHdoaWxlIChsZXYgPCBudW0gLSAxKSB7XG4gICAgICAgICAgICBsZXYrKztcbiAgICAgICAgICAgIG5leHQgPSBzdGFja1tsZXYrMV0gPSBzdGFja1tsZXZdICsgMTtcbiAgICAgICAgICAgIGNob3NlbltsZXZdID0gc2VsZltuZXh0XTtcbiAgICAgICAgICB9XG4gICAgICAgICAgI3sgeWllbGQgYGNob3Nlbi5zbGljZSgpYCB9XG4gICAgICAgICAgbGV2Kys7XG4gICAgICAgICAgZG8ge1xuICAgICAgICAgICAgZG9uZSA9IChsZXYgPT09IDApO1xuICAgICAgICAgICAgc3RhY2tbbGV2XSsrO1xuICAgICAgICAgICAgbGV2LS07XG4gICAgICAgICAgfSB3aGlsZSAoIHN0YWNrW2xldisxXSArIG51bSA9PT0gc2VsZi5sZW5ndGggKyBsZXYgKyAxICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgc2VsZlxuICBlbmRcblxuICBkZWYgcmVwZWF0ZWRfY29tYmluYXRpb24obilcbiAgICBudW0gPSA6Ok9wYWwuY29lcmNlX3RvISBuLCA6OkludGVnZXIsIDp0b19pbnRcblxuICAgIHVubGVzcyBibG9ja19naXZlbj9cbiAgICAgIHJldHVybiBlbnVtX2Zvcig6cmVwZWF0ZWRfY29tYmluYXRpb24sIG51bSkgeyBgYmlub21pYWxfY29lZmZpY2llbnQoc2VsZi5sZW5ndGggKyBudW0gLSAxLCBudW0pYCB9XG4gICAgZW5kXG5cbiAgICAleHtcbiAgICAgIGZ1bmN0aW9uIGl0ZXJhdGUobWF4LCBmcm9tLCBidWZmZXIsIHNlbGYpIHtcbiAgICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggPT0gbWF4KSB7XG4gICAgICAgICAgdmFyIGNvcHkgPSBidWZmZXIuc2xpY2UoKTtcbiAgICAgICAgICAje3lpZWxkIGBjb3B5YH1cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IGZyb207IGkgPCBzZWxmLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgYnVmZmVyLnB1c2goc2VsZltpXSk7XG4gICAgICAgICAgaXRlcmF0ZShtYXgsIGksIGJ1ZmZlciwgc2VsZik7XG4gICAgICAgICAgYnVmZmVyLnBvcCgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChudW0gPj0gMCkge1xuICAgICAgICBpdGVyYXRlKG51bSwgMCwgW10sIHNlbGYpO1xuICAgICAgfVxuICAgIH1cbiAgICBzZWxmXG4gIGVuZFxuXG4gIGRlZiBjb21wYWN0XG4gICAgJXh7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBzZWxmLmxlbmd0aCwgaXRlbTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICgoaXRlbSA9IHNlbGZbaV0pICE9PSBuaWwpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChpdGVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGNvbXBhY3QhXG4gICAgJXh7XG4gICAgICAkZGVueV9mcm96ZW5fYWNjZXNzKHNlbGYpO1xuXG4gICAgICB2YXIgb3JpZ2luYWwgPSBzZWxmLmxlbmd0aDtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHNlbGYubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHNlbGZbaV0gPT09IG5pbCkge1xuICAgICAgICAgIHNlbGYuc3BsaWNlKGksIDEpO1xuXG4gICAgICAgICAgbGVuZ3RoLS07XG4gICAgICAgICAgaS0tO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmLmxlbmd0aCA9PT0gb3JpZ2luYWwgPyBuaWwgOiBzZWxmO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGNvbmNhdCgqb3RoZXJzKVxuICAgIGAkZGVueV9mcm96ZW5fYWNjZXNzKHNlbGYpYFxuXG4gICAgb3RoZXJzID0gb3RoZXJzLm1hcCBkbyB8b3RoZXJ8XG4gICAgICBvdGhlciA9IGlmIDo6QXJyYXkgPT09IG90aGVyXG4gICAgICAgICAgICAgICAgb3RoZXIudG9fYVxuICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgYCRjb2VyY2VfdG8ob3RoZXIsICN7OjpBcnJheX0sICd0b19hcnknKWAudG9fYVxuICAgICAgICAgICAgICBlbmRcblxuICAgICAgaWYgb3RoZXIuZXF1YWw/KHNlbGYpXG4gICAgICAgIG90aGVyID0gb3RoZXIuZHVwXG4gICAgICBlbmRcblxuICAgICAgb3RoZXJcbiAgICBlbmRcblxuICAgIG90aGVycy5lYWNoIGRvIHxvdGhlcnxcbiAgICAgICV4e1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gb3RoZXIubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBzZWxmLnB1c2gob3RoZXJbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgZW5kXG5cbiAgICBzZWxmXG4gIGVuZFxuXG4gIGRlZiBkZWxldGUob2JqZWN0KVxuICAgICV4e1xuICAgICAgdmFyIG9yaWdpbmFsID0gc2VsZi5sZW5ndGg7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBvcmlnaW5hbDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICgje2BzZWxmW2ldYCA9PSBvYmplY3R9KSB7XG4gICAgICAgICAgJGRlbnlfZnJvemVuX2FjY2VzcyhzZWxmKTtcblxuICAgICAgICAgIHNlbGYuc3BsaWNlKGksIDEpO1xuXG4gICAgICAgICAgbGVuZ3RoLS07XG4gICAgICAgICAgaS0tO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxmLmxlbmd0aCA9PT0gb3JpZ2luYWwpIHtcbiAgICAgICAgaWYgKCN7YmxvY2tfZ2l2ZW4/fSkge1xuICAgICAgICAgIHJldHVybiAje3lpZWxkfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmlsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBkZWxldGVfYXQoaW5kZXgpXG4gICAgJXh7XG4gICAgICAkZGVueV9mcm96ZW5fYWNjZXNzKHNlbGYpO1xuXG4gICAgICBpbmRleCA9ICRjb2VyY2VfdG8oaW5kZXgsICN7OjpJbnRlZ2VyfSwgJ3RvX2ludCcpO1xuXG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIGluZGV4ICs9IHNlbGYubGVuZ3RoO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHNlbGYubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBuaWw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZXN1bHQgPSBzZWxmW2luZGV4XTtcblxuICAgICAgc2VsZi5zcGxpY2UoaW5kZXgsIDEpO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGRlbGV0ZV9pZigmYmxvY2spXG4gICAgcmV0dXJuIGVudW1fZm9yKDpkZWxldGVfaWYpIHsgc2l6ZSB9IHVubGVzcyBibG9ja19naXZlbj9cbiAgICAleHtcbiAgICAgICRkZW55X2Zyb3plbl9hY2Nlc3Moc2VsZik7XG5cbiAgICAgIGZpbHRlcklmKHNlbGYsICRmYWxzeSwgYmxvY2spXG4gICAgfVxuICAgIHNlbGZcbiAgZW5kXG5cbiAgZGVmIGRpZmZlcmVuY2UoKmFycmF5cylcbiAgICBhcnJheXMucmVkdWNlKHRvX2EuZHVwKSB7IHxhLCBifCBhIC0gYiB9XG4gIGVuZFxuXG4gIGRlZiBkaWcoaWR4LCAqaWR4cylcbiAgICBpdGVtID0gc2VsZltpZHhdXG5cbiAgICAleHtcbiAgICAgIGlmIChpdGVtID09PSBuaWwgfHwgaWR4cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdW5sZXNzIGl0ZW0ucmVzcG9uZF90bz8oOmRpZylcbiAgICAgIDo6S2VybmVsLnJhaXNlIDo6VHlwZUVycm9yLCBcIiN7aXRlbS5jbGFzc30gZG9lcyBub3QgaGF2ZSAjZGlnIG1ldGhvZFwiXG4gICAgZW5kXG5cbiAgICBpdGVtLmRpZygqaWR4cylcbiAgZW5kXG5cbiAgZGVmIGRyb3AobnVtYmVyKVxuICAgICV4e1xuICAgICAgbnVtYmVyID0gJGNvZXJjZV90byhudW1iZXIsICN7OjpJbnRlZ2VyfSwgJ3RvX2ludCcpO1xuXG4gICAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvcn1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGYuc2xpY2UobnVtYmVyKTtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBkdXBcbiAgICAleHtcbiAgICAgIGlmIChzZWxmLiQkY2xhc3MgPT09IE9wYWwuQXJyYXkgJiZcbiAgICAgICAgICBzZWxmLiQkY2xhc3MuJGFsbG9jYXRlLiQkcHJpc3RpbmUgJiZcbiAgICAgICAgICBzZWxmLiRjb3B5X2luc3RhbmNlX3ZhcmlhYmxlcy4kJHByaXN0aW5lICYmXG4gICAgICAgICAgc2VsZi4kaW5pdGlhbGl6ZV9kdXAuJCRwcmlzdGluZSkge1xuICAgICAgICByZXR1cm4gc2VsZi5zbGljZSgwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzdXBlclxuICBlbmRcblxuICBkZWYgZWFjaCgmYmxvY2spXG4gICAgcmV0dXJuIGVudW1fZm9yKDplYWNoKSB7IHNpemUgfSB1bmxlc3MgYmxvY2tfZ2l2ZW4/XG5cbiAgICAleHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBzZWxmLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9ICR5aWVsZDEoYmxvY2ssIHNlbGZbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNlbGZcbiAgZW5kXG5cbiAgZGVmIGVhY2hfaW5kZXgoJmJsb2NrKVxuICAgIHJldHVybiBlbnVtX2Zvcig6ZWFjaF9pbmRleCkgeyBzaXplIH0gdW5sZXNzIGJsb2NrX2dpdmVuP1xuXG4gICAgJXh7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gc2VsZi5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdmFsdWUgPSAkeWllbGQxKGJsb2NrLCBpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzZWxmXG4gIGVuZFxuXG4gIGRlZiBlbXB0eT9cbiAgICBgc2VsZi5sZW5ndGggPT09IDBgXG4gIGVuZFxuXG4gIGRlZiBlcWw/KG90aGVyKVxuICAgICV4e1xuICAgICAgdmFyIHJlY3Vyc2VkID0ge307XG5cbiAgICAgIGZ1bmN0aW9uIF9lcWwoYXJyYXksIG90aGVyKSB7XG4gICAgICAgIHZhciBpLCBsZW5ndGgsIGEsIGI7XG5cbiAgICAgICAgaWYgKCFvdGhlci4kJGlzX2FycmF5KSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgb3RoZXIgPSAje290aGVyLnRvX2F9O1xuXG4gICAgICAgIGlmIChhcnJheS5sZW5ndGggIT09IG90aGVyLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlY3Vyc2VkWyN7YGFycmF5YC5vYmplY3RfaWR9XSA9IHRydWU7XG5cbiAgICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhID0gYXJyYXlbaV07XG4gICAgICAgICAgYiA9IG90aGVyW2ldO1xuICAgICAgICAgIGlmIChhLiQkaXNfYXJyYXkpIHtcbiAgICAgICAgICAgIGlmIChiLiQkaXNfYXJyYXkgJiYgYi5sZW5ndGggIT09IGEubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghcmVjdXJzZWQuaGFzT3duUHJvcGVydHkoI3tgYWAub2JqZWN0X2lkfSkpIHtcbiAgICAgICAgICAgICAgaWYgKCFfZXFsKGEsIGIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghI3tgYWAuZXFsPyhgYmApfSkge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfZXFsKHNlbGYsIG90aGVyKTtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBmZXRjaChpbmRleCwgZGVmYXVsdHMgPSB1bmRlZmluZWQsICZibG9jaylcbiAgICAleHtcbiAgICAgIHZhciBvcmlnaW5hbCA9IGluZGV4O1xuXG4gICAgICBpbmRleCA9ICRjb2VyY2VfdG8oaW5kZXgsICN7OjpJbnRlZ2VyfSwgJ3RvX2ludCcpO1xuXG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIGluZGV4ICs9IHNlbGYubGVuZ3RoO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8IHNlbGYubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzZWxmW2luZGV4XTtcbiAgICAgIH1cblxuICAgICAgaWYgKGJsb2NrICE9PSBuaWwgJiYgZGVmYXVsdHMgIT0gbnVsbCkge1xuICAgICAgICAje3dhcm4oJ3dhcm5pbmc6IGJsb2NrIHN1cGVyc2VkZXMgZGVmYXVsdCB2YWx1ZSBhcmd1bWVudCcpfVxuICAgICAgfVxuXG4gICAgICBpZiAoYmxvY2sgIT09IG5pbCkge1xuICAgICAgICByZXR1cm4gYmxvY2sob3JpZ2luYWwpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGVmYXVsdHMgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZGVmYXVsdHM7XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxmLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6SW5kZXhFcnJvciwgXCJpbmRleCAje2BvcmlnaW5hbGB9IG91dHNpZGUgb2YgYXJyYXkgYm91bmRzOiAwLi4uMFwifVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpJbmRleEVycm9yLCBcImluZGV4ICN7YG9yaWdpbmFsYH0gb3V0c2lkZSBvZiBhcnJheSBib3VuZHM6IC0je2BzZWxmLmxlbmd0aGB9Li4uI3tgc2VsZi5sZW5ndGhgfVwifTtcbiAgICAgIH1cbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBmaWxsKCphcmdzLCAmYmxvY2spXG4gICAgJXh7XG4gICAgICAkZGVueV9mcm96ZW5fYWNjZXNzKHNlbGYpO1xuXG4gICAgICB2YXIgaSwgbGVuZ3RoLCB2YWx1ZTtcbiAgICB9XG5cbiAgICBpZiBibG9ja1xuICAgICAgaWYgYGFyZ3MubGVuZ3RoID4gMmBcbiAgICAgICAgOjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCBcIndyb25nIG51bWJlciBvZiBhcmd1bWVudHMgKCN7YXJncy5sZW5ndGh9IGZvciAwLi4yKVwiXG4gICAgICBlbmRcblxuICAgICAgb25lLCB0d28gPSBhcmdzXG4gICAgZWxzZVxuICAgICAgaWYgYGFyZ3MubGVuZ3RoID09IDBgXG4gICAgICAgIDo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgJ3dyb25nIG51bWJlciBvZiBhcmd1bWVudHMgKDAgZm9yIDEuLjMpJ1xuICAgICAgZWxzaWYgYGFyZ3MubGVuZ3RoID4gM2BcbiAgICAgICAgOjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCBcIndyb25nIG51bWJlciBvZiBhcmd1bWVudHMgKCN7YXJncy5sZW5ndGh9IGZvciAxLi4zKVwiXG4gICAgICBlbmRcblxuICAgICAgb2JqLCBvbmUsIHR3byA9IGFyZ3NcbiAgICBlbmRcblxuICAgIGlmIDo6UmFuZ2UgPT09IG9uZVxuICAgICAgOjpLZXJuZWwucmFpc2UgOjpUeXBlRXJyb3IsICdsZW5ndGggaW52YWxpZCB3aXRoIHJhbmdlJyBpZiB0d29cblxuICAgICAgbGVmdCAgID0gYG9uZS5iZWdpbiA9PT0gbmlsID8gMCA6ICRjb2VyY2VfdG8ob25lLmJlZ2luLCAjezo6SW50ZWdlcn0sICd0b19pbnQnKWBcbiAgICAgIGBsZWZ0ICs9IHRoaXMubGVuZ3RoYCBpZiBgbGVmdCA8IDBgXG4gICAgICA6Oktlcm5lbC5yYWlzZSA6OlJhbmdlRXJyb3IsIFwiI3tvbmUuaW5zcGVjdH0gb3V0IG9mIHJhbmdlXCIgaWYgYGxlZnQgPCAwYFxuXG4gICAgICByaWdodCA9IGBvbmUuZW5kID09PSBuaWwgPyAtMSA6ICRjb2VyY2VfdG8ob25lLmVuZCwgI3s6OkludGVnZXJ9LCAndG9faW50JylgXG4gICAgICBgcmlnaHQgKz0gdGhpcy5sZW5ndGhgIGlmIGByaWdodCA8IDBgXG4gICAgICBgcmlnaHQgKz0gMWAgdW5sZXNzIG9uZS5leGNsdWRlX2VuZD9cblxuICAgICAgcmV0dXJuIHNlbGYgaWYgYHJpZ2h0IDw9IGxlZnRgXG4gICAgZWxzaWYgb25lXG4gICAgICBsZWZ0ICAgPSBgJGNvZXJjZV90byhvbmUsICN7OjpJbnRlZ2VyfSwgJ3RvX2ludCcpYFxuICAgICAgYGxlZnQgKz0gdGhpcy5sZW5ndGhgIGlmIGBsZWZ0IDwgMGBcbiAgICAgIGxlZnQgICA9IDAgaWYgYGxlZnQgPCAwYFxuXG4gICAgICBpZiB0d29cbiAgICAgICAgcmlnaHQgPSBgJGNvZXJjZV90byh0d28sICN7OjpJbnRlZ2VyfSwgJ3RvX2ludCcpYFxuXG4gICAgICAgIHJldHVybiBzZWxmIGlmIGByaWdodCA9PSAwYFxuXG4gICAgICAgIGByaWdodCArPSBsZWZ0YFxuICAgICAgZWxzZVxuICAgICAgICByaWdodCA9IGB0aGlzLmxlbmd0aGBcbiAgICAgIGVuZFxuICAgIGVsc2VcbiAgICAgIGxlZnQgID0gMFxuICAgICAgcmlnaHQgPSBgdGhpcy5sZW5ndGhgXG4gICAgZW5kXG5cbiAgICBpZiBgbGVmdCA+IHRoaXMubGVuZ3RoYFxuICAgICAgJXh7XG4gICAgICAgIGZvciAoaSA9IHRoaXMubGVuZ3RoOyBpIDwgcmlnaHQ7IGkrKykge1xuICAgICAgICAgIHNlbGZbaV0gPSBuaWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBlbmRcblxuICAgIGlmIGByaWdodCA+IHRoaXMubGVuZ3RoYFxuICAgICAgYHRoaXMubGVuZ3RoID0gcmlnaHRgXG4gICAgZW5kXG5cbiAgICBpZiBibG9ja1xuICAgICAgJXh7XG4gICAgICAgIGZvciAobGVuZ3RoID0gdGhpcy5sZW5ndGg7IGxlZnQgPCByaWdodDsgbGVmdCsrKSB7XG4gICAgICAgICAgdmFsdWUgPSBibG9jayhsZWZ0KTtcbiAgICAgICAgICBzZWxmW2xlZnRdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBlbHNlXG4gICAgICAleHtcbiAgICAgICAgZm9yIChsZW5ndGggPSB0aGlzLmxlbmd0aDsgbGVmdCA8IHJpZ2h0OyBsZWZ0KyspIHtcbiAgICAgICAgICBzZWxmW2xlZnRdID0gI3tvYmp9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgZW5kXG5cbiAgICBzZWxmXG4gIGVuZFxuXG4gIGRlZiBmaXJzdChjb3VudCA9IHVuZGVmaW5lZClcbiAgICAleHtcbiAgICAgIGlmIChjb3VudCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBzZWxmLmxlbmd0aCA9PT0gMCA/IG5pbCA6IHNlbGZbMF07XG4gICAgICB9XG5cbiAgICAgIGNvdW50ID0gJGNvZXJjZV90byhjb3VudCwgI3s6OkludGVnZXJ9LCAndG9faW50Jyk7XG5cbiAgICAgIGlmIChjb3VudCA8IDApIHtcbiAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsICduZWdhdGl2ZSBhcnJheSBzaXplJ307XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmLnNsaWNlKDAsIGNvdW50KTtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBmbGF0dGVuKGxldmVsID0gdW5kZWZpbmVkKVxuICAgICV4e1xuICAgICAgZnVuY3Rpb24gX2ZsYXR0ZW4oYXJyYXksIGxldmVsKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBbXSxcbiAgICAgICAgICAgIGksIGxlbmd0aCxcbiAgICAgICAgICAgIGl0ZW0sIGFyeTtcblxuICAgICAgICBhcnJheSA9ICN7YGFycmF5YC50b19hfTtcblxuICAgICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgIGl0ZW0gPSBhcnJheVtpXTtcblxuICAgICAgICAgIGlmICghJHJlc3BvbmRfdG8oaXRlbSwgJyR0b19hcnknLCB0cnVlKSkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goaXRlbSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhcnkgPSAje2BpdGVtYC50b19hcnl9O1xuXG4gICAgICAgICAgaWYgKGFyeSA9PT0gbmlsKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChpdGVtKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghYXJ5LiQkaXNfYXJyYXkpIHtcbiAgICAgICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpUeXBlRXJyb3J9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChhcnkgPT09IHNlbGYpIHtcbiAgICAgICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzd2l0Y2ggKGxldmVsKSB7XG4gICAgICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgICAgICByZXN1bHQgPSByZXN1bHQuY29uY2F0KF9mbGF0dGVuKGFyeSkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgcmVzdWx0LnB1c2goYXJ5KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXN1bHQucHVzaC5hcHBseShyZXN1bHQsIF9mbGF0dGVuKGFyeSwgbGV2ZWwgLSAxKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChsZXZlbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxldmVsID0gJGNvZXJjZV90byhsZXZlbCwgI3s6OkludGVnZXJ9LCAndG9faW50Jyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfZmxhdHRlbihzZWxmLCBsZXZlbCk7XG4gICAgfVxuICBlbmRcblxuICBkZWYgZmxhdHRlbiEobGV2ZWwgPSB1bmRlZmluZWQpXG4gICAgJXh7XG4gICAgICAkZGVueV9mcm96ZW5fYWNjZXNzKHNlbGYpO1xuXG4gICAgICB2YXIgZmxhdHRlbmVkID0gI3tmbGF0dGVuIGxldmVsfTtcblxuICAgICAgaWYgKHNlbGYubGVuZ3RoID09IGZsYXR0ZW5lZC5sZW5ndGgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHNlbGYubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoc2VsZltpXSAhPT0gZmxhdHRlbmVkW2ldKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaSA9PSBsZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gbmlsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICN7cmVwbGFjZSBgZmxhdHRlbmVkYH07XG4gICAgfVxuXG4gICAgc2VsZlxuICBlbmRcblxuICBkZWYgZnJlZXplXG4gICAgcmV0dXJuIHNlbGYgaWYgZnJvemVuP1xuXG4gICAgYCRmcmVlemUoc2VsZilgXG4gIGVuZFxuXG4gIGRlZiBoYXNoXG4gICAgJXh7XG4gICAgICB2YXIgdG9wID0gKCRoYXNoX2lkcyA9PT0gdW5kZWZpbmVkKSxcbiAgICAgICAgICByZXN1bHQgPSBbJ0EnXSxcbiAgICAgICAgICBoYXNoX2lkID0gc2VsZi4kb2JqZWN0X2lkKCksXG4gICAgICAgICAgaXRlbSwgaSwga2V5O1xuXG4gICAgICB0cnkge1xuICAgICAgICBpZiAodG9wKSB7XG4gICAgICAgICAgJGhhc2hfaWRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJldHVybiBlYXJseSBmb3IgcmVjdXJzaXZlIHN0cnVjdHVyZXNcbiAgICAgICAgaWYgKCRoYXNoX2lkc1toYXNoX2lkXSkge1xuICAgICAgICAgIHJldHVybiAnc2VsZic7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGtleSBpbiAkaGFzaF9pZHMpIHtcbiAgICAgICAgICBpdGVtID0gJGhhc2hfaWRzW2tleV07XG4gICAgICAgICAgaWYgKCN7ZXFsPyhgaXRlbWApfSkge1xuICAgICAgICAgICAgcmV0dXJuICdzZWxmJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAkaGFzaF9pZHNbaGFzaF9pZF0gPSBzZWxmO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBzZWxmLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaXRlbSA9IHNlbGZbaV07XG4gICAgICAgICAgcmVzdWx0LnB1c2goaXRlbS4kaGFzaCgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQuam9pbignLCcpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKHRvcCkge1xuICAgICAgICAgICRoYXNoX2lkcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGluY2x1ZGU/KG1lbWJlcilcbiAgICAleHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBzZWxmLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICgje2BzZWxmW2ldYCA9PSBtZW1iZXJ9KSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGluZGV4KG9iamVjdCA9IHVuZGVmaW5lZCwgJmJsb2NrKVxuICAgICV4e1xuICAgICAgdmFyIGksIGxlbmd0aCwgdmFsdWU7XG5cbiAgICAgIGlmIChvYmplY3QgIT0gbnVsbCAmJiBibG9jayAhPT0gbmlsKSB7XG4gICAgICAgICN7d2Fybignd2FybmluZzogZ2l2ZW4gYmxvY2sgbm90IHVzZWQnKX1cbiAgICAgIH1cblxuICAgICAgaWYgKG9iamVjdCAhPSBudWxsKSB7XG4gICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IHNlbGYubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoI3tgc2VsZltpXWAgPT0gb2JqZWN0fSkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChibG9jayAhPT0gbmlsKSB7XG4gICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IHNlbGYubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YWx1ZSA9IGJsb2NrKHNlbGZbaV0pO1xuXG4gICAgICAgICAgaWYgKHZhbHVlICE9PSBmYWxzZSAmJiB2YWx1ZSAhPT0gbmlsKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gI3tlbnVtX2ZvciA6aW5kZXh9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmlsO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGluc2VydChpbmRleCwgKm9iamVjdHMpXG4gICAgJXh7XG4gICAgICAkZGVueV9mcm96ZW5fYWNjZXNzKHNlbGYpO1xuXG4gICAgICBpbmRleCA9ICRjb2VyY2VfdG8oaW5kZXgsICN7OjpJbnRlZ2VyfSwgJ3RvX2ludCcpO1xuXG4gICAgICBpZiAob2JqZWN0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgICBpbmRleCArPSBzZWxmLmxlbmd0aCArIDE7XG5cbiAgICAgICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgICAgICAjeyA6Oktlcm5lbC5yYWlzZSA6OkluZGV4RXJyb3IsIFwiI3tpbmRleH0gaXMgb3V0IG9mIGJvdW5kc1wiIH07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpbmRleCA+IHNlbGYubGVuZ3RoKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IHNlbGYubGVuZ3RoOyBpIDwgaW5kZXg7IGkrKykge1xuICAgICAgICAgICAgc2VsZi5wdXNoKG5pbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5zcGxpY2UuYXBwbHkoc2VsZiwgW2luZGV4LCAwXS5jb25jYXQob2JqZWN0cykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNlbGZcbiAgZW5kXG5cbiAgYHZhciBpbnNwZWN0X3N0YWNrID0gW11gXG5cbiAgZGVmIGluc3BlY3RcbiAgICAleHtcbiAgICAgIHZhciByZXN1bHQgPSBbXSxcbiAgICAgIGlkID0gI3tfX2lkX199LFxuICAgICAgcHVzaGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBiZWdpblxuICAgICAgJXh7XG4gICAgICAgIGlmIChpbnNwZWN0X3N0YWNrLmluZGV4T2YoaWQpICE9PSAtMSkge1xuICAgICAgICAgIHB1c2hlZCA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiAnWy4uLl0nO1xuICAgICAgICB9XG4gICAgICAgIGluc3BlY3Rfc3RhY2sucHVzaChpZClcblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gc2VsZi5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBpdGVtID0gI3tzZWxmW2BpYF19O1xuXG4gICAgICAgICAgcmVzdWx0LnB1c2goI3tPcGFsLmluc3BlY3QoYGl0ZW1gKX0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICdbJyArIHJlc3VsdC5qb2luKCcsICcpICsgJ10nO1xuICAgICAgfVxuICAgICAgbmlsXG4gICAgZW5zdXJlXG4gICAgICBgaWYgKHB1c2hlZCkgaW5zcGVjdF9zdGFjay5wb3AoKWBcbiAgICBlbmRcbiAgZW5kXG5cbiAgZGVmIGludGVyc2VjdGlvbigqYXJyYXlzKVxuICAgIGFycmF5cy5yZWR1Y2UodG9fYS5kdXApIHsgfGEsIGJ8IGEgJiBiIH1cbiAgZW5kXG5cbiAgZGVmIGludGVyc2VjdD8ob3RoZXIpXG4gICAgIWludGVyc2VjdGlvbihvdGhlcikuZW1wdHk/XG4gIGVuZFxuXG4gIGRlZiBqb2luKHNlcCA9IG5pbClcbiAgICByZXR1cm4gJycgaWYgYHNlbGYubGVuZ3RoID09PSAwYFxuXG4gICAgaWYgYHNlcCA9PT0gbmlsYFxuICAgICAgc2VwID0gJCxcbiAgICBlbmRcblxuICAgICV4e1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgdmFyIGksIGxlbmd0aCwgaXRlbSwgdG1wO1xuXG4gICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBzZWxmLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGl0ZW0gPSBzZWxmW2ldO1xuXG4gICAgICAgIGlmICgkcmVzcG9uZF90byhpdGVtLCAnJHRvX3N0cicpKSB7XG4gICAgICAgICAgdG1wID0gI3tgaXRlbWAudG9fc3RyfTtcblxuICAgICAgICAgIGlmICh0bXAgIT09IG5pbCkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goI3tgdG1wYC50b19zfSk7XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkcmVzcG9uZF90byhpdGVtLCAnJHRvX2FyeScpKSB7XG4gICAgICAgICAgdG1wID0gI3tgaXRlbWAudG9fYXJ5fTtcblxuICAgICAgICAgIGlmICh0bXAgPT09IHNlbGYpIHtcbiAgICAgICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodG1wICE9PSBuaWwpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKCN7YHRtcGAuam9pbihzZXApfSk7XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkcmVzcG9uZF90byhpdGVtLCAnJHRvX3MnKSkge1xuICAgICAgICAgIHRtcCA9ICN7YGl0ZW1gLnRvX3N9O1xuXG4gICAgICAgICAgaWYgKHRtcCAhPT0gbmlsKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh0bXApO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6Tm9NZXRob2RFcnJvci5uZXcoXCIje09wYWwuaW5zcGVjdChpdGVtKX0gZG9lc24ndCByZXNwb25kIHRvICN0b19zdHIsICN0b19hcnkgb3IgI3RvX3NcIiwgJ3RvX3N0cicpfTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNlcCA9PT0gbmlsKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQuam9pbignJyk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5qb2luKCN7OjpPcGFsLmNvZXJjZV90byEoc2VwLCA6OlN0cmluZywgOnRvX3N0cikudG9fc30pO1xuICAgICAgfVxuICAgIH1cbiAgZW5kXG5cbiAgZGVmIGtlZXBfaWYoJmJsb2NrKVxuICAgIHJldHVybiBlbnVtX2Zvcig6a2VlcF9pZikgeyBzaXplIH0gdW5sZXNzIGJsb2NrX2dpdmVuP1xuICAgICV4e1xuICAgICAgJGRlbnlfZnJvemVuX2FjY2VzcyhzZWxmKTtcblxuICAgICAgZmlsdGVySWYoc2VsZiwgJHRydXRoeSwgYmxvY2spXG4gICAgfVxuICAgIHNlbGZcbiAgZW5kXG5cbiAgZGVmIGxhc3QoY291bnQgPSB1bmRlZmluZWQpXG4gICAgJXh7XG4gICAgICBpZiAoY291bnQgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gc2VsZi5sZW5ndGggPT09IDAgPyBuaWwgOiBzZWxmW3NlbGYubGVuZ3RoIC0gMV07XG4gICAgICB9XG5cbiAgICAgIGNvdW50ID0gJGNvZXJjZV90byhjb3VudCwgI3s6OkludGVnZXJ9LCAndG9faW50Jyk7XG5cbiAgICAgIGlmIChjb3VudCA8IDApIHtcbiAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsICduZWdhdGl2ZSBhcnJheSBzaXplJ307XG4gICAgICB9XG5cbiAgICAgIGlmIChjb3VudCA+IHNlbGYubGVuZ3RoKSB7XG4gICAgICAgIGNvdW50ID0gc2VsZi5sZW5ndGg7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmLnNsaWNlKHNlbGYubGVuZ3RoIC0gY291bnQsIHNlbGYubGVuZ3RoKTtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBsZW5ndGhcbiAgICBgc2VsZi5sZW5ndGhgXG4gIGVuZFxuXG4gIGRlZiBtYXgobiA9IHVuZGVmaW5lZCwgJmJsb2NrKVxuICAgIGVhY2gubWF4KG4sICZibG9jaylcbiAgZW5kXG5cbiAgZGVmIG1pbigmYmxvY2spXG4gICAgZWFjaC5taW4oJmJsb2NrKVxuICBlbmRcblxuICAleHtcbiAgICAvLyBSZXR1cm5zIHRoZSBwcm9kdWN0IG9mIGZyb20sIGZyb20tMSwgLi4uLCBmcm9tIC0gaG93X21hbnkgKyAxLlxuICAgIGZ1bmN0aW9uIGRlc2NlbmRpbmdfZmFjdG9yaWFsKGZyb20sIGhvd19tYW55KSB7XG4gICAgICB2YXIgY291bnQgPSBob3dfbWFueSA+PSAwID8gMSA6IDA7XG4gICAgICB3aGlsZSAoaG93X21hbnkpIHtcbiAgICAgICAgY291bnQgKj0gZnJvbTtcbiAgICAgICAgZnJvbS0tO1xuICAgICAgICBob3dfbWFueS0tO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvdW50O1xuICAgIH1cbiAgfVxuXG4gIGRlZiBwZXJtdXRhdGlvbihudW0gPSB1bmRlZmluZWQsICZibG9jaylcbiAgICB1bmxlc3MgYmxvY2tfZ2l2ZW4/XG4gICAgICByZXR1cm4gZW51bV9mb3IoOnBlcm11dGF0aW9uLCBudW0pIGRvXG4gICAgICAgIGBkZXNjZW5kaW5nX2ZhY3RvcmlhbChzZWxmLmxlbmd0aCwgbnVtID09PSB1bmRlZmluZWQgPyBzZWxmLmxlbmd0aCA6IG51bSlgXG4gICAgICBlbmRcbiAgICBlbmRcblxuICAgICV4e1xuICAgICAgdmFyIHBlcm11dGUsIG9mZmVuc2l2ZSwgb3V0cHV0O1xuXG4gICAgICBpZiAobnVtID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbnVtID0gc2VsZi5sZW5ndGg7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbnVtID0gJGNvZXJjZV90byhudW0sICN7OjpJbnRlZ2VyfSwgJ3RvX2ludCcpO1xuICAgICAgfVxuXG4gICAgICBpZiAobnVtIDwgMCB8fCBzZWxmLmxlbmd0aCA8IG51bSkge1xuICAgICAgICAvLyBubyBwZXJtdXRhdGlvbnMsIHlpZWxkIG5vdGhpbmdcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKG51bSA9PT0gMCkge1xuICAgICAgICAvLyBleGFjdGx5IG9uZSBwZXJtdXRhdGlvbjogdGhlIHplcm8tbGVuZ3RoIGFycmF5XG4gICAgICAgICN7IHlpZWxkIFtdIH1cbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKG51bSA9PT0gMSkge1xuICAgICAgICAvLyB0aGlzIGlzIGEgc3BlY2lhbCwgZWFzeSBjYXNlXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICN7IHlpZWxkIGBbc2VsZltpXV1gIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIC8vIHRoaXMgaXMgdGhlIGdlbmVyYWwgY2FzZVxuICAgICAgICAjeyBwZXJtID0gQXJyYXkubmV3KG51bSkgfTtcbiAgICAgICAgI3sgdXNlZCA9IEFycmF5Lm5ldyhgc2VsZi5sZW5ndGhgLCBmYWxzZSkgfTtcblxuICAgICAgICBwZXJtdXRlID0gZnVuY3Rpb24obnVtLCBwZXJtLCBpbmRleCwgdXNlZCwgYmxrKSB7XG4gICAgICAgICAgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHNlbGYubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgaWYoI3sgIXVzZWRbYGlgXSB9KSB7XG4gICAgICAgICAgICAgIHBlcm1baW5kZXhdID0gaTtcbiAgICAgICAgICAgICAgaWYoaW5kZXggPCBudW0gLSAxKSB7XG4gICAgICAgICAgICAgICAgdXNlZFtpXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgcGVybXV0ZS5jYWxsKHNlbGYsIG51bSwgcGVybSwgaW5kZXggKyAxLCB1c2VkLCBibGspO1xuICAgICAgICAgICAgICAgIHVzZWRbaV0gPSBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHBlcm0ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKHNlbGZbcGVybVtqXV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAkeWllbGQxKGJsaywgb3V0cHV0KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgje2Jsb2NrX2dpdmVuP30pIHtcbiAgICAgICAgICAvLyBvZmZlbnNpdmUgKGJvdGggZGVmaW5pdGlvbnMpIGNvcHkuXG4gICAgICAgICAgb2ZmZW5zaXZlID0gc2VsZi5zbGljZSgpO1xuICAgICAgICAgIHBlcm11dGUuY2FsbChvZmZlbnNpdmUsIG51bSwgcGVybSwgMCwgdXNlZCwgYmxvY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHBlcm11dGUuY2FsbChzZWxmLCBudW0sIHBlcm0sIDAsIHVzZWQsIGJsb2NrKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHNlbGZcbiAgZW5kXG5cbiAgZGVmIHJlcGVhdGVkX3Blcm11dGF0aW9uKG4pXG4gICAgbnVtID0gOjpPcGFsLmNvZXJjZV90byEgbiwgOjpJbnRlZ2VyLCA6dG9faW50XG4gICAgcmV0dXJuIGVudW1fZm9yKDpyZXBlYXRlZF9wZXJtdXRhdGlvbiwgbnVtKSB7IG51bSA+PSAwID8gc2l6ZSoqbnVtIDogMCB9IHVubGVzcyBibG9ja19naXZlbj9cblxuICAgICV4e1xuICAgICAgZnVuY3Rpb24gaXRlcmF0ZShtYXgsIGJ1ZmZlciwgc2VsZikge1xuICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA9PSBtYXgpIHtcbiAgICAgICAgICB2YXIgY29weSA9IGJ1ZmZlci5zbGljZSgpO1xuICAgICAgICAgICN7eWllbGQgYGNvcHlgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBidWZmZXIucHVzaChzZWxmW2ldKTtcbiAgICAgICAgICBpdGVyYXRlKG1heCwgYnVmZmVyLCBzZWxmKTtcbiAgICAgICAgICBidWZmZXIucG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaXRlcmF0ZShudW0sIFtdLCBzZWxmLnNsaWNlKCkpO1xuICAgIH1cblxuICAgIHNlbGZcbiAgZW5kXG5cbiAgZGVmIHBvcChjb3VudCA9IHVuZGVmaW5lZClcbiAgICBgJGRlbnlfZnJvemVuX2FjY2VzcyhzZWxmKWBcblxuICAgIGlmIGBjb3VudCA9PT0gdW5kZWZpbmVkYFxuICAgICAgcmV0dXJuIGlmIGBzZWxmLmxlbmd0aCA9PT0gMGBcbiAgICAgIHJldHVybiBgc2VsZi5wb3AoKWBcbiAgICBlbmRcblxuICAgIGNvdW50ID0gYCRjb2VyY2VfdG8oY291bnQsICN7OjpJbnRlZ2VyfSwgJ3RvX2ludCcpYFxuXG4gICAgaWYgYGNvdW50IDwgMGBcbiAgICAgIDo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgJ25lZ2F0aXZlIGFycmF5IHNpemUnXG4gICAgZW5kXG5cbiAgICByZXR1cm4gW10gaWYgYHNlbGYubGVuZ3RoID09PSAwYFxuXG4gICAgaWYgYGNvdW50ID09PSAxYFxuICAgICAgYFtzZWxmLnBvcCgpXWBcbiAgICBlbHNpZiBgY291bnQgPiBzZWxmLmxlbmd0aGBcbiAgICAgIGBzZWxmLnNwbGljZSgwLCBzZWxmLmxlbmd0aClgXG4gICAgZWxzZVxuICAgICAgYHNlbGYuc3BsaWNlKHNlbGYubGVuZ3RoIC0gY291bnQsIHNlbGYubGVuZ3RoKWBcbiAgICBlbmRcbiAgZW5kXG5cbiAgZGVmIHByb2R1Y3QoKmFyZ3MsICZibG9jaylcbiAgICAleHtcbiAgICAgIHZhciByZXN1bHQgPSAje2Jsb2NrX2dpdmVuP30gPyBudWxsIDogW10sXG4gICAgICAgICAgbiA9IGFyZ3MubGVuZ3RoICsgMSxcbiAgICAgICAgICBjb3VudGVycyA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgICBsZW5ndGhzICA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgICBhcnJheXMgICA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgICBpLCBtLCBzdWJhcnJheSwgbGVuLCByZXN1bHRsZW4gPSAxO1xuXG4gICAgICBhcnJheXNbMF0gPSBzZWxmO1xuICAgICAgZm9yIChpID0gMTsgaSA8IG47IGkrKykge1xuICAgICAgICBhcnJheXNbaV0gPSAkY29lcmNlX3RvKGFyZ3NbaSAtIDFdLCAjezo6QXJyYXl9LCAndG9fYXJ5Jyk7XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgbGVuID0gYXJyYXlzW2ldLmxlbmd0aDtcbiAgICAgICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQgfHwgc2VsZjtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHRsZW4gKj0gbGVuO1xuICAgICAgICBpZiAocmVzdWx0bGVuID4gMjE0NzQ4MzY0Nykge1xuICAgICAgICAgICN7OjpLZXJuZWwucmFpc2UgOjpSYW5nZUVycm9yLCAndG9vIGJpZyB0byBwcm9kdWN0J31cbiAgICAgICAgfVxuICAgICAgICBsZW5ndGhzW2ldID0gbGVuO1xuICAgICAgICBjb3VudGVyc1tpXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIG91dGVyX2xvb3A6IGZvciAoOzspIHtcbiAgICAgICAgc3ViYXJyYXkgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICAgIHN1YmFycmF5LnB1c2goYXJyYXlzW2ldW2NvdW50ZXJzW2ldXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHN1YmFycmF5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAje3lpZWxkIGBzdWJhcnJheWB9XG4gICAgICAgIH1cbiAgICAgICAgbSA9IG4gLSAxO1xuICAgICAgICBjb3VudGVyc1ttXSsrO1xuICAgICAgICB3aGlsZSAoY291bnRlcnNbbV0gPT09IGxlbmd0aHNbbV0pIHtcbiAgICAgICAgICBjb3VudGVyc1ttXSA9IDA7XG4gICAgICAgICAgaWYgKC0tbSA8IDApIGJyZWFrIG91dGVyX2xvb3A7XG4gICAgICAgICAgY291bnRlcnNbbV0rKztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0IHx8IHNlbGY7XG4gICAgfVxuICBlbmRcblxuICBkZWYgcHVzaCgqb2JqZWN0cylcbiAgICAleHtcbiAgICAgICRkZW55X2Zyb3plbl9hY2Nlc3Moc2VsZik7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBvYmplY3RzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHNlbGYucHVzaChvYmplY3RzW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzZWxmXG4gIGVuZFxuXG4gIGRlZiByYXNzb2Mob2JqZWN0KVxuICAgICV4e1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHNlbGYubGVuZ3RoLCBpdGVtOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaXRlbSA9IHNlbGZbaV07XG5cbiAgICAgICAgaWYgKGl0ZW0ubGVuZ3RoICYmIGl0ZW1bMV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICgje2BpdGVtWzFdYCA9PSBvYmplY3R9KSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5pbDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiByZWplY3QoJmJsb2NrKVxuICAgIHJldHVybiBlbnVtX2Zvcig6cmVqZWN0KSB7IHNpemUgfSB1bmxlc3MgYmxvY2tfZ2l2ZW4/XG5cbiAgICAleHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHNlbGYubGVuZ3RoLCB2YWx1ZTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhbHVlID0gYmxvY2soc2VsZltpXSk7XG5cbiAgICAgICAgaWYgKHZhbHVlID09PSBmYWxzZSB8fCB2YWx1ZSA9PT0gbmlsKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goc2VsZltpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICBlbmRcblxuICBkZWYgcmVqZWN0ISgmYmxvY2spXG4gICAgcmV0dXJuIGVudW1fZm9yKDpyZWplY3QhKSB7IHNpemUgfSB1bmxlc3MgYmxvY2tfZ2l2ZW4/XG5cbiAgICBgJGRlbnlfZnJvemVuX2FjY2VzcyhzZWxmKWBcblxuICAgIG9yaWdpbmFsID0gbGVuZ3RoXG4gICAgZGVsZXRlX2lmKCZibG9jaylcblxuICAgIHVubGVzcyBsZW5ndGggPT0gb3JpZ2luYWxcbiAgICAgIHNlbGZcbiAgICBlbmRcbiAgZW5kXG5cbiAgZGVmIHJlcGxhY2Uob3RoZXIpXG4gICAgYCRkZW55X2Zyb3plbl9hY2Nlc3Moc2VsZilgXG5cbiAgICBvdGhlciA9IGlmIDo6QXJyYXkgPT09IG90aGVyXG4gICAgICAgICAgICAgIG90aGVyLnRvX2FcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgYCRjb2VyY2VfdG8ob3RoZXIsICN7OjpBcnJheX0sICd0b19hcnknKWAudG9fYVxuICAgICAgICAgICAgZW5kXG5cbiAgICAleHtcbiAgICAgIHNlbGYuc3BsaWNlKDAsIHNlbGYubGVuZ3RoKTtcbiAgICAgIHNlbGYucHVzaC5hcHBseShzZWxmLCBvdGhlcik7XG4gICAgfVxuXG4gICAgc2VsZlxuICBlbmRcblxuICBkZWYgcmV2ZXJzZVxuICAgIGBzZWxmLnNsaWNlKDApLnJldmVyc2UoKWBcbiAgZW5kXG5cbiAgZGVmIHJldmVyc2UhXG4gICAgYCRkZW55X2Zyb3plbl9hY2Nlc3Moc2VsZilgXG5cbiAgICBgc2VsZi5yZXZlcnNlKClgXG4gIGVuZFxuXG4gIGRlZiByZXZlcnNlX2VhY2goJmJsb2NrKVxuICAgIHJldHVybiBlbnVtX2Zvcig6cmV2ZXJzZV9lYWNoKSB7IHNpemUgfSB1bmxlc3MgYmxvY2tfZ2l2ZW4/XG5cbiAgICByZXZlcnNlLmVhY2goJmJsb2NrKVxuICAgIHNlbGZcbiAgZW5kXG5cbiAgZGVmIHJpbmRleChvYmplY3QgPSB1bmRlZmluZWQsICZibG9jaylcbiAgICAleHtcbiAgICAgIHZhciBpLCB2YWx1ZTtcblxuICAgICAgaWYgKG9iamVjdCAhPSBudWxsICYmIGJsb2NrICE9PSBuaWwpIHtcbiAgICAgICAgI3t3YXJuKCd3YXJuaW5nOiBnaXZlbiBibG9jayBub3QgdXNlZCcpfVxuICAgICAgfVxuXG4gICAgICBpZiAob2JqZWN0ICE9IG51bGwpIHtcbiAgICAgICAgZm9yIChpID0gc2VsZi5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGlmIChpID49IHNlbGYubGVuZ3RoKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCN7YHNlbGZbaV1gID09IGBvYmplY3RgfSkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChibG9jayAhPT0gbmlsKSB7XG4gICAgICAgIGZvciAoaSA9IHNlbGYubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICBpZiAoaSA+PSBzZWxmLmxlbmd0aCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFsdWUgPSBibG9jayhzZWxmW2ldKTtcblxuICAgICAgICAgIGlmICh2YWx1ZSAhPT0gZmFsc2UgJiYgdmFsdWUgIT09IG5pbCkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gI3tlbnVtX2ZvciA6cmluZGV4fTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5pbDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiByb3RhdGUobiA9IDEpXG4gICAgJXh7XG4gICAgICB2YXIgYXJ5LCBpZHgsIGZpcnN0UGFydCwgbGFzdFBhcnQ7XG5cbiAgICAgIG4gPSAkY29lcmNlX3RvKG4sICN7OjpJbnRlZ2VyfSwgJ3RvX2ludCcpXG5cbiAgICAgIGlmIChzZWxmLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gc2VsZi5zbGljZSgpO1xuICAgICAgfVxuICAgICAgaWYgKHNlbGYubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cblxuICAgICAgYXJ5ID0gc2VsZi5zbGljZSgpO1xuICAgICAgaWR4ID0gbiAlIGFyeS5sZW5ndGg7XG5cbiAgICAgIGZpcnN0UGFydCA9IGFyeS5zbGljZShpZHgpO1xuICAgICAgbGFzdFBhcnQgPSBhcnkuc2xpY2UoMCwgaWR4KTtcbiAgICAgIHJldHVybiBmaXJzdFBhcnQuY29uY2F0KGxhc3RQYXJ0KTtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiByb3RhdGUhKGNudCA9IDEpXG4gICAgJXh7XG4gICAgICAkZGVueV9mcm96ZW5fYWNjZXNzKHNlbGYpO1xuXG4gICAgICBpZiAoc2VsZi5sZW5ndGggPT09IDAgfHwgc2VsZi5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICB9XG4gICAgICBjbnQgPSAkY29lcmNlX3RvKGNudCwgI3s6OkludGVnZXJ9LCAndG9faW50Jyk7XG4gICAgfVxuICAgIGFyeSA9IHJvdGF0ZShjbnQpXG4gICAgcmVwbGFjZSBhcnlcbiAgZW5kXG5cbiAgY2xhc3Mgc2VsZjo6U2FtcGxlUmFuZG9tXG4gICAgZGVmIGluaXRpYWxpemUocm5nKVxuICAgICAgQHJuZyA9IHJuZ1xuICAgIGVuZFxuXG4gICAgZGVmIHJhbmQoc2l6ZSlcbiAgICAgIHJhbmRvbSA9IGAkY29lcmNlX3RvKCN7QHJuZy5yYW5kKHNpemUpfSwgI3s6OkludGVnZXJ9LCAndG9faW50JylgXG4gICAgICA6Oktlcm5lbC5yYWlzZSA6OlJhbmdlRXJyb3IsICdyYW5kb20gdmFsdWUgbXVzdCBiZSA+PSAwJyBpZiBgcmFuZG9tIDwgMGBcbiAgICAgIDo6S2VybmVsLnJhaXNlIDo6UmFuZ2VFcnJvciwgJ3JhbmRvbSB2YWx1ZSBtdXN0IGJlIGxlc3MgdGhhbiBBcnJheSBzaXplJyB1bmxlc3MgYHJhbmRvbSA8IHNpemVgXG5cbiAgICAgIHJhbmRvbVxuICAgIGVuZFxuICBlbmRcblxuICBkZWYgc2FtcGxlKGNvdW50ID0gdW5kZWZpbmVkLCBvcHRpb25zID0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBhdCA6Oktlcm5lbC5yYW5kKGBzZWxmLmxlbmd0aGApIGlmIGBjb3VudCA9PT0gdW5kZWZpbmVkYFxuXG4gICAgaWYgYG9wdGlvbnMgPT09IHVuZGVmaW5lZGBcbiAgICAgIGlmIChvID0gOjpPcGFsLmNvZXJjZV90bz8gY291bnQsIDo6SGFzaCwgOnRvX2hhc2gpXG4gICAgICAgIG9wdGlvbnMgPSBvXG4gICAgICAgIGNvdW50ID0gbmlsXG4gICAgICBlbHNlXG4gICAgICAgIG9wdGlvbnMgPSBuaWxcbiAgICAgICAgY291bnQgPSBgJGNvZXJjZV90byhjb3VudCwgI3s6OkludGVnZXJ9LCAndG9faW50JylgXG4gICAgICBlbmRcbiAgICBlbHNlXG4gICAgICBjb3VudCA9IGAkY29lcmNlX3RvKGNvdW50LCAjezo6SW50ZWdlcn0sICd0b19pbnQnKWBcbiAgICAgIG9wdGlvbnMgPSBgJGNvZXJjZV90byhvcHRpb25zLCAjezo6SGFzaH0sICd0b19oYXNoJylgXG4gICAgZW5kXG5cbiAgICBpZiBjb3VudCAmJiBgY291bnQgPCAwYFxuICAgICAgOjpLZXJuZWwucmFpc2UgOjpBcmd1bWVudEVycm9yLCAnY291bnQgbXVzdCBiZSBncmVhdGVyIHRoYW4gMCdcbiAgICBlbmRcblxuICAgIHJuZyA9IG9wdGlvbnNbOnJhbmRvbV0gaWYgb3B0aW9uc1xuICAgIHJuZyA9IGlmIHJuZyAmJiBybmcucmVzcG9uZF90bz8oOnJhbmQpXG4gICAgICAgICAgICBTYW1wbGVSYW5kb20ubmV3IHJuZ1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIDo6S2VybmVsXG4gICAgICAgICAgZW5kXG5cbiAgICByZXR1cm4gYHNlbGZbI3tybmcucmFuZChgc2VsZi5sZW5ndGhgKX1dYCB1bmxlc3MgY291bnRcblxuICAgICV4e1xuXG4gICAgICB2YXIgYWJhbmRvbiwgc3BpbiwgcmVzdWx0LCBpLCBqLCBrLCB0YXJnZXRJbmRleCwgb2xkVmFsdWU7XG5cbiAgICAgIGlmIChjb3VudCA+IHNlbGYubGVuZ3RoKSB7XG4gICAgICAgIGNvdW50ID0gc2VsZi5sZW5ndGg7XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAoY291bnQpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIHJldHVybiBbc2VsZlsje3JuZy5yYW5kKGBzZWxmLmxlbmd0aGApfV1dO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgaSA9ICN7cm5nLnJhbmQoYHNlbGYubGVuZ3RoYCl9O1xuICAgICAgICAgIGogPSAje3JuZy5yYW5kKGBzZWxmLmxlbmd0aGApfTtcbiAgICAgICAgICBpZiAoaSA9PT0gaikge1xuICAgICAgICAgICAgaiA9IGkgPT09IDAgPyBpICsgMSA6IGkgLSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gW3NlbGZbaV0sIHNlbGZbal1dO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGlmIChzZWxmLmxlbmd0aCAvIGNvdW50ID4gMykge1xuICAgICAgICAgICAgYWJhbmRvbiA9IGZhbHNlO1xuICAgICAgICAgICAgc3BpbiA9IDA7XG5cbiAgICAgICAgICAgIHJlc3VsdCA9ICN7IEFycmF5Lm5ldyhjb3VudCkgfTtcbiAgICAgICAgICAgIGkgPSAxO1xuXG4gICAgICAgICAgICByZXN1bHRbMF0gPSAje3JuZy5yYW5kKGBzZWxmLmxlbmd0aGApfTtcbiAgICAgICAgICAgIHdoaWxlIChpIDwgY291bnQpIHtcbiAgICAgICAgICAgICAgayA9ICN7cm5nLnJhbmQoYHNlbGYubGVuZ3RoYCl9O1xuICAgICAgICAgICAgICBqID0gMDtcblxuICAgICAgICAgICAgICB3aGlsZSAoaiA8IGkpIHtcbiAgICAgICAgICAgICAgICB3aGlsZSAoayA9PT0gcmVzdWx0W2pdKSB7XG4gICAgICAgICAgICAgICAgICBzcGluKys7XG4gICAgICAgICAgICAgICAgICBpZiAoc3BpbiA+IDEwMCkge1xuICAgICAgICAgICAgICAgICAgICBhYmFuZG9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBrID0gI3tybmcucmFuZChgc2VsZi5sZW5ndGhgKX07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChhYmFuZG9uKSB7IGJyZWFrOyB9XG5cbiAgICAgICAgICAgICAgICBqKys7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoYWJhbmRvbikgeyBicmVhazsgfVxuXG4gICAgICAgICAgICAgIHJlc3VsdFtpXSA9IGs7XG5cbiAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWFiYW5kb24pIHtcbiAgICAgICAgICAgICAgaSA9IDA7XG4gICAgICAgICAgICAgIHdoaWxlIChpIDwgY291bnQpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRbaV0gPSBzZWxmW3Jlc3VsdFtpXV07XG4gICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXN1bHQgPSBzZWxmLnNsaWNlKCk7XG5cbiAgICAgICAgICBmb3IgKHZhciBjID0gMDsgYyA8IGNvdW50OyBjKyspIHtcbiAgICAgICAgICAgIHRhcmdldEluZGV4ID0gI3tybmcucmFuZChgc2VsZi5sZW5ndGhgKX07XG4gICAgICAgICAgICBvbGRWYWx1ZSA9IHJlc3VsdFtjXTtcbiAgICAgICAgICAgIHJlc3VsdFtjXSA9IHJlc3VsdFt0YXJnZXRJbmRleF07XG4gICAgICAgICAgICByZXN1bHRbdGFyZ2V0SW5kZXhdID0gb2xkVmFsdWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGNvdW50ID09PSBzZWxmLmxlbmd0aCA/IHJlc3VsdCA6ICN7YHJlc3VsdGBbMCwgY291bnRdfTtcbiAgICAgIH1cbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBzZWxlY3QoJmJsb2NrKVxuICAgIHJldHVybiBlbnVtX2Zvcig6c2VsZWN0KSB7IHNpemUgfSB1bmxlc3MgYmxvY2tfZ2l2ZW4/XG5cbiAgICAleHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHNlbGYubGVuZ3RoLCBpdGVtLCB2YWx1ZTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGl0ZW0gPSBzZWxmW2ldO1xuXG4gICAgICAgIHZhbHVlID0gJHlpZWxkMShibG9jaywgaXRlbSk7XG5cbiAgICAgICAgaWYgKCR0cnV0aHkodmFsdWUpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goaXRlbSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBzZWxlY3QhKCZibG9jaylcbiAgICByZXR1cm4gZW51bV9mb3IoOnNlbGVjdCEpIHsgc2l6ZSB9IHVubGVzcyBibG9ja19naXZlbj9cblxuICAgICV4e1xuICAgICAgJGRlbnlfZnJvemVuX2FjY2VzcyhzZWxmKVxuXG4gICAgICB2YXIgb3JpZ2luYWwgPSBzZWxmLmxlbmd0aDtcbiAgICAgICN7IGtlZXBfaWYoJmJsb2NrKSB9O1xuICAgICAgcmV0dXJuIHNlbGYubGVuZ3RoID09PSBvcmlnaW5hbCA/IG5pbCA6IHNlbGY7XG4gICAgfVxuICBlbmRcblxuICBkZWYgc2hpZnQoY291bnQgPSB1bmRlZmluZWQpXG4gICAgYCRkZW55X2Zyb3plbl9hY2Nlc3Moc2VsZilgXG5cbiAgICBpZiBgY291bnQgPT09IHVuZGVmaW5lZGBcbiAgICAgIHJldHVybiBpZiBgc2VsZi5sZW5ndGggPT09IDBgXG4gICAgICByZXR1cm4gYHNoaWZ0Tm9Bcmcoc2VsZilgXG4gICAgZW5kXG5cbiAgICBjb3VudCA9IGAkY29lcmNlX3RvKGNvdW50LCAjezo6SW50ZWdlcn0sICd0b19pbnQnKWBcblxuICAgIGlmIGBjb3VudCA8IDBgXG4gICAgICA6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsICduZWdhdGl2ZSBhcnJheSBzaXplJ1xuICAgIGVuZFxuXG4gICAgcmV0dXJuIFtdIGlmIGBzZWxmLmxlbmd0aCA9PT0gMGBcblxuICAgIGBzZWxmLnNwbGljZSgwLCBjb3VudClgXG4gIGVuZFxuXG4gIGRlZiBzaHVmZmxlKHJuZyA9IHVuZGVmaW5lZClcbiAgICBkdXAudG9fYS5zaHVmZmxlIShybmcpXG4gIGVuZFxuXG4gIGRlZiBzaHVmZmxlIShybmcgPSB1bmRlZmluZWQpXG4gICAgJXh7XG4gICAgICAkZGVueV9mcm96ZW5fYWNjZXNzKHNlbGYpO1xuXG4gICAgICB2YXIgcmFuZGdlbiwgaSA9IHNlbGYubGVuZ3RoLCBqLCB0bXA7XG5cbiAgICAgIGlmIChybmcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBybmcgPSAjezo6T3BhbC5jb2VyY2VfdG8/KHJuZywgOjpIYXNoLCA6dG9faGFzaCl9O1xuXG4gICAgICAgIGlmIChybmcgIT09IG5pbCkge1xuICAgICAgICAgIHJuZyA9ICN7cm5nWzpyYW5kb21dfTtcblxuICAgICAgICAgIGlmIChybmcgIT09IG5pbCAmJiAje3JuZy5yZXNwb25kX3RvPyg6cmFuZCl9KSB7XG4gICAgICAgICAgICByYW5kZ2VuID0gcm5nO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB3aGlsZSAoaSkge1xuICAgICAgICBpZiAocmFuZGdlbikge1xuICAgICAgICAgIGogPSByYW5kZ2VuLiRyYW5kKGkpLiR0b19pbnQoKTtcblxuICAgICAgICAgIGlmIChqIDwgMCkge1xuICAgICAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OlJhbmdlRXJyb3IsIFwicmFuZG9tIG51bWJlciB0b28gc21hbGwgI3tgamB9XCJ9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGogPj0gaSkge1xuICAgICAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OlJhbmdlRXJyb3IsIFwicmFuZG9tIG51bWJlciB0b28gYmlnICN7YGpgfVwifVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBqID0gI3tyYW5kKGBpYCl9O1xuICAgICAgICB9XG5cbiAgICAgICAgdG1wID0gc2VsZlstLWldO1xuICAgICAgICBzZWxmW2ldID0gc2VsZltqXTtcbiAgICAgICAgc2VsZltqXSA9IHRtcDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfVxuICBlbmRcblxuICBkZWYgc2xpY2UhKGluZGV4LCBsZW5ndGggPSB1bmRlZmluZWQpXG4gICAgYCRkZW55X2Zyb3plbl9hY2Nlc3Moc2VsZilgXG5cbiAgICByZXN1bHQgPSBuaWxcblxuICAgIGlmIGBsZW5ndGggPT09IHVuZGVmaW5lZGBcbiAgICAgIGlmIDo6UmFuZ2UgPT09IGluZGV4XG4gICAgICAgIHJhbmdlID0gaW5kZXhcbiAgICAgICAgcmVzdWx0ID0gc2VsZltyYW5nZV1cblxuICAgICAgICByYW5nZV9zdGFydCA9IGByYW5nZS5iZWdpbiA9PT0gbmlsID8gMCA6ICRjb2VyY2VfdG8ocmFuZ2UuYmVnaW4sICN7OjpJbnRlZ2VyfSwgJ3RvX2ludCcpYFxuICAgICAgICByYW5nZV9lbmQgPSBgcmFuZ2UuZW5kID09PSBuaWwgPyAtMSA6ICRjb2VyY2VfdG8ocmFuZ2UuZW5kLCAjezo6SW50ZWdlcn0sICd0b19pbnQnKWBcblxuICAgICAgICAleHtcbiAgICAgICAgICBpZiAocmFuZ2Vfc3RhcnQgPCAwKSB7XG4gICAgICAgICAgICByYW5nZV9zdGFydCArPSBzZWxmLmxlbmd0aDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocmFuZ2VfZW5kIDwgMCkge1xuICAgICAgICAgICAgcmFuZ2VfZW5kICs9IHNlbGYubGVuZ3RoO1xuICAgICAgICAgIH0gZWxzZSBpZiAocmFuZ2VfZW5kID49IHNlbGYubGVuZ3RoKSB7XG4gICAgICAgICAgICByYW5nZV9lbmQgPSBzZWxmLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICBpZiAocmFuZ2UuZXhjbCkge1xuICAgICAgICAgICAgICByYW5nZV9lbmQgKz0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgcmFuZ2VfbGVuZ3RoID0gcmFuZ2VfZW5kIC0gcmFuZ2Vfc3RhcnQ7XG4gICAgICAgICAgaWYgKHJhbmdlLmV4Y2wgJiYgcmFuZ2UuZW5kICE9PSBuaWwpIHtcbiAgICAgICAgICAgIHJhbmdlX2VuZCAtPSAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByYW5nZV9sZW5ndGggKz0gMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocmFuZ2Vfc3RhcnQgPCBzZWxmLmxlbmd0aCAmJiByYW5nZV9zdGFydCA+PSAwICYmIHJhbmdlX2VuZCA8IHNlbGYubGVuZ3RoICYmIHJhbmdlX2VuZCA+PSAwICYmIHJhbmdlX2xlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHNlbGYuc3BsaWNlKHJhbmdlX3N0YXJ0LCByYW5nZV9sZW5ndGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgZWxzZVxuICAgICAgICBzdGFydCA9IGAkY29lcmNlX3RvKGluZGV4LCAjezo6SW50ZWdlcn0sICd0b19pbnQnKWBcbiAgICAgICAgJXh7XG4gICAgICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICAgICAgc3RhcnQgKz0gc2VsZi5sZW5ndGg7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSBzZWxmLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIG5pbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXN1bHQgPSBzZWxmW3N0YXJ0XTtcblxuICAgICAgICAgIGlmIChzdGFydCA9PT0gMCkge1xuICAgICAgICAgICAgc2VsZi5zaGlmdCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxmLnNwbGljZShzdGFydCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBlbmRcbiAgICBlbHNlXG4gICAgICBzdGFydCA9IGAkY29lcmNlX3RvKGluZGV4LCAjezo6SW50ZWdlcn0sICd0b19pbnQnKWBcbiAgICAgIGxlbmd0aCA9IGAkY29lcmNlX3RvKGxlbmd0aCwgI3s6OkludGVnZXJ9LCAndG9faW50JylgXG5cbiAgICAgICV4e1xuICAgICAgICBpZiAobGVuZ3RoIDwgMCkge1xuICAgICAgICAgIHJldHVybiBuaWw7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZW5kID0gc3RhcnQgKyBsZW5ndGg7XG5cbiAgICAgICAgcmVzdWx0ID0gI3tzZWxmW3N0YXJ0LCBsZW5ndGhdfTtcblxuICAgICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgICAgc3RhcnQgKz0gc2VsZi5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhcnQgKyBsZW5ndGggPiBzZWxmLmxlbmd0aCkge1xuICAgICAgICAgIGxlbmd0aCA9IHNlbGYubGVuZ3RoIC0gc3RhcnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhcnQgPCBzZWxmLmxlbmd0aCAmJiBzdGFydCA+PSAwKSB7XG4gICAgICAgICAgc2VsZi5zcGxpY2Uoc3RhcnQsIGxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBlbmRcbiAgICByZXN1bHRcbiAgZW5kXG5cbiAgZGVmIHNvcnQoJmJsb2NrKVxuICAgIHJldHVybiBzZWxmIHVubGVzcyBgc2VsZi5sZW5ndGggPiAxYFxuXG4gICAgJXh7XG4gICAgICBpZiAoYmxvY2sgPT09IG5pbCkge1xuICAgICAgICBibG9jayA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICByZXR1cm4gI3tgYWAgPD0+IGBiYH07XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmLnNsaWNlKCkuc29ydChmdW5jdGlvbih4LCB5KSB7XG4gICAgICAgIHZhciByZXQgPSBibG9jayh4LCB5KTtcblxuICAgICAgICBpZiAocmV0ID09PSBuaWwpIHtcbiAgICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6QXJndW1lbnRFcnJvciwgXCJjb21wYXJpc29uIG9mICN7YHhgLmluc3BlY3R9IHdpdGggI3tgeWAuaW5zcGVjdH0gZmFpbGVkXCJ9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICN7YHJldGAgPiAwfSA/IDEgOiAoI3tgcmV0YCA8IDB9ID8gLTEgOiAwKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIHNvcnQhKCZibG9jaylcbiAgICAleHtcbiAgICAgICRkZW55X2Zyb3plbl9hY2Nlc3Moc2VsZilcblxuICAgICAgdmFyIHJlc3VsdDtcblxuICAgICAgaWYgKCN7YmxvY2tfZ2l2ZW4/fSkge1xuICAgICAgICByZXN1bHQgPSAje2BzZWxmLnNsaWNlKClgLnNvcnQoJmJsb2NrKX07XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gI3tgc2VsZi5zbGljZSgpYC5zb3J0fTtcbiAgICAgIH1cblxuICAgICAgc2VsZi5sZW5ndGggPSAwO1xuICAgICAgZm9yKHZhciBpID0gMCwgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHNlbGYucHVzaChyZXN1bHRbaV0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiBzb3J0X2J5ISgmYmxvY2spXG4gICAgcmV0dXJuIGVudW1fZm9yKDpzb3J0X2J5ISkgeyBzaXplIH0gdW5sZXNzIGJsb2NrX2dpdmVuP1xuXG4gICAgYCRkZW55X2Zyb3plbl9hY2Nlc3Moc2VsZilgXG5cbiAgICByZXBsYWNlIHNvcnRfYnkoJmJsb2NrKVxuICBlbmRcblxuICBkZWYgdGFrZShjb3VudClcbiAgICAleHtcbiAgICAgIGlmIChjb3VudCA8IDApIHtcbiAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3J9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZi5zbGljZSgwLCBjb3VudCk7XG4gICAgfVxuICBlbmRcblxuICBkZWYgdGFrZV93aGlsZSgmYmxvY2spXG4gICAgJXh7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBzZWxmLmxlbmd0aCwgaXRlbSwgdmFsdWU7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpdGVtID0gc2VsZltpXTtcblxuICAgICAgICB2YWx1ZSA9IGJsb2NrKGl0ZW0pO1xuXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gZmFsc2UgfHwgdmFsdWUgPT09IG5pbCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXN1bHQucHVzaChpdGVtKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiB0b19hXG4gICAgJXh7XG4gICAgICBpZiAoc2VsZi4kJGNsYXNzID09PSBPcGFsLkFycmF5KSB7XG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBPcGFsLkFycmF5LiRuZXcoc2VsZik7XG4gICAgICB9XG4gICAgfVxuICBlbmRcblxuICBkZWYgdG9fYXJ5XG4gICAgc2VsZlxuICBlbmRcblxuICBkZWYgdG9faCgmYmxvY2spXG4gICAgYXJyYXkgPSBzZWxmXG4gICAgYXJyYXkgPSBhcnJheS5tYXAoJmJsb2NrKSBpZiBibG9ja19naXZlbj9cblxuICAgICV4e1xuICAgICAgdmFyIGksIGxlbiA9IGFycmF5Lmxlbmd0aCwgYXJ5LCBrZXksIHZhbCwgaGFzaCA9ICN7e319O1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgYXJ5ID0gI3s6Ok9wYWwuY29lcmNlX3RvPyhgYXJyYXlbaV1gLCA6OkFycmF5LCA6dG9fYXJ5KX07XG4gICAgICAgIGlmICghYXJ5LiQkaXNfYXJyYXkpIHtcbiAgICAgICAgICAjezo6S2VybmVsLnJhaXNlIDo6VHlwZUVycm9yLCBcIndyb25nIGVsZW1lbnQgdHlwZSAje2BhcnlgLmNsYXNzfSBhdCAje2BpYH0gKGV4cGVjdGVkIGFycmF5KVwifVxuICAgICAgICB9XG4gICAgICAgIGlmIChhcnkubGVuZ3RoICE9PSAyKSB7XG4gICAgICAgICAgI3s6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IsIFwid3JvbmcgYXJyYXkgbGVuZ3RoIGF0ICN7YGlgfSAoZXhwZWN0ZWQgMiwgd2FzICN7YGFyeWAubGVuZ3RofSlcIn1cbiAgICAgICAgfVxuICAgICAgICBrZXkgPSBhcnlbMF07XG4gICAgICAgIHZhbCA9IGFyeVsxXTtcbiAgICAgICAgJGhhc2hfcHV0KGhhc2gsIGtleSwgdmFsKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGhhc2g7XG4gICAgfVxuICBlbmRcblxuICBkZWYgdHJhbnNwb3NlXG4gICAgcmV0dXJuIFtdIGlmIGVtcHR5P1xuXG4gICAgcmVzdWx0ID0gW11cbiAgICBtYXggICAgPSBuaWxcblxuICAgIGVhY2ggZG8gfHJvd3xcbiAgICAgIHJvdyA9IGlmIDo6QXJyYXkgPT09IHJvd1xuICAgICAgICAgICAgICByb3cudG9fYVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICBgJGNvZXJjZV90byhyb3csICN7OjpBcnJheX0sICd0b19hcnknKWAudG9fYVxuICAgICAgICAgICAgZW5kXG5cbiAgICAgIG1heCB8fD0gYHJvdy5sZW5ndGhgXG5cbiAgICAgIGlmIGByb3cubGVuZ3RoYCAhPSBtYXhcbiAgICAgICAgOjpLZXJuZWwucmFpc2UgOjpJbmRleEVycm9yLCBcImVsZW1lbnQgc2l6ZSBkaWZmZXJzICgje2Byb3cubGVuZ3RoYH0gc2hvdWxkIGJlICN7bWF4fSlcIlxuICAgICAgZW5kXG5cbiAgICAgIGByb3cubGVuZ3RoYC50aW1lcyBkbyB8aXxcbiAgICAgICAgZW50cnkgPSAocmVzdWx0W2ldIHx8PSBbXSlcbiAgICAgICAgZW50cnkgPDwgcm93LmF0KGkpXG4gICAgICBlbmRcbiAgICBlbmRcblxuICAgIHJlc3VsdFxuICBlbmRcblxuICBkZWYgdW5pb24oKmFycmF5cylcbiAgICBhcnJheXMucmVkdWNlKHVuaXEpIHsgfGEsIGJ8IGEgfCBiIH1cbiAgZW5kXG5cbiAgZGVmIHVuaXEoJmJsb2NrKVxuICAgICV4e1xuICAgICAgdmFyIGhhc2ggPSAje3t9fSwgaSwgbGVuZ3RoLCBpdGVtLCBrZXk7XG5cbiAgICAgIGlmIChibG9jayA9PT0gbmlsKSB7XG4gICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IHNlbGYubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpdGVtID0gc2VsZltpXTtcbiAgICAgICAgICBpZiAoJGhhc2hfZ2V0KGhhc2gsIGl0ZW0pID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICRoYXNoX3B1dChoYXNoLCBpdGVtLCBpdGVtKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBzZWxmLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaXRlbSA9IHNlbGZbaV07XG4gICAgICAgICAga2V5ID0gJHlpZWxkMShibG9jaywgaXRlbSk7XG4gICAgICAgICAgaWYgKCRoYXNoX2dldChoYXNoLCBrZXkpID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICRoYXNoX3B1dChoYXNoLCBrZXksIGl0ZW0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gI3tgaGFzaGAudmFsdWVzfTtcbiAgICB9XG4gIGVuZFxuXG4gIGRlZiB1bmlxISgmYmxvY2spXG4gICAgJXh7XG4gICAgICAkZGVueV9mcm96ZW5fYWNjZXNzKHNlbGYpO1xuXG4gICAgICB2YXIgb3JpZ2luYWxfbGVuZ3RoID0gc2VsZi5sZW5ndGgsIGhhc2ggPSAje3t9fSwgaSwgbGVuZ3RoLCBpdGVtLCBrZXk7XG5cbiAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IG9yaWdpbmFsX2xlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGl0ZW0gPSBzZWxmW2ldO1xuICAgICAgICBrZXkgPSAoYmxvY2sgPT09IG5pbCA/IGl0ZW0gOiAkeWllbGQxKGJsb2NrLCBpdGVtKSk7XG5cbiAgICAgICAgaWYgKCRoYXNoX2dldChoYXNoLCBrZXkpID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAkaGFzaF9wdXQoaGFzaCwga2V5LCBpdGVtKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGYuc3BsaWNlKGksIDEpO1xuICAgICAgICBsZW5ndGgtLTtcbiAgICAgICAgaS0tO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZi5sZW5ndGggPT09IG9yaWdpbmFsX2xlbmd0aCA/IG5pbCA6IHNlbGY7XG4gICAgfVxuICBlbmRcblxuICBkZWYgdW5zaGlmdCgqb2JqZWN0cylcbiAgICAleHtcbiAgICAgICRkZW55X2Zyb3plbl9hY2Nlc3Moc2VsZik7XG5cbiAgICAgIHZhciBzZWxmTGVuZ3RoID0gc2VsZi5sZW5ndGhcbiAgICAgIHZhciBvYmplY3RzTGVuZ3RoID0gb2JqZWN0cy5sZW5ndGhcbiAgICAgIGlmIChvYmplY3RzTGVuZ3RoID09IDApIHJldHVybiBzZWxmO1xuICAgICAgdmFyIGluZGV4ID0gc2VsZkxlbmd0aCAtIG9iamVjdHNMZW5ndGhcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqZWN0c0xlbmd0aDsgaSsrKSB7XG4gICAgICAgIHNlbGYucHVzaChzZWxmW2luZGV4ICsgaV0pXG4gICAgICB9XG4gICAgICB2YXIgbGVuID0gc2VsZkxlbmd0aCAtIDFcbiAgICAgIHdoaWxlIChsZW4gLSBvYmplY3RzTGVuZ3RoID49IDApIHtcbiAgICAgICAgc2VsZltsZW5dID0gc2VsZltsZW4gLSBvYmplY3RzTGVuZ3RoXVxuICAgICAgICBsZW4tLVxuICAgICAgfVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBvYmplY3RzTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgc2VsZltqXSA9IG9iamVjdHNbal1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cbiAgZW5kXG5cbiAgZGVmIHZhbHVlc19hdCgqYXJncylcbiAgICBvdXQgPSBbXVxuXG4gICAgYXJncy5lYWNoIGRvIHxlbGVtfFxuICAgICAgaWYgZWxlbS5pc19hPyA6OlJhbmdlXG4gICAgICAgIGZpbmlzaCA9IGAje2VsZW0uZW5kfSA9PT0gbmlsID8gLTEgOiAkY29lcmNlX3RvKCN7ZWxlbS5lbmR9LCAjezo6SW50ZWdlcn0sICd0b19pbnQnKWBcbiAgICAgICAgc3RhcnQgPSBgI3tlbGVtLmJlZ2lufSA9PT0gbmlsID8gMCA6ICRjb2VyY2VfdG8oI3tlbGVtLmJlZ2lufSwgI3s6OkludGVnZXJ9LCAndG9faW50JylgXG5cbiAgICAgICAgJXh7XG4gICAgICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICAgICAgc3RhcnQgPSBzdGFydCArIHNlbGYubGVuZ3RoO1xuICAgICAgICAgICAgI3tuZXh0fTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAleHtcbiAgICAgICAgICBpZiAoZmluaXNoIDwgMCkge1xuICAgICAgICAgICAgZmluaXNoID0gZmluaXNoICsgc2VsZi5sZW5ndGg7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgje2VsZW0uZXhjbHVkZV9lbmQ/fSAmJiAje2VsZW0uZW5kfSAhPT0gbmlsKSB7XG4gICAgICAgICAgICBmaW5pc2gtLTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGZpbmlzaCA8IHN0YXJ0KSB7XG4gICAgICAgICAgICAje25leHR9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXJ0LnVwdG8oZmluaXNoKSB7IHxpfCBvdXQgPDwgYXQoaSkgfVxuICAgICAgZWxzZVxuICAgICAgICBpID0gYCRjb2VyY2VfdG8oZWxlbSwgI3s6OkludGVnZXJ9LCAndG9faW50JylgXG4gICAgICAgIG91dCA8PCBhdChpKVxuICAgICAgZW5kXG4gICAgZW5kXG5cbiAgICBvdXRcbiAgZW5kXG5cbiAgZGVmIHppcCgqb3RoZXJzLCAmYmxvY2spXG4gICAgJXh7XG4gICAgICB2YXIgcmVzdWx0ID0gW10sIHNpemUgPSBzZWxmLmxlbmd0aCwgcGFydCwgbywgaSwgaiwgamo7XG5cbiAgICAgIGZvciAoaiA9IDAsIGpqID0gb3RoZXJzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcbiAgICAgICAgbyA9IG90aGVyc1tqXTtcbiAgICAgICAgaWYgKG8uJCRpc19hcnJheSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvLiQkaXNfcmFuZ2UgfHwgby4kJGlzX2VudW1lcmF0b3IpIHtcbiAgICAgICAgICBvdGhlcnNbal0gPSBvLiR0YWtlKHNpemUpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIG90aGVyc1tqXSA9ICN7KFxuICAgICAgICAgIDo6T3BhbC5jb2VyY2VfdG8/KGBvYCwgOjpBcnJheSwgOnRvX2FyeSkgfHxcbiAgICAgICAgICA6Ok9wYWwuY29lcmNlX3RvIShgb2AsIDo6RW51bWVyYXRvciwgOnRvX2VudW0sIDplYWNoKVxuICAgICAgICApLnRvX2F9O1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XG4gICAgICAgIHBhcnQgPSBbc2VsZltpXV07XG5cbiAgICAgICAgZm9yIChqID0gMCwgamogPSBvdGhlcnMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuICAgICAgICAgIG8gPSBvdGhlcnNbal1baV07XG5cbiAgICAgICAgICBpZiAobyA9PSBudWxsKSB7XG4gICAgICAgICAgICBvID0gbmlsO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhcnRbaiArIDFdID0gbztcbiAgICAgICAgfVxuXG4gICAgICAgIHJlc3VsdFtpXSA9IHBhcnQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChibG9jayAhPT0gbmlsKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcbiAgICAgICAgICBPcGFsLnlpZWxkMShibG9jaywgcmVzdWx0W2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuaWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICBlbmRcblxuICBkZWYgc2VsZi5pbmhlcml0ZWQoa2xhc3MpXG4gICAgJXh7XG4gICAgICBrbGFzcy4kJHByb3RvdHlwZS4kdG9fYSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zbGljZSgwLCB0aGlzLmxlbmd0aCk7XG4gICAgICB9XG4gICAgfVxuICBlbmRcblxuICBkZWYgaW5zdGFuY2VfdmFyaWFibGVzXG4gICAgc3VwZXIucmVqZWN0IHsgfGl2YXJ8IGAvXkBcXGQrJC8udGVzdCgje2l2YXJ9KWAgfHwgaXZhciA9PSAnQGxlbmd0aCcgfVxuICBlbmRcblxuICBkZWYgcGFjaygqYXJncylcbiAgICA6Oktlcm5lbC5yYWlzZSBcIlRvIHVzZSBBcnJheSNwYWNrLCB5b3UgbXVzdCBmaXJzdCByZXF1aXJlICdjb3JlbGliL2FycmF5L3BhY2snLlwiXG4gIGVuZFxuXG4gIGFsaWFzIGFwcGVuZCBwdXNoXG4gIGFsaWFzIGZpbHRlciBzZWxlY3RcbiAgYWxpYXMgZmlsdGVyISBzZWxlY3QhXG4gIGFsaWFzIG1hcCBjb2xsZWN0XG4gIGFsaWFzIG1hcCEgY29sbGVjdCFcbiAgYWxpYXMgcHJlcGVuZCB1bnNoaWZ0XG4gIGFsaWFzIHNpemUgbGVuZ3RoXG4gIGFsaWFzIHNsaWNlIFtdXG4gIGFsaWFzIHRvX3MgaW5zcGVjdFxuXG4gIDo6T3BhbC5wcmlzdGluZSBzaW5nbGV0b25fY2xhc3MsIDphbGxvY2F0ZVxuICA6Ok9wYWwucHJpc3RpbmUgc2VsZiwgOmNvcHlfaW5zdGFuY2VfdmFyaWFibGVzLCA6aW5pdGlhbGl6ZV9kdXBcbmVuZFxuIl0sIm5hbWVzIjpbIjx0b3AgKHJlcXVpcmVkKT4iLCJzZWxmIiwicmVxdWlyZSIsIjxjbGFzczpBcnJheT4iLCJpbmNsdWRlIiwiRW51bWVyYWJsZSIsInRvX2EiLCJbXSIsImluaXRpYWxpemUiLCJzaXplIiwib2JqIiwiS2VybmVsIiwid2FybiIsIkludGVnZXI6Ok1BWCIsIkludGVnZXIiLCJyYWlzZSIsIkFyZ3VtZW50RXJyb3IiLCJyZXBsYWNlIiwicmVzcG9uZF90bz8iLCJ0b19hcnkiLCJ0cnlfY29udmVydCIsIk9wYWwiLCJjb2VyY2VfdG8/IiwiQXJyYXkiLCImIiwib3RoZXIiLCJ8IiwiKiIsImpvaW4iLCJ0b19zdHIiLCIrIiwiLSIsIjw8Iiwib2JqZWN0IiwiPD0+IiwiaGFzaCIsIj09Iiwib2JqZWN0X2lkIiwiaW5kZXgiLCJsZW5ndGgiLCJbXT0iLCJ2YWx1ZSIsImV4dHJhIiwiZGF0YSIsIlJhbmdlRXJyb3IiLCJpbnNwZWN0IiwiMSIsIkluZGV4RXJyb3IiLCJhbnk/IiwicGF0dGVybiIsImFzc29jIiwiYXQiLCJic2VhcmNoX2luZGV4IiwiYmxvY2tfZ2l2ZW4/IiwiZW51bV9mb3IiLCJUeXBlRXJyb3IiLCJjbGFzcyIsImJzZWFyY2giLCJibG9jayIsInRvX3Byb2MiLCJjeWNsZSIsIm4iLCJibG9jayBpbiBjeWNsZSIsImJsb2NrICgyIGxldmVscykgaW4gY3ljbGUiLCJuaWw/IiwiRmxvYXQ6OklORklOSVRZIiwiRmxvYXQiLCJjb2VyY2VfdG8hIiwiPiIsIjAiLCJlbnVtZXJhdG9yX3NpemUiLCJlbXB0eT8iLCJjbGVhciIsImNvdW50IiwiaW5pdGlhbGl6ZV9jb3B5IiwiY29sbGVjdCIsImJsb2NrIGluIGNvbGxlY3QiLCJibG9jayAoMiBsZXZlbHMpIGluIGNvbGxlY3QiLCJjb2xsZWN0ISIsImJsb2NrIGluIGNvbGxlY3QhIiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiBjb2xsZWN0ISIsImNvbWJpbmF0aW9uIiwibnVtIiwiYmxvY2sgaW4gY29tYmluYXRpb24iLCJibG9jayAoMiBsZXZlbHMpIGluIGNvbWJpbmF0aW9uIiwicmVwZWF0ZWRfY29tYmluYXRpb24iLCJibG9jayBpbiByZXBlYXRlZF9jb21iaW5hdGlvbiIsImJsb2NrICgyIGxldmVscykgaW4gcmVwZWF0ZWRfY29tYmluYXRpb24iLCJjb21wYWN0IiwiY29tcGFjdCEiLCJjb25jYXQiLCJvdGhlcnMiLCJtYXAiLCJibG9jayBpbiBjb25jYXQiLCJibG9jayAoMiBsZXZlbHMpIGluIGNvbmNhdCIsImVxdWFsPyIsImR1cCIsImVhY2giLCJkZWxldGUiLCJkZWxldGVfYXQiLCJkZWxldGVfaWYiLCJibG9jayBpbiBkZWxldGVfaWYiLCJibG9jayAoMiBsZXZlbHMpIGluIGRlbGV0ZV9pZiIsImRpZmZlcmVuY2UiLCJyZWR1Y2UiLCJhcnJheXMiLCJibG9jayBpbiBkaWZmZXJlbmNlIiwiYSIsImIiLCJibG9jayAoMiBsZXZlbHMpIGluIGRpZmZlcmVuY2UiLCJkaWciLCJpZHgiLCJpdGVtIiwiaWR4cyIsImRyb3AiLCJudW1iZXIiLCJibG9jayBpbiBlYWNoIiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiBlYWNoIiwiZWFjaF9pbmRleCIsImJsb2NrIGluIGVhY2hfaW5kZXgiLCJibG9jayAoMiBsZXZlbHMpIGluIGVhY2hfaW5kZXgiLCJlcWw/IiwiZmV0Y2giLCJkZWZhdWx0cyIsImZpbGwiLCJhcmdzIiwib25lIiwidHdvIiwiUmFuZ2UiLCJsZWZ0IiwicmlnaHQiLCJleGNsdWRlX2VuZD8iLCJmaXJzdCIsImZsYXR0ZW4iLCJsZXZlbCIsImZsYXR0ZW4hIiwiZnJlZXplIiwiZnJvemVuPyIsImluY2x1ZGU/IiwibWVtYmVyIiwiaW5zZXJ0IiwiX19pZF9fIiwiaW50ZXJzZWN0aW9uIiwiYmxvY2sgaW4gaW50ZXJzZWN0aW9uIiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiBpbnRlcnNlY3Rpb24iLCJpbnRlcnNlY3Q/IiwiISIsInNlcCIsIiQsIiwidG9fcyIsIk5vTWV0aG9kRXJyb3IiLCJuZXciLCJTdHJpbmciLCJrZWVwX2lmIiwiYmxvY2sgaW4ga2VlcF9pZiIsImJsb2NrICgyIGxldmVscykgaW4ga2VlcF9pZiIsImxhc3QiLCJtYXgiLCJtaW4iLCJwZXJtdXRhdGlvbiIsImJsb2NrIGluIHBlcm11dGF0aW9uIiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiBwZXJtdXRhdGlvbiIsInBlcm0iLCJ1c2VkIiwicmVwZWF0ZWRfcGVybXV0YXRpb24iLCJibG9jayBpbiByZXBlYXRlZF9wZXJtdXRhdGlvbiIsImJsb2NrICgyIGxldmVscykgaW4gcmVwZWF0ZWRfcGVybXV0YXRpb24iLCI+PSIsIioqIiwicG9wIiwicHJvZHVjdCIsInB1c2giLCJyYXNzb2MiLCJyZWplY3QiLCJibG9jayBpbiByZWplY3QiLCJibG9jayAoMiBsZXZlbHMpIGluIHJlamVjdCIsInJlamVjdCEiLCJibG9jayBpbiByZWplY3QhIiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiByZWplY3QhIiwib3JpZ2luYWwiLCJyZXZlcnNlIiwicmV2ZXJzZSEiLCJyZXZlcnNlX2VhY2giLCJibG9jayBpbiByZXZlcnNlX2VhY2giLCJibG9jayAoMiBsZXZlbHMpIGluIHJldmVyc2VfZWFjaCIsInJpbmRleCIsInJvdGF0ZSIsInJvdGF0ZSEiLCJjbnQiLCJhcnkiLCI8Y2xhc3M6c2VsZjo6U2FtcGxlUmFuZG9tPiIsInJhbmQiLCJyYW5kb20iLCJAcm5nIiwic2FtcGxlIiwib3B0aW9ucyIsIm8iLCJIYXNoIiwicm5nIiwiU2FtcGxlUmFuZG9tIiwic2VsZWN0IiwiYmxvY2sgaW4gc2VsZWN0IiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiBzZWxlY3QiLCJzZWxlY3QhIiwiYmxvY2sgaW4gc2VsZWN0ISIsImJsb2NrICgyIGxldmVscykgaW4gc2VsZWN0ISIsInNoaWZ0Iiwic2h1ZmZsZSIsInNodWZmbGUhIiwic2xpY2UhIiwicmVzdWx0IiwicmFuZ2UiLCJyYW5nZV9zdGFydCIsInJhbmdlX2VuZCIsInN0YXJ0Iiwic29ydCIsIjwiLCJzb3J0ISIsInNvcnRfYnkhIiwiYmxvY2sgaW4gc29ydF9ieSEiLCJibG9jayAoMiBsZXZlbHMpIGluIHNvcnRfYnkhIiwic29ydF9ieSIsInRha2UiLCJ0YWtlX3doaWxlIiwidG9faCIsImFycmF5IiwidHJhbnNwb3NlIiwiYmxvY2sgaW4gdHJhbnNwb3NlIiwicm93IiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiB0cmFuc3Bvc2UiLCIkcmV0X29yXzEiLCJ0aW1lcyIsImkiLCJibG9jayAoMyBsZXZlbHMpIGluIHRyYW5zcG9zZSIsImVudHJ5IiwidW5pb24iLCJ1bmlxIiwiYmxvY2sgaW4gdW5pb24iLCJibG9jayAoMiBsZXZlbHMpIGluIHVuaW9uIiwidmFsdWVzIiwidW5pcSEiLCJ1bnNoaWZ0IiwidmFsdWVzX2F0Iiwib3V0IiwiYmxvY2sgaW4gdmFsdWVzX2F0IiwiZWxlbSIsImJsb2NrICgyIGxldmVscykgaW4gdmFsdWVzX2F0IiwiaXNfYT8iLCJmaW5pc2giLCJlbmQiLCJiZWdpbiIsInVwdG8iLCJibG9jayAoMyBsZXZlbHMpIGluIHZhbHVlc19hdCIsInppcCIsIkVudW1lcmF0b3IiLCJpbmhlcml0ZWQiLCJrbGFzcyIsImluc3RhbmNlX3ZhcmlhYmxlcyIsImJsb2NrIGluIGluc3RhbmNlX3ZhcmlhYmxlcyIsIml2YXIiLCJibG9jayAoMiBsZXZlbHMpIGluIGluc3RhbmNlX3ZhcmlhYmxlcyIsInBhY2siLCJwcmlzdGluZSIsInNpbmdsZXRvbl9jbGFzcyJdLCJtYXBwaW5ncyI6IkFBQUFBLGdDQUFBQSxnQkFBQUE7RUFBQUE7O0VBQUFBOztFQUVBQyxJQUFBQyxTQUFBQSxDQUFRRixvQkFBUkU7RUFDQUQsSUFBQUMsU0FBQUEsQ0FBUUYsaUJBQVJFO0VBRUFGLE9BQUFHO0VBQUFBOztJQUFBQTs7O0lBQ0VGLElBQUFHLFNBQUFBLENBQVFDLGlCQUFSRDtJQUdDRDs7QUFHSEE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7O0FBRUFBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBOztBQUVBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQSwwQ0FBNENBLENBQUNBLEdBQURBLENBQUtHLE1BQUFBLENBQUFBLENBQU1IO0FBQ3ZEQTtBQUNBQTs7QUFFQUE7QUFDQUE7QUFDQUE7QUFDQUE7O0FBRUFBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBOztBQUVBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTs7QUFFQUE7QUFDQUE7QUFDQUE7QUFDQUE7O0FBRUFBO0FBQ0FBO0FBQ0FBO0lBRUVJLE1BQUlOLElBQUpNLFNBQUFBLHFCQXhFRixFQXdFRUE7QUFBQUEsTUFBQUE7OztNQXhFRjtNQXdFYztNQUNWQSxPQUFDQSw4QkFBR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UFDQSxDQUFEQSxDQUFJQSxPQUFBQSxDQUFJQSxDQUFKQSxDQUFPQTtBQUM5QkE7QUFDQUE7QUFDQUE7QUFDQUE7O0FBRUFBO0FBQ0FBOztBQUVBQTtBQUNBQTtJQXBERUEsQ0FBQUEsR0FBQUE7O0FBd0RGakM7QUFDQUE7QUFDQUE7O0FBRUFBO0FBQ0FBO0FBQ0FBOztBQUVBQTtBQUNBQTs7QUFFQUE7QUFDQUE7QUFDQUE7QUFDQUE7O0FBRUFBO0FBQ0FBO0FBQ0FBOztBQUVBQTtBQUNBQTtBQUNBQTs7QUFFQUE7QUFDQUE7O0FBRUFBO0FBQ0FBO0FBQ0FBO0FBQ0FBOztBQUVBQTtBQUNBQTtBQUNBQTs7QUFFQUE7QUFDQUE7QUFDQUE7O0FBRUFBO0FBQ0FBOztBQUVBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTs7QUFFQUE7QUFDQUE7QUFDQUE7QUFDQUE7O0FBRUFBO0FBQ0FBOztBQUVBQTtBQUNBQTtBQUNBQTs7QUFFQUE7O0FBRUFBO0FBQ0FBOztBQUVBQTtBQUNBQTtBQUNBQTtBQUNBQTs7QUFFQUE7QUFDQUE7QUFDQUE7QUFDQUE7O0FBRUFBO0FBQ0FBO0FBQ0FBO0FBQ0FBOztBQUVBQTtBQUNBQTtBQUNBQTs7QUFFQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7O0FBRUVJLElBQUFBLGtCQUFBQSxzQkFBTytCLEtBQUQsRUFBUUMsTUFBZGhDO0FBQUFBLE1BQUFBOzs7OztBQUVGQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtJQVhFQSxDQUFBQSxJQUFBQTs7QUFjQWlDLElBQUFBLG1CQUFBQSx5QkFBUUYsS0FBRCxFQUFRRyxLQUFSLEVBQWVDLEtBQXRCRjtBQUFBQSxNQUFBQTs7OztNQUNHQTtNQUVERyxPQUFPOztBQUVYSDs7QUFFQUE7QUFDQUE7QUFDQUEsaUJBQW1CQyxLQUFLbkMsTUFBQUEsQ0FBQUEsQ0FBTWtDO0FBQzlCQSxpQkFBbUJDLEtBQUt2Q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GlFQUFQdFA7SUFEVnNQLENBQUFBLElBQUFBO0lBSUEsYUFBTSxRQUFOLEVBQWEsTUFBYjtJQUNBLGFBQU0sUUFBTixFQUFhLFFBQWI7SUFDQSxhQUFNLFNBQU4sRUFBYyxTQUFkO0lBQ0EsYUFBTSxLQUFOLEVBQVUsU0FBVjtJQUNBLGFBQU0sTUFBTixFQUFXLFVBQVg7SUFDQSxhQUFNLFNBQU4sRUFBYyxTQUFkO0lBQ0EsYUFBTSxNQUFOLEVBQVcsUUFBWDtJQUNBLGFBQU0sT0FBTixFQUFZLElBQVo7SUFDQSxhQUFNLE1BQU4sRUFBVyxTQUFYO0lBRUFoUCxLQUFNaVAsVUFBQUEsQ0FBVXJRLElBQUFzUSxpQkFBQUEsQ0FBQUEsQ0FBaEIsRUFBaUMsVUFBM0JEO0lBQ05uUSxPQUFBa0IsS0FBTWlQLFVBQUFBLENBQVVyUSxJQUFoQixFQUFzQix5QkFBdEIsRUFBZ0QsZ0JBQTFDcVE7RUEvOEVSblEsR0FBTSxJQUFOQSxFQUFpQkgsS0FBakJHO0FBTEFIOyJ9fSx7Im9mZnNldCI6eyJsaW5lIjoyNDEwNywiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvcmVsaWIvYm9vbGVhbi5yYiJdLCJzb3VyY2VzQ29udGVudCI6WyIjIHVzZV9zdHJpY3Q6IHRydWVcblxuY2xhc3MgOjpCb29sZWFuIDwgYEJvb2xlYW5gXG4gIGBPcGFsLnByb3Aoc2VsZi4kJHByb3RvdHlwZSwgJyQkaXNfYm9vbGVhbicsIHRydWUpYFxuXG4gICV4e1xuICAgIHZhciBwcm9wZXJ0aWVzID0gWyckJGNsYXNzJywgJyQkbWV0YSddO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wZXJ0aWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VsZi4kJHByb3RvdHlwZSwgcHJvcGVydGllc1tpXSwge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzID09IHRydWUgID8gT3BhbC5UcnVlQ2xhc3MgOlxuICAgICAgICAgICAgICAgICB0aGlzID09IGZhbHNlID8gT3BhbC5GYWxzZUNsYXNzIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9wYWwuQm9vbGVhbjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNlbGYuJCRwcm90b3R5cGUsIFwiJCRpZFwiLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzID09IHRydWUgID8gMiA6XG4gICAgICAgICAgICAgICB0aGlzID09IGZhbHNlID8gMCA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmlsO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgY2xhc3MgPDwgc2VsZlxuICAgIGRlZiBhbGxvY2F0ZVxuICAgICAgOjpLZXJuZWwucmFpc2UgOjpUeXBlRXJyb3IsIFwiYWxsb2NhdG9yIHVuZGVmaW5lZCBmb3IgI3tuYW1lfVwiXG4gICAgZW5kXG5cbiAgICB1bmRlZiA6bmV3XG4gIGVuZFxuXG4gIGRlZiBfX2lkX19cbiAgICBgc2VsZi52YWx1ZU9mKCkgPyAyIDogMGBcbiAgZW5kXG5cbiAgZGVmICFcbiAgICBgc2VsZiAhPSB0cnVlYFxuICBlbmRcblxuICBkZWYgJihvdGhlcilcbiAgICBgKHNlbGYgPT0gdHJ1ZSkgPyAob3RoZXIgIT09IGZhbHNlICYmIG90aGVyICE9PSBuaWwpIDogZmFsc2VgXG4gIGVuZFxuXG4gIGRlZiB8KG90aGVyKVxuICAgIGAoc2VsZiA9PSB0cnVlKSA/IHRydWUgOiAob3RoZXIgIT09IGZhbHNlICYmIG90aGVyICE9PSBuaWwpYFxuICBlbmRcblxuICBkZWYgXihvdGhlcilcbiAgICBgKHNlbGYgPT0gdHJ1ZSkgPyAob3RoZXIgPT09IGZhbHNlIHx8IG90aGVyID09PSBuaWwpIDogKG90aGVyICE9PSBmYWxzZSAmJiBvdGhlciAhPT0gbmlsKWBcbiAgZW5kXG5cbiAgZGVmID09KG90aGVyKVxuICAgIGAoc2VsZiA9PSB0cnVlKSA9PT0gb3RoZXIudmFsdWVPZigpYFxuICBlbmRcblxuICBkZWYgc2luZ2xldG9uX2NsYXNzXG4gICAgYHNlbGYuJCRtZXRhYFxuICBlbmRcblxuICBkZWYgdG9fc1xuICAgIGAoc2VsZiA9PSB0cnVlKSA/ICd0cnVlJyA6ICdmYWxzZSdgXG4gIGVuZFxuXG4gIGRlZiBkdXBcbiAgICBzZWxmXG4gIGVuZFxuXG4gIGRlZiBjbG9uZShmcmVlemU6IHRydWUpXG4gICAgc2VsZlxuICBlbmRcblxuICAjIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL29wYWwvb3BhbC9pc3N1ZXMvMjIzMFxuICAjXG4gICMgVGhpcyBpcyBhIGhhY2sgdGhhdCBhbGxvd3MgeW91IHRvIGFkZCBtZXRob2RzIHRvIFRydWVDbGFzcyBhbmQgRmFsc2VDbGFzcy5cbiAgIyBEbyBub3RlLCB0aGF0IHdoaWxlIHRydWUgYW5kIGZhbHNlIGhhdmUgYSBjb3JyZWN0ICQkY2xhc3MgKGl0J3MgZWl0aGVyXG4gICMgVHJ1ZUNsYXNzIG9yIEZhbHNlQ2xhc3MpLCB0aGVpciBwcm90b3R5cGUgaXMgYEJvb2xlYW4uJCRwcm90b3R5cGVgLCB3aGljaFxuICAjIGJhc2ljYWxseSBtZWFucyB0aGF0IHdoZW4gY2FsbGluZyBgdHJ1ZS5zb21ldGhpbmdgIHdlIGFjdHVhbGx5IGNhbGxcbiAgIyBgQm9vbGVhbiNzb21ldGhpbmdgIGluc3RlYWQgb2YgYFRydWVDbGFzcyNzb21ldGhpbmdgLiBTbyB1c2luZ1xuICAjIG1ldGhvZF9taXNzaW5nIHdlIGRpc3BhdGNoIGl0IHRvIGBUcnVlQ2xhc3MvRmFsc2VDbGFzcyNzb21ldGhpbmdgIGNvcnJlY3RseS5cbiAgI1xuICAjIFRoZSBkb3duc2lkZSBpcyB0aGF0IGEgY29ycmVjdCBpbXBsZW1lbnRhdGlvbiB3b3VsZCBhbHNvIGFsbG93IHVzIHRvIG92ZXJyaWRlXG4gICMgdGhlIG1ldGhvZHMgZGVmaW5lZCBvbiBCb29sZWFuLCBidXQgb3VyIGltcGxlbWVudGF0aW9uIGRvZXNuJ3QgYWxsb3cgdGhhdCxcbiAgIyB1bmxlc3MgeW91IGRlZmluZSB0aGVtIG9uIEJvb2xlYW4gYW5kIG5vdCBvbiBUcnVlQ2xhc3MvRmFsc2VDbGFzcy5cbiAgZGVmIG1ldGhvZF9taXNzaW5nKG1ldGhvZCwgKmFyZ3MsICZibG9jaylcbiAgICBgdmFyIGJvZHkgPSBzZWxmLiQkY2xhc3MuJCRwcm90b3R5cGVbJyQnICsgI3ttZXRob2R9XWBcbiAgICBzdXBlciB1bmxlc3MgYHR5cGVvZiBib2R5ICE9PSAndW5kZWZpbmVkJyAmJiAhYm9keS4kJHN0dWJgXG4gICAgYE9wYWwuc2VuZChzZWxmLCBib2R5LCAje2FyZ3N9LCAje2Jsb2NrfSlgXG4gIGVuZFxuXG4gIGRlZiByZXNwb25kX3RvX21pc3Npbmc/KG1ldGhvZCwgX2luY2x1ZGVfYWxsID0gZmFsc2UpXG4gICAgYHZhciBib2R5ID0gc2VsZi4kJGNsYXNzLiQkcHJvdG90eXBlWyckJyArICN7bWV0aG9kfV1gXG4gICAgYHR5cGVvZiBib2R5ICE9PSAndW5kZWZpbmVkJyAmJiAhYm9keS4kJHN0dWJgXG4gIGVuZFxuXG4gIGFsaWFzIGVxbD8gPT1cbiAgYWxpYXMgZXF1YWw/ID09XG4gIGFsaWFzIGluc3BlY3QgdG9fc1xuICBhbGlhcyBvYmplY3RfaWQgX19pZF9fXG5lbmRcblxuY2xhc3MgOjpUcnVlQ2xhc3MgPCA6OkJvb2xlYW47IGVuZFxuY2xhc3MgOjpGYWxzZUNsYXNzIDwgOjpCb29sZWFuOyBlbmRcbiJdLCJuYW1lcyI6WyI8dG9wIChyZXF1aXJlZCk+IiwiPGNsYXNzOkJvb2xlYW4+IiwiYWxsb2NhdGUiLCJLZXJuZWwiLCJyYWlzZSIsIlR5cGVFcnJvciIsInNlbGYiLCJuYW1lIiwiX19pZF9fIiwiISIsIiYiLCJvdGhlciIsInwiLCJeIiwiPT0iLCJzaW5nbGV0b25fY2xhc3MiLCJ0b19zIiwiZHVwIiwiY2xvbmUiLCIka3dhcmdzIiwibWV0aG9kX21pc3NpbmciLCJtZXRob2QiLCJhcmdzIiwiYmxvY2siLCJyZXNwb25kX3RvX21pc3Npbmc/IiwiX2luY2x1ZGVfYWxsIiwiPGNsYXNzOlRydWVDbGFzcz4iLCJCb29sZWFuIiwiPGNsYXNzOkZhbHNlQ2xhc3M+Il0sIm1hcHBpbmdzIjoiQUFBQUEsa0NBQUFBLGdCQUFBQTtFQUFBQTtFQUFBQTs7RUFBQUE7O0VBRUFDO0VBQUFBOztJQUFBQTs7O0lBQ0dBOztBQUdIQTs7QUFFQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7QUFDQUE7O0FBRUFBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0FBQ0FBO0lBRUU7Ozs7QUFDRUMsTUFBQUEsd0JBQUFBLG9CQUFBQTtBQUFBQSxRQUFBQTs7UUFDRUEsT0FBQUMsT0FBUUMsT0FBQUEsQ0FBT0MsZ0JBQWYsRUFBNkJILDBCQUFELEdBQUEsQ0FBMkJJLElBQUFDLE1BQUFBLENBQUFBLENBQTNCLENBQXBCSDtNQURWRixDQUFBQSxHQUFBQTs7O01BSUEsc0JBQU0sS0FBTjtNQXBDSixPQUFBO0lBK0JFLDRCQUFTSSxJQUFUOztBQVFBRSxJQUFBQSxzQkFBQUEsa0JBQUFBO0FBQUFBLE1BQUFBOztNQUNFQSxPQUFDQSxzQkFBREE7SUFERkEsQ0FBQUEsR0FBQUE7O0FBSUFDLElBQUFBLGlCQUFBQSwwQkFBQUE7QUFBQUEsTUFBQUE7O01BQ0VBLE9BQUNBLFlBQURBO0lBREZBLENBQUFBLEdBQUFBOztBQUlBQyxJQUFBQSxpQkFBQUEsc0JBQU1DLEtBQU5EO0FBQUFBLE1BQUFBOztNQUNFQSxPQUFDQSwyREFBREE7SUFERkEsQ0FBQUEsR0FBQUE7O0FBSUFFLElBQUFBLGlCQUFBQSxzQkFBTUQsS0FBTkM7QUFBQUEsTUFBQUE7O01BQ0VBLE9BQUNBLDBEQUFEQTtJQURGQSxDQUFBQSxHQUFBQTs7QUFJQUMsSUFBQUEsaUJBQUFBLHNCQUFNRixLQUFORTtBQUFBQSxNQUFBQTs7TUFDRUEsT0FBQ0Esd0ZBQURBO0lBREZBLENBQUFBLEdBQUFBOztBQUlBQyxJQUFBQSxrQkFBQUEsMkJBQU9ILEtBQVBHO0FBQUFBLE1BQUFBOztNQUNFQSxPQUFDQSxrQ0FBREE7SUFERkEsQ0FBQUEsR0FBQUE7O0FBSUFDLElBQUFBLCtCQUFBQSwyQkFBQUE7QUFBQUEsTUFBQUE7O01BQ0VBLE9BQUNBLFdBQURBO0lBREZBLENBQUFBLEdBQUFBOztBQUlBQyxJQUFBQSxvQkFBQUEsZ0JBQUFBO0FBQUFBLE1BQUFBOztNQUNFQSxPQUFDQSxpQ0FBREE7SUFERkEsQ0FBQUEsR0FBQUE7O0FBSUFDLElBQUFBLG1CQUFBQSxZQUFBQSxHQUFBQTs7QUFJQUMsSUFBQUEscUJBQUFBLGlCQTNFRkMsT0EyRUVEO0FBQUFBLE1BQUFBOzs7TUEzRUY7O01BMkVZLGtDQUFBLDZCQUFRO01BQ2hCQSxPQUFBWjtJQURGWSxDQUFBQSxJQUFBQTs7QUFnQkFFLElBQUFBLDhCQUFBQSwwQkFBbUJDLE1BQUQsRUEzRnBCLEVBMkZFRDtBQUFBQSxNQUFBQTs7TUFBQUE7OztNQTNGRjtNQTJGNkI7TUFDeEJBLDBDQUE0Q0MsTUFBT0Q7TUFDcEQsS0FBQSxRQUFjQSwyQ0FBZCxDQUFBO1FBQUEsT0FBQWQsSUFBQSxFQUFBLGtFQUFBLGtCQUFBLEVBQUEsQ0FBQWUsTUFBQSxDQUFBLFFBQUEsTUFBQUMsSUFBQSxDQUFBLENBQUEsRUFBQSxLQUFBO01BQUE7TUFDQUYsT0FBQ0Esc0JBQXdCRSxJQUFLRixFQUFJRyxLQUFNSDtJQUgxQ0EsQ0FBQUEsSUFBQUE7O0FBTUFJLElBQUFBLG1DQUFBQSw0Q0FBd0JILE1BQUQsRUFBU0ksWUFBaENEO0FBQUFBLE1BQUFBOzs7TUFBZ0MseUNBQWU7TUFDNUNBLDBDQUE0Q0gsTUFBT0c7TUFDcERBLE9BQUNBLDJDQUFEQTtJQUZGQSxDQUFBQSxJQUFBQTtJQUtBLGFBQU0sTUFBTixFQUFXLElBQVg7SUFDQSxhQUFNLFFBQU4sRUFBYSxJQUFiO0lBQ0EsYUFBTSxTQUFOLEVBQWMsTUFBZDtJQUNBdkIsT0FBQSxhQUFNLFdBQU4sRUFBZ0IsUUFBaEI7RUF2R0ZBLEdBQU0sSUFBTkEsRUFBbUJELE9BQW5CQztFQTBHQXlCLE9BQU0sSUFBTkEsRUFBb0JDLGNBQXBCRDtFQUNBMUIsT0FBQTRCLFFBQU0sSUFBTkEsRUFBcUJELGNBQXJCQztBQTdHQTVCOyJ9fSx7Im9mZnNldCI6eyJsaW5lIjoyNDI1MiwiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvcmVsaWIvbmlsLnJiIl0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIDo6TmlsQ2xhc3NcbiAgYHNlbGYuJCRwcm90b3R5cGUuJCRtZXRhID0gI3tzZWxmfWBcblxuICBjbGFzcyA8PCBzZWxmXG4gICAgZGVmIGFsbG9jYXRlXG4gICAgICA6Oktlcm5lbC5yYWlzZSA6OlR5cGVFcnJvciwgXCJhbGxvY2F0b3IgdW5kZWZpbmVkIGZvciAje25hbWV9XCJcbiAgICBlbmRcblxuICAgIHVuZGVmIDpuZXdcbiAgZW5kXG5cbiAgZGVmICFcbiAgICB0cnVlXG4gIGVuZFxuXG4gIGRlZiAmKG90aGVyKVxuICAgIGZhbHNlXG4gIGVuZFxuXG4gIGRlZiB8KG90aGVyKVxuICAgIGBvdGhlciAhPT0gZmFsc2UgJiYgb3RoZXIgIT09IG5pbGBcbiAgZW5kXG5cbiAgZGVmIF4ob3RoZXIpXG4gICAgYG90aGVyICE9PSBmYWxzZSAmJiBvdGhlciAhPT0gbmlsYFxuICBlbmRcblxuICBkZWYgPT0ob3RoZXIpXG4gICAgYG90aGVyID09PSBuaWxgXG4gIGVuZFxuXG4gIGRlZiBkdXBcbiAgICBuaWxcbiAgZW5kXG5cbiAgZGVmIGNsb25lKGZyZWV6ZTogdHJ1ZSlcbiAgICBuaWxcbiAgZW5kXG5cbiAgZGVmIGluc3BlY3RcbiAgICAnbmlsJ1xuICBlbmRcblxuICBkZWYgbmlsP1xuICAgIHRydWVcbiAgZW5kXG5cbiAgZGVmIHNpbmdsZXRvbl9jbGFzc1xuICAgIDo6TmlsQ2xhc3NcbiAgZW5kXG5cbiAgZGVmIHRvX2FcbiAgICBbXVxuICBlbmRcblxuICBkZWYgdG9faFxuICAgIGBPcGFsLmhhc2goKWBcbiAgZW5kXG5cbiAgZGVmIHRvX2lcbiAgICAwXG4gIGVuZFxuXG4gIGRlZiB0b19zXG4gICAgJydcbiAgZW5kXG5cbiAgZGVmIHRvX2NcbiAgICA6OkNvbXBsZXgubmV3KDAsIDApXG4gIGVuZFxuXG4gIGRlZiByYXRpb25hbGl6ZSgqYXJncylcbiAgICA6Oktlcm5lbC5yYWlzZSA6OkFyZ3VtZW50RXJyb3IgaWYgYXJncy5sZW5ndGggPiAxXG4gICAgOjpLZXJuZWwuUmF0aW9uYWwoMCwgMSlcbiAgZW5kXG5cbiAgZGVmIHRvX3JcbiAgICA6Oktlcm5lbC5SYXRpb25hbCgwLCAxKVxuICBlbmRcblxuICBkZWYgaW5zdGFuY2VfdmFyaWFibGVzXG4gICAgW11cbiAgZW5kXG5cbiAgYWxpYXMgdG9fZiB0b19pXG5lbmRcbiJdLCJuYW1lcyI6WyI8dG9wIChyZXF1aXJlZCk+IiwiPGNsYXNzOk5pbENsYXNzPiIsInNlbGYiLCJhbGxvY2F0ZSIsIktlcm5lbCIsInJhaXNlIiwiVHlwZUVycm9yIiwibmFtZSIsIiEiLCImIiwifCIsIm90aGVyIiwiXiIsIj09IiwiZHVwIiwiY2xvbmUiLCIka3dhcmdzIiwiaW5zcGVjdCIsIm5pbD8iLCJzaW5nbGV0b25fY2xhc3MiLCJOaWxDbGFzcyIsInRvX2EiLCJ0b19oIiwidG9faSIsIjAiLCJ0b19zIiwidG9fYyIsIkNvbXBsZXgiLCJuZXciLCJyYXRpb25hbGl6ZSIsIj4iLCJhcmdzIiwibGVuZ3RoIiwiMSIsIkFyZ3VtZW50RXJyb3IiLCJSYXRpb25hbCIsInRvX3IiLCJpbnN0YW5jZV92YXJpYWJsZXMiXSwibWFwcGluZ3MiOiJBQUFBQSw4QkFBQUEsZ0JBQUFBO0VBQUFBOztFQUFBQTtFQUFBQSxPQUFBQztFQUFBQTs7SUFBQUE7OztJQUNHQSwwQkFBNEJDO0lBRTdCOzs7O0FBQ0VDLE1BQUFBLHdCQUFBQSxvQkFBQUE7QUFBQUEsUUFBQUE7O1FBQ0VBLE9BQUFDLE9BQVFDLE9BQUFBLENBQU9DLGdCQUFmLEVBQTZCSCwwQkFBRCxHQUFBLENBQTJCRCxJQUFBSyxNQUFBQSxDQUFBQSxDQUEzQixDQUFwQkY7TUFEVkYsQ0FBQUEsR0FBQUE7OztNQUlBLHNCQUFNLEtBQU47TUFSSixPQUFBO0lBR0UsNEJBQVNELElBQVQ7O0FBUUFNLElBQUFBLGlCQUFBQSxZQUNFLElBREZBLENBQUFBLEdBQUFBOztBQUlBQyxJQUFBQSxpQkFBQUEsWUFDRSxLQURGQSxDQUFBQSxHQUFBQTs7QUFJQUMsSUFBQUEsaUJBQUFBLHVCQUFNQyxLQUFORDtBQUFBQTtNQUNFQSxPQUFDQSxnQ0FBREE7SUFERkEsQ0FBQUEsR0FBQUE7O0FBSUFFLElBQUFBLGlCQUFBQSx1QkFBTUQsS0FBTkM7QUFBQUE7TUFDRUEsT0FBQ0EsZ0NBQURBO0lBREZBLENBQUFBLEdBQUFBOztBQUlBQyxJQUFBQSxrQkFBQUEsNEJBQU9GLEtBQVBFO0FBQUFBO01BQ0VBLE9BQUNBLGFBQURBO0lBREZBLENBQUFBLEdBQUFBOztBQUlBQyxJQUFBQSxtQkFBQUEsWUFDRSxHQURGQSxDQUFBQSxHQUFBQTs7QUFJQUMsSUFBQUEscUJBQUFBLGlCQW5DRkMsT0FtQ0VEO0FBQUFBLE1BQUFBOzs7TUFuQ0Y7O01BbUNZLGtDQUFBLDZCQUFRO01BQ2hCQSxPQUFBO0lBREZBLENBQUFBLElBQUFBOztBQUlBRSxJQUFBQSx1QkFBQUEsWUFDRWhCLEtBREZnQixDQUFBQSxHQUFBQTs7QUFJQUMsSUFBQUEsb0JBQUFBLFlBQ0UsSUFERkEsQ0FBQUEsR0FBQUE7O0FBSUFDLElBQUFBLCtCQUFBQSwyQkFBQUE7QUFBQUE7TUFDRUEsT0FBQUM7SUFERkQsQ0FBQUEsR0FBQUE7O0FBSUFFLElBQUFBLG9CQUFBQSxnQkFBQUE7QUFBQUE7TUFDRUEsT0FBQTtJQURGQSxDQUFBQSxHQUFBQTs7QUFJQUMsSUFBQUEsb0JBQUFBLGdCQUFBQTtBQUFBQTtNQUNFQSxPQUFDQSxXQUFEQTtJQURGQSxDQUFBQSxHQUFBQTs7QUFJQUMsSUFBQUEsb0JBQUFBLFlBQ0VDLENBREZELENBQUFBLEdBQUFBOztBQUlBRSxJQUFBQSxvQkFBQUEsWUFDRXhCLEVBREZ3QixDQUFBQSxHQUFBQTs7QUFJQUMsSUFBQUEsb0JBQUFBLGdCQUFBQTtBQUFBQTtNQUNFQSxPQUFBQyxjQUFTQyxLQUFBQSxDQUFLSixDQUFkLEVBQWlCQSxDQUFSSTtJQURYRixDQUFBQSxHQUFBQTs7QUFJQUcsSUFBQUEsMkJBQUFBLHVCQXZFRixFQXVFRUE7QUFBQUEsTUFBQUE7OztNQXZFRjtNQXVFa0I7TUFDZCxJQUFBLFFBQThDQyxPQUFaQyxJQUFJQyxRQUFBQSxDQUFBQSxDQUFRRixFQUFFRyxDQUFGSCxDQUE5QyxDQUFBO1FBQUExQixPQUFRQyxPQUFBQSxDQUFPNkIsb0JBQVA3QjtNQUFSO01BQ0F3QixPQUFBekIsT0FBUStCLFVBQUFBLENBQVVYLENBQWxCLEVBQXFCUyxDQUFiRTtJQUZWTixDQUFBQSxJQUFBQTs7QUFLQU8sSUFBQUEsb0JBQUFBLGdCQUFBQTtBQUFBQTtNQUNFQSxPQUFBaEMsT0FBUStCLFVBQUFBLENBQVVYLENBQWxCLEVBQXFCUyxDQUFiRTtJQURWQyxDQUFBQSxHQUFBQTs7QUFJQUMsSUFBQUEsa0NBQUFBLDhCQUFBQTtBQUFBQTtNQUNFQSxPQUFBO0lBREZBLENBQUFBLEdBQUFBO0lBSUFwQyxPQUFBLGFBQU0sTUFBTixFQUFXLE1BQVg7RUFwRkZBLEdBQU0sSUFBTkEsRUFBQUEsSUFBQUE7QUFBQUQ7In19LHsib2Zmc2V0Ijp7ImxpbmUiOjI0MzYyLCJjb2x1bW4iOjB9LCJtYXAiOnsidmVyc2lvbiI6Mywic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29yZWxpYi9lbnVtZXJhdG9yL2dlbmVyYXRvci5yYiJdLCJzb3VyY2VzQ29udGVudCI6WyIjIGhlbHBlcnM6IGRlbnlfZnJvemVuX2FjY2Vzc1xuXG5jbGFzcyBFbnVtZXJhdG9yXG4gIGNsYXNzIEdlbmVyYXRvclxuICAgIGluY2x1ZGUgOjpFbnVtZXJhYmxlXG5cbiAgICBkZWYgaW5pdGlhbGl6ZSgmYmxvY2spXG4gICAgICBgJGRlbnlfZnJvemVuX2FjY2VzcyhzZWxmKWBcblxuICAgICAgOjpLZXJuZWwucmFpc2UgOjpMb2NhbEp1bXBFcnJvciwgJ25vIGJsb2NrIGdpdmVuJyB1bmxlc3MgYmxvY2tcblxuICAgICAgQGJsb2NrID0gYmxvY2tcbiAgICBlbmRcblxuICAgIGRlZiBlYWNoKCphcmdzLCAmYmxvY2spXG4gICAgICB5aWVsZGVyID0gWWllbGRlci5uZXcoJmJsb2NrKVxuXG4gICAgICAleHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBhcmdzLnVuc2hpZnQoI3t5aWVsZGVyfSk7XG5cbiAgICAgICAgICBPcGFsLnlpZWxkWCgje0BibG9ja30sIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgaWYgKGUgJiYgZS4kdGhyb3dlcl90eXBlID09IFwiYnJlYWtlclwiKSB7XG4gICAgICAgICAgICByZXR1cm4gZS4kdjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzZWxmXG4gICAgZW5kXG4gIGVuZFxuZW5kXG4iXSwibmFtZXMiOlsiPHRvcCAocmVxdWlyZWQpPiIsIjxjbGFzczpFbnVtZXJhdG9yPiIsIjxjbGFzczpHZW5lcmF0b3I+Iiwic2VsZiIsImluY2x1ZGUiLCJFbnVtZXJhYmxlIiwiaW5pdGlhbGl6ZSIsImJsb2NrIiwiS2VybmVsIiwicmFpc2UiLCJMb2NhbEp1bXBFcnJvciIsIkBibG9jayIsImVhY2giLCJ5aWVsZGVyIiwibmV3IiwiWWllbGRlciIsInRvX3Byb2MiXSwibWFwcGluZ3MiOiJBQUFBQSwrQ0FBQUEsZ0JBQUFBO0VBQUFBOztFQUFBQTtFQUVBQSxPQUFBQztFQUFBQTs7SUFBQUE7O0lBQ0VBLE9BQUFDO0lBQUFBOztNQUFBQTs7QUFBQUE7O01BQ0VDLElBQUFDLFNBQUFBLENBQVFDLGlCQUFSRDs7QUFFQUUsTUFBQUEsMEJBQUFBLHNCQUFBQTtBQUFBQSxRQUFBQTs7UUFBQUE7OztRQUNHQTtRQUVELEtBQUEsUUFBeURDLEtBQXpELENBQUE7VUFBQUMsT0FBUUMsT0FBQUEsQ0FBT0MscUJBQWYsRUFBaUNKLGdCQUF6Qkc7UUFBUjtRQUVBSCxPQUFBSyxDQUFBQSxhQUFTSixLQUFUSTtNQUxGTCxDQUFBQSxHQUFBQTtNQVFBSixPQUFBVSxvQkFBQUEsZ0JBZEosRUFjSUE7QUFBQUEsUUFBQUE7O1FBQUFBOzs7UUFkSjtRQWNhO1FBQ1BDLFVBQWlCQyxNQUFQQyxhQUFPRCxPQUFBQSxFQUFBQSxFQUFBQSxFQUFNUCxLQUFEUyxTQUFBQSxDQUFBQSxDQUFMRjs7QUFHdkJGO0FBQ0FBLHVCQUF5QkMsT0FBUUQ7O0FBRWpDQSxzQkFBd0JELFVBQU9DO0FBQy9CQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtBQUNBQTtRQUVNQSxPQUFBVDtNQW5CRlMsQ0FBQUEsSUFBQUE7SUFYRlYsR0FBQUEsV0FBQUEsRUFBQUEsSUFBQUE7RUFERkQsR0FBQUEsV0FBQUEsRUFBQUEsSUFBQUE7QUFGQUQ7In19LHsib2Zmc2V0Ijp7ImxpbmUiOjI0NDIyLCJjb2x1bW4iOjB9LCJtYXAiOnsidmVyc2lvbiI6Mywic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29yZWxpYi9lbnVtZXJhdG9yL2NoYWluLnJiIl0sInNvdXJjZXNDb250ZW50IjpbIiMgaGVscGVyczogZGVueV9mcm96ZW5fYWNjZXNzXG5cbmNsYXNzIDo6RW51bWVyYXRvclxuICBjbGFzcyBzZWxmOjpDaGFpbiA8IHNlbGZcbiAgICBkZWYgaW5pdGlhbGl6ZSgqZW51bXMpXG4gICAgICBgJGRlbnlfZnJvemVuX2FjY2VzcyhzZWxmKWBcblxuICAgICAgQGVudW1zID0gZW51bXNcbiAgICAgIEBpdGVyYXRlZCA9IFtdXG4gICAgICBAb2JqZWN0ID0gc2VsZlxuICAgIGVuZFxuXG4gICAgZGVmIGVhY2goKmFyZ3MsICZibG9jaylcbiAgICAgIHJldHVybiB0b19lbnVtKDplYWNoLCAqYXJncykgeyBzaXplIH0gdW5sZXNzIGJsb2NrX2dpdmVuP1xuXG4gICAgICBAZW51bXMuZWFjaCBkbyB8ZW51bXxcbiAgICAgICAgQGl0ZXJhdGVkIDw8IGVudW1cbiAgICAgICAgZW51bS5lYWNoKCphcmdzLCAmYmxvY2spXG4gICAgICBlbmRcblxuICAgICAgc2VsZlxuICAgIGVuZFxuXG4gICAgZGVmIHNpemUoKmFyZ3MpXG4gICAgICBhY2N1bSA9IDBcbiAgICAgIEBlbnVtcy5lYWNoIGRvIHxlbnVtfFxuICAgICAgICBzaXplID0gZW51bS5zaXplKCphcmdzKVxuICAgICAgICByZXR1cm4gc2l6ZSBpZiBbbmlsLCA6OkZsb2F0OjpJTkZJTklUWV0uaW5jbHVkZT8gc2l6ZVxuICAgICAgICBhY2N1bSArPSBzaXplXG4gICAgICBlbmRcbiAgICAgIGFjY3VtXG4gICAgZW5kXG5cbiAgICBkZWYgcmV3aW5kXG4gICAgICBAaXRlcmF0ZWQucmV2ZXJzZV9lYWNoIGRvIHxlbnVtfFxuICAgICAgICBlbnVtLnJld2luZCBpZiBlbnVtLnJlc3BvbmRfdG8/IDpyZXdpbmRcbiAgICAgIGVuZFxuICAgICAgQGl0ZXJhdGVkID0gW11cbiAgICAgIHNlbGZcbiAgICBlbmRcblxuICAgIGRlZiBpbnNwZWN0XG4gICAgICBcIiM8RW51bWVyYXRvcjo6Q2hhaW46ICN7QGVudW1zLmluc3BlY3R9PlwiXG4gICAgZW5kXG4gIGVuZFxuZW5kXG4iXSwibmFtZXMiOlsiPHRvcCAocmVxdWlyZWQpPiIsIjxjbGFzczpFbnVtZXJhdG9yPiIsIjxjbGFzczpzZWxmOjpDaGFpbj4iLCJpbml0aWFsaXplIiwiQGVudW1zIiwiZW51bXMiLCJAaXRlcmF0ZWQiLCJAb2JqZWN0Iiwic2VsZiIsImVhY2giLCJibG9ja19naXZlbj8iLCJ0b19lbnVtIiwiYXJncyIsImJsb2NrIGluIGVhY2giLCJibG9jayAoMiBsZXZlbHMpIGluIGVhY2giLCJzaXplIiwiZW51bSQiLCI8PCIsImJsb2NrIiwidG9fcHJvYyIsImFjY3VtIiwiMCIsImJsb2NrIGluIHNpemUiLCJibG9jayAoMiBsZXZlbHMpIGluIHNpemUiLCJGbG9hdDo6SU5GSU5JVFkiLCJGbG9hdCIsImluY2x1ZGU/IiwiKyIsInJld2luZCIsInJldmVyc2VfZWFjaCIsImJsb2NrIGluIHJld2luZCIsInJlc3BvbmRfdG8/IiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiByZXdpbmQiLCJpbnNwZWN0Il0sIm1hcHBpbmdzIjoiQUFBQUEsMkNBQUFBLGdCQUFBQTtFQUFBQTs7RUFBQUE7RUFFQUEsT0FBQUM7RUFBQUE7OztJQUNFQSxPQUFBQztJQUFBQTs7TUFBQUE7O0FBQUFBOzs7QUFDRUMsTUFBQUEsMEJBQUFBLHNCQUpKLEVBSUlBO0FBQUFBLFFBQUFBOzs7UUFKSjtRQUltQjtRQUNaQTtRQUVEQyxhQUFTQztRQUNUQyxnQkFBWTtRQUNaSCxPQUFBSSxDQUFBQSxjQUFVQyxJQUFWRDtNQUxGSixDQUFBQSxJQUFBQTs7QUFRQU0sTUFBQUEsb0JBQUFBLGdCQVpKLEVBWUlBO0FBQUFBLFFBQUFBOztRQUFBQTs7O1FBWko7UUFZYTtRQUNQLEtBQTZDQyxlQUE3QztVQUFBLE9BQU9DLE1BQUFILElBQUFHLFdBQUFBLEVBQUEsQ0FBUSxNQUFSLENBQUEsUUFBZSxNQUFDQyxJQUFELENBQWYsQ0FBQUQsRUFBQUUsYUFBQUEsRUFBQUM7O1lBQXdCQSxPQUFBTixJQUFBTyxNQUFBQSxDQUFBQSxDQUF4QkYsQ0FBQUEsR0FBQUEscUJBQUFBLENBQUFGO1FBQVA7UUFFTUYsTUFBTkwsVUFBTUssUUFBQUEsRUFBQUEsRUFBQUEsRUFBTkksYUFBZ0JHLEtBQWhCSCxFQUFBQztBQUFBQTs7O1VBQWdCO1VBQ2RSLGFBQVVXLE9BQUFBLENBQUdELEtBQUhDO1VBQ1ZILE9BQUlMLE1BQUpPLEtBQUlQLFFBQUFBLEVBQU0sTUFBQ0csSUFBRCxDQUFOSCxFQUFjUyxLQUFEQyxTQUFBQSxDQUFBQSxDQUFiVixFQUZOSSxDQUFBQSxHQUFBQSxxQkFBQUEsQ0FBTUo7UUFLTkEsT0FBQUQ7TUFSRkMsQ0FBQUEsSUFBQUE7O0FBV0FNLE1BQUFBLG9CQUFBQSxnQkF2QkosRUF1QklBLEdBQUFBLE1BQUFBLElBQUFBLDhCQUFBQTtBQUFBQSxRQUFBQTs7O1FBdkJKO1FBdUJhO1FBQ1BLLFFBQVFDO1FBQ0ZaLE1BQU5MLFVBQU1LLFFBQUFBLEVBQUFBLEVBQUFBLEVBQU5hLGFBQWdCTixLQUFoQk0sRUFBQUM7OztVQUFnQjtVQUNkUixPQUFXQSxNQUFKQyxLQUFJRCxRQUFBQSxFQUFNLE1BQUNILElBQUQsQ0FBTkc7VUFDWCxJQUFBLFFBQWUsQ0FBQyxHQUFELEVBQU1TLElBQUFDLFlBQUFELGFBQU4sQ0FBd0JFLGFBQUFBLENBQVVYLElBQVZXLENBQXZDLENBQUE7WUFBQSxTQUFBLFFBQU9YLElBQVA7VUFBQTtVQUNBUSxPQUFBSCxDQUFBQSxRQUFNTyxTQUFOUCxLQUFNTyxFQUFHWixJQUFIWSxDQUFOUCxFQUhGRSxDQUFBQSxHQUFBQSw0QkFBQUEsQ0FBTWI7UUFLTk0sT0FBQUssTUFQRkw7VUFBQUE7VUFBQUE7UUFBQUE7TUFBQUEsQ0FBQUEsSUFBQUE7O0FBVUFhLE1BQUFBLHNCQUFBQSxrQkFBQUE7QUFBQUEsUUFBQUE7OztRQUNXQyxNQUFUdkIsYUFBU3VCLGdCQUFBQSxFQUFBQSxFQUFBQSxFQUFUQyxhQUEyQmQsS0FBM0JjOztVQUEyQjtVQUN6QixJQUFBLFFBQWVkLEtBQUllLGdCQUFBQSxDQUFhLFFBQWJBLENBQW5CLENBQUE7WUFBQUMsT0FBQWhCLEtBQUlZLFFBQUFBLENBQUFBO1VBQUo7WUFuQ1JJLE9BQUE7VUFtQ1EsRUFERkYsQ0FBQUEsR0FBU0Q7UUFHVHZCLGdCQUFZO1FBQ1pzQixPQUFBcEI7TUFMRm9CLENBQUFBLEdBQUFBO01BUUExQixPQUFBK0IsdUJBQUFBLG1CQUFBQTtBQUFBQSxRQUFBQTs7UUFDRUEsT0FBQ0EsdUJBQUQsR0FBQSxDQUF3QjdCLFVBQU02QixTQUFBQSxDQUFBQSxDQUE5QixDQUFBLEdBQXVDQTtNQUR6Q0EsQ0FBQUEsR0FBQUE7SUF0Q0YvQixHQUFNTSxJQUFOTixFQUFvQk0sSUFBcEJOO0VBREZELEdBQU0sSUFBTkEsRUFBQUEsSUFBQUE7QUFGQUQ7In19LHsib2Zmc2V0Ijp7ImxpbmUiOjI0NTE5LCJjb2x1bW4iOjB9LCJtYXAiOnsidmVyc2lvbiI6Mywic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi9vcGFsLnJiIl0sInNvdXJjZXNDb250ZW50IjpbIjo6T2JqZWN0LnJlcXVpcmUgJ29wYWwvYmFzZSdcbjo6T2JqZWN0LnJlcXVpcmUgJ29wYWwvbWluaSdcblxuOjpPYmplY3QucmVxdWlyZSAnY29yZWxpYi9rZXJuZWwvZm9ybWF0J1xuOjpPYmplY3QucmVxdWlyZSAnY29yZWxpYi9zdHJpbmcvZW5jb2RpbmcnXG46Ok9iamVjdC5hdXRvbG9hZCA6TWF0aCwgJ2NvcmVsaWIvbWF0aCdcbjo6T2JqZWN0LnJlcXVpcmUgJ2NvcmVsaWIvY29tcGxleC9iYXNlJ1xuOjpPYmplY3QuYXV0b2xvYWQgOkNvbXBsZXgsICdjb3JlbGliL2NvbXBsZXgnXG46Ok9iamVjdC5yZXF1aXJlICdjb3JlbGliL3JhdGlvbmFsL2Jhc2UnXG46Ok9iamVjdC5hdXRvbG9hZCA6UmF0aW9uYWwsICdjb3JlbGliL3JhdGlvbmFsJ1xuOjpPYmplY3QucmVxdWlyZSAnY29yZWxpYi90aW1lJ1xuOjpPYmplY3QuYXV0b2xvYWQgOlN0cnVjdCwgJ2NvcmVsaWIvc3RydWN0J1xuOjpPYmplY3QuYXV0b2xvYWQgOkRpciwgJ2NvcmVsaWIvZGlyJ1xuOjpPYmplY3QuYXV0b2xvYWQgOkZpbGUsICdjb3JlbGliL2ZpbGUnXG5cbjo6T2JqZWN0LnJlcXVpcmUgJ2NvcmVsaWIvcHJvY2Vzcy9iYXNlJ1xuOjpPYmplY3QuYXV0b2xvYWQgOlByb2Nlc3MsICdjb3JlbGliL3Byb2Nlc3MnXG46Ok9iamVjdC5hdXRvbG9hZCA6UmFuZG9tLCAnY29yZWxpYi9yYW5kb20nXG5cbjo6T2JqZWN0LnJlcXVpcmUgJ2NvcmVsaWIvdW5zdXBwb3J0ZWQnXG5cbjo6T2JqZWN0LnJlcXVpcmUgJ2NvcmVsaWIvYmluZGluZydcbjo6T2JqZWN0LnJlcXVpcmUgJ2NvcmVsaWIvaXJiJ1xuIl0sIm5hbWVzIjpbIjx0b3AgKHJlcXVpcmVkKT4iLCJPYmplY3QiLCJyZXF1aXJlIiwiYXV0b2xvYWQiXSwibWFwcGluZ3MiOiJBQUFBQSx1QkFBQUEsZ0JBQUFBO0VBQUFBOztFQUFBQTs7RUFBQUMsT0FBUUMsU0FBQUEsQ0FBU0YsV0FBVEU7RUFDUkQsT0FBUUMsU0FBQUEsQ0FBU0YsV0FBVEU7RUFFUkQsT0FBUUMsU0FBQUEsQ0FBU0YsdUJBQVRFO0VBQ1JELE9BQVFDLFNBQUFBLENBQVNGLHlCQUFURTtFQUNSRCxPQUFRRSxVQUFBQSxDQUFVLE1BQWxCLEVBQXlCSCxjQUFqQkc7RUFDUkYsT0FBUUMsU0FBQUEsQ0FBU0Ysc0JBQVRFO0VBQ1JELE9BQVFFLFVBQUFBLENBQVUsU0FBbEIsRUFBNEJILGlCQUFwQkc7RUFDUkYsT0FBUUMsU0FBQUEsQ0FBU0YsdUJBQVRFO0VBQ1JELE9BQVFFLFVBQUFBLENBQVUsVUFBbEIsRUFBNkJILGtCQUFyQkc7RUFDUkYsT0FBUUMsU0FBQUEsQ0FBU0YsY0FBVEU7RUFDUkQsT0FBUUUsVUFBQUEsQ0FBVSxRQUFsQixFQUEyQkgsZ0JBQW5CRztFQUNSRixPQUFRRSxVQUFBQSxDQUFVLEtBQWxCLEVBQXdCSCxhQUFoQkc7RUFDUkYsT0FBUUUsVUFBQUEsQ0FBVSxNQUFsQixFQUF5QkgsY0FBakJHO0VBRVJGLE9BQVFDLFNBQUFBLENBQVNGLHNCQUFURTtFQUNSRCxPQUFRRSxVQUFBQSxDQUFVLFNBQWxCLEVBQTRCSCxpQkFBcEJHO0VBQ1JGLE9BQVFFLFVBQUFBLENBQVUsUUFBbEIsRUFBMkJILGdCQUFuQkc7RUFFUkYsT0FBUUMsU0FBQUEsQ0FBU0YscUJBQVRFO0VBRVJELE9BQVFDLFNBQUFBLENBQVNGLGlCQUFURTtFQUNSRixPQUFBQyxPQUFRQyxTQUFBQSxDQUFTRixhQUFURTtBQXRCUkY7O0FBQUFBOyJ9fSx7Im9mZnNldCI6eyJsaW5lIjoyNDU0NywiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4vb3BhbC5yYiJdLCJzb3VyY2VzQ29udGVudCI6WyI6Ok9iamVjdC5yZXF1aXJlICdvcGFsL2Jhc2UnXG46Ok9iamVjdC5yZXF1aXJlICdvcGFsL21pbmknXG5cbjo6T2JqZWN0LnJlcXVpcmUgJ2NvcmVsaWIva2VybmVsL2Zvcm1hdCdcbjo6T2JqZWN0LnJlcXVpcmUgJ2NvcmVsaWIvc3RyaW5nL2VuY29kaW5nJ1xuOjpPYmplY3QuYXV0b2xvYWQgOk1hdGgsICdjb3JlbGliL21hdGgnXG46Ok9iamVjdC5yZXF1aXJlICdjb3JlbGliL2NvbXBsZXgvYmFzZSdcbjo6T2JqZWN0LmF1dG9sb2FkIDpDb21wbGV4LCAnY29yZWxpYi9jb21wbGV4J1xuOjpPYmplY3QucmVxdWlyZSAnY29yZWxpYi9yYXRpb25hbC9iYXNlJ1xuOjpPYmplY3QuYXV0b2xvYWQgOlJhdGlvbmFsLCAnY29yZWxpYi9yYXRpb25hbCdcbjo6T2JqZWN0LnJlcXVpcmUgJ2NvcmVsaWIvdGltZSdcbjo6T2JqZWN0LmF1dG9sb2FkIDpTdHJ1Y3QsICdjb3JlbGliL3N0cnVjdCdcbjo6T2JqZWN0LmF1dG9sb2FkIDpEaXIsICdjb3JlbGliL2Rpcidcbjo6T2JqZWN0LmF1dG9sb2FkIDpGaWxlLCAnY29yZWxpYi9maWxlJ1xuXG46Ok9iamVjdC5yZXF1aXJlICdjb3JlbGliL3Byb2Nlc3MvYmFzZSdcbjo6T2JqZWN0LmF1dG9sb2FkIDpQcm9jZXNzLCAnY29yZWxpYi9wcm9jZXNzJ1xuOjpPYmplY3QuYXV0b2xvYWQgOlJhbmRvbSwgJ2NvcmVsaWIvcmFuZG9tJ1xuXG46Ok9iamVjdC5yZXF1aXJlICdjb3JlbGliL3Vuc3VwcG9ydGVkJ1xuXG46Ok9iamVjdC5yZXF1aXJlICdjb3JlbGliL2JpbmRpbmcnXG46Ok9iamVjdC5yZXF1aXJlICdjb3JlbGliL2lyYidcbiJdLCJuYW1lcyI6WyI8dG9wIChyZXF1aXJlZCk+IiwiT2JqZWN0IiwicmVxdWlyZSIsImF1dG9sb2FkIl0sIm1hcHBpbmdzIjoiQUFBQUEsdUJBQUFBLGdCQUFBQTtFQUFBQTs7RUFBQUE7O0VBQUFDLE9BQVFDLFNBQUFBLENBQVNGLFdBQVRFO0VBQ1JELE9BQVFDLFNBQUFBLENBQVNGLFdBQVRFO0VBRVJELE9BQVFDLFNBQUFBLENBQVNGLHVCQUFURTtFQUNSRCxPQUFRQyxTQUFBQSxDQUFTRix5QkFBVEU7RUFDUkQsT0FBUUUsVUFBQUEsQ0FBVSxNQUFsQixFQUF5QkgsY0FBakJHO0VBQ1JGLE9BQVFDLFNBQUFBLENBQVNGLHNCQUFURTtFQUNSRCxPQUFRRSxVQUFBQSxDQUFVLFNBQWxCLEVBQTRCSCxpQkFBcEJHO0VBQ1JGLE9BQVFDLFNBQUFBLENBQVNGLHVCQUFURTtFQUNSRCxPQUFRRSxVQUFBQSxDQUFVLFVBQWxCLEVBQTZCSCxrQkFBckJHO0VBQ1JGLE9BQVFDLFNBQUFBLENBQVNGLGNBQVRFO0VBQ1JELE9BQVFFLFVBQUFBLENBQVUsUUFBbEIsRUFBMkJILGdCQUFuQkc7RUFDUkYsT0FBUUUsVUFBQUEsQ0FBVSxLQUFsQixFQUF3QkgsYUFBaEJHO0VBQ1JGLE9BQVFFLFVBQUFBLENBQVUsTUFBbEIsRUFBeUJILGNBQWpCRztFQUVSRixPQUFRQyxTQUFBQSxDQUFTRixzQkFBVEU7RUFDUkQsT0FBUUUsVUFBQUEsQ0FBVSxTQUFsQixFQUE0QkgsaUJBQXBCRztFQUNSRixPQUFRRSxVQUFBQSxDQUFVLFFBQWxCLEVBQTJCSCxnQkFBbkJHO0VBRVJGLE9BQVFDLFNBQUFBLENBQVNGLHFCQUFURTtFQUVSRCxPQUFRQyxTQUFBQSxDQUFTRixpQkFBVEU7RUFDUkYsT0FBQUMsT0FBUUMsU0FBQUEsQ0FBU0YsYUFBVEU7QUF0QlJGOyJ9fSx7Im9mZnNldCI6eyJsaW5lIjoyNDU3MywiY29sdW1uIjowfSwibWFwIjp7InZlcnNpb24iOjMsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4vYXBwL2FwcGxpY2F0aW9uLmpzLnJiIl0sInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUgXCJvcGFsXCJcbiMgVW5jb21tZW50IHRoZSBmb2xsb3dpbmcgdG8gcHJpbnQgb3V0IHlvdSdyZSBoZWxsby13b3JsZCB3aXRoIE9wYWw6XG4jICAgcHV0cyBcImhlbGxvIHdvcmxkIVwiXG4jXG4jIFRoZSBmb2xsb3dpbmcgd2lsbCBhcHBlbmQgYSBoZWxsby13b3JsZCB0byB5b3VyIDxib2R5PiBlbGVtZW50OlxuI1xuIyAgIHJlcXVpcmUgXCJuYXRpdmVcIlxuIyAgICQkWzpkb2N1bWVudF0uYWRkRXZlbnRMaXN0ZW5lciA6RE9NQ29udGVudExvYWRlZCBkb1xuIyAgICAgJCRbOmRvY3VtZW50XVs6Ym9keV1bOmlubmVySFRNTF0gKz0gJzxoMj5IZWxsbyBXb3JsZCE8L2gyPidcbiMgICBlbmRcblxuRG9jdW1lbnQucmVhZHk/IGRvXG4gIGN1cnJlbnRfdXJsID0gRWxlbWVudC5maW5kKCcubGVnaXNsYXRpb25fd2Vic2l0ZScpLmF0dHJbOmhyZWZdXG4gIEVsZW1lbnQuZmluZCgnLmxlZ2lzbGF0aW9uX3dlYnNpdGUnKS5vbiA6Y2xpY2sgZG9cbiAgICBjdXJyZW50X3BhZ2VfdXJsID0gRWxlbWVudC5maW5kKCcubGVnaXNsYXRpb25fd2Vic2l0ZScpLmF0dHJbOmhyZWZdXG4gICAgaWYgY3VycmVudF9wYWdlX3VybCAhPSBjdXJyZW50X3VybFxuICAgICAgRWxlbWVudC5maW5kKCcuY3VycmVudF93ZWJzaXRlJykuaHRtbCA9IGN1cnJlbnRfcGFnZV91cmxcbiAgICBlbmRcbiAgZW5kXG5lbmRcbiJdLCJuYW1lcyI6WyI8bWFpbj4iLCJzZWxmIiwicmVxdWlyZSIsInJlYWR5PyIsIkRvY3VtZW50IiwiYmxvY2sgaW4gPG1haW4+IiwiYmxvY2sgKDIgbGV2ZWxzKSBpbiA8bWFpbj4iLCJjdXJyZW50X3VybCIsIkVsZW1lbnQiLCJmaW5kIiwiYXR0ciIsIltdIiwib24iLCJibG9jayAoMyBsZXZlbHMpIGluIDxtYWluPiIsImN1cnJlbnRfcGFnZV91cmwiLCJodG1sPSJdLCJtYXBwaW5ncyI6IkFBQUFBLDJCQUFBQTtFQUFBQTs7RUFBQUE7O0VBQUFDLElBQUFDLFNBQUFBLENBQVFGLE1BQVJFO0VBV0FGLE9BQVFHLE1BQVJDLGNBQVFELFVBQUFBLEVBQUFBLEVBQUFBLEVBQVJFLGFBQUFBLEVBQUFDOzs7SUFDRUMsY0FBY0MsYUFBT0MsTUFBQUEsQ0FBTUgsc0JBQU5HLENBQTZCQyxNQUFBQSxDQUFBQSxDQUFLQyxPQUFBQSxDQUFDLE1BQURBO0lBQ3ZETCxPQUFvQ00sTUFBcENKLGFBQU9DLE1BQUFBLENBQU1ILHNCQUFORyxDQUE2QkcsTUFBQUEsRUFBQUEsQ0FBSSxPQUFKQSxDQUFBQSxFQUFwQ04sYUFBQUEsRUFBQU87OztNQUNFQyxtQkFBbUJOLGFBQU9DLE1BQUFBLENBQU1JLHNCQUFOSixDQUE2QkMsTUFBQUEsQ0FBQUEsQ0FBS0MsT0FBQUEsQ0FBQyxNQUFEQTtNQUM1RCxJQUFBLE9BQUdHLGdCQUFILEVBQXVCUCxXQUF2QixDQUFBO1FBQ0VNLE9BQWdDRSxNQUFBQSxDQUFRRCxnQkFBUkMsQ0FBQUEsRUFBQUEsTUFBaENQLGFBQU9DLE1BQUFBLENBQU1JLGtCQUFOSixDQUF5Qk0sU0FBQUEsRUFBQUEsRUFBQUEsQ0FBQUEsRUFBQUE7TUFEbEM7UUFmSkYsT0FBQTtNQWVJLEVBRkZQLENBQUFBLEdBQW9DTSxFQUZ0Q1AsQ0FBQUEsR0FBUUY7QUFYUkg7In19LHsib2Zmc2V0Ijp7ImxpbmUiOjI0NTk0LCJjb2x1bW4iOjB9LCJtYXAiOnsidmVyc2lvbiI6Mywic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiKGV4aXQpIl0sInNvdXJjZXNDb250ZW50IjpbIjo6S2VybmVsLmV4aXRcbiJdLCJuYW1lcyI6WyI8bWFpbj4iLCJLZXJuZWwiLCJleGl0Il0sIm1hcHBpbmdzIjoiQUFBQUEsMkJBQUFBO0VBQUFBOztFQUFBQTtFQUFBQSxPQUFBQyxPQUFRQyxNQUFBQSxDQUFBQTtBQUFSRjsifX1dfQ==
